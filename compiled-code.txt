// Código compilado del proyecto: diegopapic/cinenacional
// Commit: ffce0b8ba560cd902688c63c1fb7017a0a4a2eee
// Fecha: 2025-07-29T03:33:21.130Z
// ============================================



// ==================================================
// next-env.d.ts
// ==================================================
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/building-your-application/configuring/typescript for more information.


// ==================================================
// src/app/admin/countries/page.tsx
// ==================================================
// src/app/admin/countries/page.tsx
'use client'

import { useState, useEffect } from 'react'
import {
  Plus,
  Search,
  Edit,
  Trash2,
  Globe,
  X,
  Save,
  Loader2
} from 'lucide-react'
import { toast } from 'react-hot-toast'

interface Country {
  id: number
  code: string
  name: string
  createdAt: string
  _count?: {
    movies: number
  }
}

export default function AdminCountriesPage() {
  const [countries, setCountries] = useState<Country[]>([])
  const [loading, setLoading] = useState(true)
  const [searchTerm, setSearchTerm] = useState('')
  const [showModal, setShowModal] = useState(false)
  const [editingCountry, setEditingCountry] = useState<Country | null>(null)
  const [deletingCountryId, setDeletingCountryId] = useState<number | null>(null)
  const [isSubmitting, setIsSubmitting] = useState(false)

  // Estado del formulario
  const [formData, setFormData] = useState({
    code: '',
    name: ''
  })
  const [formErrors, setFormErrors] = useState({
    code: '',
    name: ''
  })

  // Cargar países
  const fetchCountries = async () => {
    try {
      setLoading(true)
      const response = await fetch('/api/countries')
      
      if (!response.ok) {
        throw new Error('Error al cargar los países')
      }
      
      const data = await response.json()
      setCountries(Array.isArray(data) ? data : [])
    } catch (error) {
      toast.error('Error al cargar los países')
      setCountries([])
    } finally {
      setLoading(false)
    }
  }

  useEffect(() => {
    fetchCountries()
  }, [])

  // Filtrar países
  const filteredCountries = countries.filter(country =>
    country.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
    country.code.toLowerCase().includes(searchTerm.toLowerCase())
  )

  // Validar formulario
  const validateForm = () => {
    const errors = { code: '', name: '' }
    let isValid = true
    
    if (!formData.code.trim()) {
      errors.code = 'El código es requerido'
      isValid = false
    } else if (formData.code.length !== 2) {
      errors.code = 'El código debe tener exactamente 2 caracteres'
      isValid = false
    } else if (!/^[A-Z]{2}$/.test(formData.code)) {
      errors.code = 'El código debe contener solo letras mayúsculas'
      isValid = false
    }
    
    if (!formData.name.trim()) {
      errors.name = 'El nombre es requerido'
      isValid = false
    } else if (formData.name.length > 100) {
      errors.name = 'El nombre no puede exceder 100 caracteres'
      isValid = false
    }
    
    setFormErrors(errors)
    return isValid
  }

  // Crear o actualizar país
  const handleSubmit = async () => {
    if (!validateForm()) return

    try {
      setIsSubmitting(true)
      const url = editingCountry
        ? `/api/countries/${editingCountry.id}`
        : '/api/countries'
      
      const method = editingCountry ? 'PUT' : 'POST'
      
      const response = await fetch(url, {
        method,
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          code: formData.code.trim().toUpperCase(),
          name: formData.name.trim()
        })
      })

      if (!response.ok) {
        let errorMessage = 'Error al guardar el país'
        try {
          const error = await response.json()
          errorMessage = error.error || error.message || errorMessage
        } catch (e) {}
        throw new Error(errorMessage)
      }

      toast.success(editingCountry ? 'País actualizado' : 'País creado')
      setShowModal(false)
      resetForm()
      fetchCountries()
    } catch (error) {
      toast.error(error instanceof Error ? error.message : 'Error al guardar')
    } finally {
      setIsSubmitting(false)
    }
  }

  // Resetear formulario
  const resetForm = () => {
    setFormData({ code: '', name: '' })
    setFormErrors({ code: '', name: '' })
    setEditingCountry(null)
  }

  // Editar país
  const handleEdit = (country: Country) => {
    setEditingCountry(country)
    setFormData({
      code: country.code,
      name: country.name
    })
    setShowModal(true)
  }

  // Eliminar país
  const handleDelete = async (id: number) => {
    if (!confirm('¿Estás seguro de eliminar este país? Esta acción no se puede deshacer.')) return

    try {
      setDeletingCountryId(id)
      const response = await fetch(`/api/countries/${id}`, {
        method: 'DELETE'
      })

      if (!response.ok) {
        let errorMessage = 'Error al eliminar el país'
        try {
          const error = await response.json()
          errorMessage = error.error || error.message || errorMessage
        } catch (e) {}
        throw new Error(errorMessage)
      }

      toast.success('País eliminado')
      fetchCountries()
    } catch (error) {
      toast.error(error instanceof Error ? error.message : 'Error al eliminar el país')
    } finally {
      setDeletingCountryId(null)
    }
  }

  // Abrir modal para nuevo país
  const handleNewCountry = () => {
    resetForm()
    setShowModal(true)
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white shadow">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="py-6">
            <h1 className="text-3xl font-bold text-gray-900">
              Administración de Países
            </h1>
          </div>
        </div>
      </div>

      {/* Contenido principal */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Filtros y acciones */}
        <div className="bg-white rounded-lg shadow p-6 mb-6">
          <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
            {/* Búsqueda */}
            <div className="relative flex-1 max-w-md">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
              <input
                type="text"
                placeholder="Buscar países..."
                className="pl-10 pr-4 py-2 w-full border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
              />
            </div>

            {/* Botón nuevo país */}
            <button
              onClick={handleNewCountry}
              className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors flex items-center gap-2"
            >
              <Plus className="w-5 h-5" />
              Nuevo País
            </button>
          </div>
        </div>

        {/* Lista de países */}
        <div className="bg-white rounded-lg shadow overflow-hidden">
          {loading ? (
            <div className="flex items-center justify-center h-64">
              <Loader2 className="w-8 h-8 text-blue-600 animate-spin" />
            </div>
          ) : filteredCountries.length === 0 ? (
            <div className="text-center py-12">
              <Globe className="w-12 h-12 text-gray-400 mx-auto mb-4" />
              <p className="text-gray-500">No se encontraron países</p>
            </div>
          ) : (
            <div className="overflow-x-auto">
              <table className="min-w-full divide-y divide-gray-200">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Código
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      País
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Películas
                    </th>
                    <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Acciones
                    </th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {filteredCountries.map((country) => (
                    <tr key={country.id} className="hover:bg-gray-50">
                      <td className="px-6 py-4 whitespace-nowrap">
                        <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                          {country.code}
                        </span>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm font-medium text-gray-900">
                          {country.name}
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        {country._count?.movies || 0}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                        <div className="flex items-center justify-end gap-2">
                          <button
                            onClick={() => handleEdit(country)}
                            className="text-blue-600 hover:text-blue-900 transition-colors"
                            title="Editar"
                          >
                            <Edit className="w-4 h-4" />
                          </button>
                          <button
                            onClick={() => handleDelete(country.id)}
                            disabled={deletingCountryId === country.id}
                            className="text-red-600 hover:text-red-900 transition-colors disabled:opacity-50"
                            title="Eliminar"
                          >
                            {deletingCountryId === country.id ? (
                              <Loader2 className="w-4 h-4 animate-spin" />
                            ) : (
                              <Trash2 className="w-4 h-4" />
                            )}
                          </button>
                        </div>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          )}
        </div>
      </div>

      {/* Modal de creación/edición */}
      {showModal && (
        <div className="fixed inset-0 bg-gray-500 bg-opacity-75 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg max-w-md w-full">
            <div className="bg-gray-50 px-6 py-4 border-b border-gray-200">
              <div className="flex items-center justify-between">
                <h2 className="text-xl font-semibold text-gray-900">
                  {editingCountry ? 'Editar País' : 'Nuevo País'}
                </h2>
                <button
                  onClick={() => {
                    setShowModal(false)
                    resetForm()
                  }}
                  className="text-gray-400 hover:text-gray-500"
                >
                  <X className="w-6 h-6" />
                </button>
              </div>
            </div>

            <div className="p-6">
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Código ISO *
                  </label>
                  <input
                    type="text"
                    value={formData.code}
                    onChange={(e) => {
                      const value = e.target.value.toUpperCase().slice(0, 2)
                      setFormData({ ...formData, code: value })
                      if (formErrors.code) {
                        setFormErrors({ ...formErrors, code: '' })
                      }
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                    placeholder="Ej: AR, BR, US"
                    maxLength={2}
                  />
                  {formErrors.code && (
                    <p className="mt-1 text-sm text-red-600">{formErrors.code}</p>
                  )}
                  <p className="mt-1 text-xs text-gray-500">
                    Código ISO 3166-1 alpha-2 (2 letras mayúsculas)
                  </p>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Nombre del País *
                  </label>
                  <input
                    type="text"
                    value={formData.name}
                    onChange={(e) => {
                      setFormData({ ...formData, name: e.target.value })
                      if (formErrors.name) {
                        setFormErrors({ ...formErrors, name: '' })
                      }
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                    placeholder="Ej: Argentina, Brasil, Estados Unidos"
                  />
                  {formErrors.name && (
                    <p className="mt-1 text-sm text-red-600">{formErrors.name}</p>
                  )}
                </div>
              </div>

              {/* Botones de acción */}
              <div className="mt-6 flex items-center justify-end gap-3">
                <button
                  type="button"
                  onClick={() => {
                    setShowModal(false)
                    resetForm()
                  }}
                  className="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors"
                >
                  Cancelar
                </button>
                <button
                  type="button"
                  onClick={handleSubmit}
                  disabled={isSubmitting}
                  className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-2"
                >
                  {isSubmitting ? (
                    <>
                      <Loader2 className="w-4 h-4 animate-spin" />
                      Guardando...
                    </>
                  ) : (
                    <>
                      <Save className="w-4 h-4" />
                      {editingCountry ? 'Actualizar' : 'Crear'} País
                    </>
                  )}
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}

// ==================================================
// src/app/admin/genres/page.tsx
// ==================================================
// src/app/admin/genres/page.tsx
'use client'

import { useState, useEffect } from 'react'
import {
  Plus,
  Search,
  Edit,
  Trash2,
  Hash,
  X,
  Save,
  Loader2
} from 'lucide-react'
import { toast } from 'react-hot-toast'

interface Genre {
  id: number
  slug: string
  name: string
  description?: string | null
  createdAt: string
  _count?: {
    movies: number
  }
}

export default function AdminGenresPage() {
  const [genres, setGenres] = useState<Genre[]>([])
  const [loading, setLoading] = useState(true)
  const [searchTerm, setSearchTerm] = useState('')
  const [showModal, setShowModal] = useState(false)
  const [editingGenre, setEditingGenre] = useState<Genre | null>(null)
  const [deletingGenreId, setDeletingGenreId] = useState<number | null>(null)
  const [isSubmitting, setIsSubmitting] = useState(false)

  // Estado del formulario
  const [formData, setFormData] = useState({
    name: '',
    description: ''
  })
  const [formErrors, setFormErrors] = useState({
    name: ''
  })

  // Cargar géneros
  const fetchGenres = async () => {
    try {
      setLoading(true)
      const response = await fetch('/api/genres')
      
      if (!response.ok) {
        throw new Error('Error al cargar los géneros')
      }
      
      const data = await response.json()
      setGenres(Array.isArray(data) ? data : [])
    } catch (error) {
      toast.error('Error al cargar los géneros')
      setGenres([])
    } finally {
      setLoading(false)
    }
  }

  useEffect(() => {
    fetchGenres()
  }, [])

  // Filtrar géneros
  const filteredGenres = genres.filter(genre =>
    genre.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
    (genre.description && genre.description.toLowerCase().includes(searchTerm.toLowerCase()))
  )

  // Validar formulario
  const validateForm = () => {
    const errors = { name: '' }
    
    if (!formData.name.trim()) {
      errors.name = 'El nombre es requerido'
    } else if (formData.name.length > 100) {
      errors.name = 'El nombre no puede exceder 100 caracteres'
    }
    
    setFormErrors(errors)
    return !errors.name
  }

  // Crear o actualizar género
  const handleSubmit = async () => {
    if (!validateForm()) return

    try {
      setIsSubmitting(true)
      const url = editingGenre
        ? `/api/genres/${editingGenre.id}`
        : '/api/genres'
      
      const method = editingGenre ? 'PUT' : 'POST'
      
      const response = await fetch(url, {
        method,
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          name: formData.name.trim(),
          description: formData.description.trim() || undefined
        })
      })

      if (!response.ok) {
        let errorMessage = 'Error al guardar el género'
        try {
          const error = await response.json()
          errorMessage = error.error || error.message || errorMessage
        } catch (e) {}
        throw new Error(errorMessage)
      }

      toast.success(editingGenre ? 'Género actualizado' : 'Género creado')
      setShowModal(false)
      resetForm()
      fetchGenres()
    } catch (error) {
      toast.error(error instanceof Error ? error.message : 'Error al guardar')
    } finally {
      setIsSubmitting(false)
    }
  }

  // Resetear formulario
  const resetForm = () => {
    setFormData({ name: '', description: '' })
    setFormErrors({ name: '' })
    setEditingGenre(null)
  }

  // Editar género
  const handleEdit = (genre: Genre) => {
    setEditingGenre(genre)
    setFormData({
      name: genre.name,
      description: genre.description || ''
    })
    setShowModal(true)
  }

  // Eliminar género
  const handleDelete = async (id: number) => {
    if (!confirm('¿Estás seguro de eliminar este género? Esta acción no se puede deshacer.')) return

    try {
      setDeletingGenreId(id)
      const response = await fetch(`/api/genres/${id}`, {
        method: 'DELETE'
      })

      if (!response.ok) {
        throw new Error('Error al eliminar')
      }

      toast.success('Género eliminado')
      fetchGenres()
    } catch (error) {
      toast.error('Error al eliminar el género')
    } finally {
      setDeletingGenreId(null)
    }
  }

  // Abrir modal para nuevo género
  const handleNewGenre = () => {
    resetForm()
    setShowModal(true)
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white shadow">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="py-6">
            <h1 className="text-3xl font-bold text-gray-900">
              Administración de Géneros
            </h1>
          </div>
        </div>
      </div>

      {/* Contenido principal */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Filtros y acciones */}
        <div className="bg-white rounded-lg shadow p-6 mb-6">
          <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
            {/* Búsqueda */}
            <div className="relative flex-1 max-w-md">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
              <input
                type="text"
                placeholder="Buscar géneros..."
                className="pl-10 pr-4 py-2 w-full border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
              />
            </div>

            {/* Botón nuevo género */}
            <button
              onClick={handleNewGenre}
              className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors flex items-center gap-2"
            >
              <Plus className="w-5 h-5" />
              Nuevo Género
            </button>
          </div>
        </div>

        {/* Lista de géneros */}
        <div className="bg-white rounded-lg shadow overflow-hidden">
          {loading ? (
            <div className="flex items-center justify-center h-64">
              <Loader2 className="w-8 h-8 text-blue-600 animate-spin" />
            </div>
          ) : filteredGenres.length === 0 ? (
            <div className="text-center py-12">
              <Hash className="w-12 h-12 text-gray-400 mx-auto mb-4" />
              <p className="text-gray-500">No se encontraron géneros</p>
            </div>
          ) : (
            <div className="overflow-x-auto">
              <table className="min-w-full divide-y divide-gray-200">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Género
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Descripción
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Slug
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Películas
                    </th>
                    <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Acciones
                    </th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {filteredGenres.map((genre) => (
                    <tr key={genre.id} className="hover:bg-gray-50">
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm font-medium text-gray-900">
                          {genre.name}
                        </div>
                      </td>
                      <td className="px-6 py-4">
                        <div className="text-sm text-gray-500 max-w-xs truncate">
                          {genre.description || '-'}
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm text-gray-400">
                          {genre.slug}
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        {genre._count?.movies || 0}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                        <div className="flex items-center justify-end gap-2">
                          <button
                            onClick={() => handleEdit(genre)}
                            className="text-blue-600 hover:text-blue-900 transition-colors"
                            title="Editar"
                          >
                            <Edit className="w-4 h-4" />
                          </button>
                          <button
                            onClick={() => handleDelete(genre.id)}
                            disabled={deletingGenreId === genre.id}
                            className="text-red-600 hover:text-red-900 transition-colors disabled:opacity-50"
                            title="Eliminar"
                          >
                            {deletingGenreId === genre.id ? (
                              <Loader2 className="w-4 h-4 animate-spin" />
                            ) : (
                              <Trash2 className="w-4 h-4" />
                            )}
                          </button>
                        </div>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          )}
        </div>
      </div>

      {/* Modal de creación/edición */}
      {showModal && (
        <div className="fixed inset-0 bg-gray-500 bg-opacity-75 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg max-w-md w-full">
            <div className="bg-gray-50 px-6 py-4 border-b border-gray-200">
              <div className="flex items-center justify-between">
                <h2 className="text-xl font-semibold text-gray-900">
                  {editingGenre ? 'Editar Género' : 'Nuevo Género'}
                </h2>
                <button
                  onClick={() => {
                    setShowModal(false)
                    resetForm()
                  }}
                  className="text-gray-400 hover:text-gray-500"
                >
                  <X className="w-6 h-6" />
                </button>
              </div>
            </div>

            <div className="p-6">
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Nombre del Género *
                  </label>
                  <input
                    type="text"
                    value={formData.name}
                    onChange={(e) => {
                      setFormData({ ...formData, name: e.target.value })
                      if (formErrors.name) {
                        setFormErrors({ ...formErrors, name: '' })
                      }
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                    placeholder="Ej: Drama, Comedia, Thriller"
                  />
                  {formErrors.name && (
                    <p className="mt-1 text-sm text-red-600">{formErrors.name}</p>
                  )}
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Descripción
                  </label>
                  <textarea
                    value={formData.description}
                    onChange={(e) => setFormData({ ...formData, description: e.target.value })}
                    rows={3}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                    placeholder="Breve descripción del género (opcional)"
                  />
                </div>
              </div>

              {/* Botones de acción */}
              <div className="mt-6 flex items-center justify-end gap-3">
                <button
                  type="button"
                  onClick={() => {
                    setShowModal(false)
                    resetForm()
                  }}
                  className="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors"
                >
                  Cancelar
                </button>
                <button
                  type="button"
                  onClick={handleSubmit}
                  disabled={isSubmitting}
                  className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-2"
                >
                  {isSubmitting ? (
                    <>
                      <Loader2 className="w-4 h-4 animate-spin" />
                      Guardando...
                    </>
                  ) : (
                    <>
                      <Save className="w-4 h-4" />
                      {editingGenre ? 'Actualizar' : 'Crear'} Género
                    </>
                  )}
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}

// ==================================================
// src/app/admin/layout.tsx
// ==================================================
// src/app/admin/layout.tsx
'use client'

import Link from 'next/link'
import { 
  Film, 
  Users, 
  Building2, 
  Award, 
  Globe, 
  Languages, 
  Home,
  Menu,
  X,
  Tag,
  Hash
} from 'lucide-react'
import { ReactNode, useState } from 'react'

interface AdminLayoutProps {
  children: ReactNode
}

export default function AdminLayout({ children }: AdminLayoutProps) {
  const [sidebarOpen, setSidebarOpen] = useState(false)

  const navigation = [
    { name: 'Dashboard', href: '/admin', icon: Home },
    { name: 'Películas', href: '/admin/movies', icon: Film },
    { name: 'Personas', href: '/admin/people', icon: Users },
    { name: 'Géneros', href: '/admin/genres', icon: Hash },
    { name: 'Productoras', href: '/admin/companies/production', icon: Building2 },
    { name: 'Distribuidoras', href: '/admin/companies/distribution', icon: Building2 },
    { name: 'Premios', href: '/admin/awards', icon: Award },
    { name: 'Países', href: '/admin/countries', icon: Globe },
    { name: 'Idiomas', href: '/admin/languages', icon: Languages },
    { name: 'Themes', href: '/admin/themes', icon: Tag }
  ]

  return (
    <div className="min-h-screen bg-gray-100" data-admin="true">
      {/* Sidebar móvil */}
      <div className={`fixed inset-0 z-40 md:hidden ${sidebarOpen ? '' : 'hidden'}`}>
        <div className="fixed inset-0 bg-gray-600 bg-opacity-75" onClick={() => setSidebarOpen(false)} />
        <nav className="fixed top-0 left-0 bottom-0 flex flex-col w-64 bg-white">
          <div className="flex items-center justify-between h-16 px-4 border-b border-gray-200">
            <h2 className="text-xl font-semibold text-gray-900">CineNacional Admin</h2>
            <button
              onClick={() => setSidebarOpen(false)}
              className="text-gray-500 hover:text-gray-700"
            >
              <X className="w-6 h-6" />
            </button>
          </div>
          <div className="flex-1 px-4 py-4 space-y-1">
            {navigation.map((item) => (
              <Link
                key={item.name}
                href={item.href}
                className="flex items-center px-3 py-2 text-sm font-medium rounded-lg hover:bg-gray-100 text-gray-700"
              >
                <item.icon className="w-5 h-5 mr-3 text-gray-600" />
                {item.name}
              </Link>
            ))}
          </div>
        </nav>
      </div>

      {/* Sidebar desktop */}
      <div className="hidden md:flex md:w-64 md:flex-col md:fixed md:inset-y-0">
        <nav className="flex-1 flex flex-col bg-white border-r border-gray-200">
          <div className="flex items-center h-16 px-4 border-b border-gray-200">
            <h2 className="text-xl font-semibold text-gray-900">CineNacional Admin</h2>
          </div>
          <div className="flex-1 px-4 py-4 space-y-1">
            {navigation.map((item) => (
              <Link
                key={item.name}
                href={item.href}
                className="flex items-center px-3 py-2 text-sm font-medium rounded-lg hover:bg-gray-100 text-gray-700"
              >
                <item.icon className="w-5 h-5 mr-3 text-gray-600" />
                {item.name}
              </Link>
            ))}
          </div>
          <div className="p-4 border-t border-gray-200">
            <Link
              href="/"
              className="flex items-center px-3 py-2 text-sm font-medium rounded-lg hover:bg-gray-100 text-gray-700"
            >
              Volver al sitio
            </Link>
          </div>
        </nav>
      </div>

      {/* Contenido principal */}
      <div className="md:pl-64">
        {/* Header móvil */}
        <div className="sticky top-0 z-10 md:hidden bg-white shadow">
          <div className="px-4 py-3">
            <button
              onClick={() => setSidebarOpen(true)}
              className="text-gray-500 hover:text-gray-700"
            >
              <Menu className="w-6 h-6" />
            </button>
          </div>
        </div>

        {/* Contenido */}
        <main className="text-gray-900">{children}</main>
      </div>
    </div>
  )
}

// ==================================================
// src/app/admin/movies/page.tsx
// ==================================================
// src/app/admin/movies/page.tsx - Versión actualizada con pestañas
'use client'

import { useState, useEffect, useCallback } from 'react'
import { useForm } from 'react-hook-form'
import { zodResolver } from '@hookform/resolvers/zod'
import { CloudinaryUploadWidget } from '@/components/admin/CloudinaryUploadWidget'
import { z } from 'zod'
import {
  Plus,
  Search,
  Edit,
  Trash2,
  Eye,
  Film,
  Calendar,
  Clock,
  Star,
  X,
  Save,
  Loader2,
  Info,
  Users,
  Briefcase,
  Settings,
  Image
} from 'lucide-react'
import { toast } from 'react-hot-toast'
import { formatDate, formatDuration } from '@/lib/utils'
import MovieFormEnhanced from '@/components/admin/MovieFormEnhanced'

// Importar Tabs de Radix UI
import * as Tabs from '@radix-ui/react-tabs'

// Schema de validación
const movieFormSchema = z.object({
  title: z.string().min(1, 'El título es requerido'),
  originalTitle: z.string().optional(),
  year: z.number().min(1895).max(new Date().getFullYear() + 5),
  releaseDate: z.string().optional(),
  duration: z.number().optional(),
  durationSeconds: z.number().min(0).max(59).optional(),
  tipoDuracion: z.string().optional(), // NUEVO CAMPO
  synopsis: z.string().optional(),
  tagline: z.string().optional(),
  rating: z.number().min(0).max(10).optional(),
  posterUrl: z.string().url().optional().or(z.literal('')),
  posterPublicId: z.string().optional(),
  backdropUrl: z.string().url().optional().or(z.literal('')),
  backdropPublicId: z.string().optional(),
  trailerUrl: z.string().url().optional().or(z.literal('')),
  imdbId: z.string().optional(),
  aspectRatio: z.string().optional(),
  colorType: z.string().optional(),
  soundType: z.string().optional(),
  filmFormat: z.string().optional(),
  certificateNumber: z.string().optional(),
  classification: z.string().optional(),
  classificationReason: z.string().optional(),
  status: z.enum(['DRAFT', 'PUBLISHED', 'ARCHIVED']).optional(),
  metaDescription: z.string().optional(),
  metaKeywords: z.string().optional()
})

type MovieFormData = z.infer<typeof movieFormSchema>

interface Movie {
  id: number
  slug: string
  title: string
  originalTitle?: string
  year: number
  releaseDate?: string
  duration?: number
  rating?: number
  posterUrl?: string
  status: string
  genres: Array<{ id: number; name: string }>
  directors: Array<{ id: number; name: string }>
  mainCast: Array<{
    person: { id: number; name: string }
    character?: string
  }>
  country: string
}

export default function AdminMoviesPage() {
  const [movies, setMovies] = useState<Movie[]>([])
  const [loading, setLoading] = useState(true)
  const [searchTerm, setSearchTerm] = useState('')
  const [selectedStatus, setSelectedStatus] = useState('')
  const [selectedYear, setSelectedYear] = useState('')
  const [currentPage, setCurrentPage] = useState(1)
  const [totalPages, setTotalPages] = useState(1)
  const [showModal, setShowModal] = useState(false)
  const [editingMovie, setEditingMovie] = useState<Movie | null>(null)
  const [deletingMovieId, setDeletingMovieId] = useState<number | null>(null)
  const [activeTab, setActiveTab] = useState('basic') // Estado para la pestaña activa

  // Estado para los datos iniciales del formulario
  const [movieFormInitialData, setMovieFormInitialData] = useState<any>(null)

  // NUEVOS ESTADOS PARA TIPO DE DURACIÓN
  const [tiposDuracion] = useState([
    { value: 'largometraje', label: 'Largometraje' },
    { value: 'mediometraje', label: 'Mediometraje' },
    { value: 'cortometraje', label: 'Cortometraje' }
  ])
  const [tipoDuracionDisabled, setTipoDuracionDisabled] = useState(false)

  const [movieRelations, setMovieRelations] = useState<{
    genres: number[];
    cast: any[];
    crew: any[];
    countries: number[];
    languages: number[];
    productionCompanies: number[];
    distributionCompanies: number[];
    themes: number[];
  }>({
    genres: [],
    cast: [],
    crew: [],
    countries: [],
    languages: [],
    productionCompanies: [],
    distributionCompanies: [],
    themes: []
  })

  // Form
  const {
    register,
    handleSubmit,
    reset,
    setValue,
    watch,
    formState: { errors, isSubmitting }
  } = useForm<MovieFormData>({
    resolver: zodResolver(movieFormSchema)
  })

  // FUNCIONES PARA TIPO DE DURACIÓN
  const calcularTipoDuracion = (minutos: number | null | undefined, segundos: number | null | undefined = 0): string => {
    // Convertir todo a minutos totales
    const minutosReales = (minutos || 0)
    const segundosReales = (segundos || 0)
    const duracionTotalMinutos = minutosReales + (segundosReales / 60)

    // Si no hay duración total, retornar vacío
    if (duracionTotalMinutos === 0) return ''

    if (duracionTotalMinutos >= 60) return 'largometraje'
    if (duracionTotalMinutos >= 30) return 'mediometraje'
    return 'cortometraje'
  }

  const obtenerEtiquetaTipoDuracion = (tipo: string): string => {
    const tipoObj = tiposDuracion.find(t => t.value === tipo)
    return tipoObj ? tipoObj.label : ''
  }

  // EFECTO PARA OBSERVAR CAMBIOS EN DURACIÓN
  useEffect(() => {
    const subscription = watch((value, { name, type }) => {
      // Ejecutar cuando cambien los campos 'duration' O 'durationSeconds'
      if ((name === 'duration' || name === 'durationSeconds') && type === 'change') {
        const minutos = value.duration
        const segundos = value.durationSeconds

        // Verificar si hay alguna duración (minutos o segundos)
        const hayDuracion = (minutos && minutos > 0) || (segundos && segundos > 0)

        if (hayDuracion) {
          // Calcular automáticamente el tipo considerando ambos campos
          const tipoCalculado = calcularTipoDuracion(minutos, segundos)
          const tipoActual = value.tipoDuracion

          // Solo actualizar si el tipo calculado es diferente al actual
          if (tipoCalculado !== tipoActual) {
            setValue('tipoDuracion', tipoCalculado, { shouldValidate: false })
          }
          setTipoDuracionDisabled(true)
        } else {
          // Si no hay duración en ningún campo, habilitar el campo manual
          setTipoDuracionDisabled(false)
        }
      }
    })

    return () => subscription.unsubscribe()
  }, [watch, setValue])

  // Callbacks para MovieFormEnhanced
  const handleGenresChange = useCallback((genres: number[]) => {
    setMovieRelations(prev => ({ ...prev, genres }))
  }, [])

  const handleCastChange = useCallback((cast: any[]) => {
    setMovieRelations(prev => ({ ...prev, cast }))
  }, [])

  const handleCrewChange = useCallback((crew: any[]) => {
    setMovieRelations(prev => ({ ...prev, crew }))
  }, [])

  const handleCountriesChange = useCallback((countries: number[]) => {
    setMovieRelations(prev => ({ ...prev, countries }))
  }, [])

  const handleLanguagesChange = useCallback((languages: number[]) => {
    setMovieRelations(prev => ({ ...prev, languages }))
  }, [])

  const handleProductionCompaniesChange = useCallback((companies: number[]) => {
    setMovieRelations(prev => ({ ...prev, productionCompanies: companies }))
  }, [])

  const handleThemesChange = useCallback((themes: number[]) => {
  setMovieRelations(prev => ({ ...prev, themes }))
}, [])

  const handleDistributionCompaniesChange = useCallback((companies: number[]) => {
    setMovieRelations(prev => ({ ...prev, distributionCompanies: companies }))
  }, [])

  // Cargar películas
  const fetchMovies = async () => {
    try {
      setLoading(true)
      const params = new URLSearchParams({
        page: currentPage.toString(),
        limit: '20',
        search: searchTerm,
        status: selectedStatus,
        year: selectedYear,
        sortBy: 'createdAt',
        sortOrder: 'desc'
      })

      const response = await fetch(`/api/movies?${params}`)

      if (!response.ok) {
        throw new Error('Error al cargar las películas')
      }

      const data = await response.json()

      // Asegurar que siempre tengamos un array
      setMovies(data.movies || [])
      setTotalPages(data.pagination?.totalPages || 1)
    } catch (error) {
      toast.error('Error al cargar las películas')
      // Asegurar que movies sea un array vacío en caso de error
      setMovies([])
      setTotalPages(1)
    } finally {
      setLoading(false)
    }
  }

  useEffect(() => {
    fetchMovies()
  }, [currentPage, searchTerm, selectedStatus, selectedYear])

  // Crear o actualizar película
  const onSubmit = async (data: MovieFormData) => {
    try {
      
      const movieData = {
        ...data,
        metaKeywords: data.metaKeywords ? data.metaKeywords.split(',').map(k => k.trim()) : [],
        ...movieRelations
      }
          
      const url = editingMovie
        ? `/api/movies/${editingMovie.id}`
        : '/api/movies'

      const method = editingMovie ? 'PUT' : 'POST'
      const response = await fetch(url, {
        method,
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(movieData)
      })

      if (!response.ok) {
        let errorMessage = 'Error al guardar la película'
        try {
          const error = await response.json()
          errorMessage = error.error || error.message || errorMessage
        } catch (e) {
        }
        throw new Error(errorMessage)
      }

      toast.success(editingMovie ? 'Película actualizada' : 'Película creada')
      setShowModal(false)
      reset()
      setEditingMovie(null)
      setMovieFormInitialData(null)
      fetchMovies()
    } catch (error) {
      toast.error(error instanceof Error ? error.message : 'Error al guardar')
    }
  }

  // Editar película
  const handleEdit = async (movie: Movie) => {
    
    try {
      const response = await fetch(`/api/movies/${movie.id}`)
      const fullMovie = await response.json()
      const minutos = fullMovie.duration
      const segundos = fullMovie.durationSeconds
      const hayDuracion = (minutos && minutos > 0) || (segundos && segundos > 0)

      if (hayDuracion) {
        const tipoCalculado = calcularTipoDuracion(minutos, segundos)
        setValue('tipoDuracion', tipoCalculado)
        setTipoDuracionDisabled(true)
      } else {
        setValue('tipoDuracion', fullMovie.tipoDuracion || '')
        setTipoDuracionDisabled(false)
      }
      setEditingMovie(movie)

      // Llenar el formulario
      Object.keys(fullMovie).forEach((key) => {
        if (key === 'metaKeywords' && Array.isArray(fullMovie[key])) {
          setValue(key as any, fullMovie[key].join(', '))
        } else if (key === 'releaseDate' && fullMovie[key]) {
          setValue(key as any, new Date(fullMovie[key]).toISOString().split('T')[0])
        } else if (key === 'durationSeconds') {
          setValue(key as any, fullMovie[key] || 0) // Asegurar que tenga un valor por defecto
        } else {
          setValue(key as any, fullMovie[key])
        }
      })

      // INICIALIZAR TIPO DE DURACIÓN AL EDITAR
      if (fullMovie.duration && fullMovie.duration > 0) {
        const tipoCalculado = calcularTipoDuracion(fullMovie.duration)
        setValue('tipoDuracion', tipoCalculado)
        setTipoDuracionDisabled(true)
      } else {
        setValue('tipoDuracion', fullMovie.tipoDuracion || '')
        setTipoDuracionDisabled(false)
      }

      // Datos para MovieFormEnhanced (mantiene el formato completo para mostrar)
      setMovieFormInitialData({
        genres: fullMovie.genres || [],
        cast: fullMovie.cast || [],
        crew: fullMovie.crew || [],
        countries: fullMovie.countries || [],
        languages: fullMovie.languages || [],
        productionCompanies: fullMovie.productionCompanies || [],
        distributionCompanies: fullMovie.distributionCompanies || [],
        themes: fullMovie.themes || []
      })

      // IMPORTANTE: Limpiar los datos para movieRelations
      setMovieRelations({
        genres: fullMovie.genres?.map((g: any) => g.genreId) || [],
        cast: fullMovie.cast?.map((c: any) => ({
          personId: c.personId,
          characterName: c.characterName,
          billingOrder: c.billingOrder,
          isPrincipal: c.isPrincipal
        })) || [],
        crew: fullMovie.crew?.map((c: any) => ({
          personId: c.personId,
          role: c.role,
          department: c.department,
          billingOrder: c.billingOrder
        })) || [],
        countries: fullMovie.countries?.map((c: any) => c.countryId) || [],
        languages: fullMovie.languages?.map((l: any) => l.languageId) || [],
        productionCompanies: fullMovie.productionCompanies?.map((c: any) => c.companyId) || [],
        distributionCompanies: fullMovie.distributionCompanies?.map((c: any) => c.companyId) || [],
        themes: fullMovie.themes?.map((t: any) => t.themeId) || []
      })

      setShowModal(true)

    } catch (error) {
      toast.error('Error al cargar los datos de la película')
    }
  }

  // Eliminar película
  const handleDelete = async (id: number) => {
    if (!confirm('¿Estás seguro de eliminar esta película?')) return

    try {
      setDeletingMovieId(id)
      const response = await fetch(`/api/movies/${id}`, {
        method: 'DELETE'
      })

      if (!response.ok) {
        throw new Error('Error al eliminar')
      }

      toast.success('Película eliminada')
      fetchMovies()
    } catch (error) {
      toast.error('Error al eliminar la película')
    } finally {
      setDeletingMovieId(null)
    }
  }

  // Abrir modal para nueva película
  const handleNewMovie = () => {
    setEditingMovie(null)
    reset()
    // Limpiar los datos iniciales del formulario
    setMovieFormInitialData(null)
    // Limpiar las relaciones para nueva película
    setMovieRelations({
      genres: [],
      cast: [],
      crew: [],
      countries: [],
      languages: [],
      productionCompanies: [],
      distributionCompanies: []
    })
    // RESETEAR ESTADO DEL TIPO DE DURACIÓN
    setTipoDuracionDisabled(false)
    setActiveTab('basic') // Resetear a la primera pestaña
    setShowModal(true)
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white shadow">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="py-6">
            <h1 className="text-3xl font-bold text-gray-900">
              Administración de Películas
            </h1>
          </div>
        </div>
      </div>

      {/* Contenido principal */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Filtros y acciones */}
        <div className="bg-white rounded-lg shadow p-6 mb-6">
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            {/* Búsqueda */}
            <div className="relative">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
              <input
                type="text"
                placeholder="Buscar películas..."
                className="pl-10 pr-4 py-2 w-full border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
              />
            </div>

            {/* Filtro por estado */}
            <select
              className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
              value={selectedStatus}
              onChange={(e) => setSelectedStatus(e.target.value)}
            >
              <option value="">Todos los estados</option>
              <option value="DRAFT">Borrador</option>
              <option value="PUBLISHED">Publicado</option>
              <option value="ARCHIVED">Archivado</option>
            </select>

            {/* Filtro por año */}
            <select
              className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
              value={selectedYear}
              onChange={(e) => setSelectedYear(e.target.value)}
            >
              <option value="">Todos los años</option>
              {Array.from({ length: 50 }, (_, i) => new Date().getFullYear() - i).map(year => (
                <option key={year} value={year}>{year}</option>
              ))}
            </select>

            {/* Botón nueva película */}
            <button
              onClick={handleNewMovie}
              className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors flex items-center justify-center gap-2"
            >
              <Plus className="w-5 h-5" />
              Nueva Película
            </button>
          </div>
        </div>

        {/* Lista de películas */}
        <div className="bg-white rounded-lg shadow overflow-hidden">
          {loading ? (
            <div className="flex items-center justify-center h-64">
              <Loader2 className="w-8 h-8 text-blue-600 animate-spin" />
            </div>
          ) : movies && movies.length === 0 ? (
            <div className="text-center py-12">
              <Film className="w-12 h-12 text-gray-400 mx-auto mb-4" />
              <p className="text-gray-500">No se encontraron películas</p>
            </div>
          ) : (
            <div className="overflow-x-auto">
              <table className="min-w-full divide-y divide-gray-200">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Película
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Año
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Director
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Estado
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Rating
                    </th>
                    <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Acciones
                    </th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {movies && movies.map((movie) => (
                    <tr key={movie.id} className="hover:bg-gray-50">
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="flex items-center">
                          <div className="flex-shrink-0 h-10 w-10">
                            {movie.posterUrl ? (
                              <img
                                className="h-10 w-10 rounded-lg object-cover"
                                src={movie.posterUrl}
                                alt={movie.title}
                              />
                            ) : (
                              <div className="h-10 w-10 rounded-lg bg-gray-200 flex items-center justify-center">
                                <Film className="w-5 h-5 text-gray-400" />
                              </div>
                            )}
                          </div>
                          <div className="ml-4">
                            <div className="text-sm font-medium text-gray-900">
                              {movie.title}
                            </div>
                            {movie.originalTitle && (
                              <div className="text-sm text-gray-500">
                                {movie.originalTitle}
                              </div>
                            )}
                          </div>
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                        {movie.year}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        {movie.directors?.map(d => d.name).join(', ') || '-'}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${movie.status === 'PUBLISHED'
                          ? 'bg-green-100 text-green-800'
                          : movie.status === 'DRAFT'
                            ? 'bg-yellow-100 text-yellow-800'
                            : 'bg-gray-100 text-gray-800'
                          }`}>
                          {movie.status === 'PUBLISHED' ? 'Publicado' :
                            movie.status === 'DRAFT' ? 'Borrador' : 'Archivado'}
                        </span>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        {movie.rating ? (
                          <div className="flex items-center">
                            <Star className="w-4 h-4 text-yellow-400 fill-current" />
                            <span className="ml-1 text-sm text-gray-900">
                              {movie.rating}
                            </span>
                          </div>
                        ) : (
                          <span className="text-sm text-gray-400">-</span>
                        )}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                        <div className="flex items-center justify-end gap-2">
                          <a
                            href={`/peliculas/${movie.slug}`}
                            target="_blank"
                            rel="noopener noreferrer"
                            className="text-gray-600 hover:text-gray-900 transition-colors"
                            title="Ver película"
                          >
                            <Eye className="w-4 h-4" />
                          </a>
                          <button
                            onClick={() => handleEdit(movie)}
                            className="text-blue-600 hover:text-blue-900 transition-colors"
                            title="Editar"
                          >
                            
                            <Edit className="w-4 h-4" />
                          </button>
                          <button
                            onClick={() => handleDelete(movie.id)}
                            disabled={deletingMovieId === movie.id}
                            className="text-red-600 hover:text-red-900 transition-colors disabled:opacity-50"
                            title="Eliminar"
                          >
                            {deletingMovieId === movie.id ? (
                              <Loader2 className="w-4 h-4 animate-spin" />
                            ) : (
                              <Trash2 className="w-4 h-4" />
                            )}
                          </button>
                        </div>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          )}
        </div>

        {/* Paginación */}
        {totalPages > 1 && (
          <div className="bg-white px-4 py-3 flex items-center justify-between border-t border-gray-200 sm:px-6 mt-4 rounded-lg shadow">
            <div className="flex-1 flex justify-between sm:hidden">
              <button
                onClick={() => setCurrentPage(p => Math.max(1, p - 1))}
                disabled={currentPage === 1}
                className="relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
              >
                Anterior
              </button>
              <button
                onClick={() => setCurrentPage(p => Math.min(totalPages, p + 1))}
                disabled={currentPage === totalPages}
                className="ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
              >
                Siguiente
              </button>
            </div>
            <div className="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
              <div>
                <p className="text-sm text-gray-700">
                  Página <span className="font-medium">{currentPage}</span> de{' '}
                  <span className="font-medium">{totalPages}</span>
                </p>
              </div>
              <div>
                <nav className="relative z-0 inline-flex rounded-md shadow-sm -space-x-px" aria-label="Pagination">
                  <button
                    onClick={() => setCurrentPage(p => Math.max(1, p - 1))}
                    disabled={currentPage === 1}
                    className="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    Anterior
                  </button>
                  <button
                    onClick={() => setCurrentPage(p => Math.min(totalPages, p + 1))}
                    disabled={currentPage === totalPages}
                    className="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    Siguiente
                  </button>
                </nav>
              </div>
            </div>
          </div>
        )}
      </div>

      {/* Modal de creación/edición con pestañas */}
      {showModal && (
        <div className="fixed inset-0 bg-gray-500 bg-opacity-75 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="bg-gray-50 px-6 py-4 border-b border-gray-200">
              <div className="flex items-center justify-between">
                <h2 className="text-xl font-semibold text-gray-900">
                  {editingMovie ? 'Editar Película' : 'Nueva Película'}
                </h2>
                <button
                  onClick={() => {
                    setShowModal(false)
                    reset()
                    setEditingMovie(null)
                    setMovieFormInitialData(null)
                  }}
                  className="text-gray-400 hover:text-gray-500"
                >
                  <X className="w-6 h-6" />
                </button>
              </div>
            </div>

            <form onSubmit={handleSubmit(onSubmit)} className="overflow-y-auto max-h-[calc(90vh-8rem)]">
              <Tabs.Root value={activeTab} onValueChange={setActiveTab} className="w-full">
                {/* Lista de pestañas */}
                <Tabs.List className="flex border-b border-gray-200 px-6 pt-4">
                  <Tabs.Trigger
                    value="basic"
                    className={`px-4 py-2 -mb-px text-sm font-medium transition-colors ${activeTab === 'basic'
                      ? 'text-blue-600 border-b-2 border-blue-600'
                      : 'text-gray-500 hover:text-gray-700'
                      }`}
                  >
                    <div className="flex items-center gap-2">
                      <Info className="w-4 h-4" />
                      Información Básica
                    </div>
                  </Tabs.Trigger>
                  <Tabs.Trigger
                    value="media"
                    className={`px-4 py-2 -mb-px text-sm font-medium transition-colors ${activeTab === 'media'
                      ? 'text-blue-600 border-b-2 border-blue-600'
                      : 'text-gray-500 hover:text-gray-700'
                      }`}
                  >
                    <div className="flex items-center gap-2">
                      <Image className="w-4 h-4" />
                      Multimedia
                    </div>
                  </Tabs.Trigger>
                  <Tabs.Trigger
                    value="cast"
                    className={`px-4 py-2 -mb-px text-sm font-medium transition-colors ${activeTab === 'cast'
                      ? 'text-blue-600 border-b-2 border-blue-600'
                      : 'text-gray-500 hover:text-gray-700'
                      }`}
                  >
                    <div className="flex items-center gap-2">
                      <Users className="w-4 h-4" />
                      Reparto
                    </div>
                  </Tabs.Trigger>
                  <Tabs.Trigger
                    value="crew"
                    className={`px-4 py-2 -mb-px text-sm font-medium transition-colors ${activeTab === 'crew'
                      ? 'text-blue-600 border-b-2 border-blue-600'
                      : 'text-gray-500 hover:text-gray-700'
                      }`}
                  >
                    <div className="flex items-center gap-2">
                      <Briefcase className="w-4 h-4" />
                      Equipo Técnico
                    </div>
                  </Tabs.Trigger>
                  <Tabs.Trigger
                    value="advanced"
                    className={`px-4 py-2 -mb-px text-sm font-medium transition-colors ${activeTab === 'advanced'
                      ? 'text-blue-600 border-b-2 border-blue-600'
                      : 'text-gray-500 hover:text-gray-700'
                      }`}
                  >
                    <div className="flex items-center gap-2">
                      <Settings className="w-4 h-4" />
                      Avanzado
                    </div>
                  </Tabs.Trigger>
                </Tabs.List>

                {/* Contenido de las pestañas */}
                <div className="p-6">
                  {/* Pestaña de Información Básica */}
                  <Tabs.Content value="basic" className="space-y-6">
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      <div className="space-y-4">
                        <h3 className="text-lg font-medium text-gray-900 mb-4">
                          Información Principal
                        </h3>

                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-1">
                            Título *
                          </label>
                          <input
                            type="text"
                            {...register('title')}
                            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                          />
                          {errors.title && (
                            <p className="mt-1 text-sm text-red-600">{errors.title.message}</p>
                          )}
                        </div>

                        <div className="grid grid-cols-2 gap-4">
                          <div>
                            <label className="block text-sm font-medium text-gray-700 mb-1">
                              Año *
                            </label>
                            <input
                              type="number"
                              {...register('year', { valueAsNumber: true })}
                              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                            />
                            {errors.year && (
                              <p className="mt-1 text-sm text-red-600">{errors.year.message}</p>
                            )}
                          </div>

                          <div>
                            <label className="block text-sm font-medium text-gray-700 mb-1">
                              Fecha de Estreno
                            </label>
                            <input
                              type="date"
                              {...register('releaseDate')}
                              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                            />
                          </div>
                        </div>

                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-1">
                            Duración (minutos)
                          </label>
                          <input
                            type="number"
                            {...register('duration', { valueAsNumber: true })}
                            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                          />
                        </div>
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-1">
                            Duración (segundos)
                          </label>
                          <input
                            type="number"
                            min="0"
                            max="59"
                            {...register('durationSeconds', { valueAsNumber: true })}
                            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                            placeholder="0-59"
                          />
                          {errors.durationSeconds && (
                            <p className="mt-1 text-sm text-red-600">{errors.durationSeconds.message}</p>
                          )}
                        </div>

                        {/* NUEVO CAMPO TIPO DE DURACIÓN */}
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-1">
                            Tipo de duración
                            {tipoDuracionDisabled && (
                              <span className="ml-2 text-xs text-green-600 font-normal">
                                (Calculado automáticamente)
                              </span>
                            )}
                          </label>
                          <select
                            {...register('tipoDuracion')}
                            disabled={tipoDuracionDisabled}
                            className={`w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900 transition-colors ${tipoDuracionDisabled
                                ? 'bg-gray-100 text-gray-500 cursor-not-allowed'
                                : 'hover:border-gray-400'
                              }`}
                          >
                            <option value="">Seleccionar tipo de duración...</option>
                            {tiposDuracion.map((tipo) => (
                              <option key={tipo.value} value={tipo.value}>
                                {tipo.label}
                              </option>
                            ))}
                          </select>
                          <div className="mt-1 text-xs text-gray-500">
                            {tipoDuracionDisabled ? (
                              <div className="flex items-center space-x-1">
                                <svg className="w-3 h-3 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M5 13l4 4L19 7" />
                                </svg>
                                <span>
                                  <strong>{obtenerEtiquetaTipoDuracion(watch('tipoDuracion') || '')}</strong>
                                  {(() => {
                                    const minutos = watch('duration') || 0
                                    const segundos = watch('durationSeconds') || 0
                                    if (minutos > 0 || segundos > 0) {
                                      if (minutos > 0 && segundos > 0) {
                                        return ` (${minutos}min ${segundos}s)`
                                      } else if (minutos > 0) {
                                        return ` (${minutos}min)`
                                      } else {
                                        return ` (${segundos}s)`
                                      }
                                    }
                                    return ''
                                  })()}
                                </span>
                              </div>
                            ) : (
                              <div>
                                <p>Ingrese la duración para calcular automáticamente, o seleccione manualmente.</p>
                                <div className="mt-1 space-y-1">
                                  <div className="flex justify-between">
                                    <span>Largometraje:</span>
                                    <span className="font-mono text-gray-400">60+ min</span>
                                  </div>
                                  <div className="flex justify-between">
                                    <span>Mediometraje:</span>
                                    <span className="font-mono text-gray-400">30-59 min</span>
                                  </div>
                                  <div className="flex justify-between">
                                    <span>Cortometraje:</span>
                                    <span className="font-mono text-gray-400">&lt; 30 min</span>
                                  </div>
                                </div>
                              </div>
                            )}
                          </div>
                        </div>

                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-1">
                            Estado
                          </label>
                          <select
                            {...register('status')}
                            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                          >
                            <option value="DRAFT">Borrador</option>
                            <option value="PUBLISHED">Publicado</option>
                            <option value="ARCHIVED">Archivado</option>
                          </select>
                        </div>
                      </div>

                      <div className="space-y-4">
                        <h3 className="text-lg font-medium text-gray-900 mb-4">
                          Información Adicional
                        </h3>

                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-1">
                            Sinopsis
                          </label>
                          <textarea
                            {...register('synopsis')}
                            rows={4}
                            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                          />
                        </div>

                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-1">
                            Tagline
                          </label>
                          <input
                            type="text"
                            {...register('tagline')}
                            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                          />
                        </div>

                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-1">
                            IMDb ID
                          </label>
                          <input
                            type="text"
                            {...register('imdbId')}
                            placeholder="tt0123456"
                            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                          />
                        </div>
                      </div>
                    </div>

                    {/* Géneros, Países e Idiomas */}
                    <MovieFormEnhanced
                      key={editingMovie?.id || 'new'}
                      onGenresChange={handleGenresChange}
                      onCastChange={handleCastChange}
                      onCrewChange={handleCrewChange}
                      onCountriesChange={handleCountriesChange}
                      onLanguagesChange={handleLanguagesChange}
                      onProductionCompaniesChange={handleProductionCompaniesChange}
                      onDistributionCompaniesChange={handleDistributionCompaniesChange}
                      onThemesChange={handleThemesChange}
                      initialData={movieFormInitialData}
                      showOnlyBasicInfo={true}
                    />
                  </Tabs.Content>

                  {/* Pestaña de Multimedia */}
                  <Tabs.Content value="media" className="space-y-6">
                    <h3 className="text-lg font-medium text-gray-900 mb-4">
                      Imágenes y Videos
                    </h3>

                    <CloudinaryUploadWidget
                      value={watch('posterUrl')}
                      onChange={(url, publicId) => {
                        setValue('posterUrl', url)
                        setValue('posterPublicId', publicId)
                      }}
                      label="Afiche de la Película"
                      type="poster"
                      movieId={editingMovie?.id}
                    />

                    <CloudinaryUploadWidget
                      value={watch('backdropUrl')}
                      onChange={(url, publicId) => {
                        setValue('backdropUrl', url)
                        setValue('backdropPublicId', publicId)
                      }}
                      label="Imagen de Fondo"
                      type="backdrop"
                      movieId={editingMovie?.id}
                    />

                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        URL del Trailer
                      </label>
                      <input
                        type="url"
                        {...register('trailerUrl')}
                        placeholder="https://youtube.com/watch?v=..."
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                      />
                    </div>
                  </Tabs.Content>

                  {/* Pestaña de Reparto */}
                  <Tabs.Content value="cast">
                    <MovieFormEnhanced
                      key={editingMovie?.id || 'new'}
                      onGenresChange={handleGenresChange}
                      onCastChange={handleCastChange}
                      onCrewChange={handleCrewChange}
                      onCountriesChange={handleCountriesChange}
                      onLanguagesChange={handleLanguagesChange}
                      onProductionCompaniesChange={handleProductionCompaniesChange}
                      onDistributionCompaniesChange={handleDistributionCompaniesChange}
                      initialData={movieFormInitialData}
                      showOnlyCast={true}
                    />
                  </Tabs.Content>

                  {/* Pestaña de Equipo Técnico */}
                  <Tabs.Content value="crew">
                    <MovieFormEnhanced
                      key={editingMovie?.id || 'new'}
                      onGenresChange={handleGenresChange}
                      onCastChange={handleCastChange}
                      onCrewChange={handleCrewChange}
                      onCountriesChange={handleCountriesChange}
                      onLanguagesChange={handleLanguagesChange}
                      onProductionCompaniesChange={handleProductionCompaniesChange}
                      onDistributionCompaniesChange={handleDistributionCompaniesChange}
                      initialData={movieFormInitialData}
                      showOnlyCrew={true}
                    />
                  </Tabs.Content>

                  {/* Pestaña de Configuración Avanzada */}
                  <Tabs.Content value="advanced" className="space-y-6">
                    {/* Información técnica */}
                    <div className="space-y-4">
                      <h3 className="text-lg font-medium text-gray-900 mb-4">
                        Información Técnica
                      </h3>

                      <div className="grid grid-cols-2 gap-4">
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-1">
                            Color
                          </label>
                          <select
                            {...register('colorType')}
                            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                          >
                            <option value="">Seleccionar...</option>
                            <option value="Color">Color</option>
                            <option value="Blanco y Negro">Blanco y Negro</option>
                            <option value="Color y B&N">Color y B&N</option>
                          </select>
                        </div>

                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-1">
                            Sonido
                          </label>
                          <select
                            {...register('soundType')}
                            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                          >
                            <option value="">Seleccionar...</option>
                            <option value="Sonora">Sonora</option>
                            <option value="Muda">Muda</option>
                          </select>
                        </div>
                      </div>
                    </div>

                    {/* Clasificación */}
                    <div className="space-y-4">
                      <h3 className="text-lg font-medium text-gray-900 mb-4">
                        Clasificación
                      </h3>

                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">
                          Clasificación
                        </label>
                        <select
                          {...register('classification')}
                          className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                        >
                          <option value="">Seleccionar...</option>
                          <option value="Apta para todo público">Apta para todo público</option>
                          <option value="Solo apta para mayores de 13 años">Solo apta para mayores de 13 años</option>
                          <option value="Solo apta para mayores de 16 años">Solo apta para mayores de 16 años</option>
                          <option value="Solo apta para mayores de 18 años">Solo apta para mayores de 18 años</option>
                        </select>
                      </div>
                    </div>

                    {/* SEO */}
                    <div className="space-y-4">
                      <h3 className="text-lg font-medium text-gray-900 mb-4">
                        SEO y Palabras Clave
                      </h3>

                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">
                          Palabras Clave (separadas por comas)
                        </label>
                        <input
                          type="text"
                          {...register('metaKeywords')}
                          placeholder="drama, argentina, buenos aires"
                          className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                        />
                      </div>
                    </div>

                    {/* Productoras y Distribuidoras */}
                    <MovieFormEnhanced
                      key={editingMovie?.id || 'new'}
                      onGenresChange={handleGenresChange}
                      onCastChange={handleCastChange}
                      onCrewChange={handleCrewChange}
                      onCountriesChange={handleCountriesChange}
                      onLanguagesChange={handleLanguagesChange}
                      onProductionCompaniesChange={handleProductionCompaniesChange}
                      onDistributionCompaniesChange={handleDistributionCompaniesChange}
                      initialData={movieFormInitialData}
                      showOnlyCompanies={true}
                    />
                  </Tabs.Content>
                </div>
              </Tabs.Root>

              {/* Botones */}
              <div className="px-6 py-4 bg-gray-50 border-t border-gray-200 flex items-center justify-end gap-4">
                <button
                  type="button"
                  onClick={() => {
                    setShowModal(false)
                    reset()
                    setEditingMovie(null)
                    setMovieFormInitialData(null)
                  }}
                  className="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors"
                >
                  Cancelar
                </button>
                <button
                  type="submit"
                  disabled={isSubmitting}
                  className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-2"
                >
                  {isSubmitting ? (
                    <>
                      <Loader2 className="w-4 h-4 animate-spin" />
                      Guardando...
                    </>
                  ) : (
                    <>
                      <Save className="w-4 h-4" />
                      {editingMovie ? 'Actualizar' : 'Crear'} Película
                    </>
                  )}
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
    </div>
  )
}

// ==================================================
// src/app/admin/themes/page.tsx
// ==================================================
// src/app/admin/themes/page.tsx
'use client'

import { useState, useEffect } from 'react'
import { useForm } from 'react-hook-form'
import { zodResolver } from '@hookform/resolvers/zod'
import { z } from 'zod'
import {
  Plus,
  Search,
  Edit,
  Trash2,
  Tag,
  X,
  Save,
  Loader2,
  Hash
} from 'lucide-react'
import { toast } from 'react-hot-toast'

// Schema de validación
const themeFormSchema = z.object({
  name: z.string().min(1, 'El nombre es requerido').max(100),
  description: z.string().optional()
})

type ThemeFormData = z.infer<typeof themeFormSchema>

interface Theme {
  id: number
  slug: string
  name: string
  description?: string
  usageCount: number
  movieCount?: number
  createdAt: string
}

export default function AdminThemesPage() {
  const [themes, setThemes] = useState<Theme[]>([])
  const [loading, setLoading] = useState(true)
  const [searchTerm, setSearchTerm] = useState('')
  const [sortBy, setSortBy] = useState('name')
  const [showModal, setShowModal] = useState(false)
  const [editingTheme, setEditingTheme] = useState<Theme | null>(null)
  const [deletingThemeId, setDeletingThemeId] = useState<number | null>(null)

  // Form
  const {
    register,
    handleSubmit,
    reset,
    setValue,
    formState: { errors, isSubmitting }
  } = useForm<ThemeFormData>({
    resolver: zodResolver(themeFormSchema)
  })

  // Cargar themes
  const fetchThemes = async () => {
    try {
      setLoading(true)
      const params = new URLSearchParams({
        search: searchTerm,
        sortBy: sortBy,
        sortOrder: sortBy === 'usageCount' ? 'desc' : 'asc'
      })

      const response = await fetch(`/api/themes?${params}`)
      if (!response.ok) throw new Error('Error al cargar los themes')

      const data = await response.json()
      setThemes(data || [])
    } catch (error) {
      toast.error('Error al cargar los themes')
      setThemes([])
    } finally {
      setLoading(false)
    }
  }

  useEffect(() => {
    fetchThemes()
  }, [searchTerm, sortBy])

  // Crear o actualizar theme
  const onSubmit = async (data: ThemeFormData) => {
    try {
      const url = editingTheme
        ? `/api/themes/${editingTheme.id}`
        : '/api/themes'

      const method = editingTheme ? 'PUT' : 'POST'
      const response = await fetch(url, {
        method,
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data)
      })

      if (!response.ok) {
        const error = await response.json()
        throw new Error(error.error || 'Error al guardar')
      }

      toast.success(editingTheme ? 'Theme actualizado' : 'Theme creado')
      setShowModal(false)
      reset()
      setEditingTheme(null)
      fetchThemes()
    } catch (error) {
      toast.error(error instanceof Error ? error.message : 'Error al guardar')
    }
  }

  // Editar theme
  const handleEdit = (theme: Theme) => {
    setEditingTheme(theme)
    setValue('name', theme.name)
    setValue('description', theme.description || '')
    setShowModal(true)
  }

  // Eliminar theme
  const handleDelete = async (id: number) => {
    if (!confirm('¿Estás seguro de eliminar este theme?')) return

    try {
      setDeletingThemeId(id)
      const response = await fetch(`/api/themes/${id}`, {
        method: 'DELETE'
      })

      if (!response.ok) {
        const error = await response.json()
        throw new Error(error.error || 'Error al eliminar')
      }

      toast.success('Theme eliminado')
      fetchThemes()
    } catch (error) {
      toast.error(error instanceof Error ? error.message : 'Error al eliminar')
    } finally {
      setDeletingThemeId(null)
    }
  }

  // Abrir modal para nuevo theme
  const handleNewTheme = () => {
    setEditingTheme(null)
    reset()
    setShowModal(true)
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white shadow">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="py-6">
            <h1 className="text-3xl font-bold text-gray-900">
              Administración de Themes/Keywords
            </h1>
            <p className="mt-2 text-gray-600">
              Gestiona los temas y palabras clave para categorizar las películas
            </p>
          </div>
        </div>
      </div>

      {/* Contenido principal */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Filtros y acciones */}
        <div className="bg-white rounded-lg shadow p-6 mb-6">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            {/* Búsqueda */}
            <div className="relative">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
              <input
                type="text"
                placeholder="Buscar themes..."
                className="pl-10 pr-4 py-2 w-full border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
              />
            </div>

            {/* Ordenar por */}
            <select
              className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
              value={sortBy}
              onChange={(e) => setSortBy(e.target.value)}
            >
              <option value="name">Nombre</option>
              <option value="usageCount">Más usadas</option>
              <option value="createdAt">Más recientes</option>
            </select>

            {/* Botón nuevo theme */}
            <button
              onClick={handleNewTheme}
              className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors flex items-center justify-center gap-2"
            >
              <Plus className="w-5 h-5" />
              Nuevo Theme
            </button>
          </div>

          {/* Estadísticas */}
          <div className="mt-6 grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="bg-gray-50 rounded-lg p-4">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-gray-500">Total Themes</p>
                  <p className="text-2xl font-bold text-gray-900">{themes.length}</p>
                </div>
                <Tag className="w-8 h-8 text-gray-400" />
              </div>
            </div>
            <div className="bg-gray-50 rounded-lg p-4">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-gray-500">Total Asignaciones</p>
                  <p className="text-2xl font-bold text-gray-900">
                    {themes.reduce((sum, t) => sum + (t.movieCount || 0), 0)}
                  </p>
                </div>
                <Hash className="w-8 h-8 text-gray-400" />
              </div>
            </div>
          </div>
        </div>

        {/* Lista de themes */}
        <div className="bg-white rounded-lg shadow overflow-hidden">
          {loading ? (
            <div className="flex items-center justify-center h-64">
              <Loader2 className="w-8 h-8 text-blue-600 animate-spin" />
            </div>
          ) : themes.length === 0 ? (
            <div className="text-center py-12">
              <Tag className="w-12 h-12 text-gray-400 mx-auto mb-4" />
              <p className="text-gray-500">No se encontraron themes</p>
            </div>
          ) : (
            <div className="overflow-x-auto">
              <table className="min-w-full divide-y divide-gray-200">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Theme
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Descripción
                    </th>
                    <th className="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Películas
                    </th>
                    <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Acciones
                    </th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {themes.map((theme) => (
                    <tr key={theme.id} className="hover:bg-gray-50">
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="flex items-center">
                          <Tag className="w-5 h-5 text-gray-400 mr-3" />
                          <div>
                            <div className="text-sm font-medium text-gray-900">
                              {theme.name}
                            </div>
                            <div className="text-sm text-gray-500">
                              /{theme.slug}
                            </div>
                          </div>
                        </div>
                      </td>
                      <td className="px-6 py-4">
                        <p className="text-sm text-gray-500 line-clamp-2">
                          {theme.description || '-'}
                        </p>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-center">
                        <span className="text-sm font-medium text-gray-900">
                          {theme.movieCount || 0}
                        </span>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                        <div className="flex items-center justify-end gap-2">
                          <button
                            onClick={() => handleEdit(theme)}
                            className="text-blue-600 hover:text-blue-900 transition-colors"
                            title="Editar"
                          >
                            <Edit className="w-4 h-4" />
                          </button>
                          <button
                            onClick={() => handleDelete(theme.id)}
                            disabled={deletingThemeId === theme.id || (theme.movieCount || 0) > 0}
                            className="text-red-600 hover:text-red-900 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                            title={theme.movieCount ? `En uso en ${theme.movieCount} películas` : 'Eliminar'}
                          >
                            {deletingThemeId === theme.id ? (
                              <Loader2 className="w-4 h-4 animate-spin" />
                            ) : (
                              <Trash2 className="w-4 h-4" />
                            )}
                          </button>
                        </div>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          )}
        </div>
      </div>

      {/* Modal de creación/edición */}
      {showModal && (
        <div className="fixed inset-0 bg-gray-500 bg-opacity-75 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg max-w-md w-full p-6">
            <div className="mb-4">
              <h2 className="text-xl font-semibold text-gray-900">
                {editingTheme ? 'Editar Theme' : 'Nuevo Theme'}
              </h2>
            </div>

            <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Nombre *
                </label>
                <input
                  type="text"
                  {...register('name')}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                  placeholder="Ej: Basada en hechos reales"
                />
                {errors.name && (
                  <p className="mt-1 text-sm text-red-600">{errors.name.message}</p>
                )}
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Descripción
                </label>
                <textarea
                  {...register('description')}
                  rows={3}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                  placeholder="Descripción opcional del theme"
                />
              </div>

              <div className="flex items-center justify-end gap-3 pt-4">
                <button
                  type="button"
                  onClick={() => {
                    setShowModal(false)
                    reset()
                    setEditingTheme(null)
                  }}
                  className="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors"
                >
                  Cancelar
                </button>
                <button
                  type="submit"
                  disabled={isSubmitting}
                  className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-2"
                >
                  {isSubmitting ? (
                    <>
                      <Loader2 className="w-4 h-4 animate-spin" />
                      Guardando...
                    </>
                  ) : (
                    <>
                      <Save className="w-4 h-4" />
                      {editingTheme ? 'Actualizar' : 'Crear'} Theme
                    </>
                  )}
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
    </div>
  )
}

// ==================================================
// src/app/api/companies/distribution/route.ts
// ==================================================
// =====================================================
// src/app/api/companies/distribution/route.ts
// =====================================================
import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/prisma'
import { createSlug } from '@/lib/utils'

// GET /api/companies/distribution - Listar distribuidoras
export async function GET(request: NextRequest) {
  try {
    const searchParams = request.nextUrl.searchParams
    const search = searchParams.get('search') || ''

    const where = search ? {
      name: { contains: search, mode: 'insensitive' as const }
    } : {}

    const companies = await prisma.distributionCompany.findMany({
      where,
      orderBy: { name: 'asc' }
    })

    return NextResponse.json(companies)
  } catch (error) {
    console.error('Error fetching distribution companies:', error)
    return NextResponse.json(
      { error: 'Error al obtener las distribuidoras' },
      { status: 500 }
    )
  }
}

// POST /api/companies/distribution - Crear nueva distribuidora
export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    
    let slug = createSlug(body.name)
    let slugExists = await prisma.distributionCompany.findUnique({ where: { slug } })
    let counter = 1
    
    while (slugExists) {
      slug = `${createSlug(body.name)}-${counter}`
      slugExists = await prisma.distributionCompany.findUnique({ where: { slug } })
      counter++
    }

    const company = await prisma.distributionCompany.create({
      data: {
        ...body,
        slug
      }
    })

    return NextResponse.json(company, { status: 201 })
  } catch (error) {
    console.error('Error creating distribution company:', error)
    return NextResponse.json(
      { error: 'Error al crear la distribuidora' },
      { status: 500 }
    )
  }
}

// ==================================================
// src/app/api/companies/production/route.ts
// ==================================================
// =====================================================
// src/app/api/companies/production/route.ts
// =====================================================
import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/prisma'
import { createSlug } from '@/lib/utils'

// GET /api/companies/production - Listar productoras
export async function GET(request: NextRequest) {
  try {
    const searchParams = request.nextUrl.searchParams
    const search = searchParams.get('search') || ''

    const where = search ? {
      name: { contains: search, mode: 'insensitive' as const }
    } : {}

    const companies = await prisma.productionCompany.findMany({
      where,
      orderBy: { name: 'asc' }
    })

    return NextResponse.json(companies)
  } catch (error) {
    console.error('Error fetching production companies:', error)
    return NextResponse.json(
      { error: 'Error al obtener las productoras' },
      { status: 500 }
    )
  }
}

// POST /api/companies/production - Crear nueva productora
export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    
    let slug = createSlug(body.name)
    let slugExists = await prisma.productionCompany.findUnique({ where: { slug } })
    let counter = 1
    
    while (slugExists) {
      slug = `${createSlug(body.name)}-${counter}`
      slugExists = await prisma.productionCompany.findUnique({ where: { slug } })
      counter++
    }

    const company = await prisma.productionCompany.create({
      data: {
        ...body,
        slug
      }
    })

    return NextResponse.json(company, { status: 201 })
  } catch (error) {
    console.error('Error creating production company:', error)
    return NextResponse.json(
      { error: 'Error al crear la productora' },
      { status: 500 }
    )
  }
}


// ==================================================
// src/app/api/countries/route.ts
// ==================================================
// src/app/api/countries/route.ts
import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/prisma'

// GET /api/countries - Listar todos los países con conteo de películas
export async function GET() {
  try {
    const countries = await prisma.country.findMany({
      orderBy: { name: 'asc' },
      include: {
        _count: {
          select: { movies: true }
        }
      }
    })

    return NextResponse.json(countries)
  } catch (error) {
    console.error('Error fetching countries:', error)
    return NextResponse.json(
      { error: 'Error al obtener los países' },
      { status: 500 }
    )
  }
}

// POST /api/countries - Crear nuevo país
export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    
    // Validar datos requeridos
    if (!body.code || body.code.trim() === '') {
      return NextResponse.json(
        { error: 'El código del país es requerido' },
        { status: 400 }
      )
    }
    
    if (!body.name || body.name.trim() === '') {
      return NextResponse.json(
        { error: 'El nombre del país es requerido' },
        { status: 400 }
      )
    }
    
    // Validar formato del código
    const code = body.code.trim().toUpperCase()
    if (!/^[A-Z]{2}$/.test(code)) {
      return NextResponse.json(
        { error: 'El código debe ser de 2 letras mayúsculas (ISO 3166-1 alpha-2)' },
        { status: 400 }
      )
    }
    
    // Verificar si el código ya existe
    const existingCountry = await prisma.country.findUnique({
      where: { code }
    })
    
    if (existingCountry) {
      return NextResponse.json(
        { error: 'Ya existe un país con ese código' },
        { status: 400 }
      )
    }

    // Crear país
    const country = await prisma.country.create({
      data: {
        code,
        name: body.name.trim()
      },
      include: {
        _count: {
          select: { movies: true }
        }
      }
    })

    return NextResponse.json(country, { status: 201 })
  } catch (error) {
    console.error('Error creating country:', error)
    return NextResponse.json(
      { error: 'Error al crear el país' },
      { status: 500 }
    )
  }
}

// ==================================================
// src/app/api/countries/[id]/route.ts
// ==================================================
// src/app/api/countries/[id]/route.ts
import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/prisma'

// GET /api/countries/[id] - Obtener país por ID
export async function GET(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const id = parseInt(params.id)
    
    if (isNaN(id)) {
      return NextResponse.json(
        { error: 'ID inválido' },
        { status: 400 }
      )
    }
    
    const country = await prisma.country.findUnique({
      where: { id },
      include: {
        _count: {
          select: { movies: true }
        }
      }
    })
    
    if (!country) {
      return NextResponse.json(
        { error: 'País no encontrado' },
        { status: 404 }
      )
    }
    
    return NextResponse.json(country)
  } catch (error) {
    console.error('Error fetching country:', error)
    return NextResponse.json(
      { error: 'Error al obtener el país' },
      { status: 500 }
    )
  }
}

// PUT /api/countries/[id] - Actualizar país
export async function PUT(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const id = parseInt(params.id)
    const body = await request.json()
    
    if (isNaN(id)) {
      return NextResponse.json(
        { error: 'ID inválido' },
        { status: 400 }
      )
    }
    
    // Validar datos requeridos
    if (!body.code || body.code.trim() === '') {
      return NextResponse.json(
        { error: 'El código del país es requerido' },
        { status: 400 }
      )
    }
    
    if (!body.name || body.name.trim() === '') {
      return NextResponse.json(
        { error: 'El nombre del país es requerido' },
        { status: 400 }
      )
    }
    
    // Validar formato del código
    const code = body.code.trim().toUpperCase()
    if (!/^[A-Z]{2}$/.test(code)) {
      return NextResponse.json(
        { error: 'El código debe ser de 2 letras mayúsculas (ISO 3166-1 alpha-2)' },
        { status: 400 }
      )
    }
    
    // Verificar que el país existe
    const existingCountry = await prisma.country.findUnique({
      where: { id }
    })
    
    if (!existingCountry) {
      return NextResponse.json(
        { error: 'País no encontrado' },
        { status: 404 }
      )
    }
    
    // Verificar si el nuevo código ya existe en otro país
    if (code !== existingCountry.code) {
      const codeExists = await prisma.country.findFirst({
        where: {
          code,
          NOT: { id }
        }
      })
      
      if (codeExists) {
        return NextResponse.json(
          { error: 'Ya existe otro país con ese código' },
          { status: 400 }
        )
      }
    }
    
    // Actualizar país
    const country = await prisma.country.update({
      where: { id },
      data: {
        code,
        name: body.name.trim()
      },
      include: {
        _count: {
          select: { movies: true }
        }
      }
    })
    
    return NextResponse.json(country)
  } catch (error) {
    console.error('Error updating country:', error)
    return NextResponse.json(
      { error: 'Error al actualizar el país' },
      { status: 500 }
    )
  }
}

// DELETE /api/countries/[id] - Eliminar país
export async function DELETE(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const id = parseInt(params.id)
    
    if (isNaN(id)) {
      return NextResponse.json(
        { error: 'ID inválido' },
        { status: 400 }
      )
    }
    
    // Verificar que el país existe
    const country = await prisma.country.findUnique({
      where: { id },
      include: {
        _count: {
          select: { movies: true }
        }
      }
    })
    
    if (!country) {
      return NextResponse.json(
        { error: 'País no encontrado' },
        { status: 404 }
      )
    }
    
    // Verificar si tiene películas asociadas
    if (country._count.movies > 0) {
      return NextResponse.json(
        { 
          error: `No se puede eliminar el país porque tiene ${country._count.movies} película(s) asociada(s)` 
        },
        { status: 400 }
      )
    }
    
    // Eliminar país
    await prisma.country.delete({
      where: { id }
    })
    
    return NextResponse.json(
      { message: 'País eliminado exitosamente' },
      { status: 200 }
    )
  } catch (error) {
    console.error('Error deleting country:', error)
    return NextResponse.json(
      { error: 'Error al eliminar el país' },
      { status: 500 }
    )
  }
}

// ==================================================
// src/app/api/genres/route.ts
// ==================================================
// src/app/api/genres/route.ts
import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/prisma'
import { createSlug } from '@/lib/utils'

// GET /api/genres - Listar todos los géneros con conteo de películas
export async function GET() {
  try {
    const genres = await prisma.genre.findMany({
      orderBy: { name: 'asc' },
      include: {
        _count: {
          select: { movies: true }
        }
      }
    })

    return NextResponse.json(genres)
  } catch (error) {
    console.error('Error fetching genres:', error)
    return NextResponse.json(
      { error: 'Error al obtener los géneros' },
      { status: 500 }
    )
  }
}

// POST /api/genres - Crear nuevo género
export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    
    // Validar datos requeridos
    if (!body.name || body.name.trim() === '') {
      return NextResponse.json(
        { error: 'El nombre del género es requerido' },
        { status: 400 }
      )
    }

    // Generar slug único
    let slug = createSlug(body.name)
    let slugExists = await prisma.genre.findUnique({ where: { slug } })
    let counter = 1
    
    while (slugExists) {
      slug = `${createSlug(body.name)}-${counter}`
      slugExists = await prisma.genre.findUnique({ where: { slug } })
      counter++
    }

    // Crear género
    const genre = await prisma.genre.create({
      data: {
        name: body.name.trim(),
        slug,
        description: body.description?.trim() || null
      },
      include: {
        _count: {
          select: { movies: true }
        }
      }
    })

    return NextResponse.json(genre, { status: 201 })
  } catch (error) {
    console.error('Error creating genre:', error)
    return NextResponse.json(
      { error: 'Error al crear el género' },
      { status: 500 }
    )
  }
}

// ==================================================
// src/app/api/genres/[id]/route.ts
// ==================================================
// src/app/api/genres/[id]/route.ts
import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/prisma'

// GET /api/genres/[id] - Obtener género por ID
export async function GET(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const id = parseInt(params.id)
    
    if (isNaN(id)) {
      return NextResponse.json(
        { error: 'ID inválido' },
        { status: 400 }
      )
    }
    
    const genre = await prisma.genre.findUnique({
      where: { id },
      include: {
        _count: {
          select: { movies: true }
        }
      }
    })
    
    if (!genre) {
      return NextResponse.json(
        { error: 'Género no encontrado' },
        { status: 404 }
      )
    }
    
    return NextResponse.json(genre)
  } catch (error) {
    console.error('Error fetching genre:', error)
    return NextResponse.json(
      { error: 'Error al obtener el género' },
      { status: 500 }
    )
  }
}

// PUT /api/genres/[id] - Actualizar género
export async function PUT(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const id = parseInt(params.id)
    const body = await request.json()
    
    if (isNaN(id)) {
      return NextResponse.json(
        { error: 'ID inválido' },
        { status: 400 }
      )
    }
    
    // Validar datos requeridos
    if (!body.name || body.name.trim() === '') {
      return NextResponse.json(
        { error: 'El nombre del género es requerido' },
        { status: 400 }
      )
    }
    
    // Verificar que el género existe
    const existingGenre = await prisma.genre.findUnique({
      where: { id }
    })
    
    if (!existingGenre) {
      return NextResponse.json(
        { error: 'Género no encontrado' },
        { status: 404 }
      )
    }
    
    // Actualizar género
    const genre = await prisma.genre.update({
      where: { id },
      data: {
        name: body.name.trim(),
        description: body.description?.trim() || null
      },
      include: {
        _count: {
          select: { movies: true }
        }
      }
    })
    
    return NextResponse.json(genre)
  } catch (error) {
    console.error('Error updating genre:', error)
    return NextResponse.json(
      { error: 'Error al actualizar el género' },
      { status: 500 }
    )
  }
}

// DELETE /api/genres/[id] - Eliminar género
export async function DELETE(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const id = parseInt(params.id)
    
    if (isNaN(id)) {
      return NextResponse.json(
        { error: 'ID inválido' },
        { status: 400 }
      )
    }
    
    // Verificar que el género existe
    const genre = await prisma.genre.findUnique({
      where: { id },
      include: {
        _count: {
          select: { movies: true }
        }
      }
    })
    
    if (!genre) {
      return NextResponse.json(
        { error: 'Género no encontrado' },
        { status: 404 }
      )
    }
    
    // Verificar si tiene películas asociadas
    if (genre._count.movies > 0) {
      return NextResponse.json(
        { 
          error: `No se puede eliminar el género porque tiene ${genre._count.movies} película(s) asociada(s)` 
        },
        { status: 400 }
      )
    }
    
    // Eliminar género
    await prisma.genre.delete({
      where: { id }
    })
    
    return NextResponse.json(
      { message: 'Género eliminado exitosamente' },
      { status: 200 }
    )
  } catch (error) {
    console.error('Error deleting genre:', error)
    return NextResponse.json(
      { error: 'Error al eliminar el género' },
      { status: 500 }
    )
  }
}

// ==================================================
// src/app/api/images/[movieId]/route.ts
// ==================================================
import fs from 'fs';
import path from 'path';
import { NextRequest, NextResponse } from 'next/server';

export async function GET(
  request: NextRequest,
  { params }: { params: Promise<{ movieId: string }> }
) {
  const { movieId } = await params;
  
  try {
    // Ruta al directorio de imágenes
    const imageDir = path.join(process.cwd(), 'public', 'images', movieId);
    
    // Verificar si el directorio existe
    if (!fs.existsSync(imageDir)) {
      return NextResponse.json({ 
        error: 'Directorio de imágenes no encontrado',
        images: []
      }, { status: 404 });
    }
    
    // Leer archivos del directorio
    const files = fs.readdirSync(imageDir);
    
    // Filtrar solo archivos de imagen
    const imageFiles = files
      .filter(file => {
        const ext = path.extname(file).toLowerCase();
        return ['.jpg', '.jpeg', '.png', '.gif', '.webp'].includes(ext);
      })
      .map((file, index) => ({
        filename: file,
        url: `/images/${movieId}/${file}`,
        name: file.replace(/\.[^/.]+$/, ''), // nombre sin extensión
        index: index
      }))
      .sort(); // Ordenar alfabéticamente
    
    return NextResponse.json({
      movieId,
      count: imageFiles.length,
      images: imageFiles
    });
    
  } catch (error) {
    console.error('Error leyendo directorio de imágenes:', error);
    return NextResponse.json({ 
      error: 'Error interno del servidor',
      images: []
    }, { status: 500 });
  }
}

// ==================================================
// src/app/api/languages/route.ts
// ==================================================
// =====================================================
// src/app/api/languages/route.ts
// =====================================================
import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/prisma'

// GET /api/languages - Listar todos los idiomas
export async function GET() {
  try {
    const languages = await prisma.language.findMany({
      orderBy: { name: 'asc' }
    })

    return NextResponse.json(languages)
  } catch (error) {
    console.error('Error fetching languages:', error)
    return NextResponse.json(
      { error: 'Error al obtener los idiomas' },
      { status: 500 }
    )
  }
}

// ==================================================
// src/app/api/movies/route.ts
// ==================================================
// src/app/api/movies/route.ts
import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/prisma'
import { createSlug } from '@/lib/utils'
import { z } from 'zod'
import { movieSchema } from '@/lib/schemas'


// GET /api/movies - Listar películas con filtros
export async function GET(request: NextRequest) {
  try {
    const searchParams = request.nextUrl.searchParams
    const page = parseInt(searchParams.get('page') || '1')
    const limit = parseInt(searchParams.get('limit') || '20')
    const search = searchParams.get('search') || ''
    const genre = searchParams.get('genre') || ''
    const year = searchParams.get('year') || ''
    const status = searchParams.get('status') || ''
    const sortBy = searchParams.get('sortBy') || 'createdAt'
    const sortOrder = searchParams.get('sortOrder') || 'desc'

    const skip = (page - 1) * limit

    // Construir filtros
    const where: any = {}

    if (search) {
      where.OR = [
        { title: { contains: search, mode: 'insensitive' } },
        { synopsis: { contains: search, mode: 'insensitive' } }
      ]
    }

    if (genre) {
      where.genres = {
        some: {
          genre: {
            slug: genre
          }
        }
      }
    }

    if (year) {
      where.year = parseInt(year)
    }

    if (status) {
      where.status = status
    }

    // Obtener total de registros
    const total = await prisma.movie.count({ where })

    // Obtener películas
    const movies = await prisma.movie.findMany({
      where,
      skip,
      take: limit,
      orderBy: {
        [sortBy]: sortOrder
      },
      include: {
        genres: {
          include: {
            genre: true
          }
        },
        cast: {
          where: {
            isPrincipal: true
          },
          include: {
            person: true
          },
          orderBy: {
            billingOrder: 'asc'
          },
          take: 3
        },
        crew: {
          where: {
            role: 'Director'
          },
          include: {
            person: true
          }
        },
        countries: {
          where: {
            isPrimary: true
          },
          include: {
            country: true
          }
        },
        themes: {
          include: {
            theme: true
          }
        },
        images: {
          where: {
            type: 'POSTER',
            isPrimary: true
          },
          take: 1
        }
      }
    })

    // Formatear respuesta
    const formattedMovies = movies.map(movie => ({
      id: movie.id,
      slug: movie.slug,
      title: movie.title,
      year: movie.year,
      releaseDate: movie.releaseDate,
      duration: movie.duration,
      posterUrl: movie.posterUrl || movie.images[0]?.url,
      status: movie.status,
      genres: movie.genres.map(g => g.genre),
      directors: movie.crew.map(c => c.person),
      mainCast: movie.cast.map(c => ({
        person: c.person,
        character: c.characterName
      })),
      country: movie.countries[0]?.country.name || 'Argentina',
      themes: movie.themes
    }))

    return NextResponse.json({
      movies: formattedMovies,
      pagination: {
        page,
        limit,
        total,
        totalPages: Math.ceil(total / limit)
      }
    })
  } catch (error) {
    console.error('Error fetching movies:', error)
    return NextResponse.json(
      { error: 'Error al obtener las películas' },
      { status: 500 }
    )
  }
}

// POST /api/movies - Crear nueva película
export async function POST(request: NextRequest) {
  try {
    const body = await request.json()

    // Agregar estos logs para debugging
    console.log('=== RECEIVED DATA ===')
    console.log('Cast:', JSON.stringify(body.cast, null, 2))
    console.log('Crew:', JSON.stringify(body.crew, null, 2))
    console.log('==================')

    // Validar datos
    const validatedData = movieSchema.parse(body)

    // Generar slug único
    let slug = createSlug(validatedData.title)
    let slugExists = await prisma.movie.findUnique({ where: { slug } })
    let counter = 1

    while (slugExists) {
      slug = `${createSlug(validatedData.title)}-${counter}`
      slugExists = await prisma.movie.findUnique({ where: { slug } })
      counter++
    }

    // Extraer relaciones del body
    const {
      genres,
      cast,
      crew,
      countries,
      languages,
      productionCompanies,
      distributionCompanies,
      ...movieData
    } = validatedData

    // Transformar cast y crew para quitar la propiedad 'person'
    const processedCast = cast?.map((item: any) => ({
      personId: item.personId,
      characterName: item.characterName,
      billingOrder: item.billingOrder,
      isPrincipal: item.isPrincipal
    }))

    const processedCrew = crew?.map((item: any) => ({
      personId: item.personId,
      role: item.role,
      department: item.department,
      billingOrder: item.billingOrder
    }))

    // Crear película con relaciones
    const movie = await prisma.movie.create({
      data: {
        ...movieData,
        slug,
        releaseDate: movieData.releaseDate ? new Date(movieData.releaseDate) : null,
        // Crear relaciones
        genres: genres ? {
          create: genres.map((genreId, index) => ({
            genreId,
            isPrimary: index === 0
          }))
        } : undefined,
        cast: cast ? {
          create: cast
        } : undefined,
        crew: crew ? {
          create: crew
        } : undefined,
        countries: countries ? {
          create: countries.map((countryId, index) => ({
            countryId,
            isPrimary: index === 0
          }))
        } : undefined,
        languages: languages ? {
          create: languages.map((languageId, index) => ({
            languageId,
            isPrimary: index === 0
          }))
        } : undefined,
        productionCompanies: productionCompanies ? {
          create: productionCompanies.map((companyId, index) => ({
            companyId,
            isPrimary: index === 0
          }))
        } : undefined,
        distributionCompanies: distributionCompanies ? {
          create: distributionCompanies.map(companyId => ({
            companyId,
            territory: 'Argentina'
          }))
        } : undefined
      },
      include: {
        genres: {
          include: {
            genre: true
          }
        },
        cast: {
          include: {
            person: true
          }
        },
        crew: {
          include: {
            person: true
          }
        },
        countries: {
          include: {
            country: true
          }
        },
        themes: {
          include: {
            theme: true
          }
        },
        languages: {
          include: {
            language: true
          }
        }
      }
    })

    return NextResponse.json(movie, { status: 201 })
  } catch (error) {
    if (error instanceof z.ZodError) {
      return NextResponse.json(
        { error: 'Datos inválidos', details: error.errors },
        { status: 400 }
      )
    }

    console.error('Error creating movie:', error)
    return NextResponse.json(
      { error: 'Error al crear la película' },
      { status: 500 }
    )
  }
}

// ==================================================
// src/app/api/movies/[id]/route.ts
// ==================================================

// ==================================================
// src/app/api/movies/[id]/route.ts
// ==================================================
import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/prisma'
import { z } from 'zod'
import { movieSchema } from '@/lib/schemas'

// GET /api/movies/[id] - Obtener película por ID o slug
export async function GET(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const idOrSlug = params.id

    // Determinar si es ID o slug
    const isId = /^\d+$/.test(idOrSlug)

    const movie = await prisma.movie.findUnique({
      where: isId ? { id: parseInt(idOrSlug) } : { slug: idOrSlug },
      include: {
        genres: {
          include: {
            genre: true
          }
        },
        cast: {
          include: {
            person: true
          },
          orderBy: {
            billingOrder: 'asc'
          }
        },
        crew: {
          include: {
            person: true
          },
          orderBy: [
            { department: 'asc' },
            { billingOrder: 'asc' }
          ]
        },
        countries: {
          include: {
            country: true
          }
        },
        languages: {
          include: {
            language: true
          }
        },
        productionCompanies: {
          include: {
            company: true
          }
        },
        distributionCompanies: {
          include: {
            company: true
          }
        },
        images: {
          orderBy: {
            displayOrder: 'asc'
          }
        },
        videos: {
          orderBy: {
            isPrimary: 'desc'
          }
        },
        awards: {
          include: {
            award: true,
            recipient: true
          }
        },
        themes: {
          include: {
            theme: true
          }
        },
        filmingLocations: true
      }
    })

    if (!movie) {
      return NextResponse.json(
        { error: 'Película no encontrada' },
        { status: 404 }
      )
    }

    return NextResponse.json(movie)
  } catch (error) {
    console.error('Error fetching movie:', error)
    return NextResponse.json(
      { error: 'Error al obtener la película' },
      { status: 500 }
    )
  }
}

// PUT /api/movies/[id] - Actualizar película
export async function PUT(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const id = parseInt(params.id)
    const body = await request.json()
    
    // Validar datos
    const validatedData = movieSchema.parse(body)
    
    // Verificar que la película existe
    const existingMovie = await prisma.movie.findUnique({
      where: { id }
    })

    if (!existingMovie) {
      return NextResponse.json(
        { error: 'Película no encontrada' },
        { status: 404 }
      )
    }

    // Extraer relaciones
    const {
      genres,
      cast,
      crew,
      countries,
      languages,
      productionCompanies,
      distributionCompanies,
      themes,
      ...movieData
    } = validatedData
    
    
    // Actualizar película y relaciones
    const movie = await prisma.movie.update({
      where: { id },
      data: {
        ...movieData,
        releaseDate: movieData.releaseDate ? new Date(movieData.releaseDate) : null,
        // Actualizar relaciones (primero eliminar, luego crear)
        genres: genres ? {
          deleteMany: {},
          create: genres.map((genreId, index) => ({
            genreId,
            isPrimary: index === 0
          }))
        } : undefined,
        cast: cast ? {
          deleteMany: {},
          create: cast
        } : undefined,
        crew: crew ? {
          deleteMany: {},
          create: crew
        } : undefined,
        countries: countries ? {
          deleteMany: {},
          create: countries.map((countryId, index) => ({
            countryId,
            isPrimary: index === 0
          }))
        } : undefined,
        languages: languages ? {
          deleteMany: {},
          create: languages.map((languageId, index) => ({
            languageId,
            isPrimary: index === 0
          }))
        } : undefined,
        productionCompanies: productionCompanies ? {
          deleteMany: {},
          create: productionCompanies.map((companyId, index) => ({
            companyId,
            isPrimary: index === 0
          }))
        } : undefined,
        distributionCompanies: distributionCompanies ? {
          deleteMany: {},
          create: distributionCompanies.map(companyId => ({
            companyId,
            territory: 'Argentina'
          }))
        } : undefined,
        themes: themes ? {
          deleteMany: {},
          create: themes.map(themeId => ({
            themeId
          }))
        } : undefined
      },
      include: {
        genres: {
          include: {
            genre: true
          }
        },
        cast: {
          include: {
            person: true
          }
        },
        crew: {
          include: {
            person: true
          }
        },
        themes: {
          include: {
            theme: true
          }
        }
      }
    })

    return NextResponse.json(movie)
  } catch (error) {
    if (error instanceof z.ZodError) {
      return NextResponse.json(
        { error: 'Datos inválidos', details: error.errors },
        { status: 400 }
      )
    }

    console.error('Error updating movie:', error)
    return NextResponse.json(
      { error: 'Error al actualizar la película' },
      { status: 500 }
    )
  }
}

// DELETE /api/movies/[id] - Eliminar película
export async function DELETE(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const id = parseInt(params.id)

    // Verificar que la película existe
    const movie = await prisma.movie.findUnique({
      where: { id }
    })

    if (!movie) {
      return NextResponse.json(
        { error: 'Película no encontrada' },
        { status: 404 }
      )
    }

    // Eliminar película (las relaciones se eliminan en cascada)
    await prisma.movie.delete({
      where: { id }
    })

    return NextResponse.json(
      { message: 'Película eliminada exitosamente' },
      { status: 200 }
    )
  } catch (error) {
    console.error('Error deleting movie:', error)
    return NextResponse.json(
      { error: 'Error al eliminar la película' },
      { status: 500 }
    )
  }
}

// ==================================================
// src/app/api/people/route.ts
// ==================================================
// =====================================================
// src/app/api/people/route.ts
// =====================================================
import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/prisma'
import { createSlug } from '@/lib/utils'

// GET /api/people - Listar personas con búsqueda
export async function GET(request: NextRequest) {
  try {
    const searchParams = request.nextUrl.searchParams
    const search = searchParams.get('search') || ''
    const limit = parseInt(searchParams.get('limit') || '50')

    const where = search ? {
      OR: [
        { name: { contains: search, mode: 'insensitive' as const } },
        { birthName: { contains: search, mode: 'insensitive' as const } }
      ]
    } : {}

    const people = await prisma.person.findMany({
      where,
      take: limit,
      orderBy: { name: 'asc' },
      select: {
        id: true,
        name: true,
        photoUrl: true,
        birthDate: true,
        nationality: true
      }
    })

    return NextResponse.json(people)
  } catch (error) {
    console.error('Error fetching people:', error)
    return NextResponse.json(
      { error: 'Error al obtener las personas' },
      { status: 500 }
    )
  }
}

// POST /api/people - Crear nueva persona
export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    
    // Generar slug único
    let slug = createSlug(body.name)
    let slugExists = await prisma.person.findUnique({ where: { slug } })
    let counter = 1
    
    while (slugExists) {
      slug = `${createSlug(body.name)}-${counter}`
      slugExists = await prisma.person.findUnique({ where: { slug } })
      counter++
    }

    const person = await prisma.person.create({
      data: {
        ...body,
        slug,
        birthDate: body.birthDate ? new Date(body.birthDate) : null,
        deathDate: body.deathDate ? new Date(body.deathDate) : null
      }
    })

    return NextResponse.json(person, { status: 201 })
  } catch (error) {
    console.error('Error creating person:', error)
    return NextResponse.json(
      { error: 'Error al crear la persona' },
      { status: 500 }
    )
  }
}


// ==================================================
// src/app/api/project-structure/route.ts
// ==================================================
// src/app/api/project-structure/route.ts
import { NextResponse } from 'next/server';
import fs from 'fs';
import path from 'path';

export async function GET(request: Request) {
  // Verificar clave de seguridad
  const { searchParams } = new URL(request.url);
  const key = searchParams.get('key');
  
  if (key !== 'cinenacional2024') {
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
  }
  
  // Función para escanear directorio
  function scanDir(dir: string, base = ''): any {
    try {
      const items = fs.readdirSync(dir);
      const result: any = {};
      
      items.forEach(item => {
        // Ignorar archivos y carpetas que no necesitamos
        if (item.startsWith('.') || 
            item === 'node_modules' || 
            item === '.next' ||
            item === 'out' ||
            item === 'coverage' ||
            item === '.vercel') return;
        
        const fullPath = path.join(dir, item);
        try {
          const stats = fs.statSync(fullPath);
          
          if (stats.isDirectory()) {
            const subResult = scanDir(fullPath, path.join(base, item));
            // Solo incluir directorios que tengan contenido
            if (Object.keys(subResult).length > 0) {
              result[item] = subResult;
            }
          } else if (item.match(/\.(ts|tsx|js|jsx|json|css|scss|md|sql|prisma)$/)) {
            // Crear URL de GitHub para cada archivo
            result[item] = `https://raw.githubusercontent.com/diegopapic/cinenacional/main/${path.join(base, item).replace(/\\/g, '/')}`;
          }
        } catch (error) {
          console.error(`Error reading ${fullPath}:`, error);
        }
      });
      
      return result;
    } catch (error) {
      console.error(`Error scanning directory ${dir}:`, error);
      return {};
    }
  }
  
  try {
    const projectRoot = process.cwd();
    const structure = scanDir(projectRoot);
    
    // Agregar algunos archivos importantes en la raíz manualmente si no fueron escaneados
    const rootFiles = ['package.json', 'tsconfig.json', 'next.config.js', 'next.config.mjs', '.env.example', 'README.md'];
    const quickLinks: any = {};
    
    rootFiles.forEach(file => {
      const filePath = path.join(projectRoot, file);
      if (fs.existsSync(filePath)) {
        quickLinks[file] = `https://raw.githubusercontent.com/diegopapic/cinenacional/main/${file}`;
      }
    });
    
    return NextResponse.json({
      timestamp: new Date().toISOString(),
      repository: "https://github.com/diegopapic/cinenacional",
      structure,
      quickLinks,
      totalFiles: countFiles(structure)
    });
  } catch (error) {
    // Si hay algún error al escanear, devolver una respuesta de error informativa
    return NextResponse.json({
      error: 'Error scanning project',
      details: error instanceof Error ? error.message : 'Unknown error',
      // Proporcionar al menos los enlaces básicos
      quickLinks: {
        package: "https://raw.githubusercontent.com/diegopapic/cinenacional/main/package.json",
        tsconfig: "https://raw.githubusercontent.com/diegopapic/cinenacional/main/tsconfig.json"
      }
    });
  }
}

// Función auxiliar para contar archivos
function countFiles(obj: any): number {
  let count = 0;
  for (const key in obj) {
    if (typeof obj[key] === 'string') {
      count++;
    } else if (typeof obj[key] === 'object') {
      count += countFiles(obj[key]);
    }
  }
  return count;
}

// ==================================================
// src/app/api/themes/route.ts
// ==================================================
// src/app/api/themes/route.ts
import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/prisma'
import { createSlug } from '@/lib/utils'

// GET /api/themes - Listar todos los themes/keywords
export async function GET(request: NextRequest) {
  try {
    const searchParams = request.nextUrl.searchParams
    const search = searchParams.get('search') || ''
    const sortBy = searchParams.get('sortBy') || 'name'
    const sortOrder = searchParams.get('sortOrder') || 'asc'

    const where = search ? {
      OR: [
        { name: { contains: search, mode: 'insensitive' as const } },
        { description: { contains: search, mode: 'insensitive' as const } }
      ]
    } : {}

    const themes = await prisma.theme.findMany({
      where,
      orderBy: {
        [sortBy]: sortOrder
      },
      include: {
        _count: {
          select: { movies: true }
        }
      }
    })

    // Formatear respuesta con contador de películas
    const formattedThemes = themes.map(theme => ({
      ...theme,
      movieCount: theme._count.movies
    }))

    return NextResponse.json(formattedThemes)
  } catch (error) {
    console.error('Error fetching themes:', error)
    return NextResponse.json(
      { error: 'Error al obtener los themes' },
      { status: 500 }
    )
  }
}

// POST /api/themes - Crear nuevo theme/keyword
export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    
    // Validar datos requeridos
    if (!body.name) {
      return NextResponse.json(
        { error: 'El nombre es requerido' },
        { status: 400 }
      )
    }

    // Generar slug único
    let slug = createSlug(body.name)
    let slugExists = await prisma.theme.findUnique({ where: { slug } })
    let counter = 1
    
    while (slugExists) {
      slug = `${createSlug(body.name)}-${counter}`
      slugExists = await prisma.theme.findUnique({ where: { slug } })
      counter++
    }

    const theme = await prisma.theme.create({
      data: {
        name: body.name,
        slug,
        description: body.description
      }
    })

    return NextResponse.json(theme, { status: 201 })
  } catch (error) {
    console.error('Error creating theme:', error)
    return NextResponse.json(
      { error: 'Error al crear el theme' },
      { status: 500 }
    )
  }
}

// ==================================================
// src/app/api/themes/[id]/route.ts
// ==================================================
// src/app/api/themes/[id]/route.ts
import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/prisma'
import { createSlug } from '@/lib/utils'

// GET /api/themes/[id] - Obtener theme específico
export async function GET(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const id = parseInt(params.id)
    
    const theme = await prisma.theme.findUnique({
      where: { id },
      include: {
        movies: {
          include: {
            movie: {
              select: {
                id: true,
                title: true,
                slug: true,
                year: true,
                posterUrl: true
              }
            }
          }
        },
        _count: {
          select: { movies: true }
        }
      }
    })

    if (!theme) {
      return NextResponse.json(
        { error: 'Theme no encontrado' },
        { status: 404 }
      )
    }

    return NextResponse.json({
      ...theme,
      movieCount: theme._count.movies
    })
  } catch (error) {
    console.error('Error fetching theme:', error)
    return NextResponse.json(
      { error: 'Error al obtener el theme' },
      { status: 500 }
    )
  }
}

// PUT /api/themes/[id] - Actualizar theme
export async function PUT(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const id = parseInt(params.id)
    const body = await request.json()
    
    // Verificar que existe
    const existingTheme = await prisma.theme.findUnique({
      where: { id }
    })
    
    if (!existingTheme) {
      return NextResponse.json(
        { error: 'Theme no encontrado' },
        { status: 404 }
      )
    }

    // Si se cambia el nombre, generar nuevo slug
    let updateData: any = {
      description: body.description
    }

    if (body.name && body.name !== existingTheme.name) {
      let slug = createSlug(body.name)
      let slugExists = await prisma.theme.findUnique({ 
        where: { 
          slug,
          NOT: { id }
        } 
      })
      let counter = 1
      
      while (slugExists) {
        slug = `${createSlug(body.name)}-${counter}`
        slugExists = await prisma.theme.findUnique({ 
          where: { 
            slug,
            NOT: { id }
          } 
        })
        counter++
      }

      updateData.name = body.name
      updateData.slug = slug
    }

    const theme = await prisma.theme.update({
      where: { id },
      data: updateData
    })

    return NextResponse.json(theme)
  } catch (error) {
    console.error('Error updating theme:', error)
    return NextResponse.json(
      { error: 'Error al actualizar el theme' },
      { status: 500 }
    )
  }
}

// DELETE /api/themes/[id] - Eliminar theme
export async function DELETE(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const id = parseInt(params.id)
    
    // Verificar que no esté en uso
    const themeWithMovies = await prisma.theme.findUnique({
      where: { id },
      include: {
        _count: {
          select: { movies: true }
        }
      }
    })
    
    if (!themeWithMovies) {
      return NextResponse.json(
        { error: 'Theme no encontrado' },
        { status: 404 }
      )
    }

    if (themeWithMovies._count.movies > 0) {
      return NextResponse.json(
        { error: `No se puede eliminar el theme porque está asignado a ${themeWithMovies._count.movies} película(s)` },
        { status: 400 }
      )
    }

    await prisma.theme.delete({
      where: { id }
    })

    return NextResponse.json(
      { message: 'Theme eliminado exitosamente' },
      { status: 200 }
    )
  } catch (error) {
    console.error('Error deleting theme:', error)
    return NextResponse.json(
      { error: 'Error al eliminar el theme' },
      { status: 500 }
    )
  }
}

// ==================================================
// src/app/layout.tsx
// ==================================================
// src/app/layout.tsx
import type { Metadata } from 'next'
import { Inter } from 'next/font/google'
import './globals.css'
import Header from '@/components/layout/Header'
import Footer from '@/components/layout/Footer'
import { Toaster } from 'react-hot-toast'

const inter = Inter({ subsets: ['latin'] })

export const metadata: Metadata = {
  title: 'CineNacional - Base de Datos del Cine Argentino',
  description: 'La base de datos más completa del cine argentino. Descubre películas, directores, actores y toda la historia cinematográfica de Argentina.',
  keywords: 'cine argentino, películas argentinas, actores argentinos, directores argentinos, base de datos cine',
  openGraph: {
    title: 'CineNacional - Base de Datos del Cine Argentino',
    description: 'La base de datos más completa del cine argentino',
    url: 'https://cinenacional.vercel.app',
    siteName: 'CineNacional',
    images: [
      {
        url: '/og-image.jpg',
        width: 1200,
        height: 630,
        alt: 'CineNacional',
      },
    ],
    locale: 'es_AR',
    type: 'website',
  },
  robots: {
    index: true,
    follow: true,
    googleBot: {
      index: true,
      follow: true,
      'max-video-preview': -1,
      'max-image-preview': 'large',
      'max-snippet': -1,
    },
  },
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="es" className="h-full">
      <body className={`${inter.className} min-h-full flex flex-col bg-zinc-950 text-white`}>
        <Header />
        <main className="flex-grow">
          {children}
        </main>
        <Footer />
        <Toaster 
          position="top-right"
          toastOptions={{
            duration: 4000,
            style: {
              background: '#363636',
              color: '#fff',
            },
            success: {
              style: {
                background: '#10b981',
              },
            },
            error: {
              style: {
                background: '#ef4444',
              },
            },
          }}
        />
      </body>
    </html>
  )
}

// ==================================================
// src/app/listados/peliculas/page.tsx
// ==================================================
'use client';

import React, { useState, useEffect } from 'react';

export default function MovieListPage() {
  const [viewMode, setViewMode] = useState('compact');
  const [currentPage, setCurrentPage] = useState(1);
  const itemsPerPage = 10;
  const totalMovies = 847;
  const totalPages = Math.ceil(totalMovies / itemsPerPage);

  // Sample movie data
  const movies = [
    { id: 1, title: 'Relatos Salvajes', director: 'Damián Szifron', year: 2014, genre: 'Comedia Negra, Drama', duration: 122, synopsis: 'Seis relatos que alternan la comedia negra y la tragedia. Sus personajes se verán empujados hacia el abismo y hacia el innegable placer de perder el control al cruzar la delgada línea que separa la civilización de la barbarie.', rating: 8.1 },
    { id: 2, title: 'El Secreto de sus Ojos', director: 'Juan José Campanella', year: 2009, genre: 'Drama, Thriller', duration: 129, synopsis: 'Benjamín Espósito es oficial de un Juzgado de Instrucción de Buenos Aires recién retirado. Obsesionado por un brutal asesinato ocurrido veinticinco años antes, decide escribir una novela sobre el caso, del cual fue testigo y protagonista.', rating: 8.2 },
    { id: 3, title: 'Nueve Reinas', director: 'Fabián Bielinsky', year: 2000, genre: 'Thriller, Drama', duration: 114, synopsis: 'Dos estafadores, uno joven y otro veterano, se unen para realizar un negocio millonario. La venta de unos sellos falsos conocidos como las "nueve reinas" se convierte en una carrera contra el tiempo donde nada es lo que parece.', rating: 7.9 },
    { id: 4, title: 'La Historia Oficial', director: 'Luis Puenzo', year: 1985, genre: 'Drama', duration: 112, synopsis: 'Buenos Aires, década del 80. Alicia es una profesora de historia casada con Roberto, un empresario. La pareja tiene una hija adoptiva, Gaby. La vida de Alicia cambiará cuando comience a sospechar sobre el verdadero origen de su hija.', rating: 7.8 },
    { id: 5, title: 'El Hijo de la Novia', director: 'Juan José Campanella', year: 2001, genre: 'Drama, Comedia', duration: 123, synopsis: 'Rafael Belvedere está en crisis: a los 42 años, sigue soltero, no tiene amigos y está agobiado por las responsabilidades. Su padre quiere casarse por la iglesia con su madre, que padece Alzheimer, para complacerla.', rating: 7.8 },
    { id: 6, title: 'Medianeras', director: 'Gustavo Taretto', year: 2011, genre: 'Drama, Romance', duration: 95, synopsis: 'Buenos Aires es una ciudad de departamentos. Martín y Mariana viven a metros de distancia, pero nunca se cruzaron. Mientras tanto, ambos buscan en Internet lo que no pueden encontrar afuera.', rating: 7.5 },
    { id: 7, title: 'Un Cuento Chino', director: 'Sebastián Borensztein', year: 2011, genre: 'Comedia, Drama', duration: 93, synopsis: 'Roberto es un ferretero solitario que colecciona noticias insólitas. Un día conoce a Jun, un chino que no habla español. A pesar de la barrera del idioma, Roberto lo ayudará en su búsqueda.', rating: 7.7 },
    { id: 8, title: 'Pizza, Birra, Faso', director: 'Bruno Stagnaro, Adrián Caetano', year: 1998, genre: 'Drama, Crimen', duration: 92, synopsis: 'Cordobés y sus amigos sobreviven robando en las calles de Buenos Aires. Cuando su novia queda embarazada, Cordobés intenta conseguir dinero para un futuro mejor, pero la vida en la calle no perdona.', rating: 7.1 },
    { id: 9, title: 'Esperando la Carroza', director: 'Alejandro Doria', year: 1985, genre: 'Comedia', duration: 87, synopsis: 'Mamá Cora tiene tres hijos que no quieren hacerse cargo de ella. Durante un almuerzo familiar, la anciana desaparece y todos creen que se suicidó tirándose al río, desatando un caos familiar lleno de hipocresía.', rating: 8.1 },
    { id: 10, title: 'Comodines', director: 'Jorge Nisco', year: 1997, genre: 'Acción, Comedia', duration: 90, synopsis: 'Dos policías muy diferentes deben trabajar juntos para resolver un caso de corrupción policial. Entre persecuciones y tiroteos, desarrollarán una amistad mientras intentan sobrevivir a la investigación.', rating: 6.5 }
  ];

  const getDisplayedMovies = () => {
    const start = (currentPage - 1) * itemsPerPage;
    const end = start + itemsPerPage;
    return movies.slice(start, end);
  };

  const handlePageChange = (page: number) => {
    setCurrentPage(page);
    window.scrollTo(0, 0);
  };

  const renderPagination = () => {
    const pages = [];
    const maxVisible = 5;
    
    if (totalPages <= maxVisible) {
      for (let i = 1; i <= totalPages; i++) {
        pages.push(i);
      }
    } else {
      if (currentPage <= 3) {
        pages.push(1, 2, 3, '...', totalPages - 1, totalPages);
      } else if (currentPage >= totalPages - 2) {
        pages.push(1, 2, '...', totalPages - 2, totalPages - 1, totalPages);
      } else {
        pages.push(1, '...', currentPage - 1, currentPage, currentPage + 1, '...', totalPages);
      }
    }
    
    return pages;
  };

  // Add styles
  const styles = `
    @import url('https://fonts.googleapis.com/css2?family=Crimson+Text:ital,wght@0,400;0,600;1,400&family=Inter:wght@300;400;500;600&display=swap');
    
    body {
      font-family: 'Inter', system-ui, sans-serif;
      font-weight: 300;
      letter-spacing: -0.01em;
      background-color: #0f1419;
      color: white;
    }
    
    .serif-heading {
      font-family: 'Crimson Text', Georgia, serif;
      font-weight: 600;
      letter-spacing: -0.02em;
    }
    
    .serif-body {
      font-family: 'Crimson Text', Georgia, serif;
      font-weight: 400;
      line-height: 1.7;
    }
    
    .poster-shadow {
      box-shadow: 0 20px 40px rgba(0,0,0,0.4);
    }
    
    .glass-effect {
      backdrop-filter: blur(10px);
      background: rgba(42, 42, 42, 0.8);
    }
    
    .gradient-text {
      background: linear-gradient(135deg, #3b82f6, #60a5fa);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
    }
    
    .movie-placeholder {
      background: linear-gradient(135deg, #1a2332, #0f1419);
      border: 1px solid #3b82f6;
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      text-align: center;
      padding: 2rem;
      position: relative;
      overflow: hidden;
    }
    
    .movie-placeholder::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: linear-gradient(45deg, transparent 30%, rgba(59, 130, 246, 0.1) 50%, transparent 70%);
      animation: shimmer 2s infinite;
    }
    
    .placeholder-small {
      background: linear-gradient(135deg, #1a2332, #0f1419);
      border: 1px solid #374151;
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      text-align: center;
      padding: 1rem;
    }
    
    .animate-fade-in {
      animation: fadeIn 0.5s ease-in-out;
    }
    
    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(10px); }
      to { opacity: 1; transform: translateY(0); }
    }
    
    @keyframes shimmer {
      0% { transform: translateX(-100%); }
      100% { transform: translateX(100%); }
    }
    
    .bg-cine-dark { background-color: #0f1419; }
    .bg-cine-gray { background-color: #1a2332; }
    .text-cine-accent { color: #3b82f6; }
    .bg-cine-accent { background-color: #3b82f6; }
    .border-cine-accent { border-color: #3b82f6; }
    .hover\\:bg-cine-accent:hover { background-color: #3b82f6; }
    .hover\\:text-cine-accent:hover { color: #3b82f6; }
    .hover\\:border-cine-accent:hover { border-color: #3b82f6; }
  `;

  return (
    <>
      <style>{styles}</style>
      <div className="bg-cine-dark text-white min-h-screen">
        {/* Main Content */}
        <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
          {/* Page Header */}
          <div className="mb-8">
            <h2 className="serif-heading text-4xl text-white mb-2">Películas Argentinas</h2>
            <p className="text-gray-400">Explorá el catálogo completo del cine nacional</p>
          </div>

          {/* Filters and View Toggle */}
          <div className="glass-effect rounded-lg p-6 mb-8">
            <div className="flex flex-col lg:flex-row justify-between items-start lg:items-center gap-6">
              {/* Filters */}
              <div className="flex flex-wrap gap-3">
                <select className="bg-cine-dark border border-gray-600 rounded-lg px-4 py-2 text-sm focus:outline-none focus:border-cine-accent transition-colors text-white">
                  <option>Todos los géneros</option>
                  <option>Drama</option>
                  <option>Comedia</option>
                  <option>Thriller</option>
                  <option>Documental</option>
                  <option>Romance</option>
                  <option>Acción</option>
                </select>
                <select className="bg-cine-dark border border-gray-600 rounded-lg px-4 py-2 text-sm focus:outline-none focus:border-cine-accent transition-colors text-white">
                  <option>Todas las décadas</option>
                  <option>2020s</option>
                  <option>2010s</option>
                  <option>2000s</option>
                  <option>1990s</option>
                  <option>1980s</option>
                </select>
                <select className="bg-cine-dark border border-gray-600 rounded-lg px-4 py-2 text-sm focus:outline-none focus:border-cine-accent transition-colors text-white">
                  <option>Ordenar por: Más recientes</option>
                  <option>Título (A-Z)</option>
                  <option>Título (Z-A)</option>
                  <option>Año (Ascendente)</option>
                  <option>Año (Descendente)</option>
                  <option>Calificación</option>
                </select>
              </div>

              {/* View Toggle */}
              <div className="flex items-center bg-cine-dark rounded-lg p-1 border border-gray-600">
                <button 
                  onClick={() => setViewMode('compact')}
                  className={`px-4 py-2 text-sm font-medium rounded-md transition-all duration-200 ${
                    viewMode === 'compact' 
                      ? 'bg-cine-accent text-white' 
                      : 'text-gray-400 hover:text-white'
                  }`}
                >
                  Vista Compacta
                </button>
                <button 
                  onClick={() => setViewMode('detail')}
                  className={`px-4 py-2 text-sm font-medium rounded-md transition-all duration-200 ${
                    viewMode === 'detail' 
                      ? 'bg-cine-accent text-white' 
                      : 'text-gray-400 hover:text-white'
                  }`}
                >
                  Vista Detallada
                </button>
              </div>
            </div>
          </div>

          {/* Movies Display */}
          {viewMode === 'compact' ? (
            // Compact Grid View
            <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-6 mb-12">
              {getDisplayedMovies().map((movie, index) => (
                <div 
                  key={movie.id} 
                  className="group cursor-pointer animate-fade-in"
                  style={{animationDelay: `${index * 0.05}s`}}
                >
                  <div className="relative aspect-[2/3] rounded-lg overflow-hidden poster-shadow transform group-hover:scale-105 transition-transform duration-300">
                    <div className="movie-placeholder w-full h-full">
                      <svg className="w-16 h-16 text-cine-accent mb-4 opacity-60" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="1.5" d="M15.75 10.5l4.72-4.72a.75.75 0 011.28.53v11.38a.75.75 0 01-1.28.53l-4.72-4.72M4.5 18.75h9a2.25 2.25 0 002.25-2.25v-9a2.25 2.25 0 00-2.25-2.25h-9A2.25 2.25 0 002.25 7.5v9a2.25 2.25 0 002.25 2.25z"/>
                      </svg>
                      <p className="text-sm text-gray-400">Afiche</p>
                    </div>
                    <div className="absolute inset-0 bg-gradient-to-t from-black/80 via-black/0 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
                    {movie.rating && (
                      <div className="absolute top-2 right-2 bg-black/70 backdrop-blur-sm px-2 py-1 rounded-md flex items-center space-x-1 opacity-0 group-hover:opacity-100 transition-opacity duration-300">
                        <svg className="w-3 h-3 text-yellow-400 fill-current" viewBox="0 0 20 20">
                          <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"/>
                        </svg>
                        <span className="text-xs font-medium text-white">{movie.rating}</span>
                      </div>
                    )}
                  </div>
                  <div className="mt-3">
                    <h3 className="font-medium text-white line-clamp-1 group-hover:text-cine-accent transition-colors">{movie.title}</h3>
                    <p className="text-sm text-gray-400">{movie.director}</p>
                    <p className="text-sm text-gray-500">{movie.year}</p>
                  </div>
                </div>
              ))}
            </div>
          ) : (
            // Detail List View
            <div className="space-y-4 mb-12">
              {getDisplayedMovies().map((movie, index) => (
                <div 
                  key={movie.id} 
                  className="glass-effect rounded-lg p-6 hover:border-cine-accent border border-transparent transition-all duration-300 cursor-pointer animate-fade-in"
                  style={{animationDelay: `${index * 0.05}s`}}
                >
                  <div className="flex flex-col md:flex-row gap-6">
                    <div className="w-full md:w-32 flex-shrink-0">
                      <div className="aspect-[2/3] md:aspect-auto md:h-48 rounded-lg overflow-hidden">
                        <div className="placeholder-small w-full h-full">
                          <svg className="w-8 h-8 text-gray-500 mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="1.5" d="M15.75 10.5l4.72-4.72a.75.75 0 011.28.53v11.38a.75.75 0 01-1.28.53l-4.72-4.72M4.5 18.75h9a2.25 2.25 0 002.25-2.25v-9a2.25 2.25 0 00-2.25-2.25h-9A2.25 2.25 0 002.25 7.5v9a2.25 2.25 0 002.25 2.25z"/>
                          </svg>
                          <p className="text-xs text-gray-400 text-center">Sin imagen</p>
                        </div>
                      </div>
                    </div>
                    <div className="flex-1 space-y-3">
                      <div>
                        <div className="flex items-start justify-between">
                          <h3 className="text-xl font-medium text-white hover:text-cine-accent transition-colors">{movie.title}</h3>
                          {movie.rating && (
                            <div className="flex items-center space-x-1 bg-cine-dark px-2 py-1 rounded-md">
                              <svg className="w-4 h-4 text-yellow-400 fill-current" viewBox="0 0 20 20">
                                <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"/>
                              </svg>
                              <span className="text-sm font-medium text-yellow-400">{movie.rating}</span>
                            </div>
                          )}
                        </div>
                        <div className="flex flex-wrap gap-4 mt-2 text-sm text-gray-400">
                          <span className="flex items-center gap-1">
                            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                            </svg>
                            {movie.director}
                          </span>
                          <span className="flex items-center gap-1">
                            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                            </svg>
                            {movie.year}
                          </span>
                          <span className="flex items-center gap-1">
                            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M7 4v16M17 4v16M3 8h4m10 0h4M3 16h4m10 0h4"></path>
                            </svg>
                            {movie.genre}
                          </span>
                          <span className="flex items-center gap-1">
                            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                            </svg>
                            {movie.duration} min
                          </span>
                        </div>
                      </div>
                      <p className="text-gray-300 serif-body line-clamp-3">{movie.synopsis}</p>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}

          {/* Pagination */}
          <div className="flex flex-col sm:flex-row justify-between items-center gap-6">
            <p className="text-sm text-gray-400">
              Mostrando <span className="font-medium text-white">{(currentPage - 1) * itemsPerPage + 1}</span> a{' '}
              <span className="font-medium text-white">
                {Math.min(currentPage * itemsPerPage, totalMovies)}
              </span>{' '}
              de <span className="font-medium text-white">{totalMovies}</span> películas
            </p>
            <nav className="flex items-center space-x-2">
              <button 
                onClick={() => handlePageChange(currentPage - 1)}
                disabled={currentPage === 1}
                className="px-3 py-2 text-sm font-medium text-gray-400 bg-cine-gray border border-gray-700 rounded-lg hover:bg-cine-dark hover:border-cine-accent transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
              >
                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 19l-7-7 7-7"></path>
                </svg>
              </button>
              
              {renderPagination().map((page, index) => (
                <React.Fragment key={index}>
                  {page === '...' ? (
                    <span className="px-2 text-gray-500">...</span>
                  ) : (
                    <button
                      onClick={() => handlePageChange(page as number)}
                      className={`px-4 py-2 text-sm font-medium rounded-lg transition-colors ${
                        currentPage === page
                          ? 'text-white bg-cine-accent'
                          : 'text-gray-300 bg-cine-gray border border-gray-700 hover:bg-cine-dark hover:border-cine-accent'
                      }`}
                    >
                      {page}
                    </button>
                  )}
                </React.Fragment>
              ))}
              
              <button 
                onClick={() => handlePageChange(currentPage + 1)}
                disabled={currentPage === totalPages}
                className="px-3 py-2 text-sm font-medium text-gray-400 bg-cine-gray border border-gray-700 rounded-lg hover:bg-cine-dark hover:border-cine-accent transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
              >
                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 5l7 7-7 7"></path>
                </svg>
              </button>
            </nav>
          </div>
        </main>
      </div>
    </>
  );
}

// ==================================================
// src/app/listados/personas/page.tsx
// ==================================================
'use client';

import React, { useState, useEffect } from 'react';

export default function PeopleListPage() {
  const [viewMode, setViewMode] = useState('compact');
  const [currentPage, setCurrentPage] = useState(1);
  const [filterRole, setFilterRole] = useState('all');
  const itemsPerPage = 12;
  const totalPeople = 1243;
  const totalPages = Math.ceil(totalPeople / itemsPerPage);

  // Sample people data
  const people = [
    { 
      id: 1, 
      name: 'Ricardo Darín', 
      primaryRole: 'Actor',
      birthYear: 1957,
      birthPlace: 'Buenos Aires, Argentina',
      filmCount: 87,
      awards: 42,
      notableFilms: ['El Secreto de sus Ojos', 'Nueve Reinas', 'Un Cuento Chino', 'Relatos Salvajes'],
      bio: 'Uno de los actores más reconocidos del cine argentino, con una carrera que abarca más de cuatro décadas. Ganador de múltiples premios internacionales.',
      roles: ['Actor', 'Productor']
    },
    { 
      id: 2, 
      name: 'Juan José Campanella', 
      primaryRole: 'Director',
      birthYear: 1959,
      birthPlace: 'Buenos Aires, Argentina',
      filmCount: 15,
      awards: 28,
      notableFilms: ['El Secreto de sus Ojos', 'El Hijo de la Novia', 'Luna de Avellaneda', 'El Mismo Amor'],
      bio: 'Director y guionista argentino ganador del Oscar. Reconocido por su trabajo tanto en cine como en televisión internacional.',
      roles: ['Director', 'Guionista', 'Productor']
    },
    { 
      id: 3, 
      name: 'Norma Aleandro', 
      primaryRole: 'Actriz',
      birthYear: 1936,
      birthPlace: 'Buenos Aires, Argentina',
      filmCount: 62,
      awards: 35,
      notableFilms: ['La Historia Oficial', 'El Hijo de la Novia', 'Gaby: A True Story', 'Cama Adentro'],
      bio: 'Primera actriz argentina, ícono del cine y teatro nacional. Ganadora de múltiples premios internacionales incluyendo el premio a mejor actriz en Cannes.',
      roles: ['Actriz', 'Directora teatral']
    },
    { 
      id: 4, 
      name: 'Damián Szifron', 
      primaryRole: 'Director',
      birthYear: 1975,
      birthPlace: 'Ramos Mejía, Argentina',
      filmCount: 8,
      awards: 22,
      notableFilms: ['Relatos Salvajes', 'El Fondo del Mar', 'Tiempo de Valientes'],
      bio: 'Director, guionista y productor argentino. Creador de series exitosas y director del film más taquillero del cine argentino.',
      roles: ['Director', 'Guionista', 'Productor']
    },
    { 
      id: 5, 
      name: 'Érica Rivas', 
      primaryRole: 'Actriz',
      birthYear: 1974,
      birthPlace: 'Buenos Aires, Argentina',
      filmCount: 34,
      awards: 18,
      notableFilms: ['Relatos Salvajes', 'La Señal', 'Elena Sabe', 'Los Marziano'],
      bio: 'Actriz argentina de cine, teatro y televisión. Reconocida por su versatilidad y compromiso con cada personaje.',
      roles: ['Actriz', 'Cantante']
    },
    { 
      id: 6, 
      name: 'Fabián Bielinsky', 
      primaryRole: 'Director',
      birthYear: 1959,
      birthPlace: 'Buenos Aires, Argentina',
      deathYear: 2006,
      filmCount: 3,
      awards: 15,
      notableFilms: ['Nueve Reinas', 'El Aura'],
      bio: 'Director y guionista argentino cuya breve pero brillante carrera dejó una marca indeleble en el cine nacional.',
      roles: ['Director', 'Guionista']
    },
    { 
      id: 7, 
      name: 'Cecilia Roth', 
      primaryRole: 'Actriz',
      birthYear: 1956,
      birthPlace: 'Buenos Aires, Argentina',
      filmCount: 73,
      awards: 31,
      notableFilms: ['Todo sobre mi madre', 'Martín (Hache)', 'El Lado Oscuro del Corazón', 'Kamchatka'],
      bio: 'Actriz argentina-española con una destacada carrera internacional. Musa de Pedro Almodóvar y figura clave del cine argentino.',
      roles: ['Actriz']
    },
    { 
      id: 8, 
      name: 'Gustavo Santaolalla', 
      primaryRole: 'Compositor',
      birthYear: 1951,
      birthPlace: 'El Palomar, Argentina',
      filmCount: 45,
      awards: 38,
      notableFilms: ['Relatos Salvajes', 'Diarios de Motocicleta', 'Brokeback Mountain', 'Babel'],
      bio: 'Músico, compositor y productor argentino. Doble ganador del Oscar por mejor banda sonora original.',
      roles: ['Compositor', 'Músico', 'Productor']
    },
    { 
      id: 9, 
      name: 'Mercedes Morán', 
      primaryRole: 'Actriz',
      birthYear: 1955,
      birthPlace: 'Concarán, San Luis, Argentina',
      filmCount: 48,
      awards: 25,
      notableFilms: ['La Ciénaga', 'Diarios de Motocicleta', 'Neruda', 'El Reino'],
      bio: 'Actriz argentina reconocida por su trabajo con directores como Lucrecia Martel y Pablo Trapero. Una de las actrices más respetadas del cine latinoamericano.',
      roles: ['Actriz', 'Productora']
    },
    { 
      id: 10, 
      name: 'Leonardo Sbaraglia', 
      primaryRole: 'Actor',
      birthYear: 1970,
      birthPlace: 'Buenos Aires, Argentina',
      filmCount: 56,
      awards: 29,
      notableFilms: ['Relatos Salvajes', 'Plata Quemada', 'Intacto', 'El Secreto de sus Ojos'],
      bio: 'Actor argentino con una sólida carrera internacional. Reconocido por su carisma y versatilidad en géneros diversos.',
      roles: ['Actor']
    },
    { 
      id: 11, 
      name: 'Lucrecia Martel', 
      primaryRole: 'Directora',
      birthYear: 1966,
      birthPlace: 'Salta, Argentina',
      filmCount: 6,
      awards: 42,
      notableFilms: ['La Ciénaga', 'La Niña Santa', 'La Mujer sin Cabeza', 'Zama'],
      bio: 'Directora y guionista argentina, una de las voces más importantes del nuevo cine argentino. Su obra es estudiada en universidades de todo el mundo.',
      roles: ['Directora', 'Guionista']
    },
    { 
      id: 12, 
      name: 'Diego Peretti', 
      primaryRole: 'Actor',
      birthYear: 1963,
      birthPlace: 'Buenos Aires, Argentina',
      filmCount: 41,
      awards: 19,
      notableFilms: ['Tiempo de Valientes', 'No Sos Vos, Soy Yo', 'Los Simuladores', 'El Robo del Siglo'],
      bio: 'Actor y psiquiatra argentino. Conocido por su trabajo en comedia y su capacidad para crear personajes memorables.',
      roles: ['Actor', 'Guionista']
    }
  ];

  const getDisplayedPeople = () => {
    let filteredPeople = people;
    
    if (filterRole !== 'all') {
      filteredPeople = people.filter(person => 
        person.roles.some(role => role.toLowerCase() === filterRole.toLowerCase())
      );
    }
    
    const start = (currentPage - 1) * itemsPerPage;
    const end = start + itemsPerPage;
    return filteredPeople.slice(start, end);
  };

  const handlePageChange = (page: number) => {
    setCurrentPage(page);
    window.scrollTo(0, 0);
  };

  const renderPagination = () => {
    const pages = [];
    const maxVisible = 5;
    
    if (totalPages <= maxVisible) {
      for (let i = 1; i <= totalPages; i++) {
        pages.push(i);
      }
    } else {
      if (currentPage <= 3) {
        pages.push(1, 2, 3, '...', totalPages - 1, totalPages);
      } else if (currentPage >= totalPages - 2) {
        pages.push(1, 2, '...', totalPages - 2, totalPages - 1, totalPages);
      } else {
        pages.push(1, '...', currentPage - 1, currentPage, currentPage + 1, '...', totalPages);
      }
    }
    
    return pages;
  };

  // Add styles
  const styles = `
    @import url('https://fonts.googleapis.com/css2?family=Crimson+Text:ital,wght@0,400;0,600;1,400&family=Inter:wght@300;400;500;600&display=swap');
    
    body {
      font-family: 'Inter', system-ui, sans-serif;
      font-weight: 300;
      letter-spacing: -0.01em;
      background-color: #0f1419;
      color: white;
    }
    
    .serif-heading {
      font-family: 'Crimson Text', Georgia, serif;
      font-weight: 600;
      letter-spacing: -0.02em;
    }
    
    .serif-body {
      font-family: 'Crimson Text', Georgia, serif;
      font-weight: 400;
      line-height: 1.7;
    }
    
    .poster-shadow {
      box-shadow: 0 20px 40px rgba(0,0,0,0.4);
    }
    
    .glass-effect {
      backdrop-filter: blur(10px);
      background: rgba(42, 42, 42, 0.8);
    }
    
    .gradient-text {
      background: linear-gradient(135deg, #3b82f6, #60a5fa);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
    }
    
    .person-placeholder {
      background: linear-gradient(135deg, #1a2332, #0f1419);
      border: 1px solid #374151;
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      text-align: center;
      position: relative;
      overflow: hidden;
    }
    
    .person-placeholder::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: linear-gradient(45deg, transparent 30%, rgba(59, 130, 246, 0.1) 50%, transparent 70%);
      animation: shimmer 2s infinite;
    }
    
    .animate-fade-in {
      animation: fadeIn 0.5s ease-in-out;
    }
    
    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(10px); }
      to { opacity: 1; transform: translateY(0); }
    }
    
    @keyframes shimmer {
      0% { transform: translateX(-100%); }
      100% { transform: translateX(100%); }
    }
    
    .bg-cine-dark { background-color: #0f1419; }
    .bg-cine-gray { background-color: #1a2332; }
    .text-cine-accent { color: #3b82f6; }
    .bg-cine-accent { background-color: #3b82f6; }
    .border-cine-accent { border-color: #3b82f6; }
    .hover\\:bg-cine-accent:hover { background-color: #3b82f6; }
    .hover\\:text-cine-accent:hover { color: #3b82f6; }
    .hover\\:border-cine-accent:hover { border-color: #3b82f6; }
    
    .role-badge {
      display: inline-flex;
      align-items: center;
      padding: 0.125rem 0.5rem;
      font-size: 0.75rem;
      font-weight: 500;
      border-radius: 9999px;
      background-color: rgba(59, 130, 246, 0.1);
      color: #60a5fa;
      border: 1px solid rgba(59, 130, 246, 0.2);
    }
  `;

  return (
    <>
      <style>{styles}</style>
      <div className="bg-cine-dark text-white min-h-screen">
        {/* Main Content */}
        <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
          {/* Page Header */}
          <div className="mb-8">
            <h2 className="serif-heading text-4xl text-white mb-2">Personas del Cine Argentino</h2>
            <p className="text-gray-400">Directores, actores, guionistas y técnicos que construyen nuestra industria</p>
          </div>

          {/* Filters and View Toggle */}
          <div className="glass-effect rounded-lg p-6 mb-8">
            <div className="flex flex-col lg:flex-row justify-between items-start lg:items-center gap-6">
              {/* Filters */}
              <div className="flex flex-wrap gap-3">
                <select 
                  value={filterRole}
                  onChange={(e) => setFilterRole(e.target.value)}
                  className="bg-cine-dark border border-gray-600 rounded-lg px-4 py-2 text-sm focus:outline-none focus:border-cine-accent transition-colors text-white"
                >
                  <option value="all">Todos los roles</option>
                  <option value="actor">Actores</option>
                  <option value="actriz">Actrices</option>
                  <option value="director">Directores</option>
                  <option value="guionista">Guionistas</option>
                  <option value="productor">Productores</option>
                  <option value="compositor">Compositores</option>
                </select>
                <select className="bg-cine-dark border border-gray-600 rounded-lg px-4 py-2 text-sm focus:outline-none focus:border-cine-accent transition-colors text-white">
                  <option>Ordenar por: Nombre (A-Z)</option>
                  <option>Nombre (Z-A)</option>
                  <option>Más películas</option>
                  <option>Más premios</option>
                  <option>Más reciente</option>
                </select>
                <select className="bg-cine-dark border border-gray-600 rounded-lg px-4 py-2 text-sm focus:outline-none focus:border-cine-accent transition-colors text-white">
                  <option>Todas las décadas</option>
                  <option>Activos en 2020s</option>
                  <option>Activos en 2010s</option>
                  <option>Activos en 2000s</option>
                  <option>Activos en 1990s</option>
                </select>
              </div>

              {/* View Toggle */}
              <div className="flex items-center bg-cine-dark rounded-lg p-1 border border-gray-600">
                <button 
                  onClick={() => setViewMode('compact')}
                  className={`px-4 py-2 text-sm font-medium rounded-md transition-all duration-200 ${
                    viewMode === 'compact' 
                      ? 'bg-cine-accent text-white' 
                      : 'text-gray-400 hover:text-white'
                  }`}
                >
                  Vista Compacta
                </button>
                <button 
                  onClick={() => setViewMode('detail')}
                  className={`px-4 py-2 text-sm font-medium rounded-md transition-all duration-200 ${
                    viewMode === 'detail' 
                      ? 'bg-cine-accent text-white' 
                      : 'text-gray-400 hover:text-white'
                  }`}
                >
                  Vista Detallada
                </button>
              </div>
            </div>
          </div>

          {/* People Display */}
          {viewMode === 'compact' ? (
            // Compact Grid View
            <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-6 gap-6 mb-12">
              {getDisplayedPeople().map((person, index) => (
                <div 
                  key={person.id} 
                  className="group cursor-pointer animate-fade-in text-center"
                  style={{animationDelay: `${index * 0.05}s`}}
                >
                  <div className="relative mb-3">
                    <div className="w-32 h-32 mx-auto rounded-full overflow-hidden transform group-hover:scale-105 transition-transform duration-300">
                      <div className="person-placeholder w-full h-full">
                        <svg className="w-12 h-12 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="1.5" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"/>
                        </svg>
                      </div>
                    </div>
                    {person.deathYear && (
                      <div className="absolute top-0 right-0 bg-black/70 text-white text-xs px-2 py-1 rounded-full">
                        {person.birthYear}-{person.deathYear}
                      </div>
                    )}
                  </div>
                  <div>
                    <h3 className="font-medium text-white line-clamp-1 group-hover:text-cine-accent transition-colors">{person.name}</h3>
                    <p className="text-sm text-gray-400">{person.primaryRole}</p>
                    <div className="flex items-center justify-center gap-2 mt-2 text-xs text-gray-500">
                      <span className="flex items-center gap-1">
                        <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M7 4v16M17 4v16M3 8h4m10 0h4M3 16h4m10 0h4"></path>
                        </svg>
                        {person.filmCount}
                      </span>
                      <span className="flex items-center gap-1">
                        <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M5 3v4M3 5h4M6 17v4m-2-2h4m5-16l2.286 6.857L21 12l-5.714 2.143L13 21l-2.286-6.857L5 12l5.714-2.143L13 3z"></path>
                        </svg>
                        {person.awards}
                      </span>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          ) : (
            // Detail List View
            <div className="space-y-4 mb-12">
              {getDisplayedPeople().map((person, index) => (
                <div 
                  key={person.id} 
                  className="glass-effect rounded-lg p-6 hover:border-cine-accent border border-transparent transition-all duration-300 cursor-pointer animate-fade-in"
                  style={{animationDelay: `${index * 0.05}s`}}
                >
                  <div className="flex flex-col md:flex-row gap-6">
                    <div className="w-full md:w-32 flex-shrink-0">
                      <div className="w-32 h-32 mx-auto md:mx-0 rounded-full overflow-hidden">
                        <div className="person-placeholder w-full h-full">
                          <svg className="w-12 h-12 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="1.5" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"/>
                          </svg>
                        </div>
                      </div>
                    </div>
                    <div className="flex-1 space-y-3">
                      <div>
                        <div className="flex items-start justify-between mb-2">
                          <div>
                            <h3 className="text-xl font-medium text-white hover:text-cine-accent transition-colors inline-block">{person.name}</h3>
                            <div className="flex flex-wrap gap-2 mt-1">
                              {person.roles.map((role, idx) => (
                                <span key={idx} className="role-badge">{role}</span>
                              ))}
                            </div>
                          </div>
                          <div className="flex items-center gap-4 text-sm text-gray-400">
                            <span className="flex items-center gap-1">
                              <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M7 4v16M17 4v16M3 8h4m10 0h4M3 16h4m10 0h4"></path>
                              </svg>
                              {person.filmCount} películas
                            </span>
                            <span className="flex items-center gap-1">
                              <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M5 3v4M3 5h4M6 17v4m-2-2h4m5-16l2.286 6.857L21 12l-5.714 2.143L13 21l-2.286-6.857L5 12l5.714-2.143L13 3z"></path>
                              </svg>
                              {person.awards} premios
                            </span>
                          </div>
                        </div>
                        <div className="flex flex-wrap gap-4 text-sm text-gray-400">
                          <span className="flex items-center gap-1">
                            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                            </svg>
                            {person.birthYear}{person.deathYear && ` - ${person.deathYear}`}
                          </span>
                          <span className="flex items-center gap-1">
                            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path>
                            </svg>
                            {person.birthPlace}
                          </span>
                        </div>
                      </div>
                      <p className="text-gray-300 serif-body">{person.bio}</p>
                      <div>
                        <h4 className="text-sm font-medium text-cine-accent mb-2">Películas destacadas:</h4>
                        <div className="flex flex-wrap gap-2">
                          {person.notableFilms.slice(0, 4).map((film, idx) => (
                            <span key={idx} className="text-sm bg-cine-dark px-3 py-1 rounded-full text-gray-300 hover:text-white hover:bg-cine-gray transition-colors cursor-pointer">
                              {film}
                            </span>
                          ))}
                          {person.notableFilms.length > 4 && (
                            <span className="text-sm text-gray-500">
                              +{person.notableFilms.length - 4} más
                            </span>
                          )}
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}

          {/* Pagination */}
          <div className="flex flex-col sm:flex-row justify-between items-center gap-6">
            <p className="text-sm text-gray-400">
              Mostrando <span className="font-medium text-white">{(currentPage - 1) * itemsPerPage + 1}</span> a{' '}
              <span className="font-medium text-white">
                {Math.min(currentPage * itemsPerPage, totalPeople)}
              </span>{' '}
              de <span className="font-medium text-white">{totalPeople}</span> personas
            </p>
            <nav className="flex items-center space-x-2">
              <button 
                onClick={() => handlePageChange(currentPage - 1)}
                disabled={currentPage === 1}
                className="px-3 py-2 text-sm font-medium text-gray-400 bg-cine-gray border border-gray-700 rounded-lg hover:bg-cine-dark hover:border-cine-accent transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
              >
                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 19l-7-7 7-7"></path>
                </svg>
              </button>
              
              {renderPagination().map((page, index) => (
                <React.Fragment key={index}>
                  {page === '...' ? (
                    <span className="px-2 text-gray-500">...</span>
                  ) : (
                    <button
                      onClick={() => handlePageChange(page as number)}
                      className={`px-4 py-2 text-sm font-medium rounded-lg transition-colors ${
                        currentPage === page
                          ? 'text-white bg-cine-accent'
                          : 'text-gray-300 bg-cine-gray border border-gray-700 hover:bg-cine-dark hover:border-cine-accent'
                      }`}
                    >
                      {page}
                    </button>
                  )}
                </React.Fragment>
              ))}
              
              <button 
                onClick={() => handlePageChange(currentPage + 1)}
                disabled={currentPage === totalPages}
                className="px-3 py-2 text-sm font-medium text-gray-400 bg-cine-gray border border-gray-700 rounded-lg hover:bg-cine-dark hover:border-cine-accent transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
              >
                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 5l7 7-7 7"></path>
                </svg>
              </button>
            </nav>
          </div>
        </main>
      </div>
    </>
  );
}

// ==================================================
// src/app/page.tsx
// ==================================================
'use client';

import { useState, useEffect } from 'react';
import Link from 'next/link';

export default function HomePage() {
  // Películas para el hero rotativo
  const peliculasHero = [
    { id: 1, titulo: "El Secreto de Sus Ojos", año: "2009", genero: "Drama, Thriller", director: "Juan José Campanella", imagen: "https://images.unsplash.com/photo-1518998053901-5348d3961a04?w=1024&fit=crop&auto=format" },
    { id: 2, titulo: "Relatos Salvajes", año: "2014", genero: "Comedia negra", director: "Damián Szifron", imagen: "https://images.unsplash.com/photo-1507003211169-0a1dd7506d40?w=1024&fit=crop&auto=format" },
    { id: 3, titulo: "Argentina, 1985", año: "2022", genero: "Drama histórico", director: "Santiago Mitre", imagen: "https://images.unsplash.com/photo-1519225421980-715cb0215aed?w=1024&fit=crop&auto=format" },
    { id: 4, titulo: "La Ciénaga", año: "2001", genero: "Drama", director: "Lucrecia Martel", imagen: "https://images.unsplash.com/photo-1489599328131-cdd7553e2ad1?w=1024&fit=crop&auto=format" },
    { id: 5, titulo: "Nueve Reinas", año: "2000", genero: "Thriller", director: "Fabián Bielinsky", imagen: "https://images.unsplash.com/photo-1556388158-158ea5ccacbd?w=1024&fit=crop&auto=format" },
  ];

  const [peliculaHeroIndex, setPeliculaHeroIndex] = useState(0);

  // Datos de ejemplo - en producción vendrían de tu API/DB
  const ultimosEstrenos = [
    { id: 1, titulo: "Argentina, 1985", fechaEstreno: "13 de octubre", director: "Santiago Mitre", genero: "Drama histórico" },
    { id: 2, titulo: "El Empleado y el Patrón", fechaEstreno: "28 de abril", director: "Manuel Nieto Zas", genero: "Drama" },
    { id: 3, titulo: "La Odisea de los Giles", fechaEstreno: "15 de agosto", director: "Sebastián Borensztein", genero: "Comedia dramática" },
    { id: 4, titulo: "El Ángel", fechaEstreno: "9 de agosto", director: "Luis Ortega", genero: "Drama criminal" },
    { id: 5, titulo: "Relatos Salvajes", fechaEstreno: "21 de agosto", director: "Damián Szifron", genero: "Comedia negra" },
    { id: 6, titulo: "Elsa y Fred", fechaEstreno: "26 de mayo", director: "Marcos Carnevale", genero: "Romance" },
  ];

  const proximosEstrenos = [
    { id: 1, titulo: "Título de la Película", fecha: "15 de julio", director: "Director Nombre", genero: "Drama" },
    { id: 2, titulo: "Otra Película", fecha: "22 de julio", director: "Otro Director", genero: "Comedia" },
    { id: 3, titulo: "Película Esperada", fecha: "5 de agosto", director: "Director Conocido", genero: "Thriller" },
    { id: 4, titulo: "Film Independiente", fecha: "12 de agosto", director: "Director Emergente", genero: "Drama social" },
    { id: 5, titulo: "Película de Acción", fecha: "19 de agosto", director: "Director Acción", genero: "Acción" },
    { id: 6, titulo: "Documental", fecha: "26 de agosto", director: "Documentalista", genero: "Documental" },
  ];

  const obituarios = [
    { id: 1, nombre: "Luis Brandoni", rol: "Actor", edad: "85 años", fecha: "5 de junio", imagen: "/images/persons/luis-brandoni.jpg" },
    { id: 2, nombre: "María Vaner", rol: "Actriz", edad: "90 años", fecha: "28 de mayo", imagen: "/images/persons/maria-vaner.jpg" },
  ];

  const efemerides = [
    { hace: "Hace 40 años", evento: 'se estrenaba "Camila" de María Luisa Bemberg', tipo: "pelicula", imagen: "/images/movies/camila.jpg" },
    { hace: "Hace 50 años", evento: "nacía el director Juan José Campanella", tipo: "persona", imagen: "/images/persons/juan-jose-campanella.jpg" },
  ];

  const ultimasPeliculas = [
    { id: 1, titulo: "La Ciénaga" },
    { id: 2, titulo: "El Aura" },
    { id: 3, titulo: "XXY" },
    { id: 4, titulo: "Historias Mínimas" },
    { id: 5, titulo: "Pizza, Birra, Faso" },
    { id: 6, titulo: "Mundo Grúa" },
    { id: 7, titulo: "Bolivia" },
    { id: 8, titulo: "Los Rubios" },
  ];

  const ultimasPersonas = [
    { id: 1, nombre: "Ricardo Darín", rol: "Actor" },
    { id: 2, nombre: "Lucrecia Martel", rol: "Directora" },
    { id: 3, nombre: "Guillermo Francella", rol: "Actor" },
    { id: 4, nombre: "Cecilia Roth", rol: "Actriz" },
    { id: 5, nombre: "Pablo Trapero", rol: "Director" },
    { id: 6, nombre: "Érica Rivas", rol: "Actriz" },
  ];

  // Ajustar gradientes al tamaño real de la imagen
  useEffect(() => {
    const adjustGradients = () => {
      const img = document.querySelector('.hero-image') as HTMLImageElement;
      const container = document.querySelector('.hero-image-wrapper') as HTMLElement;
      const gradientsContainer = document.querySelector('.hero-gradients-container') as HTMLElement;
      
      if (img && container && gradientsContainer && img.complete) {
        const containerWidth = container.offsetWidth;
        const containerHeight = container.offsetHeight;
        const imgAspectRatio = img.naturalWidth / img.naturalHeight;
        const containerAspectRatio = containerWidth / containerHeight;
        
        let displayWidth, displayHeight;
        
        if (imgAspectRatio > containerAspectRatio) {
          // Imagen más ancha - se ajusta por ancho
          displayWidth = containerWidth;
          displayHeight = containerWidth / imgAspectRatio;
        } else {
          // Imagen más alta - se ajusta por altura
          displayHeight = containerHeight;
          displayWidth = containerHeight * imgAspectRatio;
        }
        
        // Centrar y ajustar el contenedor de gradientes
        gradientsContainer.style.width = `${displayWidth}px`;
        gradientsContainer.style.height = `${displayHeight}px`;
        gradientsContainer.style.left = `${(containerWidth - displayWidth) / 2}px`;
        gradientsContainer.style.top = `${(containerHeight - displayHeight) / 2}px`;
      }
    };

    // Ajustar cuando la imagen cambie
    const img = document.querySelector('.hero-image') as HTMLImageElement;
    if (img) {
      img.addEventListener('load', adjustGradients);
      // También ajustar al cambiar el tamaño de la ventana
      window.addEventListener('resize', adjustGradients);
      
      // Ajustar inmediatamente si la imagen ya está cargada
      if (img.complete) {
        adjustGradients();
      }
    }

    return () => {
      if (img) {
        img.removeEventListener('load', adjustGradients);
      }
      window.removeEventListener('resize', adjustGradients);
    };
  }, []);

  // Cambiar imagen cada 8 segundos
  useEffect(() => {
    const imageUrls = peliculasHero.map(p => p.imagen);
    if (imageUrls.length > 0) {
      const interval = setInterval(() => {
        const randomIndex = Math.floor(Math.random() * imageUrls.length);
        const heroElement = document.querySelector('.hero-image');
        if (heroElement) {
          (heroElement as HTMLImageElement).src = imageUrls[randomIndex];
        }
      }, 8000);
      return () => clearInterval(interval);
    }
  }, [peliculasHero]);

  const peliculaHeroActual = peliculasHero[peliculaHeroIndex];

  return (
    <div className="bg-cine-dark text-white min-h-screen">
      {/* Movie Hero Background - idéntico al componente MovieHero pero sin contenido */}
      <div className="relative hero-background-container -mt-16 pt-16">
        {/* Wrapper de imagen con gradientes */}
        <div className="hero-image-wrapper">
          {peliculaHeroActual && (
            <>
              <img 
                src={peliculaHeroActual.imagen}
                alt="Imagen destacada del cine argentino"
                className="hero-image"
              />
              {/* Contenedor de gradientes que se ajusta a la imagen */}
              <div className="hero-gradients-container">
                <div className="hero-gradient-left"></div>
                <div className="hero-gradient-right"></div>
                <div className="hero-gradient-top"></div>
                <div className="hero-gradient-bottom-inner"></div>
                
                {/* Epígrafe con título y año - dentro del contenedor de gradientes */}
                <div className="absolute bottom-4 right-4 z-20">
                  <p className="text-xs text-gray-400 drop-shadow-lg">
                    {peliculaHeroActual.titulo} ({peliculaHeroActual.año})
                  </p>
                </div>
              </div>
            </>
          )}
        </div>
        
        {/* Gradientes globales del contenedor */}
        <div className="hero-gradient-bottom"></div>
        <div className="hero-vignette"></div>
      </div>

      {/* Main Content */}
      <div className="bg-cine-dark">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
          
          {/* Últimos Estrenos */}
          <section className="mb-12">
            <h2 className="serif-heading text-3xl mb-6 text-white">Últimos Estrenos</h2>
            <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-4">
              {ultimosEstrenos.map((pelicula) => (
                <Link
                  key={pelicula.id}
                  href={`/pelicula/${pelicula.id}`}
                  className="group cursor-pointer"
                >
                  <div className="aspect-[2/3] rounded-lg overflow-hidden mb-2 transform group-hover:scale-105 transition-transform poster-shadow relative">
                    <div className="movie-placeholder w-full h-full">
                      <svg className="w-12 h-12 text-cine-accent mb-2 opacity-60" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="1.5" d="M15.75 10.5l4.72-4.72a.75.75 0 011.28.53v11.38a.75.75 0 01-1.28.53l-4.72-4.72M4.5 18.75h9a2.25 2.25 0 002.25-2.25v-9a2.25 2.25 0 00-2.25-2.25h-9A2.25 2.25 0 002.25 7.5v9a2.25 2.25 0 002.25 2.25z"/>
                      </svg>
                      <p className="text-xs text-gray-400">Afiche</p>
                    </div>
                    {/* Badge de fecha sobre el afiche */}
                    <div className="absolute top-2 right-2 bg-black/80 backdrop-blur-sm px-2 py-1 rounded text-xs text-white">
                      {pelicula.fechaEstreno}
                    </div>
                  </div>
                  <h3 className="font-medium text-sm text-white line-clamp-2">{pelicula.titulo}</h3>
                  <p className="text-gray-400 text-xs">{pelicula.genero}</p>
                  <p className="text-gray-400 text-xs">Dir: {pelicula.director}</p>
                </Link>
              ))}
            </div>
            
            {/* Botón Ver Más */}
            <div className="mt-6 text-center">
              <Link 
                href="/estrenos" 
                className="inline-block border border-cine-accent text-cine-accent hover:bg-cine-accent hover:text-white px-6 py-2 rounded-lg font-medium transition-colors"
              >
                Ver más estrenos
              </Link>
            </div>
          </section>

          {/* Próximos Estrenos */}
          <section className="mb-12">
            <h2 className="serif-heading text-3xl mb-6 text-white">Próximos Estrenos</h2>
            <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-4">
              {proximosEstrenos.map((pelicula) => (
                <Link
                  key={pelicula.id}
                  href={`/pelicula/${pelicula.id}`}
                  className="group cursor-pointer"
                >
                  <div className="aspect-[2/3] rounded-lg overflow-hidden mb-2 transform group-hover:scale-105 transition-transform poster-shadow relative">
                    <div className="movie-placeholder w-full h-full">
                      <svg className="w-12 h-12 text-cine-accent mb-2 opacity-60" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="1.5" d="M15.75 10.5l4.72-4.72a.75.75 0 011.28.53v11.38a.75.75 0 01-1.28.53l-4.72-4.72M4.5 18.75h9a2.25 2.25 0 002.25-2.25v-9a2.25 2.25 0 00-2.25-2.25h-9A2.25 2.25 0 002.25 7.5v9a2.25 2.25 0 002.25 2.25z"/>
                      </svg>
                      <p className="text-xs text-gray-400">Afiche</p>
                    </div>
                    {/* Badge de fecha sobre el afiche */}
                    <div className="absolute top-2 right-2 bg-black/80 backdrop-blur-sm px-2 py-1 rounded text-xs text-white">
                      {pelicula.fecha}
                    </div>
                  </div>
                  <h3 className="font-medium text-sm text-white line-clamp-2">{pelicula.titulo}</h3>
                  <p className="text-gray-400 text-xs">{pelicula.genero}</p>
                  <p className="text-gray-400 text-xs">Dir: {pelicula.director}</p>
                </Link>
              ))}
            </div>
            
            {/* Botón Ver Más */}
            <div className="mt-6 text-center">
              <Link 
                href="/proximos-estrenos" 
                className="inline-block border border-cine-accent text-cine-accent hover:bg-cine-accent hover:text-white px-6 py-2 rounded-lg font-medium transition-colors"
              >
                Ver más próximos estrenos
              </Link>
            </div>
          </section>

          {/* Grid Layout para Obituarios y Efemérides */}
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-12">
            {/* Obituarios */}
            <section>
              <h2 className="serif-heading text-3xl mb-6 text-white">Obituarios</h2>
              <div className="glass-effect rounded-lg p-6">
                <div className="space-y-4">
                  {obituarios.map((persona) => (
                    <div key={persona.id} className="flex items-center space-x-4 pb-4 border-b border-gray-700 last:border-0 last:pb-0">
                      <div className="w-24 h-24 rounded-full flex-shrink-0 person-placeholder">
                        <svg className="w-12 h-12 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="1.5" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"/>
                        </svg>
                      </div>
                      <div className="flex-1">
                        <h3 className="font-medium text-white text-lg">{persona.nombre}</h3>
                        <p className="text-sm text-gray-400">{persona.rol} • {persona.edad}</p>
                        <p className="text-sm text-gray-500">{persona.fecha}</p>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
              {/* Botón Ver Más */}
              <div className="mt-6 text-center">
                <Link 
                  href="/obituarios" 
                  className="inline-block border border-cine-accent text-cine-accent hover:bg-cine-accent hover:text-white px-6 py-2 rounded-lg font-medium transition-colors"
                >
                  Ver más obituarios
                </Link>
              </div>
            </section>

            {/* Efemérides */}
            <section>
              <h2 className="serif-heading text-3xl mb-6 text-white">Efemérides del Día</h2>
              <div className="glass-effect rounded-lg p-6">
                <div className="space-y-4">
                  {efemerides.map((item, index) => (
                    <div key={index} className="flex items-center space-x-4 pb-4 border-b border-gray-700 last:border-0 last:pb-0">
                      {/* Contenedor de imagen con ancho fijo para alineación */}
                      <div className="w-24 h-24 flex items-center justify-center flex-shrink-0">
                        {item.tipo === "pelicula" ? (
                          <div className="w-16 h-24 rounded movie-placeholder">
                            <svg className="w-8 h-8 text-cine-accent opacity-60" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="1.5" d="M15.75 10.5l4.72-4.72a.75.75 0 011.28.53v11.38a.75.75 0 01-1.28.53l-4.72-4.72M4.5 18.75h9a2.25 2.25 0 002.25-2.25v-9a2.25 2.25 0 00-2.25-2.25h-9A2.25 2.25 0 002.25 7.5v9a2.25 2.25 0 002.25 2.25z"/>
                            </svg>
                          </div>
                        ) : (
                          <div className="w-24 h-24 rounded-full person-placeholder">
                            <svg className="w-12 h-12 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="1.5" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"/>
                            </svg>
                          </div>
                        )}
                      </div>
                      <div className="flex-1">
                        <h3 className="font-medium text-cine-accent text-lg">{item.hace}</h3>
                        <p className="text-sm mt-1 text-gray-300">... {item.evento}</p>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
              {/* Botón Ver Más */}
              <div className="mt-6 text-center">
                <Link 
                  href="/efemerides" 
                  className="inline-block border border-cine-accent text-cine-accent hover:bg-cine-accent hover:text-white px-6 py-2 rounded-lg font-medium transition-colors"
                >
                  Ver más efemérides
                </Link>
              </div>
            </section>
          </div>

          {/* Últimas Películas Ingresadas */}
          <section className="mb-12">
            <h2 className="serif-heading text-3xl mb-6 text-white">Últimas Películas Ingresadas</h2>
            <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-8 gap-3">
              {ultimasPeliculas.map((pelicula) => (
                <Link 
                  key={pelicula.id} 
                  href={`/pelicula/${pelicula.id}`} 
                  className="group cursor-pointer"
                >
                  <div className="aspect-[2/3] rounded overflow-hidden mb-1 transform group-hover:scale-105 transition-transform">
                    <div className="placeholder-small w-full h-full">
                      <svg className="w-6 h-6 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="1.5" d="M15.75 10.5l4.72-4.72a.75.75 0 011.28.53v11.38a.75.75 0 01-1.28.53l-4.72-4.72M4.5 18.75h9a2.25 2.25 0 002.25-2.25v-9a2.25 2.25 0 00-2.25-2.25h-9A2.25 2.25 0 002.25 7.5v9a2.25 2.25 0 002.25 2.25z"/>
                      </svg>
                    </div>
                  </div>
                  <h3 className="text-xs font-medium text-white truncate">{pelicula.titulo}</h3>
                </Link>
              ))}
            </div>
          </section>

          {/* Últimas Personas Ingresadas */}
          <section className="mb-12">
            <h2 className="serif-heading text-3xl mb-6 text-white">Últimas Personas Ingresadas</h2>
            <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-4">
              {ultimasPersonas.map((persona) => (
                <Link
                  key={persona.id}
                  href={`/persona/${persona.id}`}
                  className="text-center cursor-pointer group"
                >
                  <div className="w-24 h-24 mx-auto rounded-full overflow-hidden mb-2 person-placeholder">
                    <svg className="w-12 h-12 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="1.5" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"/>
                    </svg>
                  </div>
                  <h3 className="text-sm font-medium text-white group-hover:text-cine-accent transition-colors">{persona.nombre}</h3>
                  <p className="text-xs text-gray-400">{persona.rol}</p>
                </Link>
              ))}
            </div>
          </section>
        </div>
      </div>
    </div>
  );
}

// ==================================================
// src/app/peliculas/[slug]/page.tsx
// ==================================================
'use client';

import { useState, useEffect } from 'react';
import { TrailerSection } from "@/components/movies/TrailerSection";
import { MovieHero } from "@/components/movies/MovieHero";
import { CastSection } from "@/components/movies/CastSection";
import { CrewSection } from "@/components/movies/CrewSection";
import { MoviePoster } from "@/components/movies/MoviePoster";
import { MovieInfo } from "@/components/movies/MovieInfo";
import { MovieSidebar } from "@/components/movies/MovieSidebar";
import { ImageGallery } from "@/components/movies/ImageGallery";
import { SimilarMovies } from "@/components/movies/SimilarMovies";
import Head from 'next/head';

export default function MoviePage() {
  const [movieGallery, setMovieGallery] = useState<string[]>([]);
  const currentMovieId = 'relatos-salvajes';

  // Función para cargar imágenes desde la API
  const loadMovieImages = async (movieId: string) => {
    console.log(`🔍 Intentando cargar imágenes para: ${movieId}`);

    try {
      const response = await fetch(`/api/images/${movieId}`);
      console.log(`📡 Respuesta de la API:`, response.status);

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      console.log(`📦 Datos recibidos:`, data);

      if (data.images && data.images.length > 0) {
        // Optimizar URLs para resolución máxima de 1024px
        const images = data.images.map((img: any) => {
          let url = img.url;
          // Si es de Unsplash, limitar a 1024px de ancho máximo
          if (url.includes('unsplash.com')) {
            url = url.replace(/w=\d+/, 'w=1024').replace(/h=\d+/, '');
            if (!url.includes('w=')) {
              url += url.includes('?') ? '&w=1024&fit=crop&auto=format' : '?w=1024&fit=crop&auto=format';
            }
          }
          return url;
        });

        setMovieGallery(images);
        console.log(`✅ Cargadas ${data.count} imágenes optimizadas a 1024px:`, images);
      } else {
        console.log('⚠️ No se encontraron imágenes, usando fallback');
        setMovieGallery(getFallbackImages());
      }
    } catch (error) {
      console.error('❌ Error cargando imágenes:', error);
      setMovieGallery(getFallbackImages());
    }
  };

  // Función para obtener imágenes de fallback optimizadas
  const getFallbackImages = () => [
    'https://images.unsplash.com/photo-1518998053901-5348d3961a04?w=1024&fit=crop&auto=format',
    'https://images.unsplash.com/photo-1507003211169-0a1dd7506d40?w=1024&fit=crop&auto=format',
    'https://images.unsplash.com/photo-1519225421980-715cb0215aed?w=1024&fit=crop&auto=format',
    'https://images.unsplash.com/photo-1489599328131-cdd7553e2ad1?w=1024&fit=crop&auto=format',
    'https://images.unsplash.com/photo-1556388158-158ea5ccacbd?w=1024&fit=crop&auto=format'
  ];

  // Cargar imágenes al montar el componente
  useEffect(() => {
    loadMovieImages(currentMovieId);
  }, []);
  //
  return (
    <>
      <Head>
        <title>Relatos Salvajes - cinenacional.com</title>
        <meta name="description" content="Seis relatos que alternan entre la comedia y el drama, que exploran los temas de la venganza, el amor y la vulnerabilidad del ser humano en situaciones extraordinarias." />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
      </Head>

      <div className="bg-cine-dark text-white min-h-screen">


        {/* Movie Hero Background - ACTUALIZADO */}
        <MovieHero
          title="Relatos Salvajes"
          year={2014}
          duration={122}
          genres={["Comedia Negra", "Drama"]}
          rating={8.1}
          gallery={movieGallery}
        />

        {/* Movie Content */}
        <div className="bg-cine-dark">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
              {/* Poster */}
              <div className="lg:col-span-1">
                <MoviePoster
                  title="Relatos Salvajes"
                // imageUrl={movieData.posterUrl} // Cuando tengas la URL del poster
                />
              </div>

              {/* Movie Info */}
              <div className="lg:col-span-2">
                <MovieInfo
                  synopsis="Seis relatos que alternan entre la comedia y el drama, que exploran los temas de la venganza, el amor y la vulnerabilidad del ser humano en situaciones extraordinarias. Una película que retrata la condición humana cuando es llevada al límite."
                  director={{
                    name: "Damián Szifron"
                    // image: "url-de-la-imagen" // cuando tengas la imagen
                  }}
                  trailerUrl="https://youtu.be/3BxE9osMt5U?si=mLEH7dp-ll7ZJsXG"
                  onTrailerClick={() => {
                    // Aquí puedes hacer scroll a la sección del trailer
                    // o abrir un modal con el video
                    const trailerSection = document.querySelector('#trailer-section');
                    trailerSection?.scrollIntoView({ behavior: 'smooth' });
                  }}
                  onShareClick={() => {
                    // Lógica para compartir
                    if (navigator.share) {
                      navigator.share({
                        title: 'Relatos Salvajes',
                        text: 'Mira esta película argentina increíble',
                        url: window.location.href
                      });
                    }
                  }}
                />
              </div>
            </div>
          </div>
        </div>

        {/* Technical Info */}
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
            {/* Cast & Crew */}
            <div className="lg:col-span-2">
              <h2 className="serif-heading text-2xl mb-6 text-white">Reparto y Equipo</h2>

              {/* Cast */}
              <CastSection
                mainCast={[
                  { name: 'Ricardo Darín', character: 'Diego' },
                  { name: 'Érica Rivas', character: 'Romina' },
                  { name: 'Leonardo Sbaraglia', character: 'Cuenca' }
                ]} fullCast={[
                  { name: 'Oscar Martínez', character: 'Mauricio' },
                  { name: 'Julieta Zylberberg', character: 'Isabel' },
                  { name: 'Rita Cortese', character: 'Cocinera' },
                  { name: 'Darío Grandinetti', character: 'Ariel' },
                  { name: 'María Marull', character: 'Victoria' },
                  { name: 'Mónica Villa', character: 'Novia' },
                  { name: 'Diego Starosta', character: 'Novio' },
                  { name: 'Nancy Dupláa', character: 'Mujer en ruta' },
                  { name: 'Cesar Bordón', character: 'Hombre en ruta' },
                  { name: 'Walter Donado', character: 'Piloto' }
                ]}
              />

              {/* Crew */}
              <CrewSection
                basicCrew={{
                  "Dirección": [
                    { name: "Damián Szifron", role: "Director" }
                  ],
                  "Guión": [
                    { name: "Damián Szifron", role: "Guionista" }
                  ],
                  "Fotografía": [
                    { name: "Javier Juliá", role: "Director de fotografía" }
                  ],
                  "Música": [
                    { name: "Gustavo Santaolalla", role: "Compositor" }
                  ],
                  "Montaje": [
                    { name: "Pablo Barbieri", role: "Editor" },
                    { name: "Damián Szifrón", role: "Editor" }
                  ],
                  "Dirección de Arte": [
                    { name: "Clara Notari", role: "Dirección de arte" }
                  ],
                  "Producción": [
                    { name: "Hugo Sigman", role: "Producción" },
                    { name: "Matías Mosteirín", role: "Producción" },
                    { name: "Esther García", role: "Producción" },
                    { name: "Pedro Almodóvar", role: "Producción" },
                    { name: "Agustín Almodóvar", role: "Producción" }
                  ]
                }}
                fullCrew={{
                  "Dirección": [
                    { name: "Damián Szifrón", role: "Director" },
                    { name: "Cristian Trebotic", role: "Asistente de Dirección" },
                    { name: "Natalia Urruty", role: "Asistente de Dirección" },
                    { name: "Javier Braier", role: "Dirección de casting" },
                    { name: "Lorena Lisotti", role: "Continuista" },
                    { name: "Marcello Pozzo", role: "Ayudante de dirección" },
                    { name: "Agustín Arévalo", role: "2do ayudante de dirección" },
                    { name: "Lucila Frank", role: "Refuerzo de dirección" },
                    { name: "Iair Said", role: "Asistente de casting" },
                    { name: "Katia Szechtman", role: "Asistente de casting" }
                  ],
                  "Guión": [
                    { name: "Damián Szifron", role: "Guionista" }
                  ],
                  "Fotografía": [
                    { name: "Javier Juliá", role: "Director de fotografía" }
                  ],
                  "Música": [
                    { name: "Gustavo Santaolalla", role: "Compositor" }
                  ],
                  "Producción": [
                    { name: "Matías Mosteirín", role: "Producción" },
                    { name: "Esther García", role: "Producción" },
                    { name: "Hugo Sigman", role: "Producción" },
                    { name: "Pedro Almodóvar", role: "Producción" },
                    { name: "Agustín Almodóvar", role: "Producción" },
                    { name: "Claudio F. Belocopitt", role: "Productor asociado" },
                    { name: "Gerardo Rozín", role: "Productor asociado" },
                    { name: "Leticia Cristi", role: "Producción ejecutiva" },
                    { name: "Pola Zito", role: "Producción ejecutiva" },
                    { name: "Analía Castro", role: "Jefe de Producción" },
                    { name: "Axel Kuschevatzky", role: "Coproducción" },
                    { name: "Carolina Agunin", role: "Coordinación de producción" },
                    { name: "Covadonga R. Gamboa", role: "Jefe de Producción" }
                  ],
                  "Montaje": [
                    { name: "Pablo Barbieri", role: "Editor" },
                    { name: "Damián Szifrón", role: "Editor" }
                  ],
                  "Dirección de Arte": [
                    { name: "Clara Notari", role: "Dirección de arte" },
                    { name: "Ruth Fischerman", role: "Vestuario" },
                    { name: "Marisa Amenta", role: "Maquillaje" }
                  ]
                }}
              />
            </div>

            {/* Sidebar Info */}
            <div className="lg:col-span-1">
              <MovieSidebar
                year={2014}
                duration={122}
                country="Argentina"
                rating="Solo apta para mayor de 16 años"
                format="Color | Sonora"
                genres={["Comedia Negra", "Drama", "Thriller"]}
                themes={[
                  "Accidente automovilístico",
                  "Aviones",
                  "Casamiento",
                  "Cocinero",
                  "Ruta"
                ]}
              />
            </div>
          </div>
        </div>

        {/* Image Gallery */}

        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12 border-t border-gray-800">
          <h2 className="serif-heading text-2xl text-white mb-6">Galería de Imágenes</h2>
          <ImageGallery
            images={movieGallery}
            movieTitle="Relatos Salvajes"
          />
        </div>
        {/* Trailer */}
        <TrailerSection
          trailerUrl="https://youtu.be/3BxE9osMt5U?si=mLEH7dp-ll7ZJsXG"
          movieTitle="Relatos Salvajes"
        />
        {/* Similar Movies */}
        <SimilarMovies
          movies={[
            {
              title: 'El Secreto de sus Ojos',
              year: '2009',
              slug: 'el-secreto-de-sus-ojos'
            },
            {
              title: 'Nueve Reinas',
              year: '2000',
              slug: 'nueve-reinas'
            },
            {
              title: 'El Hijo de la Novia',
              year: '2001',
              slug: 'el-hijo-de-la-novia'
            },
            {
              title: 'La Historia Oficial',
              year: '1985',
              slug: 'la-historia-oficial'
            }
          ]}
        />
      </div>
    </>
  );
}

// ==================================================
// src/app/personas/[slug]/page.tsx
// ==================================================
'use client';

import { useState, useEffect } from 'react';
import Head from 'next/head';

interface FilmographyItem {
  id: string;
  title: string;
  year: number;
  role?: string;
  genre?: string;
  award?: {
    type: 'oscar' | 'goya' | 'other';
    text: string;
  };
}

interface PersonData {
  id: string;
  name: string;
  birthDate: string;
  birthPlace: string;
  bio: string;
  photoUrl?: string;
  stats: {
    totalMovies: number;
    asDirector: number;
    awards: number;
  };
  filmography: {
    director: FilmographyItem[];
    writer: FilmographyItem[];
    assistantDirector: FilmographyItem[];
    production: FilmographyItem[];
    other: FilmographyItem[];
  };
  awards: Array<{
    name: string;
    description: string;
    type: 'gold' | 'blue' | 'green';
  }>;
}

export default function PersonPage() {
  const [activeTab, setActiveTab] = useState<keyof PersonData['filmography']>('director');
  const [showAllFilmography, setShowAllFilmography] = useState(false);
  
  // Datos de ejemplo para Adolfo Aristarain
  const personData: PersonData = {
    id: 'adolfo-aristarain',
    name: 'Adolfo Aristarain',
    birthDate: '19 de octubre de 1943',
    birthPlace: 'Buenos Aires, Argentina',
    bio: 'Director, guionista y productor argentino reconocido como uno de los cineastas más importantes del cine latinoamericano. Sus películas se caracterizan por su profundidad narrativa y su compromiso con temáticas sociales.',
    photoUrl: '/images/persons/adolfo-aristarain.jpg',
    stats: {
      totalMovies: 47,
      asDirector: 15,
      awards: 23
    },
    filmography: {
      director: [
        { id: '1', title: 'La suerte está echada', year: 2013, genre: 'Drama' },
        { id: '2', title: 'Adiós, querida Luna', year: 2011, genre: 'Drama' },
        { id: '3', title: 'Valentín', year: 2008, genre: 'Drama' },
        { id: '4', title: 'Roma', year: 2004, genre: 'Drama' },
        { id: '5', title: 'Lugares comunes', year: 2002, genre: 'Drama', award: { type: 'goya', text: 'Premio Goya' } },
        { id: '6', title: 'Martín (Hache)', year: 1997, genre: 'Drama', award: { type: 'goya', text: 'Premio Goya' } },
        { id: '7', title: 'Un lugar en el mundo', year: 1992, genre: 'Drama', award: { type: 'oscar', text: 'Nominada al Oscar' } },
        { id: '8', title: 'Últimos días de la víctima', year: 1987, genre: 'Thriller' },
        { id: '9', title: 'Tiempo de revancha', year: 1985, genre: 'Thriller' },
        { id: '10', title: 'La playa del amor', year: 1980, genre: 'Drama' },
      ],
      writer: [
        { id: '11', title: 'La suerte está echada', year: 2013 },
        { id: '12', title: 'Roma', year: 2004 },
        { id: '13', title: 'Lugares comunes', year: 2002 },
        { id: '14', title: 'Martín (Hache)', year: 1997 },
        { id: '15', title: 'Un lugar en el mundo', year: 1992 },
        { id: '16', title: 'Tiempo de revancha', year: 1985 },
      ],
      assistantDirector: [
        { id: '17', title: 'La tregua', year: 1974 },
        { id: '18', title: 'Los golpes bajos', year: 1974 },
        { id: '19', title: 'La Patagonia rebelde', year: 1974 },
        { id: '20', title: 'Quebracho', year: 1974 },
      ],
      production: [
        { id: '21', title: 'Roma', year: 2004 },
        { id: '22', title: 'Lugares comunes', year: 2002 },
      ],
      other: [
        { id: '23', title: 'El amor es una mujer gorda', year: 1987, role: 'Montaje' },
        { id: '24', title: 'Crecer de golpe', year: 1977, role: 'Ayudante de dirección' },
      ]
    },
    awards: [
      {
        name: 'Premio Goya',
        description: 'Mejor Película Iberoamericana por "Martín (Hache)" (1998)',
        type: 'gold'
      },
      {
        name: 'Nominación al Oscar',
        description: 'Mejor Película Extranjera por "Un lugar en el mundo" (1993)',
        type: 'blue'
      },
      {
        name: 'Festival de San Sebastián',
        description: 'Concha de Plata al Mejor Director (2002)',
        type: 'green'
      }
    ]
  };

  const tabLabels = {
    director: 'Dirección',
    writer: 'Guión',
    assistantDirector: 'Asistente de Dirección',
    production: 'Producción',
    other: 'Otros Roles'
  };

  const getFilmographyToShow = () => {
    const items = personData.filmography[activeTab];
    return showAllFilmography ? items : items.slice(0, 10);
  };

  return (
    <>
      <Head>
        <title>{personData.name} - CineNacional</title>
        <meta name="description" content={personData.bio} />
      </Head>

      <div className="bg-cine-dark text-white min-h-screen">

        {/* Person Header Section */}
        <section className="relative bg-gradient-to-b from-cine-gray to-cine-dark py-12">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div className="flex flex-col md:flex-row gap-8 items-start">
              {/* Portrait */}
              <div className="flex-shrink-0">
                <div className="relative">
                  <div className="w-48 h-64 md:w-64 md:h-80 rounded-lg overflow-hidden poster-shadow">
                    {personData.photoUrl ? (
                      <img 
                        src={personData.photoUrl} 
                        alt={personData.name}
                        className="w-full h-full object-cover"
                      />
                    ) : (
                      <div className="person-placeholder w-full h-full">
                        <svg className="w-16 h-16 text-gray-500 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="1.5" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"/>
                        </svg>
                        <p className="text-sm text-gray-400">Foto no disponible</p>
                      </div>
                    )}
                  </div>
                </div>
              </div>
              
              {/* Person Info */}
              <div className="flex-grow">
                <h1 className="serif-heading text-5xl md:text-6xl mb-4 text-white">{personData.name}</h1>
                
                <div className="space-y-3 text-gray-300">
                  <div className="text-sm">
                    <div>
                      <span className="text-gray-500">Nació el </span>
                      <span>{personData.birthDate}</span>
                      <span className="text-gray-500"> en </span>
                      <span>{personData.birthPlace}</span>
                    </div>
                  </div>
                  
                  <div className="mt-6">
                    <p className="text-gray-300 leading-relaxed max-w-3xl serif-body">
                      {personData.bio}
                    </p>
                  </div>

                  {/* Quick Stats */}
                  <div className="flex gap-8 mt-8">
                    <div className="text-center">
                      <div className="text-3xl font-light text-cine-accent">{personData.stats.totalMovies}</div>
                      <div className="text-xs text-gray-500 uppercase tracking-wider mt-1">Películas</div>
                    </div>
                    <div className="text-center">
                      <div className="text-3xl font-light text-cine-accent">{personData.stats.asDirector}</div>
                      <div className="text-xs text-gray-500 uppercase tracking-wider mt-1">Como Director</div>
                    </div>
                    <div className="text-center">
                      <div className="text-3xl font-light text-cine-accent">{personData.stats.awards}</div>
                      <div className="text-xs text-gray-500 uppercase tracking-wider mt-1">Premios</div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </section>

        {/* Filmography Section */}
        <section className="py-12">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            {/* Navigation Tabs */}
            <div className="border-b border-gray-700 mb-8">
              <nav className="flex space-x-8 overflow-x-auto">
                {Object.entries(tabLabels).map(([key, label]) => {
                  const count = personData.filmography[key as keyof PersonData['filmography']].length;
                  return (
                    <button
                      key={key}
                      onClick={() => setActiveTab(key as keyof PersonData['filmography'])}
                      className={`pb-4 px-1 border-b-2 font-medium text-sm whitespace-nowrap transition-colors ${
                        activeTab === key
                          ? 'border-cine-accent text-white'
                          : 'border-transparent text-gray-400 hover:text-white'
                      }`}
                    >
                      {label} ({count})
                    </button>
                  );
                })}
              </nav>
            </div>

            {/* Filmography Grid */}
            <div className="space-y-1">
              <h2 className="text-2xl font-light mb-6 text-white">
                Filmografía como {tabLabels[activeTab]}
              </h2>
              
              {/* Film Items */}
              <div className="divide-y divide-gray-800/50">
                {getFilmographyToShow().map((film) => (
                  <div key={film.id} className="py-4 hover:bg-cine-gray/30 transition-colors group">
                    <div className="flex items-center gap-4">
                      <span className="text-gray-500 text-sm w-12 text-left">{film.year}</span>
                      <div className="flex-grow">
                        <a href={`/pelicula/${film.id}`} className="hover-line text-lg text-white">
                          {film.title}
                        </a>
                        {film.award && (
                          <span className={`ml-2 text-xs px-2 py-0.5 rounded ${
                            film.award.type === 'oscar' 
                              ? 'bg-blue-900/30 text-cine-gold' 
                              : film.award.type === 'goya'
                              ? 'bg-yellow-900/30 text-yellow-400'
                              : 'bg-green-900/30 text-green-400'
                          }`}>
                            {film.award.text}
                          </span>
                        )}
                        {film.role && (
                          <span className="ml-2 text-xs text-gray-500">({film.role})</span>
                        )}
                      </div>
                      <div className="opacity-0 group-hover:opacity-100 transition-opacity">
                        <span className="text-xs text-gray-500">{film.genre || 'Drama'}</span>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>

            {/* Show More Button */}
            {personData.filmography[activeTab].length > 10 && (
              <div className="mt-8 text-center">
                <button 
                  onClick={() => setShowAllFilmography(!showAllFilmography)}
                  className="text-cine-accent hover:text-cine-gold text-sm font-medium transition-colors flex items-center space-x-2 mx-auto"
                >
                  <span>{showAllFilmography ? 'Ver menos' : 'Ver filmografía completa'}</span>
                  <svg 
                    className={`w-4 h-4 transition-transform duration-200 ${showAllFilmography ? 'rotate-180' : ''}`} 
                    fill="none" 
                    stroke="currentColor" 
                    viewBox="0 0 24 24"
                  >
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M19 9l-7 7-7-7" />
                  </svg>
                </button>
              </div>
            )}
          </div>
        </section>

        {/* Awards Section */}
        <section className="py-12 bg-cine-gray/30">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <h2 className="text-2xl font-light mb-8 text-white">Premios y Reconocimientos</h2>
            
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {personData.awards.map((award, index) => (
                <div key={index} className="bg-cine-gray/50 rounded-lg p-6 hover:bg-cine-gray/70 transition-colors">
                  <div className={`mb-3 ${
                    award.type === 'gold' ? 'text-yellow-400' : 
                    award.type === 'blue' ? 'text-cine-accent' : 
                    'text-green-400'
                  }`}>
                    <svg className="w-8 h-8" fill="currentColor" viewBox="0 0 20 20">
                      <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"/>
                    </svg>
                  </div>
                  <h3 className="font-medium text-white mb-1">{award.name}</h3>
                  <p className="text-sm text-gray-400">{award.description}</p>
                </div>
              ))}
            </div>
          </div>
        </section>

        {/* Related People Section */}
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12 border-t border-gray-800">
          <h2 className="serif-heading text-2xl text-white mb-6">Personas Relacionadas</h2>
          <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-4">
            {[
              { name: 'Ricardo Darín', role: 'Actor' },
              { name: 'Damián Szifrón', role: 'Director' },
              { name: 'Juan José Campanella', role: 'Director' },
              { name: 'Cecilia Roth', role: 'Actriz' }
            ].map((person, index) => (
              <div key={index} className="group cursor-pointer text-center">
                <div className="w-20 h-20 rounded-full person-placeholder mx-auto mb-2 transform group-hover:scale-105 transition-transform">
                  <svg className="w-8 h-8 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="1.5" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"/>
                  </svg>
                </div>
                <p className="text-sm font-medium text-white group-hover:text-cine-accent transition-colors">{person.name}</p>
                <p className="text-xs text-gray-400">{person.role}</p>
              </div>
            ))}
          </div>
        </div>
      </div>

      <style jsx>{`
        .hover-line {
          position: relative;
          display: inline-block;
        }
        .hover-line::after {
          content: '';
          position: absolute;
          width: 0;
          height: 1px;
          bottom: -2px;
          left: 0;
          background-color: #60a5fa;
          transition: width 0.3s ease;
        }
        .hover-line:hover::after {
          width: 100%;
        }
        .gradient-text {
          background: linear-gradient(135deg, #3b82f6, #60a5fa);
          -webkit-background-clip: text;
          -webkit-text-fill-color: transparent;
          background-clip: text;
        }
        .person-placeholder {
          background: linear-gradient(135deg, #1a2332, #0f1419);
          border: 1px solid #374151;
          display: flex;
          flex-direction: column;
          justify-content: center;
          align-items: center;
          text-align: center;
          position: relative;
          overflow: hidden;
        }
        .poster-shadow {
          box-shadow: 0 20px 40px rgba(0,0,0,0.4);
        }
        .glass-effect {
          backdrop-filter: blur(10px);
          background: rgba(42, 42, 42, 0.8);
        }
      `}</style>
    </>
  );
}

// ==================================================
// src/app/test-env/page.tsx
// ==================================================
// src/app/test-env/page.tsx
export default function TestEnv() {
  return (
    <div className="p-8">
      <h1 className="text-2xl mb-4">Variables de Cloudinary</h1>
      <pre className="bg-gray-100 p-4 rounded">
        {JSON.stringify({
          CLOUD_NAME: process.env.NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME || 'NO DEFINIDO',
          API_KEY: process.env.NEXT_PUBLIC_CLOUDINARY_API_KEY ? 'DEFINIDO' : 'NO DEFINIDO',
          HAS_SECRET: process.env.CLOUDINARY_API_SECRET ? 'SI' : 'NO'
        }, null, 2)}
      </pre>
    </div>
  )
}

// ==================================================
// src/components/admin/CloudinaryGallery.tsx
// ==================================================
// src/components/admin/CloudinaryGallery.tsx
'use client'

import { CldUploadWidget } from 'next-cloudinary'
import { useState } from 'react'
import { Plus, X } from 'lucide-react'
import { CloudinaryImage } from '@/components/movies/CloudinaryImage'

interface CloudinaryGalleryProps {
  movieId: number
  images: Array<{
    url: string
    publicId?: string
  }>
  onChange: (images: any[]) => void
}

export function CloudinaryGallery({ movieId, images, onChange }: CloudinaryGalleryProps) {
  const [galleryImages, setGalleryImages] = useState(images)

  const handleUploadSuccess = (result: any) => {
    const newImage = {
      url: result.info.secure_url,
      publicId: result.info.public_id,
      type: 'STILL'
    }
    
    const updated = [...galleryImages, newImage]
    setGalleryImages(updated)
    onChange(updated)
  }

  const handleRemove = (index: number) => {
    const updated = galleryImages.filter((_, i) => i !== index)
    setGalleryImages(updated)
    onChange(updated)
  }

  return (
    <div>
      <h3 className="text-lg font-medium text-gray-900 mb-4">
        Galería de Imágenes
      </h3>
      
      <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
        {galleryImages.map((image, index) => (
          <div key={index} className="relative group">
            <CloudinaryImage
              src={image.url}
              alt={`Imagen ${index + 1}`}
              width={300}
              height={200}
              className="w-full aspect-video object-cover rounded-lg"
            />
            <button
              type="button"
              onClick={() => handleRemove(index)}
              className="absolute top-2 right-2 p-1 bg-red-600 text-white rounded-full opacity-0 group-hover:opacity-100 transition-opacity"
            >
              <X className="w-4 h-4" />
            </button>
          </div>
        ))}
        
        <CldUploadWidget
          uploadPreset="cinenacional-unsigned"
          options={{
            folder: `cinenacional/gallery/${movieId}`,
            sources: ['local', 'url'],
            multiple: true,
            maxFiles: 10
          }}
          onUpload={handleUploadSuccess}
        >
          {({ open }) => (
            <button
              type="button"
              onClick={() => open()}
              className="aspect-video border-2 border-dashed border-gray-300 rounded-lg flex items-center justify-center hover:border-gray-400 transition-colors"
            >
              <div className="text-center">
                <Plus className="w-8 h-8 text-gray-400 mx-auto" />
                <span className="text-sm text-gray-500 mt-2 block">
                  Agregar imágenes
                </span>
              </div>
            </button>
          )}
        </CldUploadWidget>
      </div>
    </div>
  )
}

// ==================================================
// src/components/admin/CloudinaryUploadWidget.tsx
// ==================================================
// src/components/admin/CloudinaryUploadWidget.tsx
'use client'

import { CldUploadWidget } from 'next-cloudinary'
import { useState, useEffect } from 'react'
import { Upload, X, ImageIcon } from 'lucide-react'
import Image from 'next/image'
import { toast } from 'react-hot-toast'

declare global {
  interface Window {
    cloudinaryWidget: any;
  }
}

interface CloudinaryUploadWidgetProps {
  value?: string
  onChange: (url: string, publicId?: string) => void
  label: string
  type?: 'poster' | 'backdrop' | 'gallery'
  movieId?: string | number
  disabled?: boolean
}

export function CloudinaryUploadWidget({ 
  value, 
  onChange, 
  label, 
  type = 'poster',
  movieId,
  disabled = false
}: CloudinaryUploadWidgetProps) {
  const [imageUrl, setImageUrl] = useState(value || '')
  
  // Sincronizar con el valor externo
  useEffect(() => {
    setImageUrl(value || '')
  }, [value])
  
  // Configuración según el tipo de imagen
  const getUploadPreset = () => {
    // Puedes crear estos presets en tu dashboard de Cloudinary
    switch(type) {
      case 'poster':
        return {
          folder: `cinenacional/posters${movieId ? `/${movieId}` : ''}`,
          transformation: [
            { width: 500, height: 750, crop: 'fill', gravity: 'auto' }
          ],
          format: 'auto',
          quality: 'auto:best'
        }
      case 'backdrop':
        return {
          folder: `cinenacional/backdrops${movieId ? `/${movieId}` : ''}`,
          transformation: [
            { width: 1920, height: 1080, crop: 'fill', gravity: 'auto' }
          ],
          format: 'auto',
          quality: 'auto:best'
        }
      default:
        return {
          folder: `cinenacional/gallery${movieId ? `/${movieId}` : ''}`,
          transformation: [
            { width: 1200, height: 1200, crop: 'limit' }
          ],
          format: 'auto',
          quality: 'auto:good'
        }
    }
  }

  const handleUploadSuccess = (result: any) => {
    console.log('Upload result:', result)
    const { secure_url, public_id } = result.info
    console.log('Setting imageUrl to:', secure_url)
    setImageUrl(secure_url)
    onChange(secure_url, public_id)
    toast.success('Imagen subida exitosamente')
  }

  const handleRemove = () => {
    setImageUrl('')
    onChange('', '')
  }

  const aspectRatio = type === 'poster' ? '2/3' : type === 'backdrop' ? '16/9' : '1/1'
  const dimensions = type === 'poster' ? '500x750px' : type === 'backdrop' ? '1920x1080px' : '1200x1200px'

  return (
    <div>
      <label className="block text-sm font-medium text-gray-700 mb-2">
        {label}
      </label>
      
      {!imageUrl ? (
        <CldUploadWidget
          uploadPreset="cinenacional-unsigned"
          options={{
            ...getUploadPreset(),
            sources: ['local', 'url', 'google_drive', 'dropbox'],
            multiple: false,
            maxFiles: 1,
            clientAllowedFormats: ['jpg', 'jpeg', 'png', 'webp'],
            maxFileSize: 10000000, // 10MB
            showCompletedButton: true,  
            showUploadMoreButton: false, 
            singleUploadAutoClose: false,
            showSkipCropButton: false,
            showPoweredBy: false,
            autoMinimize: false,
            language: 'es',
            text: {
              es: {
                or: 'O',
                menu: {
                  files: 'Mis archivos',
                  web: 'Dirección web',
                },
                selection_counter: {
                  selected: 'Seleccionado'
                },
                actions: {
                  upload: 'Subir',
                  clear_all: 'Limpiar todo',
                  log_out: 'Cerrar sesión',
                  done: 'Listo'
                },
                messages: {
                  max_files_limit: 'Solo puedes subir 1 archivo',
                  min_files_limit: 'Debes subir al menos 1 archivo',
                  max_file_size: 'El archivo es demasiado grande (máx. 10MB)',
                  allowed_formats: 'Formato no permitido. Usa: JPG, PNG, WEBP',
                  upload_successful: 'Subida exitosa',
                  upload_failed: 'Error al subir'
                },
                local: {
                  browse: 'Buscar',
                  dd_title_single: 'Arrastra y suelta tu imagen aquí',
                  drop_title_single: 'Suelta el archivo para subirlo',
                }
              }
            }
          }}
          onOpen={(widget: any) => {
            console.log('Widget opened')
            // Guardar referencia al widget
            window.cloudinaryWidget = widget
          }}
          onUpload={(result: any, widget: any) => {
            handleUploadSuccess(result)
            // Prevenir el cierre automático
            if (widget && widget.isShowing()) {
              console.log('Preventing auto-close')
              setTimeout(() => {
                if (!widget.isShowing() && window.cloudinaryWidget) {
                  console.log('Reopening widget')
                  window.cloudinaryWidget.open()
                }
              }, 100)
            }
          }}
          onSuccess={(result: any) => {
            console.log('Success event:', result)
            handleUploadSuccess(result)
          }}
          onClose={(result: any) => {
            console.log('Widget closed', result)
          }}
        >
          {({ open }) => (
            <button
              type="button"
              onClick={() => open()}
              disabled={disabled}
              className="relative block w-full border-2 border-dashed border-gray-300 rounded-lg p-12 text-center hover:border-gray-400 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 cursor-pointer transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
            >
              <Upload className="mx-auto h-12 w-12 text-gray-400" />
              <p className="mt-2 text-sm font-medium text-gray-900">
                Click para subir o arrastra una imagen aquí
              </p>
              <p className="mt-1 text-xs text-gray-500">
                JPG, PNG o WEBP hasta 10MB
              </p>
              <p className="mt-1 text-xs text-gray-400">
                Tamaño recomendado: {dimensions}
              </p>
            </button>
          )}
        </CldUploadWidget>
      ) : (
        <div className="space-y-2">
          {/* Preview de la imagen con borde interactivo - envuelto en CldUploadWidget */}
          <CldUploadWidget
            uploadPreset="cinenacional-unsigned"
            options={{
              ...getUploadPreset(),
              sources: ['local', 'url'],
              multiple: false,
              maxFiles: 1,
              singleUploadAutoClose: false,
              showCompletedButton: true,
            }}
            onUpload={(result: any) => handleUploadSuccess(result)}
            onSuccess={(result: any) => handleUploadSuccess(result)}
          >
            {({ open }) => (
              <div 
                onClick={() => open()}
                className="relative rounded-lg overflow-hidden bg-gray-100 shadow-lg cursor-pointer border-2 border-transparent hover:border-blue-500 transition-all group"
                style={{ aspectRatio }}
              >
                <Image
                  src={imageUrl}
                  alt={label}
                  fill
                  className="object-cover"
                />
                
                {/* Overlay al hacer hover */}
                <div className="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-40 transition-all flex items-center justify-center opacity-0 group-hover:opacity-100 pointer-events-none">
                  <p className="text-white font-medium text-lg drop-shadow-lg">Click para cambiar</p>
                </div>
              </div>
            )}
          </CldUploadWidget>
          
          {/* Botones siempre visibles */}
          <div className="flex gap-2">
            <CldUploadWidget
              uploadPreset="cinenacional-unsigned"
              options={{
                ...getUploadPreset(),
                sources: ['local', 'url'],
                multiple: false,
                maxFiles: 1,
                singleUploadAutoClose: false,
                showCompletedButton: true,
              }}
              onUpload={(result: any) => handleUploadSuccess(result)}
              onSuccess={(result: any) => handleUploadSuccess(result)}
            >
              {({ open }) => (
                <button
                  type="button"
                  onClick={() => open()}
                  className="flex-1 bg-gray-100 text-gray-700 px-4 py-2 rounded-lg hover:bg-gray-200 transition-colors flex items-center justify-center gap-2"
                >
                  <ImageIcon className="w-4 h-4" />
                  <span>Cambiar imagen</span>
                </button>
              )}
            </CldUploadWidget>
            
            <button
              type="button"
              onClick={handleRemove}
              className="bg-red-100 text-red-700 px-4 py-2 rounded-lg hover:bg-red-200 transition-colors flex items-center gap-2"
            >
              <X className="w-4 h-4" />
              <span>Eliminar</span>
            </button>
          </div>
          
          {/* Info de la imagen */}
          <div className="text-xs text-gray-500 text-center">
            Imagen subida correctamente • {dimensions}
          </div>
          <div className="text-xs text-gray-400 text-center">
            Puedes hacer click en la imagen o usar los botones para cambiarla
          </div>
        </div>
      )}
    </div>
  )
}

// ==================================================
// src/components/admin/CountrySelector.tsx
// ==================================================
// src/components/admin/CountrySelector.tsx
'use client'

import { useState, useRef, useEffect } from 'react'
import { X, Globe, Search } from 'lucide-react'

interface Country {
  id: number
  name: string
  code?: string
}

interface CountrySelectorProps {
  availableCountries: Country[]
  selectedCountries: number[]
  onChange: (countries: number[]) => void
  placeholder?: string
}

export function CountrySelector({
  availableCountries,
  selectedCountries,
  onChange,
  placeholder = "Buscar país..."
}: CountrySelectorProps) {
  const [searchTerm, setSearchTerm] = useState('')
  const [showSuggestions, setShowSuggestions] = useState(false)
  const [highlightedIndex, setHighlightedIndex] = useState(-1)
  const inputRef = useRef<HTMLInputElement>(null)
  const containerRef = useRef<HTMLDivElement>(null)

  // Países frecuentes para mostrar primero
  const frequentCountries = ['Argentina', 'España', 'Francia', 'Brasil', 'México', 'Chile', 'Uruguay', 'Estados Unidos', 'Italia', 'Alemania']

  // Obtener los objetos de países seleccionados
  const selectedCountryObjects = selectedCountries
    .map(id => availableCountries.find(c => c.id === id))
    .filter(Boolean) as Country[]

  // Filtrar países disponibles (excluyendo los ya seleccionados)
  const filteredCountries = availableCountries
    .filter(country => !selectedCountries.includes(country.id))
    .filter(country => 
      searchTerm === '' || 
      country.name.toLowerCase().includes(searchTerm.toLowerCase())
    )
    .sort((a, b) => {
      // Priorizar países frecuentes
      const aIsFrequent = frequentCountries.includes(a.name)
      const bIsFrequent = frequentCountries.includes(b.name)
      
      if (aIsFrequent && !bIsFrequent) return -1
      if (!aIsFrequent && bIsFrequent) return 1
      
      // Luego ordenar alfabéticamente
      return a.name.localeCompare(b.name)
    })

  // Manejar click fuera del componente
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (containerRef.current && !containerRef.current.contains(event.target as Node)) {
        setShowSuggestions(false)
      }
    }

    document.addEventListener('mousedown', handleClickOutside)
    return () => document.removeEventListener('mousedown', handleClickOutside)
  }, [])

  // Manejar navegación con teclado
  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === 'ArrowDown') {
      e.preventDefault()
      setHighlightedIndex(prev => 
        prev < filteredCountries.length - 1 ? prev + 1 : prev
      )
    } else if (e.key === 'ArrowUp') {
      e.preventDefault()
      setHighlightedIndex(prev => prev > 0 ? prev - 1 : -1)
    } else if (e.key === 'Enter') {
      e.preventDefault()
      if (highlightedIndex >= 0 && highlightedIndex < filteredCountries.length) {
        handleSelectCountry(filteredCountries[highlightedIndex])
      }
    } else if (e.key === 'Escape') {
      setShowSuggestions(false)
      setHighlightedIndex(-1)
    }
  }

  const handleSelectCountry = (country: Country) => {
    onChange([...selectedCountries, country.id])
    setSearchTerm('')
    setShowSuggestions(false)
    setHighlightedIndex(-1)
    inputRef.current?.focus()
  }

  const handleRemoveCountry = (countryId: number) => {
    onChange(selectedCountries.filter(id => id !== countryId))
  }

  return (
    <div ref={containerRef} className="space-y-3">
      {/* Campo de búsqueda */}
      <div className="relative">
        <div className="relative">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
          <input
            ref={inputRef}
            type="text"
            value={searchTerm}
            onChange={(e) => {
              setSearchTerm(e.target.value)
              setShowSuggestions(true)
              setHighlightedIndex(-1)
            }}
            onFocus={() => setShowSuggestions(true)}
            onKeyDown={handleKeyDown}
            placeholder={placeholder}
            className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
          />
        </div>

        {/* Lista de sugerencias */}
        {showSuggestions && (searchTerm || filteredCountries.length > 0) && (
          <div className="absolute z-10 w-full mt-1 bg-white border border-gray-200 rounded-lg shadow-lg max-h-60 overflow-auto">
            {filteredCountries.length === 0 ? (
              <div className="px-4 py-3 text-sm text-gray-500">
                No se encontraron países
              </div>
            ) : (
              <>
                {searchTerm === '' && (
                  <div className="px-4 py-2 text-xs font-medium text-gray-500 uppercase tracking-wider border-b border-gray-100">
                    Países frecuentes
                  </div>
                )}
                {filteredCountries.map((country, index) => {
                  const isFrequent = searchTerm === '' && frequentCountries.includes(country.name)
                  const isHighlighted = index === highlightedIndex
                  
                  return (
                    <div
                      key={country.id}
                      onClick={() => handleSelectCountry(country)}
                      className={`px-4 py-2 cursor-pointer transition-colors ${
                        isHighlighted 
                          ? 'bg-blue-50 text-blue-700' 
                          : 'hover:bg-gray-50 text-gray-900'
                      } ${!isFrequent && searchTerm === '' && index === frequentCountries.filter(fc => 
                        availableCountries.some(ac => ac.name === fc && !selectedCountries.includes(ac.id))
                      ).length ? 'border-t border-gray-100' : ''}`}
                    >
                      <div className="flex items-center justify-between">
                        <span className="text-sm">{country.name}</span>
                        {isFrequent && searchTerm === '' && (
                          <span className="text-xs text-gray-400">Frecuente</span>
                        )}
                      </div>
                    </div>
                  )
                })}
              </>
            )}
          </div>
        )}
      </div>

      {/* Países seleccionados como chips */}
      {selectedCountryObjects.length > 0 && (
        <div className="flex flex-wrap gap-2">
          {selectedCountryObjects.map((country) => (
            <div
              key={country.id}
              className="inline-flex items-center gap-1 px-3 py-1 bg-blue-100 text-blue-700 rounded-full text-sm"
            >
              <Globe className="w-3 h-3" />
              <span>{country.name}</span>
              <button
                type="button"
                onClick={() => handleRemoveCountry(country.id)}
                className="ml-1 hover:text-blue-900 transition-colors"
              >
                <X className="w-3 h-3" />
              </button>
            </div>
          ))}
        </div>
      )}

      {/* Texto de ayuda */}
      <p className="text-xs text-gray-500">
        {selectedCountryObjects.length === 0 
          ? "Comienza a escribir para buscar países coproductores" 
          : `${selectedCountryObjects.length} ${selectedCountryObjects.length === 1 ? 'país seleccionado' : 'países seleccionados'}`
        }
      </p>
    </div>
  )
}

// ==================================================
// src/components/admin/MovieFormEnhanced.tsx
// ==================================================
// src/components/admin/MovieFormEnhanced.tsx - Versión actualizada para pestañas
'use client'

import { useState, useEffect } from 'react'
import {
  Plus,
  X,
  Search,
  UserPlus,
  Building,
  Globe,
  Languages,
  Hash,
  Trash2
} from 'lucide-react'
import { CountrySelector } from './CountrySelector'
import { ThemeSelector } from './ThemeSelector'
import { Tag } from 'lucide-react'

interface MovieFormEnhancedProps {
  onGenresChange: (genres: number[]) => void
  onCastChange: (cast: any[]) => void
  onCrewChange: (crew: any[]) => void
  onCountriesChange: (countries: number[]) => void
  onLanguagesChange: (languages: number[]) => void
  onProductionCompaniesChange: (companies: number[]) => void
  onDistributionCompaniesChange: (companies: number[]) => void
  onThemesChange: (themes: number[]) => void
  initialData?: {
    genres?: any[]
    cast?: any[]
    crew?: any[]
    countries?: any[]
    languages?: any[]
    productionCompanies?: any[]
    distributionCompanies?: any[]
    themes?: any[]
  }
  // Nuevas props para controlar qué mostrar
  showOnlyBasicInfo?: boolean
  showOnlyCast?: boolean
  showOnlyCrew?: boolean
  showOnlyCompanies?: boolean
}

export default function MovieFormEnhanced({
  onGenresChange,
  onCastChange,
  onCrewChange,
  onCountriesChange,
  onLanguagesChange,
  onProductionCompaniesChange,
  onDistributionCompaniesChange,
  onThemesChange,
  initialData,
  showOnlyBasicInfo = false,
  showOnlyCast = false,
  showOnlyCrew = false,
  showOnlyCompanies = false
}: MovieFormEnhancedProps) {
  // Estados para las listas disponibles
  const [availableGenres, setAvailableGenres] = useState<any[]>([])
  const [availablePeople, setAvailablePeople] = useState<any[]>([])
  const [availableCountries, setAvailableCountries] = useState<any[]>([])
  const [availableLanguages, setAvailableLanguages] = useState<any[]>([])
  const [availableProductionCompanies, setAvailableProductionCompanies] = useState<any[]>([])
  const [availableDistributionCompanies, setAvailableDistributionCompanies] = useState<any[]>([])

  // Estados para las selecciones
  const [selectedGenres, setSelectedGenres] = useState<number[]>([])
  const [cast, setCast] = useState<any[]>([])
  const [crew, setCrew] = useState<any[]>([])
  const [selectedCountries, setSelectedCountries] = useState<number[]>([])
  const [selectedLanguages, setSelectedLanguages] = useState<number[]>([])
  const [selectedProductionCompanies, setSelectedProductionCompanies] = useState<number[]>([])
  const [selectedDistributionCompanies, setSelectedDistributionCompanies] = useState<number[]>([])
  const [availableThemes, setAvailableThemes] = useState<any[]>([])
  const [selectedThemes, setSelectedThemes] = useState<number[]>([])

  // Estados para búsqueda
  const [personSearch, setPersonSearch] = useState('')
  const [showPersonSearch, setShowPersonSearch] = useState(false)
  const [addingType, setAddingType] = useState<'cast' | 'crew' | null>(null)

  // Estado para nuevo actor/crew
  const [newPerson, setNewPerson] = useState({
    personId: 0,
    characterName: '',
    role: '',
    department: '',
    billingOrder: 0
  })

  const [isInitialized, setIsInitialized] = useState(false)

  // Cargar datos iniciales
  useEffect(() => {
    fetchInitialData()
  }, [])

  // Inicializar con datos existentes
  useEffect(() => {
    if (initialData) {
      if (initialData.genres) {
        setSelectedGenres(initialData.genres.map(g => g.genreId))
      }
      if (initialData.cast) {
        setCast(initialData.cast)
      }
      if (initialData.crew) {
        setCrew(initialData.crew)
      }
      if (initialData.countries) {
        setSelectedCountries(initialData.countries.map(c => c.countryId))
      }
      if (initialData.languages) {
        setSelectedLanguages(initialData.languages.map(l => l.languageId))
      }
      if (initialData.productionCompanies) {
        setSelectedProductionCompanies(initialData.productionCompanies.map(c => c.companyId))
      }
      if (initialData.distributionCompanies) {
        setSelectedDistributionCompanies(initialData.distributionCompanies.map(c => c.companyId))
      }
      if (initialData.themes) {
        setSelectedThemes(initialData.themes.map(t => t.themeId))
      }
    }
    setIsInitialized(true)
  }, [initialData])

  // Notificar cambios al componente padre
  useEffect(() => {
    if (isInitialized) {
      onGenresChange(selectedGenres)
    }
  }, [selectedGenres, onGenresChange, isInitialized])

  useEffect(() => {
    if (isInitialized) {
      // Limpiar cast antes de enviar al padre
      const cleanCast = cast.map(item => ({
        personId: item.personId,
        characterName: item.characterName,
        billingOrder: item.billingOrder,
        isPrincipal: item.isPrincipal
      }))
      onCastChange(cleanCast)
    }
  }, [cast, onCastChange, isInitialized])

  useEffect(() => {
    if (isInitialized) {
      // Limpiar crew antes de enviar al padre
      const cleanCrew = crew.map(item => ({
        personId: item.personId,
        role: item.role,
        department: item.department,
        billingOrder: item.billingOrder
      }))
      onCrewChange(cleanCrew)
    }
  }, [crew, onCrewChange, isInitialized])

  useEffect(() => {
    if (isInitialized) {
      onCountriesChange(selectedCountries)
    }
  }, [selectedCountries, onCountriesChange, isInitialized])

  useEffect(() => {
    if (isInitialized) {
      onThemesChange(selectedThemes)
    }
  }, [selectedThemes, onThemesChange, isInitialized])

  useEffect(() => {
    if (isInitialized) {
      onLanguagesChange(selectedLanguages)
    }
  }, [selectedLanguages, onLanguagesChange, isInitialized])

  useEffect(() => {
    if (isInitialized) {
      onProductionCompaniesChange(selectedProductionCompanies)
    }
  }, [selectedProductionCompanies, onProductionCompaniesChange, isInitialized])

  useEffect(() => {
    if (isInitialized) {
      onDistributionCompaniesChange(selectedDistributionCompanies)
    }
  }, [selectedDistributionCompanies, onDistributionCompaniesChange, isInitialized])

  

  // Cargar datos de la API
  const fetchInitialData = async () => {
    try {
      const [genresRes, countriesRes, languagesRes, prodCompaniesRes, distCompaniesRes, themesRes] = await Promise.all([
        fetch('/api/genres'),
        fetch('/api/countries'),
        fetch('/api/languages'),
        fetch('/api/companies/production'),
        fetch('/api/companies/distribution'),
        fetch('/api/themes')
      ])

      // Verificar que todas las respuestas sean OK
      if (!genresRes.ok || !countriesRes.ok || !languagesRes.ok || !prodCompaniesRes.ok || !distCompaniesRes.ok || !themesRes.ok) {
        throw new Error('Error fetching data')
      }

      const [genres, countries, languages, prodCompanies, distCompanies, themes] = await Promise.all([
        genresRes.json(),
        countriesRes.json(),
        languagesRes.json(),
        prodCompaniesRes.json(),
        distCompaniesRes.json(),
        themesRes.json()
      ])

      // Asegurar que siempre sean arrays
      setAvailableGenres(Array.isArray(genres) ? genres : [])
      setAvailableCountries(Array.isArray(countries) ? countries : [])
      setAvailableLanguages(Array.isArray(languages) ? languages : [])
      setAvailableProductionCompanies(Array.isArray(prodCompanies) ? prodCompanies : [])
      setAvailableDistributionCompanies(Array.isArray(distCompanies) ? distCompanies : [])
      setAvailableThemes(Array.isArray(themes) ? themes : [])
    } catch (error) {
      console.error('Error loading initial data:', error)
      // Asegurar que los estados sean arrays vacíos en caso de error
      setAvailableGenres([])
      setAvailableCountries([])
      setAvailableLanguages([])
      setAvailableProductionCompanies([])
      setAvailableDistributionCompanies([])
      setAvailableThemes([])
    }
  }

  // Buscar personas
  const searchPeople = async (search: string) => {
    if (search.length < 2) return

    try {
      const response = await fetch(`/api/people?search=${encodeURIComponent(search)}&limit=10`)
      const data = await response.json()
      setAvailablePeople(data)
    } catch (error) {
      console.error('Error searching people:', error)
    }
  }

  // Agregar persona al cast o crew
  const addPerson = () => {
    if (!newPerson.personId) return

    const selectedPerson = availablePeople.find((p: any) => p.id === newPerson.personId)
    if (!selectedPerson) return

    if (addingType === 'cast') {
      setCast([...cast, {
        personId: newPerson.personId,
        person: selectedPerson,
        characterName: newPerson.characterName,
        billingOrder: cast.length + 1,
        isPrincipal: cast.length < 5
      }])
    } else if (addingType === 'crew') {
      setCrew([...crew, {
        personId: newPerson.personId,
        person: selectedPerson,
        role: newPerson.role,
        department: newPerson.department,
        billingOrder: crew.filter(c => c.role === newPerson.role).length + 1
      }])
    }

    // Limpiar formulario
    setNewPerson({
      personId: 0,
      characterName: '',
      role: '',
      department: '',
      billingOrder: 0
    })
    setShowPersonSearch(false)
    setAddingType(null)
    setPersonSearch('')
  }

  // Crear nueva persona
  const createNewPerson = async () => {
    if (!personSearch) return

    try {
      const response = await fetch('/api/people', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ name: personSearch })
      })

      if (response.ok) {
        const newPersonData = await response.json()
        setAvailablePeople([newPersonData])
        setNewPerson({ ...newPerson, personId: newPersonData.id })
      }
    } catch (error) {
      console.error('Error creating person:', error)
    }
  }

  // Renderizar solo el contenido según las props
  if (showOnlyBasicInfo) {
    return (
      <div className="space-y-6">
        {/* Géneros */}
        <div>
          <h3 className="text-lg font-medium text-gray-900 mb-4 flex items-center gap-2">
            <Hash className="w-5 h-5" />
            Géneros
          </h3>
          <div className="flex flex-wrap gap-2">
            {availableGenres.map((genre: any) => (
              <label
                key={genre.id}
                className="inline-flex items-center"
              >
                <input
                  type="checkbox"
                  className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                  checked={selectedGenres.includes(genre.id)}
                  onChange={(e) => {
                    if (e.target.checked) {
                      setSelectedGenres([...selectedGenres, genre.id])
                    } else {
                      setSelectedGenres(selectedGenres.filter(id => id !== genre.id))
                    }
                  }}
                />
                <span className="ml-2 text-sm text-gray-700">{genre.name}</span>
              </label>
            ))}
          </div>
        </div>

        {/* Países - ACTUALIZADO CON EL NUEVO COMPONENTE */}
        <div>
          <h3 className="text-lg font-medium text-gray-900 mb-4 flex items-center gap-2">
            <Globe className="w-5 h-5" />
            Países Coproductores
          </h3>
          <CountrySelector
            availableCountries={availableCountries}
            selectedCountries={selectedCountries}
            onChange={setSelectedCountries}
            placeholder="Buscar país coproductor..."
          />
        </div>
        {/* Themes/Keywords */}
<div>
  <h3 className="text-lg font-medium text-gray-900 mb-4 flex items-center gap-2">
    <Tag className="w-5 h-5" />
    Themes / Keywords
  </h3>
  <ThemeSelector
    availableThemes={availableThemes}
    selectedThemes={selectedThemes}
    onChange={setSelectedThemes}
    placeholder="Buscar theme..."
  />
</div>

        {/* Idiomas */}
        <div>
          <h3 className="text-lg font-medium text-gray-900 mb-4 flex items-center gap-2">
            <Languages className="w-5 h-5" />
            Idiomas
          </h3>
          <div className="grid grid-cols-2 md:grid-cols-3 gap-2">
            {availableLanguages.map((language: any) => (
              <label
                key={language.id}
                className="inline-flex items-center"
              >
                <input
                  type="checkbox"
                  className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                  checked={selectedLanguages.includes(language.id)}
                  onChange={(e) => {
                    if (e.target.checked) {
                      setSelectedLanguages([...selectedLanguages, language.id])
                    } else {
                      setSelectedLanguages(selectedLanguages.filter(id => id !== language.id))
                    }
                  }}
                />
                <span className="ml-2 text-sm text-gray-700">{language.name}</span>
              </label>
            ))}
          </div>
        </div>
      </div>
    )
  }

  if (showOnlyCast) {
    return (
      <div>
        <h3 className="text-lg font-medium text-gray-900 mb-4 flex items-center gap-2">
          <UserPlus className="w-5 h-5" />
          Reparto
        </h3>

        {cast.length > 0 && (
          <div className="mb-4 space-y-2">
            {cast.map((member, index) => (
              <div key={index} className="flex items-center gap-4 p-3 bg-gray-50 rounded-lg">
                <div className="flex-1">
                  <span className="font-medium">{member.person.name}</span>
                  {member.characterName && (
                    <span className="text-gray-500"> como {member.characterName}</span>
                  )}
                </div>
                <button
                  type="button"
                  onClick={() => setCast(cast.filter((_, i) => i !== index))}
                  className="text-red-600 hover:text-red-800"
                >
                  <Trash2 className="w-4 h-4" />
                </button>
              </div>
            ))}
          </div>
        )}

        <button
          type="button"
          onClick={() => {
            setAddingType('cast')
            setShowPersonSearch(true)
          }}
          className="inline-flex items-center gap-2 px-4 py-2 border border-gray-300 rounded-lg text-sm font-medium text-gray-700 bg-white hover:bg-gray-50"
        >
          <Plus className="w-4 h-4" />
          Agregar Actor/Actriz
        </button>

        {/* Modal de búsqueda de personas */}
        {showPersonSearch && addingType === 'cast' && (
          <div className="fixed inset-0 bg-gray-500 bg-opacity-75 flex items-center justify-center p-4 z-50">
            <div className="bg-white rounded-lg max-w-md w-full p-6">
              <h3 className="text-lg font-medium text-gray-900 mb-4">
                Agregar Actor/Actriz
              </h3>

              <div className="space-y-4">
                {/* Búsqueda de persona */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Buscar Persona
                  </label>
                  <div className="relative">
                    <input
                      type="text"
                      value={personSearch}
                      onChange={(e) => {
                        setPersonSearch(e.target.value)
                        searchPeople(e.target.value)
                      }}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      placeholder="Escriba el nombre..."
                    />
                    <Search className="absolute right-3 top-2.5 w-5 h-5 text-gray-400" />
                  </div>

                  {availablePeople.length > 0 && (
                    <div className="mt-2 border border-gray-200 rounded-lg max-h-40 overflow-y-auto">
                      {availablePeople.map((person: any) => (
                        <button
                          key={person.id}
                          type="button"
                          onClick={() => setNewPerson({ ...newPerson, personId: person.id })}
                          className={`w-full text-left px-3 py-2 hover:bg-gray-50 ${newPerson.personId === person.id ? 'bg-blue-50' : ''
                            }`}
                        >
                          {person.name}
                        </button>
                      ))}
                    </div>
                  )}

                  {personSearch && availablePeople.length === 0 && (
                    <button
                      type="button"
                      onClick={createNewPerson}
                      className="mt-2 text-sm text-blue-600 hover:text-blue-800"
                    >
                      Crear nueva persona: "{personSearch}"
                    </button>
                  )}
                </div>

                {/* Campo de personaje */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Personaje
                  </label>
                  <input
                    type="text"
                    value={newPerson.characterName}
                    onChange={(e) => setNewPerson({ ...newPerson, characterName: e.target.value })}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder="Nombre del personaje"
                  />
                </div>
              </div>

              {/* Botones de acción */}
              <div className="mt-6 flex justify-end gap-3">
                <button
                  type="button"
                  onClick={() => {
                    setShowPersonSearch(false)
                    setAddingType(null)
                    setPersonSearch('')
                    setNewPerson({
                      personId: 0,
                      characterName: '',
                      role: '',
                      department: '',
                      billingOrder: 0
                    })
                  }}
                  className="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50"
                >
                  Cancelar
                </button>
                <button
                  type="button"
                  onClick={addPerson}
                  disabled={!newPerson.personId}
                  className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Agregar
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    )
  }

  if (showOnlyCrew) {
    return (
      <div>
        <h3 className="text-lg font-medium text-gray-900 mb-4 flex items-center gap-2">
          <UserPlus className="w-5 h-5" />
          Equipo Técnico
        </h3>

        {crew.length > 0 && (
          <div className="mb-4 space-y-2">
            {crew.map((member, index) => (
              <div key={index} className="flex items-center gap-4 p-3 bg-gray-50 rounded-lg">
                <div className="flex-1">
                  <span className="font-medium">{member.person.name}</span>
                  <span className="text-gray-500"> - {member.role}</span>
                  {member.department && (
                    <span className="text-gray-400"> ({member.department})</span>
                  )}
                </div>
                <button
                  type="button"
                  onClick={() => setCrew(crew.filter((_, i) => i !== index))}
                  className="text-red-600 hover:text-red-800"
                >
                  <Trash2 className="w-4 h-4" />
                </button>
              </div>
            ))}
          </div>
        )}

        <button
          type="button"
          onClick={() => {
            setAddingType('crew')
            setShowPersonSearch(true)
          }}
          className="inline-flex items-center gap-2 px-4 py-2 border border-gray-300 rounded-lg text-sm font-medium text-gray-700 bg-white hover:bg-gray-50"
        >
          <Plus className="w-4 h-4" />
          Agregar Miembro del Equipo
        </button>

        {/* Modal de búsqueda de personas para crew */}
        {showPersonSearch && addingType === 'crew' && (
          <div className="fixed inset-0 bg-gray-500 bg-opacity-75 flex items-center justify-center p-4 z-50">
            <div className="bg-white rounded-lg max-w-md w-full p-6">
              <h3 className="text-lg font-medium text-gray-900 mb-4">
                Agregar Miembro del Equipo
              </h3>

              <div className="space-y-4">
                {/* Búsqueda de persona */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Buscar Persona
                  </label>
                  <div className="relative">
                    <input
                      type="text"
                      value={personSearch}
                      onChange={(e) => {
                        setPersonSearch(e.target.value)
                        searchPeople(e.target.value)
                      }}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      placeholder="Escriba el nombre..."
                    />
                    <Search className="absolute right-3 top-2.5 w-5 h-5 text-gray-400" />
                  </div>

                  {availablePeople.length > 0 && (
                    <div className="mt-2 border border-gray-200 rounded-lg max-h-40 overflow-y-auto">
                      {availablePeople.map((person: any) => (
                        <button
                          key={person.id}
                          type="button"
                          onClick={() => setNewPerson({ ...newPerson, personId: person.id })}
                          className={`w-full text-left px-3 py-2 hover:bg-gray-50 ${newPerson.personId === person.id ? 'bg-blue-50' : ''
                            }`}
                        >
                          {person.name}
                        </button>
                      ))}
                    </div>
                  )}

                  {personSearch && availablePeople.length === 0 && (
                    <button
                      type="button"
                      onClick={createNewPerson}
                      className="mt-2 text-sm text-blue-600 hover:text-blue-800"
                    >
                      Crear nueva persona: "{personSearch}"
                    </button>
                  )}
                </div>

                {/* Campos específicos para crew */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Rol
                  </label>
                  <select
                    value={newPerson.role}
                    onChange={(e) => setNewPerson({ ...newPerson, role: e.target.value })}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  >
                    <option value="">Seleccionar...</option>
                    <option value="Director">Director</option>
                    <option value="Guionista">Guionista</option>
                    <option value="Productor">Productor</option>
                    <option value="Productor Ejecutivo">Productor Ejecutivo</option>
                    <option value="Director de Fotografía">Director de Fotografía</option>
                    <option value="Editor">Editor</option>
                    <option value="Compositor">Compositor</option>
                    <option value="Director de Arte">Director de Arte</option>
                    <option value="Diseñador de Vestuario">Diseñador de Vestuario</option>
                    <option value="Maquillador">Maquillador</option>
                    <option value="Sonidista">Sonidista</option>
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Departamento
                  </label>
                  <select
                    value={newPerson.department}
                    onChange={(e) => setNewPerson({ ...newPerson, department: e.target.value })}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  >
                    <option value="">Seleccionar...</option>
                    <option value="Dirección">Dirección</option>
                    <option value="Guión">Guión</option>
                    <option value="Producción">Producción</option>
                    <option value="Fotografía">Fotografía</option>
                    <option value="Montaje">Montaje</option>
                    <option value="Música">Música</option>
                    <option value="Arte">Arte</option>
                    <option value="Vestuario">Vestuario</option>
                    <option value="Maquillaje">Maquillaje</option>
                    <option value="Sonido">Sonido</option>
                    <option value="Efectos Especiales">Efectos Especiales</option>
                  </select>
                </div>
              </div>

              {/* Botones de acción */}
              <div className="mt-6 flex justify-end gap-3">
                <button
                  type="button"
                  onClick={() => {
                    setShowPersonSearch(false)
                    setAddingType(null)
                    setPersonSearch('')
                    setNewPerson({
                      personId: 0,
                      characterName: '',
                      role: '',
                      department: '',
                      billingOrder: 0
                    })
                  }}
                  className="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50"
                >
                  Cancelar
                </button>
                <button
                  type="button"
                  onClick={addPerson}
                  disabled={!newPerson.personId || !newPerson.role}
                  className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Agregar
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    )
  }

  if (showOnlyCompanies) {
    return (
      <div className="space-y-6">
        {/* Productoras */}
        <div>
          <h3 className="text-lg font-medium text-gray-900 mb-4 flex items-center gap-2">
            <Building className="w-5 h-5" />
            Productoras
          </h3>
          <select
            multiple
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            value={selectedProductionCompanies.map(String)}
            onChange={(e) => {
              const selected = Array.from(e.target.selectedOptions, option => parseInt(option.value))
              setSelectedProductionCompanies(selected)
            }}
          >
            {availableProductionCompanies.map((company: any) => (
              <option key={company.id} value={company.id}>
                {company.name}
              </option>
            ))}
          </select>
          <p className="mt-1 text-sm text-gray-500">
            Mantén presionado Ctrl/Cmd para seleccionar múltiples opciones
          </p>
        </div>

        {/* Distribuidoras */}
        <div>
          <h3 className="text-lg font-medium text-gray-900 mb-4 flex items-center gap-2">
            <Building className="w-5 h-5" />
            Distribuidoras
          </h3>
          <select
            multiple
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            value={selectedDistributionCompanies.map(String)}
            onChange={(e) => {
              const selected = Array.from(e.target.selectedOptions, option => parseInt(option.value))
              setSelectedDistributionCompanies(selected)
            }}
          >
            {availableDistributionCompanies.map((company: any) => (
              <option key={company.id} value={company.id}>
                {company.name}
              </option>
            ))}
          </select>
          <p className="mt-1 text-sm text-gray-500">
            Mantén presionado Ctrl/Cmd para seleccionar múltiples opciones
          </p>
        </div>
      </div>
    )
  }

  // Si no se especifica ninguna prop de mostrar solo, mostrar todo (comportamiento original)
  return (
    <div className="space-y-6">
      {/* Géneros */}
      <div>
        <h3 className="text-lg font-medium text-gray-900 mb-4 flex items-center gap-2">
          <Hash className="w-5 h-5" />
          Géneros
        </h3>
        <div className="flex flex-wrap gap-2">
          {availableGenres.map((genre: any) => (
            <label
              key={genre.id}
              className="inline-flex items-center"
            >
              <input
                type="checkbox"
                className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                checked={selectedGenres.includes(genre.id)}
                onChange={(e) => {
                  if (e.target.checked) {
                    setSelectedGenres([...selectedGenres, genre.id])
                  } else {
                    setSelectedGenres(selectedGenres.filter(id => id !== genre.id))
                  }
                }}
              />
              <span className="ml-2 text-sm text-gray-700">{genre.name}</span>
            </label>
          ))}
        </div>
      </div>

      {/* Cast */}
      <div>
        <h3 className="text-lg font-medium text-gray-900 mb-4 flex items-center gap-2">
          <UserPlus className="w-5 h-5" />
          Reparto
        </h3>

        {cast.length > 0 && (
          <div className="mb-4 space-y-2">
            {cast.map((member, index) => (
              <div key={index} className="flex items-center gap-4 p-3 bg-gray-50 rounded-lg">
                <div className="flex-1">
                  <span className="font-medium">{member.person.name}</span>
                  {member.characterName && (
                    <span className="text-gray-500"> como {member.characterName}</span>
                  )}
                </div>
                <button
                  type="button"
                  onClick={() => setCast(cast.filter((_, i) => i !== index))}
                  className="text-red-600 hover:text-red-800"
                >
                  <Trash2 className="w-4 h-4" />
                </button>
              </div>
            ))}
          </div>
        )}

        <button
          type="button"
          onClick={() => {
            setAddingType('cast')
            setShowPersonSearch(true)
          }}
          className="inline-flex items-center gap-2 px-4 py-2 border border-gray-300 rounded-lg text-sm font-medium text-gray-700 bg-white hover:bg-gray-50"
        >
          <Plus className="w-4 h-4" />
          Agregar Actor/Actriz
        </button>
      </div>

      {/* Crew */}
      <div>
        <h3 className="text-lg font-medium text-gray-900 mb-4 flex items-center gap-2">
          <UserPlus className="w-5 h-5" />
          Equipo Técnico
        </h3>

        {crew.length > 0 && (
          <div className="mb-4 space-y-2">
            {crew.map((member, index) => (
              <div key={index} className="flex items-center gap-4 p-3 bg-gray-50 rounded-lg">
                <div className="flex-1">
                  <span className="font-medium">{member.person.name}</span>
                  <span className="text-gray-500"> - {member.role}</span>
                  {member.department && (
                    <span className="text-gray-400"> ({member.department})</span>
                  )}
                </div>
                <button
                  type="button"
                  onClick={() => setCrew(crew.filter((_, i) => i !== index))}
                  className="text-red-600 hover:text-red-800"
                >
                  <Trash2 className="w-4 h-4" />
                </button>
              </div>
            ))}
          </div>
        )}

        <button
          type="button"
          onClick={() => {
            setAddingType('crew')
            setShowPersonSearch(true)
          }}
          className="inline-flex items-center gap-2 px-4 py-2 border border-gray-300 rounded-lg text-sm font-medium text-gray-700 bg-white hover:bg-gray-50"
        >
          <Plus className="w-4 h-4" />
          Agregar Miembro del Equipo
        </button>
      </div>

      {/* Países */}
      <div>
        <h3 className="text-lg font-medium text-gray-900 mb-4 flex items-center gap-2">
          <Globe className="w-5 h-5" />
          Países Coproductores
        </h3>
        <div className="grid grid-cols-2 md:grid-cols-3 gap-2">
          {availableCountries.map((country: any) => (
            <label
              key={country.id}
              className="inline-flex items-center"
            >
              <input
                type="checkbox"
                className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                checked={selectedCountries.includes(country.id)}
                onChange={(e) => {
                  if (e.target.checked) {
                    setSelectedCountries([...selectedCountries, country.id])
                  } else {
                    setSelectedCountries(selectedCountries.filter(id => id !== country.id))
                  }
                }}
              />
              <span className="ml-2 text-sm text-gray-700">{country.name}</span>
            </label>
          ))}
        </div>
      </div>

      {/* Idiomas */}
      <div>
        <h3 className="text-lg font-medium text-gray-900 mb-4 flex items-center gap-2">
          <Languages className="w-5 h-5" />
          Idiomas
        </h3>
        <div className="grid grid-cols-2 md:grid-cols-3 gap-2">
          {availableLanguages.map((language: any) => (
            <label
              key={language.id}
              className="inline-flex items-center"
            >
              <input
                type="checkbox"
                className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                checked={selectedLanguages.includes(language.id)}
                onChange={(e) => {
                  if (e.target.checked) {
                    setSelectedLanguages([...selectedLanguages, language.id])
                  } else {
                    setSelectedLanguages(selectedLanguages.filter(id => id !== language.id))
                  }
                }}
              />
              <span className="ml-2 text-sm text-gray-700">{language.name}</span>
            </label>
          ))}
        </div>
      </div>

      {/* Productoras */}
      <div>
        <h3 className="text-lg font-medium text-gray-900 mb-4 flex items-center gap-2">
          <Building className="w-5 h-5" />
          Productoras
        </h3>
        <select
          multiple
          className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          value={selectedProductionCompanies.map(String)}
          onChange={(e) => {
            const selected = Array.from(e.target.selectedOptions, option => parseInt(option.value))
            setSelectedProductionCompanies(selected)
          }}
        >
          {availableProductionCompanies.map((company: any) => (
            <option key={company.id} value={company.id}>
              {company.name}
            </option>
          ))}
        </select>
        <p className="mt-1 text-sm text-gray-500">
          Mantén presionado Ctrl/Cmd para seleccionar múltiples opciones
        </p>
      </div>

      {/* Distribuidoras */}
      <div>
        <h3 className="text-lg font-medium text-gray-900 mb-4 flex items-center gap-2">
          <Building className="w-5 h-5" />
          Distribuidoras
        </h3>
        <select
          multiple
          className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          value={selectedDistributionCompanies.map(String)}
          onChange={(e) => {
            const selected = Array.from(e.target.selectedOptions, option => parseInt(option.value))
            setSelectedDistributionCompanies(selected)
          }}
        >
          {availableDistributionCompanies.map((company: any) => (
            <option key={company.id} value={company.id}>
              {company.name}
            </option>
          ))}
        </select>
        <p className="mt-1 text-sm text-gray-500">
          Mantén presionado Ctrl/Cmd para seleccionar múltiples opciones
        </p>
      </div>

      {/* Modal de búsqueda de personas */}
      {showPersonSearch && (
        <div className="fixed inset-0 bg-gray-500 bg-opacity-75 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg max-w-md w-full p-6">
            <h3 className="text-lg font-medium text-gray-900 mb-4">
              {addingType === 'cast' ? 'Agregar Actor/Actriz' : 'Agregar Miembro del Equipo'}
            </h3>

            <div className="space-y-4">
              {/* Búsqueda de persona */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Buscar Persona
                </label>
                <div className="relative">
                  <input
                    type="text"
                    value={personSearch}
                    onChange={(e) => {
                      setPersonSearch(e.target.value)
                      searchPeople(e.target.value)
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder="Escriba el nombre..."
                  />
                  <Search className="absolute right-3 top-2.5 w-5 h-5 text-gray-400" />
                </div>

                {availablePeople.length > 0 && (
                  <div className="mt-2 border border-gray-200 rounded-lg max-h-40 overflow-y-auto">
                    {availablePeople.map((person: any) => (
                      <button
                        key={person.id}
                        type="button"
                        onClick={() => setNewPerson({ ...newPerson, personId: person.id })}
                        className={`w-full text-left px-3 py-2 hover:bg-gray-50 ${newPerson.personId === person.id ? 'bg-blue-50' : ''
                          }`}
                      >
                        {person.name}
                      </button>
                    ))}
                  </div>
                )}

                {personSearch && availablePeople.length === 0 && (
                  <button
                    type="button"
                    onClick={createNewPerson}
                    className="mt-2 text-sm text-blue-600 hover:text-blue-800"
                  >
                    Crear nueva persona: "{personSearch}"
                  </button>
                )}
              </div>

              {/* Campos específicos según el tipo */}
              {addingType === 'cast' && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Personaje
                  </label>
                  <input
                    type="text"
                    value={newPerson.characterName}
                    onChange={(e) => setNewPerson({ ...newPerson, characterName: e.target.value })}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder="Nombre del personaje"
                  />
                </div>
              )}

              {addingType === 'crew' && (
                <>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Rol
                    </label>
                    <select
                      value={newPerson.role}
                      onChange={(e) => setNewPerson({ ...newPerson, role: e.target.value })}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    >
                      <option value="">Seleccionar...</option>
                      <option value="Director">Director</option>
                      <option value="Guionista">Guionista</option>
                      <option value="Productor">Productor</option>
                      <option value="Productor Ejecutivo">Productor Ejecutivo</option>
                      <option value="Director de Fotografía">Director de Fotografía</option>
                      <option value="Editor">Editor</option>
                      <option value="Compositor">Compositor</option>
                      <option value="Director de Arte">Director de Arte</option>
                      <option value="Diseñador de Vestuario">Diseñador de Vestuario</option>
                      <option value="Maquillador">Maquillador</option>
                      <option value="Sonidista">Sonidista</option>
                    </select>
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Departamento
                    </label>
                    <select
                      value={newPerson.department}
                      onChange={(e) => setNewPerson({ ...newPerson, department: e.target.value })}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    >
                      <option value="">Seleccionar...</option>
                      <option value="Dirección">Dirección</option>
                      <option value="Guión">Guión</option>
                      <option value="Producción">Producción</option>
                      <option value="Fotografía">Fotografía</option>
                      <option value="Montaje">Montaje</option>
                      <option value="Música">Música</option>
                      <option value="Arte">Arte</option>
                      <option value="Vestuario">Vestuario</option>
                      <option value="Maquillaje">Maquillaje</option>
                      <option value="Sonido">Sonido</option>
                      <option value="Efectos Especiales">Efectos Especiales</option>
                    </select>
                  </div>
                </>
              )}
            </div>

            {/* Botones de acción */}
            <div className="mt-6 flex justify-end gap-3">
              <button
                type="button"
                onClick={() => {
                  setShowPersonSearch(false)
                  setAddingType(null)
                  setPersonSearch('')
                  setNewPerson({
                    personId: 0,
                    characterName: '',
                    role: '',
                    department: '',
                    billingOrder: 0
                  })
                }}
                className="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50"
              >
                Cancelar
              </button>
              <button
                type="button"
                onClick={addPerson}
                disabled={!newPerson.personId || (addingType === 'crew' && !newPerson.role)}
                className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
              >
                Agregar
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}

// ==================================================
// src/components/admin/ThemeSelector.tsx
// ==================================================
// src/components/admin/ThemeSelector.tsx
'use client'

import { useState, useRef, useEffect } from 'react'
import { X, Search, Tag } from 'lucide-react'

interface Theme {
  id: number
  name: string
  slug: string
  movieCount?: number
}

interface ThemeSelectorProps {
  availableThemes: Theme[]
  selectedThemes: number[]
  onChange: (themes: number[]) => void
  placeholder?: string
}

export function ThemeSelector({
  availableThemes,
  selectedThemes,
  onChange,
  placeholder = "Buscar theme..."
}: ThemeSelectorProps) {
  const [isOpen, setIsOpen] = useState(false)
  const [searchTerm, setSearchTerm] = useState('')
  const dropdownRef = useRef<HTMLDivElement>(null)

  // Cerrar dropdown al hacer clic fuera
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {
        setIsOpen(false)
      }
    }

    document.addEventListener('mousedown', handleClickOutside)
    return () => document.removeEventListener('mousedown', handleClickOutside)
  }, [])

  const filteredThemes = availableThemes.filter(theme =>
    theme.name.toLowerCase().includes(searchTerm.toLowerCase())
  )

  const selectedThemeObjects = availableThemes.filter(theme => 
    selectedThemes.includes(theme.id)
  )

  const toggleTheme = (themeId: number) => {
    if (selectedThemes.includes(themeId)) {
      onChange(selectedThemes.filter(id => id !== themeId))
    } else {
      onChange([...selectedThemes, themeId])
    }
  }

  const removeTheme = (themeId: number) => {
    onChange(selectedThemes.filter(id => id !== themeId))
  }

  return (
    <div className="relative" ref={dropdownRef}>
      {/* Themes seleccionados */}
      {selectedThemeObjects.length > 0 && (
        <div className="flex flex-wrap gap-2 mb-2">
          {selectedThemeObjects.map(theme => (
            <span
              key={theme.id}
              className="inline-flex items-center gap-1 px-3 py-1 bg-blue-100 text-blue-800 rounded-full text-sm"
            >
              <Tag className="w-3 h-3" />
              {theme.name}
              <button
                type="button"
                onClick={() => removeTheme(theme.id)}
                className="ml-1 hover:text-blue-900"
              >
                <X className="w-3 h-3" />
              </button>
            </span>
          ))}
        </div>
      )}
      
      <p className="text-sm text-gray-500 mb-2">
        {selectedThemes.length} seleccionado{selectedThemes.length !== 1 ? 's' : ''}
      </p>

      {/* Input de búsqueda */}
      <div className="relative">
        <input
          type="text"
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          onFocus={() => setIsOpen(true)}
          placeholder={placeholder}
          className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent pr-10"
        />
        <Search className="absolute right-3 top-2.5 w-5 h-5 text-gray-400 pointer-events-none" />
      </div>

      {/* Dropdown */}
      {isOpen && (
        <div className="absolute z-10 w-full mt-1 bg-white border border-gray-300 rounded-lg shadow-lg max-h-60 overflow-y-auto">
          {filteredThemes.length === 0 ? (
            <p className="p-3 text-sm text-gray-500">No se encontraron themes</p>
          ) : (
            filteredThemes.map(theme => (
              <button
                key={theme.id}
                type="button"
                onClick={() => toggleTheme(theme.id)}
                className={`w-full px-3 py-2 text-left hover:bg-gray-50 flex items-center justify-between ${
                  selectedThemes.includes(theme.id) ? 'bg-blue-50' : ''
                }`}
              >
                <span className="flex items-center gap-2">
                  <Tag className="w-4 h-4 text-gray-400" />
                  {theme.name}
                  {theme.movieCount !== undefined && theme.movieCount > 0 && (
                    <span className="text-xs text-gray-500">({theme.movieCount})</span>
                  )}
                </span>
                {selectedThemes.includes(theme.id) && (
                  <span className="text-blue-600">✓</span>
                )}
              </button>
            ))
          )}
        </div>
      )}
    </div>
  )
}

// ==================================================
// src/components/layout/Footer.tsx
// ==================================================
// src/app/components/layout/Footer.tsx
import Link from 'next/link'
import { Film, Github, Twitter, Mail } from 'lucide-react'

export default function Footer() {
  const currentYear = new Date().getFullYear()

  const footerLinks = {
    explore: [
      { href: '/peliculas', label: 'Todas las Películas' },
      { href: '/personas', label: 'Directores y Actores' },
      { href: '/generos', label: 'Explorar por Género' },
      { href: '/anos', label: 'Películas por Año' },
    ],
    about: [
      { href: '/sobre-nosotros', label: 'Sobre CineNacional' },
      { href: '/contacto', label: 'Contacto' },
      { href: '/api', label: 'API para Desarrolladores' },
      { href: '/colaborar', label: 'Cómo Colaborar' },
    ],
    legal: [
      { href: '/terminos', label: 'Términos de Uso' },
      { href: '/privacidad', label: 'Política de Privacidad' },
      { href: '/copyright', label: 'Derechos de Autor' },
    ],
  }

  return (
    <footer className="bg-zinc-900 border-t border-zinc-800 mt-auto">
      <div className="container mx-auto px-4 py-12">
        <div className="grid grid-cols-1 md:grid-cols-4 gap-8">
          {/* Brand Section */}
          <div className="col-span-1">
            <Link href="/" className="flex items-center space-x-2 text-white mb-4">
              <Film className="w-8 h-8" />
              <span className="font-bold text-xl">CineNacional</span>
            </Link>
            <p className="text-gray-400 text-sm mb-4">
              La base de datos más completa del cine argentino. 
              Preservando nuestra historia cinematográfica.
            </p>
            <div className="flex space-x-4">
              <a href="https://github.com" className="text-gray-400 hover:text-white transition-colors">
                <Github className="w-5 h-5" />
              </a>
              <a href="https://twitter.com" className="text-gray-400 hover:text-white transition-colors">
                <Twitter className="w-5 h-5" />
              </a>
              <a href="mailto:info@cinenacional.com" className="text-gray-400 hover:text-white transition-colors">
                <Mail className="w-5 h-5" />
              </a>
            </div>
          </div>

          {/* Explore Links */}
          <div>
            <h3 className="text-white font-semibold mb-4">Explorar</h3>
            <ul className="space-y-2">
              {footerLinks.explore.map((link) => (
                <li key={link.href}>
                  <Link href={link.href} className="text-gray-400 hover:text-white transition-colors text-sm">
                    {link.label}
                  </Link>
                </li>
              ))}
            </ul>
          </div>

          {/* About Links */}
          <div>
            <h3 className="text-white font-semibold mb-4">Información</h3>
            <ul className="space-y-2">
              {footerLinks.about.map((link) => (
                <li key={link.href}>
                  <Link href={link.href} className="text-gray-400 hover:text-white transition-colors text-sm">
                    {link.label}
                  </Link>
                </li>
              ))}
            </ul>
          </div>

          {/* Legal Links */}
          <div>
            <h3 className="text-white font-semibold mb-4">Legal</h3>
            <ul className="space-y-2">
              {footerLinks.legal.map((link) => (
                <li key={link.href}>
                  <Link href={link.href} className="text-gray-400 hover:text-white transition-colors text-sm">
                    {link.label}
                  </Link>
                </li>
              ))}
            </ul>
          </div>
        </div>

        {/* Bottom Bar */}
        <div className="border-t border-zinc-800 mt-8 pt-8 text-center">
          <p className="text-gray-400 text-sm">
            © {currentYear} CineNacional. Todos los derechos reservados.
          </p>
          <p className="text-gray-500 text-xs mt-2">
            Hecho con ❤️ para el cine argentino
          </p>
        </div>
      </div>
    </footer>
  )
}

// ==================================================
// src/components/layout/Header.tsx
// ==================================================
// src/components/layout/Header.tsx
'use client'

import Link from 'next/link'
import { useState } from 'react'
import { Search, Menu, X, Film } from 'lucide-react'
import { useRouter } from 'next/navigation'

export default function Header() {
  const [isMenuOpen, setIsMenuOpen] = useState(false)
  const [searchQuery, setSearchQuery] = useState('')
  const router = useRouter()

  const handleSearch = (e: React.FormEvent) => {
    e.preventDefault()
    if (searchQuery.trim()) {
      router.push(`/buscar?q=${encodeURIComponent(searchQuery)}`)
      setSearchQuery('')
    }
  }

  const navItems = [
    { href: '/peliculas', label: 'Películas' },
    { href: '/personas', label: 'Personas' },
    { href: '/generos', label: 'Géneros' },
    { href: '/anos', label: 'Por Año' },
    { href: '/premios', label: 'Premios' },
  ]

  return (
    <header className="bg-zinc-900 border-b border-zinc-800 sticky top-0 z-50">
      <div className="container mx-auto px-4">
        <div className="flex items-center justify-between h-16">
          {/* Logo */}
          <Link href="/" className="flex items-center space-x-2 text-white hover:text-red-500 transition-colors">
            <Film className="w-8 h-8" />
            <span className="font-bold text-xl hidden sm:block">CineNacional</span>
          </Link>

          {/* Desktop Navigation */}
          <nav className="hidden md:flex items-center space-x-6">
            {navItems.map((item) => (
              <Link
                key={item.href}
                href={item.href}
                className="text-gray-300 hover:text-white transition-colors"
              >
                {item.label}
              </Link>
            ))}
          </nav>

          {/* Search Bar */}
          <form onSubmit={handleSearch} className="hidden md:flex items-center">
            <div className="relative">
              <input
                type="text"
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                placeholder="Buscar películas, personas..."
                className="bg-zinc-800 text-white px-4 py-2 pr-10 rounded-lg w-64 focus:outline-none focus:ring-2 focus:ring-red-500"
              />
              <button
                type="submit"
                className="absolute right-2 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-white"
              >
                <Search className="w-5 h-5" />
              </button>
            </div>
          </form>

          {/* Mobile Menu Button */}
          <button
            onClick={() => setIsMenuOpen(!isMenuOpen)}
            className="md:hidden text-white"
          >
            {isMenuOpen ? <X className="w-6 h-6" /> : <Menu className="w-6 h-6" />}
          </button>
        </div>

        {/* Mobile Menu */}
        {isMenuOpen && (
          <div className="md:hidden py-4 border-t border-zinc-800">
            <form onSubmit={handleSearch} className="mb-4">
              <div className="relative">
                <input
                  type="text"
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  placeholder="Buscar..."
                  className="bg-zinc-800 text-white px-4 py-2 pr-10 rounded-lg w-full focus:outline-none focus:ring-2 focus:ring-red-500"
                />
                <button
                  type="submit"
                  className="absolute right-2 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-white"
                >
                  <Search className="w-5 h-5" />
                </button>
              </div>
            </form>
            <nav className="flex flex-col space-y-2">
              {navItems.map((item) => (
                <Link
                  key={item.href}
                  href={item.href}
                  onClick={() => setIsMenuOpen(false)}
                  className="text-gray-300 hover:text-white transition-colors py-2"
                >
                  {item.label}
                </Link>
              ))}
            </nav>
          </div>
        )}
      </div>
    </header>
  )
}

// ==================================================
// src/components/movies/CastSection.tsx
// ==================================================
'use client';

import { useState } from 'react';

interface CastMember {
  name: string;
  character: string;
  image?: string;
}

interface CastSectionProps {
  mainCast: CastMember[];
  fullCast?: CastMember[];
}

export function CastSection({ mainCast, fullCast = [] }: CastSectionProps) {
  const [showFullCast, setShowFullCast] = useState(false);

  return (
    <div className="mb-8">
      <h3 className="text-lg font-medium mb-4 text-cine-accent">Reparto Principal</h3>
      
      {/* Main Cast */}
      <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
        {mainCast.map((actor, index) => (
          <div key={index} className="text-center">
            <div className="w-20 h-20 rounded-full person-placeholder mx-auto mb-2">
              {actor.image ? (
                <img 
                  src={actor.image} 
                  alt={actor.name}
                  className="w-full h-full object-cover rounded-full"
                />
              ) : (
                <svg className="w-8 h-8 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="1.5" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"/>
                </svg>
              )}
            </div>
            <p className="font-medium text-white">{actor.name}</p>
            <p className="text-sm text-gray-400">{actor.character}</p>
          </div>
        ))}
      </div>
      
      {/* Full Cast (if provided) */}
      {fullCast.length > 0 && (
        <>
          {showFullCast && (
            <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-5 gap-4 mt-4 animate-fade-in">
              {fullCast.map((actor, index) => (
                <div key={index} className="text-center">
                  <div className="w-16 h-16 rounded-full person-placeholder mx-auto mb-2">
                    {actor.image ? (
                      <img 
                        src={actor.image} 
                        alt={actor.name}
                        className="w-full h-full object-cover rounded-full"
                      />
                    ) : (
                      <svg className="w-6 h-6 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="1.5" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"/>
                      </svg>
                    )}
                  </div>
                  <p className="font-medium text-white text-sm">{actor.name}</p>
                  <p className="text-xs text-gray-400">{actor.character}</p>
                </div>
              ))}
            </div>
          )}
          
          <div className="mt-6">
            <button 
              onClick={() => setShowFullCast(!showFullCast)}
              className="text-cine-accent hover:text-blue-300 font-medium transition-colors flex items-center space-x-2"
            >
              <span>{showFullCast ? 'Ocultar reparto completo' : 'Ver reparto completo'}</span>
              <svg 
                className={`w-4 h-4 transition-transform duration-200 ${showFullCast ? 'rotate-180' : ''}`} 
                fill="none" stroke="currentColor" viewBox="0 0 24 24"
              >
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M19 9l-7 7-7-7"></path>
              </svg>
            </button>
          </div>
        </>
      )}
    </div>
  );
}

// ==================================================
// src/components/movies/CloudinaryImage.tsx
// ==================================================
// src/components/movies/CloudinaryImage.tsx
'use client'

import { CldImage } from 'next-cloudinary'
import { useState } from 'react'

interface CloudinaryImageProps {
  src: string
  alt: string
  width: number
  height: number
  priority?: boolean
  className?: string
}

export function CloudinaryImage({
  src,
  alt,
  width,
  height,
  priority = false,
  className
}: CloudinaryImageProps) {
  const [isLoading, setIsLoading] = useState(true)
  const [error, setError] = useState(false)

  // Si no hay src, mostrar placeholder
  if (!src) {
    return (
      <div className={`bg-gray-200 flex items-center justify-center ${className}`}>
        <span className="text-gray-400">Sin imagen</span>
      </div>
    )
  }

  // Si hay error, mostrar placeholder
  if (error) {
    return (
      <div className={`bg-gray-200 flex items-center justify-center ${className}`}>
        <span className="text-gray-400">Error al cargar imagen</span>
      </div>
    )
  }

  // Para imágenes que no son de Cloudinary, usar img normal
  if (!src.includes('cloudinary')) {
    return (
      <img
        src={src}
        alt={alt}
        width={width}
        height={height}
        className={className}
        loading={priority ? 'eager' : 'lazy'}
        onError={() => setError(true)}
      />
    )
  }

  // Extraer public_id de la URL de Cloudinary
  const publicId = src.split('/upload/')[1]?.split('.')[0] || src

  return (
    <div className="relative">
      {isLoading && (
        <div className={`absolute inset-0 bg-gray-200 animate-pulse ${className}`} />
      )}
      <CldImage
        width={width}
        height={height}
        src={publicId}
        alt={alt}
        loading={priority ? 'eager' : 'lazy'}
        className={className}
        crop="fill"
        gravity="auto"
        format="auto"
        quality="auto"
        onLoad={() => setIsLoading(false)}
        onError={() => setError(true)}
      />
    </div>
  )
}

// ==================================================
// src/components/movies/CrewSection.tsx
// ==================================================
'use client';

import { useState } from 'react';

interface CrewMember {
  name: string;
  role: string;
}

interface CrewDepartment {
  [department: string]: CrewMember[];
}

interface CrewSectionProps {
  basicCrew: CrewDepartment;
  fullCrew?: CrewDepartment;
}

export function CrewSection({ basicCrew, fullCrew }: CrewSectionProps) {
  const [showFullCrew, setShowFullCrew] = useState(false);

  const renderCrewMember = (member: CrewMember, index: number, showRole: boolean = false) => {
    if (showRole) {
      return (
        <div key={index} className="flex justify-between">
          <span className="text-white">{member.name}</span>
          <span className="text-gray-400 text-xs">{member.role}</span>
        </div>
      );
    }
    return <p key={index} className="text-white">{member.name}</p>;
  };

  const renderDepartment = (title: string, members: CrewMember[], showRoles: boolean = false) => (
    <div>
      <h4 className="text-gray-400 font-medium mb-2">{title}</h4>
      <div className="ml-4 space-y-1">
        {members.map((member, index) => renderCrewMember(member, index, showRoles))}
      </div>
    </div>
  );

  return (
    <div>
      <h3 className="text-lg font-medium mb-4 text-cine-accent">Equipo Técnico</h3>
      
      {!showFullCrew ? (
        <div className="grid grid-cols-1 md:grid-cols-2 gap-8 text-sm">
          <div className="space-y-4">
            {Object.entries(basicCrew).slice(0, Math.ceil(Object.keys(basicCrew).length / 2)).map(([dept, members]) => (
              <div key={dept}>
                {renderDepartment(dept, members)}
              </div>
            ))}
          </div>
          <div className="space-y-4">
            {Object.entries(basicCrew).slice(Math.ceil(Object.keys(basicCrew).length / 2)).map(([dept, members]) => (
              <div key={dept}>
                {renderDepartment(dept, members)}
              </div>
            ))}
          </div>
        </div>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 gap-8 text-sm animate-fade-in">
          <div className="space-y-4">
            {fullCrew && Object.entries(fullCrew).slice(0, Math.ceil(Object.keys(fullCrew).length / 2)).map(([dept, members]) => (
              <div key={dept}>
                {renderDepartment(dept, members, true)}
              </div>
            ))}
          </div>
          <div className="space-y-4">
            {fullCrew && Object.entries(fullCrew).slice(Math.ceil(Object.keys(fullCrew).length / 2)).map(([dept, members]) => (
              <div key={dept}>
                {renderDepartment(dept, members, true)}
              </div>
            ))}
          </div>
        </div>
      )}
      
      {fullCrew && Object.keys(fullCrew).length > 0 && (
        <div className="mt-6">
          <button 
            onClick={() => setShowFullCrew(!showFullCrew)}
            className="text-cine-accent hover:text-blue-300 font-medium transition-colors flex items-center space-x-2"
          >
            <span>{showFullCrew ? 'Ocultar equipo técnico completo' : 'Ver equipo técnico completo'}</span>
            <svg 
              className={`w-4 h-4 transition-transform duration-200 ${showFullCrew ? 'rotate-180' : ''}`} 
              fill="none" stroke="currentColor" viewBox="0 0 24 24"
            >
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M19 9l-7 7-7-7"></path>
            </svg>
          </button>
        </div>
      )}
    </div>
  );
}

// ==================================================
// src/components/movies/ImageGallery.tsx
// ==================================================
'use client';

import { useState, useEffect } from 'react';

interface ImageGalleryProps {
  images: string[];
  movieTitle: string;
}

export function ImageGallery({ images, movieTitle }: ImageGalleryProps) {
  const [currentSlide, setCurrentSlide] = useState(0);
  const [lightboxImage, setLightboxImage] = useState<{ src: string, alt: string, index: number } | null>(null);

  // Slider functions
  const nextSlide = () => {
    const totalSlides = images.length;
    const visibleSlides = 3;
    setCurrentSlide(prev => {
      const next = prev + 1;
      return next > Math.max(0, totalSlides - visibleSlides) ? 0 : next;
    });
  };

  const prevSlide = () => {
    const totalSlides = images.length;
    const visibleSlides = 3;
    setCurrentSlide(prev => {
      const next = prev - 1;
      return next < 0 ? Math.max(0, totalSlides - visibleSlides) : next;
    });
  };

  const openLightbox = (src: string, alt: string, index: number) => {
    setLightboxImage({ src, alt, index });
    document.body.style.overflow = 'hidden';
  };

  const closeLightbox = () => {
    setLightboxImage(null);
    document.body.style.overflow = 'auto';
  };

  // Navegación en el lightbox
  const navigateLightbox = (direction: 'prev' | 'next') => {
    if (!lightboxImage || images.length === 0) return;

    let newIndex: number;
    if (direction === 'next') {
      newIndex = (lightboxImage.index + 1) % images.length;
    } else {
      newIndex = lightboxImage.index === 0 ? images.length - 1 : lightboxImage.index - 1;
    }

    setLightboxImage({
      src: images[newIndex],
      alt: `Imagen ${newIndex + 1} - ${movieTitle}`,
      index: newIndex
    });
  };

  // Cerrar lightbox con Escape y navegar con flechas
  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      if (!lightboxImage) return;

      switch (e.key) {
        case 'Escape':
          closeLightbox();
          break;
        case 'ArrowLeft':
          e.preventDefault();
          navigateLightbox('prev');
          break;
        case 'ArrowRight':
          e.preventDefault();
          navigateLightbox('next');
          break;
      }
    };

    document.addEventListener('keydown', handleKeyDown);
    return () => document.removeEventListener('keydown', handleKeyDown);
  }, [lightboxImage, images]);

  return (
    <>
      <div className="relative">
        <div className="overflow-hidden">
          <div
            className="flex transition-transform duration-500 ease-in-out"
            style={{ transform: `translateX(-${currentSlide * (100 / 3)}%)` }}
          >
            {images.length > 0 ? (
              images.map((imageSrc, index) => (
                <div key={index} className="flex-shrink-0 w-1/3 px-2">
                  <div
                    className="group cursor-pointer relative overflow-hidden rounded-lg aspect-video bg-cine-gray"
                    onClick={() => openLightbox(imageSrc, `Imagen ${index + 1} - ${movieTitle}`, index)}
                  >
                    <img
                      src={imageSrc}
                      alt={`Imagen ${index + 1} - ${movieTitle}`}
                      className="w-full h-full object-cover transition-transform duration-300 group-hover:scale-110"
                      loading="lazy"
                      onError={(e) => {
                        (e.target as HTMLImageElement).src = 'https://images.unsplash.com/photo-1518998053901-5348d3961a04?w=800&fit=crop&auto=format';
                      }}
                    />
                    <div className="absolute inset-0 bg-black/0 group-hover:bg-black/20 transition-colors duration-300"></div>
                    <div className="absolute bottom-0 left-0 right-0 p-4 bg-gradient-to-t from-black/80 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300">
                      <p className="text-white text-sm font-medium">Imagen {index + 1}</p>
                    </div>
                  </div>
                </div>
              ))
            ) : (
              <div className="flex-shrink-0 w-1/3 px-2">
                <div className="group cursor-pointer relative overflow-hidden rounded-lg aspect-video bg-cine-gray">
                  <div className="w-full h-full flex items-center justify-center">
                    <div className="text-center">
                      <svg className="w-8 h-8 text-cine-accent mx-auto mb-2 animate-spin" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                      </svg>
                      <p className="text-sm text-gray-400">Cargando imágenes...</p>
                    </div>
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>

        {/* Navigation arrows */}
        {images.length > 3 && (
          <>
            <button
              onClick={prevSlide}
              className="absolute left-0 top-1/2 -translate-y-1/2 -translate-x-4 bg-cine-gray/90 hover:bg-cine-accent text-white p-3 rounded-full transition-colors duration-300 backdrop-blur-sm"
            >
              <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 19l-7-7 7-7"></path>
              </svg>
            </button>
            <button
              onClick={nextSlide}
              className="absolute right-0 top-1/2 -translate-y-1/2 translate-x-4 bg-cine-gray/90 hover:bg-cine-accent text-white p-3 rounded-full transition-colors duration-300 backdrop-blur-sm"
            >
              <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 5l7 7-7 7"></path>
              </svg>
            </button>
          </>
        )}
      </div>

      {/* Lightbox Modal */}
      {lightboxImage && (
        <div
          className="fixed inset-0 bg-black/90 flex items-center justify-center z-50 opacity-0 invisible transition-all duration-300 animate-fade-in"
          style={{ opacity: 1, visibility: 'visible' }}
          onClick={(e) => e.target === e.currentTarget && closeLightbox()}
        >
          <div className="relative max-w-4xl max-h-[90vh] w-full px-4 flex items-center justify-center">
            {/* Flecha izquierda */}
            <button
              onClick={(e) => {
                e.stopPropagation();
                navigateLightbox('prev');
              }}
              className="absolute left-4 md:left-8 bg-black/50 hover:bg-cine-accent text-white p-3 rounded-full transition-all duration-300 z-10 hover:scale-110"
              aria-label="Imagen anterior"
            >
              <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 19l-7-7 7-7"></path>
              </svg>
            </button>

            {/* Contenedor de imagen */}
            <div className="relative max-w-full max-h-[90vh] transform scale-80 transition-transform duration-300"
              style={{ transform: 'scale(1)' }}>
              <button
                onClick={closeLightbox}
                className="absolute -top-10 right-0 bg-black/50 hover:bg-cine-accent text-white text-2xl w-10 h-10 rounded-full flex items-center justify-center transition-colors duration-300"
              >
                ×
              </button>
              <img
                src={lightboxImage.src}
                alt={lightboxImage.alt}
                className="max-w-full max-h-[80vh] object-contain rounded-lg shadow-2xl"
              />
              <div className="absolute -bottom-12 left-0 right-0 text-center">
                <p className="text-white text-base font-medium">{lightboxImage.alt}</p>
                <p className="text-gray-400 text-sm mt-1">{lightboxImage.index + 1} de {images.length}</p>
              </div>
            </div>

            {/* Flecha derecha */}
            <button
              onClick={(e) => {
                e.stopPropagation();
                navigateLightbox('next');
              }}
              className="absolute right-4 md:right-8 bg-black/50 hover:bg-cine-accent text-white p-3 rounded-full transition-all duration-300 z-10 hover:scale-110"
              aria-label="Imagen siguiente"
            >
              <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 5l7 7-7 7"></path>
              </svg>
            </button>
          </div>
        </div>
      )}
    </>
  );
}

// ==================================================
// src/components/movies/MovieHero.tsx
// ==================================================
'use client';

import { useEffect } from 'react';

interface MovieHeroProps {
  title: string;
  year: number;
  duration: number;
  genres: string[];
  rating: number;
  gallery: string[];
}

export function MovieHero({ title, year, duration, genres, rating, gallery }: MovieHeroProps) {
  // Ajustar gradientes al tamaño real de la imagen
  useEffect(() => {
    const adjustGradients = () => {
      const img = document.querySelector('.hero-image') as HTMLImageElement;
      const container = document.querySelector('.hero-image-wrapper') as HTMLElement;
      const gradientsContainer = document.querySelector('.hero-gradients-container') as HTMLElement;
      
      if (img && container && gradientsContainer && img.complete) {
        const containerWidth = container.offsetWidth;
        const containerHeight = container.offsetHeight;
        const imgAspectRatio = img.naturalWidth / img.naturalHeight;
        const containerAspectRatio = containerWidth / containerHeight;
        
        let displayWidth, displayHeight;
        
        if (imgAspectRatio > containerAspectRatio) {
          // Imagen más ancha - se ajusta por ancho
          displayWidth = containerWidth;
          displayHeight = containerWidth / imgAspectRatio;
        } else {
          // Imagen más alta - se ajusta por altura
          displayHeight = containerHeight;
          displayWidth = containerHeight * imgAspectRatio;
        }
        
        // Centrar y ajustar el contenedor de gradientes
        gradientsContainer.style.width = `${displayWidth}px`;
        gradientsContainer.style.height = `${displayHeight}px`;
        gradientsContainer.style.left = `${(containerWidth - displayWidth) / 2}px`;
        gradientsContainer.style.top = `${(containerHeight - displayHeight) / 2}px`;
      }
    };

    // Ajustar cuando la imagen cambie
    const img = document.querySelector('.hero-image') as HTMLImageElement;
    if (img) {
      img.addEventListener('load', adjustGradients);
      // También ajustar al cambiar el tamaño de la ventana
      window.addEventListener('resize', adjustGradients);
      
      // Ajustar inmediatamente si la imagen ya está cargada
      if (img.complete) {
        adjustGradients();
      }
    }

    return () => {
      if (img) {
        img.removeEventListener('load', adjustGradients);
      }
      window.removeEventListener('resize', adjustGradients);
    };
  }, [gallery]);

  // Cambiar fondo cada 8 segundos
  useEffect(() => {
    if (gallery.length > 0) {
      const interval = setInterval(() => {
        const randomIndex = Math.floor(Math.random() * gallery.length);
        const heroElement = document.querySelector('.hero-image');
        if (heroElement) {
          (heroElement as HTMLImageElement).src = gallery[randomIndex];
        }
      }, 8000);
      return () => clearInterval(interval);
    }
  }, [gallery]);

  // Función para formatear géneros
  const formatGenres = (genres: string[]) => {
    return genres.join(', ');
  };

  return (
    <div className="relative hero-background-container -mt-16 pt-16">
      {/* Wrapper de imagen con gradientes */}
      <div className="hero-image-wrapper">
        {gallery.length > 0 && (
          <>
            <img 
              src={gallery[0]}
              alt={title}
              className="hero-image"
            />
            {/* Contenedor de gradientes que se ajusta a la imagen */}
            <div className="hero-gradients-container">
              <div className="hero-gradient-left"></div>
              <div className="hero-gradient-right"></div>
              <div className="hero-gradient-top"></div>
              <div className="hero-gradient-bottom-inner"></div>
            </div>
          </>
        )}
      </div>
      
      {/* Gradientes globales del contenedor */}
      <div className="hero-gradient-bottom"></div>
      <div className="hero-vignette"></div>
      
      {/* Contenido */}
      <div className="hero-content">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 pb-8 w-full">
          <h1 className="serif-heading text-5xl md:text-6xl lg:text-7xl text-white leading-tight drop-shadow-2xl">
            {title}
          </h1>
          <div className="flex flex-wrap items-center gap-4 text-gray-200 mt-4">
            <span className="bg-cine-accent/90 px-3 py-1 rounded-full text-sm font-medium text-white backdrop-blur-sm">
              {year}
            </span>
            <span className="drop-shadow-lg">{duration} min</span>
            <span className="drop-shadow-lg">{formatGenres(genres)}</span>
            <div className="flex items-center space-x-1">
              <svg className="w-5 h-5 text-yellow-400 fill-current drop-shadow-lg" viewBox="0 0 20 20">
                <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"/>
              </svg>
              <span className="text-yellow-400 font-bold drop-shadow-lg">{rating}</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

// ==================================================
// src/components/movies/MovieInfo.tsx
// ==================================================
'use client';

interface Director {
  name: string;
  image?: string;
}

interface MovieInfoProps {
  synopsis: string;
  director: Director;
  trailerUrl?: string;
  onTrailerClick?: () => void;
  onShareClick?: () => void;
}

export function MovieInfo({ 
  synopsis, 
  director, 
  trailerUrl, 
  onTrailerClick,
  onShareClick 
}: MovieInfoProps) {
  return (
    <div className="space-y-6">
      {/* Synopsis */}
      <div>
        <p className="serif-body text-lg text-gray-300 leading-relaxed">
          {synopsis}
        </p>
      </div>

      {/* Director */}
      <div className="grid grid-cols-1 gap-6">
        <div>
          <h3 className="text-lg font-medium mb-3 text-cine-accent">Dirección</h3>
          <div className="flex items-center space-x-3">
            <div className="w-12 h-12 rounded-full person-placeholder">
              {director.image ? (
                <img 
                  src={director.image} 
                  alt={director.name}
                  className="w-full h-full object-cover rounded-full"
                />
              ) : (
                <svg className="w-6 h-6 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="1.5" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                </svg>
              )}
            </div>
            <div>
              <p className="font-medium text-white">{director.name}</p>
            </div>
          </div>
        </div>
      </div>

      {/* Actions */}
      <div className="flex flex-wrap gap-4">
        {trailerUrl && (
          <button 
            onClick={onTrailerClick}
            className="bg-cine-accent hover:bg-blue-600 px-6 py-3 rounded-lg font-medium transition-colors flex items-center space-x-2 text-white"
          >
            <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z" />
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
            <span>Ver Trailer</span>
          </button>
        )}
        <button 
          onClick={onShareClick}
          className="border border-gray-600 hover:border-cine-accent px-6 py-3 rounded-lg font-medium transition-colors text-white"
        >
          Compartir
        </button>
      </div>
    </div>
  );
}

// ==================================================
// src/components/movies/MoviePoster.tsx
// ==================================================
'use client';

interface MoviePosterProps {
  imageUrl?: string;
  title: string;
}

export function MoviePoster({ imageUrl, title }: MoviePosterProps) {
  return (
    <div className="aspect-[2/3] rounded-lg overflow-hidden poster-shadow">
      {imageUrl ? (
        <img 
          src={imageUrl} 
          alt={`Poster de ${title}`}
          className="w-full h-full object-cover"
        />
      ) : (
        <div className="movie-placeholder w-full h-full">
          <svg className="w-16 h-16 text-cine-accent mb-4 opacity-60" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="1.5" d="M15.75 10.5l4.72-4.72a.75.75 0 011.28.53v11.38a.75.75 0 01-1.28.53l-4.72-4.72M4.5 18.75h9a2.25 2.25 0 002.25-2.25v-9a2.25 2.25 0 00-2.25-2.25h-9A2.25 2.25 0 002.25 7.5v9a2.25 2.25 0 002.25 2.25z" />
          </svg>
          <p className="text-sm text-gray-400">Afiche no disponible</p>
        </div>
      )}
    </div>
  );
}

// ==================================================
// src/components/movies/MovieSidebar.tsx
// ==================================================
'use client';

interface MovieSidebarProps {
  year: number;
  duration: number;
  country: string;
  rating: string;
  format?: string;
  genres: string[];
  themes: string[];
}

export function MovieSidebar({
  year,
  duration,
  country,
  rating,
  format = "Color | Sonora",
  genres,
  themes
}: MovieSidebarProps) {
  return (
    <div className="glass-effect rounded-lg p-6 space-y-6">
      {/* Technical Information */}
      <div>
        <h3 className="text-lg font-medium mb-4 text-cine-accent">Información</h3>
        <div className="space-y-3 text-sm">
          <div className="flex items-start">
            <span className="text-gray-400 w-32 flex-shrink-0">Año:</span>
            <span className="ml-2 text-white">{year}</span>
          </div>
          <div className="flex items-start">
            <span className="text-gray-400 w-32 flex-shrink-0">Duración:</span>
            <span className="ml-2 text-white">{duration} min</span>
          </div>
          <div className="flex items-start">
            <span className="text-gray-400 w-32 flex-shrink-0">País coproductor:</span>
            <span className="ml-2 text-white">{country}</span>
          </div>
          <div className="flex items-start">
            <span className="text-gray-400 w-32 flex-shrink-0">Calificación:</span>
            <span className="ml-2 text-white">{rating}</span>
          </div>
          <div className="flex justify-end">
            <span className="text-white">{format}</span>
          </div>
        </div>
      </div>

      {/* Genres */}
      <div>
        <h3 className="text-lg font-medium mb-4 text-cine-accent">Géneros</h3>
        <div className="flex flex-wrap gap-2">
          {genres.map((genre, index) => (
            <span 
              key={index} 
              className="bg-cine-gray px-3 py-1 rounded-full text-sm text-white"
            >
              {genre}
            </span>
          ))}
        </div>
      </div>

      {/* Themes */}
      <div>
        <h3 className="text-lg font-medium mb-4 text-cine-accent">Temas</h3>
        <div className="flex flex-wrap gap-2">
          {themes.map((theme, index) => (
            <span 
              key={index} 
              className="bg-cine-gray px-3 py-1 rounded-full text-sm text-white"
            >
              {theme}
            </span>
          ))}
        </div>
      </div>
    </div>
  );
}

// ==================================================
// src/components/movies/SimilarMovies.tsx
// ==================================================
'use client';

import Link from 'next/link';

interface Movie {
  id?: string;
  slug?: string;
  title: string;
  year: string | number;
  posterUrl?: string;
}

interface SimilarMoviesProps {
  movies: Movie[];
}

export function SimilarMovies({ movies }: SimilarMoviesProps) {
  return (
    <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12 border-t border-gray-800">
      <h2 className="serif-heading text-2xl text-white mb-6">Películas Similares</h2>
      <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-4">
        {movies.map((movie, index) => {
          const movieLink = movie.slug || movie.id || '#';
          
          return (
            <Link 
              key={movie.id || index} 
              href={`/peliculas/${movieLink}`}
              className="group cursor-pointer block"
            >
              <div className="aspect-[2/3] rounded-lg overflow-hidden mb-2 transform group-hover:scale-105 transition-transform">
                {movie.posterUrl ? (
                  <img 
                    src={movie.posterUrl}
                    alt={`Poster de ${movie.title}`}
                    className="w-full h-full object-cover"
                    loading="lazy"
                  />
                ) : (
                  <div className="placeholder-small w-full h-full">
                    <svg className="w-8 h-8 text-gray-500 mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="1.5" d="M15.75 10.5l4.72-4.72a.75.75 0 011.28.53v11.38a.75.75 0 01-1.28.53l-4.72-4.72M4.5 18.75h9a2.25 2.25 0 002.25-2.25v-9a2.25 2.25 0 00-2.25-2.25h-9A2.25 2.25 0 002.25 7.5v9a2.25 2.25 0 002.25 2.25z" />
                    </svg>
                    <p className="text-xs text-gray-400 text-center">Sin imagen</p>
                  </div>
                )}
              </div>
              <p className="text-sm font-medium text-white group-hover:text-cine-accent transition-colors">
                {movie.title}
              </p>
              <p className="text-xs text-gray-400">{movie.year}</p>
            </Link>
          );
        })}
      </div>
    </div>
  );
}

// ==================================================
// src/components/movies/TrailerSection.tsx
// ==================================================
// src/app/components/TrailerSection.tsx

interface TrailerSectionProps {
  trailerUrl?: string;
  movieTitle: string;
  variant?: 'default' | 'minimal' | 'card' | 'compact' | 'fullwidth';
}

export function TrailerSection({ trailerUrl, movieTitle, variant = 'fullwidth' }: TrailerSectionProps) {
  if (!trailerUrl) return null;

  // Extraer el ID del video de YouTube de la URL
  const getYouTubeId = (url: string) => {
    const regExp = /^.*(youtu.be\/|v\/|u\/\w\/|embed\/|watch\?v=|&v=)([^#&?]*).*/;
    const match = url.match(regExp);
    return match && match[2].length === 11 ? match[2] : null;
  };

  const videoId = getYouTubeId(trailerUrl);

  if (!videoId) return null;

  // Nueva variante fullwidth - ocupa todo el ancho sin el cuadro informativo
  if (variant === 'fullwidth') {
    return (
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12 border-t border-gray-800">
        <h2 className="serif-heading text-2xl text-white mb-6">Trailer</h2>
        <div className="relative w-full aspect-video rounded-lg overflow-hidden bg-cine-gray shadow-2xl">
          <iframe
            className="absolute top-0 left-0 w-full h-full"
            src={`https://www.youtube.com/embed/${videoId}?modestbranding=1&rel=0`}
            title={`Trailer de ${movieTitle}`}
            frameBorder="0"
            allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
            allowFullScreen
          />
        </div>
      </div>
    );
  }

  // Variante compacta (original con el cuadro lateral)
  if (variant === 'compact') {
    return (
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12 border-t border-gray-800">
        <h2 className="serif-heading text-2xl text-white mb-6">Trailer</h2>
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          <div className="lg:col-span-2">
            <div className="relative w-full aspect-video rounded-lg overflow-hidden bg-cine-gray shadow-2xl">
              <iframe
                className="absolute top-0 left-0 w-full h-full"
                src={`https://www.youtube.com/embed/${videoId}?modestbranding=1&rel=0`}
                title={`Trailer de ${movieTitle}`}
                frameBorder="0"
                allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
                allowFullScreen
              />
            </div>
          </div>
          <div className="lg:col-span-1">
            <div className="glass-effect rounded-lg p-6">
              <h3 className="text-lg font-medium mb-3 text-cine-accent">Sobre el trailer</h3>
              <p className="text-sm text-gray-300 mb-4">
                Mira el trailer oficial de {movieTitle} y descubre por qué se convirtió en un fenómeno del cine argentino.
              </p>
              <div className="flex flex-wrap gap-2">
                <span className="bg-cine-gray px-3 py-1 rounded-full text-xs text-white">Trailer Oficial</span>
                <span className="bg-cine-gray px-3 py-1 rounded-full text-xs text-white">HD</span>
                <span className="bg-cine-gray px-3 py-1 rounded-full text-xs text-white">Subtitulado</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  }

  // Variante por defecto con fondo
  if (variant === 'default') {
    return (
      <div className="bg-black/5 dark:bg-white/5 rounded-lg p-6 mt-8">
        <h2 className="text-2xl font-bold text-gray-900 dark:text-white mb-4">
          Trailer
        </h2>
        <div className="relative w-full aspect-video rounded-lg overflow-hidden shadow-lg">
          <iframe
            className="absolute top-0 left-0 w-full h-full"
            src={`https://www.youtube.com/embed/${videoId}`}
            title={`Trailer de ${movieTitle}`}
            frameBorder="0"
            allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
            allowFullScreen
          />
        </div>
      </div>
    );
  }

  // Variante minimalista
  if (variant === 'minimal') {
    return (
      <div className="mt-8">
        <h2 className="text-2xl font-bold text-white mb-4">Trailer</h2>
        <div className="relative w-full aspect-video rounded-lg overflow-hidden shadow-2xl">
          <iframe
            className="absolute top-0 left-0 w-full h-full"
            src={`https://www.youtube.com/embed/${videoId}?modestbranding=1&rel=0`}
            title={`Trailer de ${movieTitle}`}
            frameBorder="0"
            allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
            allowFullScreen
          />
        </div>
      </div>
    );
  }

  // Variante tipo tarjeta con thumbnail personalizable
  if (variant === 'card') {
    return (
      <div className="mt-8">
        <h2 className="text-2xl font-bold text-white mb-4">Trailer</h2>
        <div className="bg-gradient-to-r from-purple-500/20 to-pink-500/20 backdrop-blur-md rounded-xl p-1">
          <div className="bg-black/40 backdrop-blur-xl rounded-lg p-4">
            <div className="relative w-full aspect-video rounded-lg overflow-hidden">
              <iframe
                className="absolute top-0 left-0 w-full h-full"
                src={`https://www.youtube.com/embed/${videoId}?modestbranding=1&rel=0`}
                title={`Trailer de ${movieTitle}`}
                frameBorder="0"
                allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
                allowFullScreen
              />
            </div>
            <p className="text-sm text-gray-300 mt-3 text-center">
              Ver trailer oficial de {movieTitle}
            </p>
          </div>
        </div>
      </div>
    );
  }

  return null;
}

// ==================================================
// src/lib/prisma.ts
// ==================================================
import { PrismaClient } from '@prisma/client'

const globalForPrisma = global as unknown as { prisma: PrismaClient }

export const prisma =
  globalForPrisma.prisma ||
  new PrismaClient({
    log: process.env.NODE_ENV === 'development' ? ['query', 'error', 'warn'] : ['error'],
  })

if (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma

// ==================================================
// src/lib/schemas.ts
// ==================================================
// Schema de validación para crear/actualizar películas

import { z } from 'zod'

export const movieSchema = z.object({
  title: z.string().min(1, 'El título es requerido'),
  originalTitle: z.string().optional(),
  year: z.number().min(1895).max(new Date().getFullYear() + 5),
  releaseDate: z.string().optional(),
  duration: z.number().optional(),
  durationSeconds: z.number().min(0).max(59).optional(),
  tipoDuracion: z.string().optional(),
  synopsis: z.string().optional(),
  tagline: z.string().optional(),
  rating: z.number().min(0).max(10).optional(),
  posterUrl: z.string().url().optional().or(z.literal('')),
  backdropUrl: z.string().url().optional().or(z.literal('')),
  trailerUrl: z.string().url().optional().or(z.literal('')),
  imdbId: z.string().optional(),
  aspectRatio: z.string().optional(),
  colorType: z.string().optional(),
  soundType: z.string().optional(),
  filmFormat: z.string().optional(),
  certificateNumber: z.string().optional(),
  classification: z.string().optional(),
  classificationReason: z.string().optional(),
  status: z.enum(['DRAFT', 'PUBLISHED', 'ARCHIVED']).optional(),
  metaDescription: z.string().optional(),
  metaKeywords: z.array(z.string()).optional(),
  // Relaciones
  genres: z.array(z.number()).optional(),
  cast: z.array(z.object({
    personId: z.number(),
    characterName: z.string().optional(),
    billingOrder: z.number().optional(),
    isPrincipal: z.boolean().optional()
  })).optional(),
  crew: z.array(z.object({
    personId: z.number(),
    role: z.string(),
    department: z.string().optional(),
    jobTitle: z.string().optional(),
    billingOrder: z.number().optional()
  })).optional(),
  countries: z.array(z.number()).optional(),
  languages: z.array(z.number()).optional(),
  productionCompanies: z.array(z.number()).optional(),
  distributionCompanies: z.array(z.number()).optional(),
   themes: z.array(z.number()).optional()
})

// ==================================================
// src/lib/utils.ts
// ==================================================
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

export function createSlug(text: string): string {
  return text
    .toLowerCase()
    .normalize('NFD')
    .replace(/[\u0300-\u036f]/g, '') // Eliminar acentos
    .replace(/[^a-z0-9]+/g, '-') // Reemplazar caracteres especiales con guiones
    .replace(/^-+|-+$/g, '') // Eliminar guiones al inicio y final
    .replace(/-+/g, '-') // Reemplazar múltiples guiones con uno solo
}

export function formatDate(date: Date | string | null): string {
  if (!date) return ''
  const d = new Date(date)
  return d.toLocaleDateString('es-AR', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  })
}

export function formatDuration(minutes: number | null): string {
  if (!minutes) return ''
  const hours = Math.floor(minutes / 60)
  const mins = minutes % 60
  return `${hours}h ${mins}min`
}