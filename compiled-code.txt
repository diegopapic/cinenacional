// Código compilado del proyecto: diegopapic/cinenacional
// Commit: 72d1fde9799f5c995ac343843cd130c07b57271e
// Fecha: 2025-08-17T03:01:11.535Z
// ============================================



// ==================================================
// next-env.d.ts
// ==================================================
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/building-your-application/configuring/typescript for more information.


// ==================================================
// src/app/admin/calificaciones/page.tsx
// ==================================================
'use client'

import { useState, useEffect } from 'react'
import {
  Plus,
  Search,
  Edit,
  Trash2,
  Shield,
  X,
  Save,
  Loader2
} from 'lucide-react'
import { toast } from 'react-hot-toast'

interface Calificacion {
  id: number
  slug: string
  name: string
  abbreviation?: string | null
  description?: string | null
  createdAt: string
  _count?: {
    movies: number
  }
}

export default function AdminCalificacionesPage() {
  const [calificaciones, setCalificaciones] = useState<Calificacion[]>([])
  const [loading, setLoading] = useState(true)
  const [searchTerm, setSearchTerm] = useState('')
  const [showModal, setShowModal] = useState(false)
  const [editingCalif, setEditingCalif] = useState<Calificacion | null>(null)
  const [deletingCalifId, setDeletingCalifId] = useState<number | null>(null)
  const [isSubmitting, setIsSubmitting] = useState(false)

  // Estado del formulario
  const [formData, setFormData] = useState({
    name: '',
    abbreviation: '',
    description: ''
  })
  const [formErrors, setFormErrors] = useState({
    name: '',
    abbreviation: ''
  })

  // Cargar calificaciones
  const fetchCalif = async () => {
    try {
      setLoading(true)
      const response = await fetch('/api/calificaciones')
      
      if (!response.ok) {
        throw new Error('Error al cargar las calificaciones')
      }
      
      const data = await response.json()
      setCalificaciones(Array.isArray(data) ? data : [])
    } catch (error) {
      toast.error('Error al cargar las calificaciones')
      setCalificaciones([])
    } finally {
      setLoading(false)
    }
  }

  useEffect(() => {
    fetchCalif()
  }, [])

  // Filtrar calificaciones
  const filteredCalif = calificaciones.filter(calificacion =>
    calificacion.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
    (calificacion.abbreviation && calificacion.abbreviation.toLowerCase().includes(searchTerm.toLowerCase())) ||
    (calificacion.description && calificacion.description.toLowerCase().includes(searchTerm.toLowerCase()))
  )

  // Validar formulario
  const validateForm = () => {
    const errors = { name: '', abbreviation: '' }
    
    if (!formData.name.trim()) {
      errors.name = 'El nombre es requerido'
    } else if (formData.name.length > 100) {
      errors.name = 'El nombre no puede exceder 100 caracteres'
    }
    
    if (formData.abbreviation && formData.abbreviation.length > 10) {
      errors.abbreviation = 'La abreviatura no puede exceder 10 caracteres'
    }
    
    setFormErrors(errors)
    return !errors.name && !errors.abbreviation
  }

  // Crear o actualizar calificación
  const handleSubmit = async () => {
    if (!validateForm()) return

    try {
      setIsSubmitting(true)
      const url = editingCalif
        ? `/api/calificaciones/${editingCalif.id}`
        : '/api/calificaciones'
      
      const method = editingCalif ? 'PUT' : 'POST'
      
      const response = await fetch(url, {
        method,
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          name: formData.name.trim(),
          abbreviation: formData.abbreviation.trim() || undefined,
          description: formData.description.trim() || undefined
        })
      })

      if (!response.ok) {
        let errorMessage = 'Error al guardar la calificación'
        try {
          const error = await response.json()
          errorMessage = error.error || error.message || errorMessage
        } catch (e) {}
        throw new Error(errorMessage)
      }

      toast.success(editingCalif ? 'Calificación actualizada' : 'Calificación creada')
      setShowModal(false)
      resetForm()
      fetchCalif()
    } catch (error) {
      toast.error(error instanceof Error ? error.message : 'Error al guardar')
    } finally {
      setIsSubmitting(false)
    }
  }

  // Resetear formulario
  const resetForm = () => {
    setFormData({ name: '', abbreviation: '', description: '' })
    setFormErrors({ name: '', abbreviation: '' })
    setEditingCalif(null)
  }

  // Editar calificación
  const handleEdit = (calificacion: Calificacion) => {
    setEditingCalif(calificacion)
    setFormData({
      name: calificacion.name,
      abbreviation: calificacion.abbreviation || '',
      description: calificacion.description || ''
    })
    setShowModal(true)
  }

  // Eliminar calificación
  const handleDelete = async (id: number) => {
    if (!confirm('¿Estás seguro de eliminar esta calificación? Esta acción no se puede deshacer.')) return

    try {
      setDeletingCalifId(id)
      const response = await fetch(`/api/calificaciones/${id}`, {
        method: 'DELETE'
      })

      if (!response.ok) {
        throw new Error('Error al eliminar')
      }

      toast.success('Calificación eliminada')
      fetchCalif()
    } catch (error) {
      toast.error('Error al eliminar la calificación')
    } finally {
      setDeletingCalifId(null)
    }
  }

  // Abrir modal para nueva calificación
  const handleNewCalif = () => {
    resetForm()
    setShowModal(true)
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white shadow">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="py-6">
            <h1 className="text-3xl font-bold text-gray-900">
              Administración de Calificaciones
            </h1>
          </div>
        </div>
      </div>

      {/* Contenido principal */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Filtros y acciones */}
        <div className="bg-white rounded-lg shadow p-6 mb-6">
          <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
            {/* Búsqueda */}
            <div className="relative flex-1 max-w-md">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
              <input
                type="text"
                placeholder="Buscar calificaciones..."
                className="pl-10 pr-4 py-2 w-full border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
              />
            </div>

            {/* Botón nueva calificación */}
            <button
              onClick={handleNewCalif}
              className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors flex items-center gap-2"
            >
              <Plus className="w-5 h-5" />
              Nueva Calificación
            </button>
          </div>
        </div>

        {/* Lista de calificaciones */}
        <div className="bg-white rounded-lg shadow overflow-hidden">
          {loading ? (
            <div className="flex items-center justify-center h-64">
              <Loader2 className="w-8 h-8 text-blue-600 animate-spin" />
            </div>
          ) : filteredCalif.length === 0 ? (
            <div className="text-center py-12">
              <Shield className="w-12 h-12 text-gray-400 mx-auto mb-4" />
              <p className="text-gray-500">No se encontraron calificaciones</p>
            </div>
          ) : (
            <div className="overflow-x-auto">
              <table className="min-w-full divide-y divide-gray-200">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Calificación
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Abreviatura
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Descripción
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Slug
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Películas
                    </th>
                    <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Acciones
                    </th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {filteredCalif.map((calificacion) => (
                    <tr key={calificacion.id} className="hover:bg-gray-50">
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm font-medium text-gray-900">
                          {calificacion.name}
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm font-medium text-gray-700">
                          {calificacion.abbreviation ? (
                            <span className="bg-blue-100 text-blue-800 px-2 py-1 rounded-md">
                              {calificacion.abbreviation}
                            </span>
                          ) : (
                            <span className="text-gray-400">-</span>
                          )}
                        </div>
                      </td>
                      <td className="px-6 py-4">
                        <div className="text-sm text-gray-500 max-w-xs truncate">
                          {calificacion.description || '-'}
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm text-gray-400">
                          {calificacion.slug}
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        {calificacion._count?.movies || 0}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                        <div className="flex items-center justify-end gap-2">
                          <button
                            onClick={() => handleEdit(calificacion)}
                            className="text-blue-600 hover:text-blue-900 transition-colors"
                            title="Editar"
                          >
                            <Edit className="w-4 h-4" />
                          </button>
                          <button
                            onClick={() => handleDelete(calificacion.id)}
                            disabled={deletingCalifId === calificacion.id}
                            className="text-red-600 hover:text-red-900 transition-colors disabled:opacity-50"
                            title="Eliminar"
                          >
                            {deletingCalifId === calificacion.id ? (
                              <Loader2 className="w-4 h-4 animate-spin" />
                            ) : (
                              <Trash2 className="w-4 h-4" />
                            )}
                          </button>
                        </div>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          )}
        </div>
      </div>

      {/* Modal de creación/edición */}
      {showModal && (
        <div className="fixed inset-0 bg-gray-500 bg-opacity-75 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg max-w-md w-full">
            <div className="bg-gray-50 px-6 py-4 border-b border-gray-200">
              <div className="flex items-center justify-between">
                <h2 className="text-xl font-semibold text-gray-900">
                  {editingCalif ? 'Editar Calificación' : 'Nueva Calificación'}
                </h2>
                <button
                  onClick={() => {
                    setShowModal(false)
                    resetForm()
                  }}
                  className="text-gray-400 hover:text-gray-500"
                >
                  <X className="w-6 h-6" />
                </button>
              </div>
            </div>

            <div className="p-6">
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Nombre de la Calificación *
                  </label>
                  <input
                    type="text"
                    value={formData.name}
                    onChange={(e) => {
                      setFormData({ ...formData, name: e.target.value })
                      if (formErrors.name) {
                        setFormErrors({ ...formErrors, name: '' })
                      }
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                    placeholder="Ej: Apta para todo público"
                  />
                  {formErrors.name && (
                    <p className="mt-1 text-sm text-red-600">{formErrors.name}</p>
                  )}
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Abreviatura
                  </label>
                  <input
                    type="text"
                    value={formData.abbreviation}
                    onChange={(e) => {
                      setFormData({ ...formData, abbreviation: e.target.value })
                      if (formErrors.abbreviation) {
                        setFormErrors({ ...formErrors, abbreviation: '' })
                      }
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                    placeholder="Ej: ATP"
                    maxLength={10}
                  />
                  {formErrors.abbreviation && (
                    <p className="mt-1 text-sm text-red-600">{formErrors.abbreviation}</p>
                  )}
                  <p className="mt-1 text-xs text-gray-500">
                    Máximo 10 caracteres. Se mostrará como etiqueta en las listas.
                  </p>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Descripción
                  </label>
                  <textarea
                    value={formData.description}
                    onChange={(e) => setFormData({ ...formData, description: e.target.value })}
                    rows={3}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                    placeholder="Breve descripción de la calificación (opcional)"
                  />
                </div>
              </div>

              {/* Botones de acción */}
              <div className="mt-6 flex items-center justify-end gap-3">
                <button
                  type="button"
                  onClick={() => {
                    setShowModal(false)
                    resetForm()
                  }}
                  className="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors"
                >
                  Cancelar
                </button>
                <button
                  type="button"
                  onClick={handleSubmit}
                  disabled={isSubmitting}
                  className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-2"
                >
                  {isSubmitting ? (
                    <>
                      <Loader2 className="w-4 h-4 animate-spin" />
                      Guardando...
                    </>
                  ) : (
                    <>
                      <Save className="w-4 h-4" />
                      {editingCalif ? 'Actualizar' : 'Crear'} Calificación
                    </>
                  )}
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}

// ==================================================
// src/app/admin/countries/page.tsx
// ==================================================
// src/app/admin/countries/page.tsx
'use client'

import { useState, useEffect } from 'react'
import {
  Plus,
  Search,
  Edit,
  Trash2,
  Globe,
  X,
  Save,
  Loader2
} from 'lucide-react'
import { toast } from 'react-hot-toast'

interface Country {
  id: number
  code: string
  name: string
  createdAt: string
  _count?: {
    movies: number
  }
}

export default function AdminCountriesPage() {
  const [countries, setCountries] = useState<Country[]>([])
  const [loading, setLoading] = useState(true)
  const [searchTerm, setSearchTerm] = useState('')
  const [showModal, setShowModal] = useState(false)
  const [editingCountry, setEditingCountry] = useState<Country | null>(null)
  const [deletingCountryId, setDeletingCountryId] = useState<number | null>(null)
  const [isSubmitting, setIsSubmitting] = useState(false)

  // Estado del formulario
  const [formData, setFormData] = useState({
    code: '',
    name: ''
  })
  const [formErrors, setFormErrors] = useState({
    code: '',
    name: ''
  })

  // Cargar países
  const fetchCountries = async () => {
    try {
      setLoading(true)
      const response = await fetch('/api/countries')
      
      if (!response.ok) {
        throw new Error('Error al cargar los países')
      }
      
      const data = await response.json()
      setCountries(Array.isArray(data) ? data : [])
    } catch (error) {
      toast.error('Error al cargar los países')
      setCountries([])
    } finally {
      setLoading(false)
    }
  }

  useEffect(() => {
    fetchCountries()
  }, [])

  // Filtrar países
  const filteredCountries = countries.filter(country =>
    country.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
    country.code.toLowerCase().includes(searchTerm.toLowerCase())
  )

  // Validar formulario
  const validateForm = () => {
    const errors = { code: '', name: '' }
    let isValid = true
    
    if (!formData.code.trim()) {
      errors.code = 'El código es requerido'
      isValid = false
    } else if (formData.code.length !== 2) {
      errors.code = 'El código debe tener exactamente 2 caracteres'
      isValid = false
    } else if (!/^[A-Z]{2}$/.test(formData.code)) {
      errors.code = 'El código debe contener solo letras mayúsculas'
      isValid = false
    }
    
    if (!formData.name.trim()) {
      errors.name = 'El nombre es requerido'
      isValid = false
    } else if (formData.name.length > 100) {
      errors.name = 'El nombre no puede exceder 100 caracteres'
      isValid = false
    }
    
    setFormErrors(errors)
    return isValid
  }

  // Crear o actualizar país
  const handleSubmit = async () => {
    if (!validateForm()) return

    try {
      setIsSubmitting(true)
      const url = editingCountry
        ? `/api/countries/${editingCountry.id}`
        : '/api/countries'
      
      const method = editingCountry ? 'PUT' : 'POST'
      
      const response = await fetch(url, {
        method,
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          code: formData.code.trim().toUpperCase(),
          name: formData.name.trim()
        })
      })

      if (!response.ok) {
        let errorMessage = 'Error al guardar el país'
        try {
          const error = await response.json()
          errorMessage = error.error || error.message || errorMessage
        } catch (e) {}
        throw new Error(errorMessage)
      }

      toast.success(editingCountry ? 'País actualizado' : 'País creado')
      setShowModal(false)
      resetForm()
      fetchCountries()
    } catch (error) {
      toast.error(error instanceof Error ? error.message : 'Error al guardar')
    } finally {
      setIsSubmitting(false)
    }
  }

  // Resetear formulario
  const resetForm = () => {
    setFormData({ code: '', name: '' })
    setFormErrors({ code: '', name: '' })
    setEditingCountry(null)
  }

  // Editar país
  const handleEdit = (country: Country) => {
    setEditingCountry(country)
    setFormData({
      code: country.code,
      name: country.name
    })
    setShowModal(true)
  }

  // Eliminar país
  const handleDelete = async (id: number) => {
    if (!confirm('¿Estás seguro de eliminar este país? Esta acción no se puede deshacer.')) return

    try {
      setDeletingCountryId(id)
      const response = await fetch(`/api/countries/${id}`, {
        method: 'DELETE'
      })

      if (!response.ok) {
        let errorMessage = 'Error al eliminar el país'
        try {
          const error = await response.json()
          errorMessage = error.error || error.message || errorMessage
        } catch (e) {}
        throw new Error(errorMessage)
      }

      toast.success('País eliminado')
      fetchCountries()
    } catch (error) {
      toast.error(error instanceof Error ? error.message : 'Error al eliminar el país')
    } finally {
      setDeletingCountryId(null)
    }
  }

  // Abrir modal para nuevo país
  const handleNewCountry = () => {
    resetForm()
    setShowModal(true)
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white shadow">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="py-6">
            <h1 className="text-3xl font-bold text-gray-900">
              Administración de Países
            </h1>
          </div>
        </div>
      </div>

      {/* Contenido principal */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Filtros y acciones */}
        <div className="bg-white rounded-lg shadow p-6 mb-6">
          <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
            {/* Búsqueda */}
            <div className="relative flex-1 max-w-md">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
              <input
                type="text"
                placeholder="Buscar países..."
                className="pl-10 pr-4 py-2 w-full border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
              />
            </div>

            {/* Botón nuevo país */}
            <button
              onClick={handleNewCountry}
              className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors flex items-center gap-2"
            >
              <Plus className="w-5 h-5" />
              Nuevo País
            </button>
          </div>
        </div>

        {/* Lista de países */}
        <div className="bg-white rounded-lg shadow overflow-hidden">
          {loading ? (
            <div className="flex items-center justify-center h-64">
              <Loader2 className="w-8 h-8 text-blue-600 animate-spin" />
            </div>
          ) : filteredCountries.length === 0 ? (
            <div className="text-center py-12">
              <Globe className="w-12 h-12 text-gray-400 mx-auto mb-4" />
              <p className="text-gray-500">No se encontraron países</p>
            </div>
          ) : (
            <div className="overflow-x-auto">
              <table className="min-w-full divide-y divide-gray-200">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Código
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      País
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Películas
                    </th>
                    <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Acciones
                    </th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {filteredCountries.map((country) => (
                    <tr key={country.id} className="hover:bg-gray-50">
                      <td className="px-6 py-4 whitespace-nowrap">
                        <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                          {country.code}
                        </span>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm font-medium text-gray-900">
                          {country.name}
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        {country._count?.movies || 0}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                        <div className="flex items-center justify-end gap-2">
                          <button
                            onClick={() => handleEdit(country)}
                            className="text-blue-600 hover:text-blue-900 transition-colors"
                            title="Editar"
                          >
                            <Edit className="w-4 h-4" />
                          </button>
                          <button
                            onClick={() => handleDelete(country.id)}
                            disabled={deletingCountryId === country.id}
                            className="text-red-600 hover:text-red-900 transition-colors disabled:opacity-50"
                            title="Eliminar"
                          >
                            {deletingCountryId === country.id ? (
                              <Loader2 className="w-4 h-4 animate-spin" />
                            ) : (
                              <Trash2 className="w-4 h-4" />
                            )}
                          </button>
                        </div>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          )}
        </div>
      </div>

      {/* Modal de creación/edición */}
      {showModal && (
        <div className="fixed inset-0 bg-gray-500 bg-opacity-75 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg max-w-md w-full">
            <div className="bg-gray-50 px-6 py-4 border-b border-gray-200">
              <div className="flex items-center justify-between">
                <h2 className="text-xl font-semibold text-gray-900">
                  {editingCountry ? 'Editar País' : 'Nuevo País'}
                </h2>
                <button
                  onClick={() => {
                    setShowModal(false)
                    resetForm()
                  }}
                  className="text-gray-400 hover:text-gray-500"
                >
                  <X className="w-6 h-6" />
                </button>
              </div>
            </div>

            <div className="p-6">
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Código ISO *
                  </label>
                  <input
                    type="text"
                    value={formData.code}
                    onChange={(e) => {
                      const value = e.target.value.toUpperCase().slice(0, 2)
                      setFormData({ ...formData, code: value })
                      if (formErrors.code) {
                        setFormErrors({ ...formErrors, code: '' })
                      }
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                    placeholder="Ej: AR, BR, US"
                    maxLength={2}
                  />
                  {formErrors.code && (
                    <p className="mt-1 text-sm text-red-600">{formErrors.code}</p>
                  )}
                  <p className="mt-1 text-xs text-gray-500">
                    Código ISO 3166-1 alpha-2 (2 letras mayúsculas)
                  </p>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Nombre del País *
                  </label>
                  <input
                    type="text"
                    value={formData.name}
                    onChange={(e) => {
                      setFormData({ ...formData, name: e.target.value })
                      if (formErrors.name) {
                        setFormErrors({ ...formErrors, name: '' })
                      }
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                    placeholder="Ej: Argentina, Brasil, Estados Unidos"
                  />
                  {formErrors.name && (
                    <p className="mt-1 text-sm text-red-600">{formErrors.name}</p>
                  )}
                </div>
              </div>

              {/* Botones de acción */}
              <div className="mt-6 flex items-center justify-end gap-3">
                <button
                  type="button"
                  onClick={() => {
                    setShowModal(false)
                    resetForm()
                  }}
                  className="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors"
                >
                  Cancelar
                </button>
                <button
                  type="button"
                  onClick={handleSubmit}
                  disabled={isSubmitting}
                  className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-2"
                >
                  {isSubmitting ? (
                    <>
                      <Loader2 className="w-4 h-4 animate-spin" />
                      Guardando...
                    </>
                  ) : (
                    <>
                      <Save className="w-4 h-4" />
                      {editingCountry ? 'Actualizar' : 'Crear'} País
                    </>
                  )}
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}

// ==================================================
// src/app/admin/genres/page.tsx
// ==================================================
// src/app/admin/genres/page.tsx
'use client'

import { useState, useEffect } from 'react'
import {
  Plus,
  Search,
  Edit,
  Trash2,
  Hash,
  X,
  Save,
  Loader2
} from 'lucide-react'
import { toast } from 'react-hot-toast'

interface Genre {
  id: number
  slug: string
  name: string
  description?: string | null
  createdAt: string
  _count?: {
    movies: number
  }
}

export default function AdminGenresPage() {
  const [genres, setGenres] = useState<Genre[]>([])
  const [loading, setLoading] = useState(true)
  const [searchTerm, setSearchTerm] = useState('')
  const [showModal, setShowModal] = useState(false)
  const [editingGenre, setEditingGenre] = useState<Genre | null>(null)
  const [deletingGenreId, setDeletingGenreId] = useState<number | null>(null)
  const [isSubmitting, setIsSubmitting] = useState(false)

  // Estado del formulario
  const [formData, setFormData] = useState({
    name: '',
    description: ''
  })
  const [formErrors, setFormErrors] = useState({
    name: ''
  })

  // Cargar géneros
  const fetchGenres = async () => {
    try {
      setLoading(true)
      const response = await fetch('/api/genres')
      
      if (!response.ok) {
        throw new Error('Error al cargar los géneros')
      }
      
      const data = await response.json()
      setGenres(Array.isArray(data) ? data : [])
    } catch (error) {
      toast.error('Error al cargar los géneros')
      setGenres([])
    } finally {
      setLoading(false)
    }
  }

  useEffect(() => {
    fetchGenres()
  }, [])

  // Filtrar géneros
  const filteredGenres = genres.filter(genre =>
    genre.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
    (genre.description && genre.description.toLowerCase().includes(searchTerm.toLowerCase()))
  )

  // Validar formulario
  const validateForm = () => {
    const errors = { name: '' }
    
    if (!formData.name.trim()) {
      errors.name = 'El nombre es requerido'
    } else if (formData.name.length > 100) {
      errors.name = 'El nombre no puede exceder 100 caracteres'
    }
    
    setFormErrors(errors)
    return !errors.name
  }

  // Crear o actualizar género
  const handleSubmit = async () => {
    if (!validateForm()) return

    try {
      setIsSubmitting(true)
      const url = editingGenre
        ? `/api/genres/${editingGenre.id}`
        : '/api/genres'
      
      const method = editingGenre ? 'PUT' : 'POST'
      
      const response = await fetch(url, {
        method,
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          name: formData.name.trim(),
          description: formData.description.trim() || undefined
        })
      })

      if (!response.ok) {
        let errorMessage = 'Error al guardar el género'
        try {
          const error = await response.json()
          errorMessage = error.error || error.message || errorMessage
        } catch (e) {}
        throw new Error(errorMessage)
      }

      toast.success(editingGenre ? 'Género actualizado' : 'Género creado')
      setShowModal(false)
      resetForm()
      fetchGenres()
    } catch (error) {
      toast.error(error instanceof Error ? error.message : 'Error al guardar')
    } finally {
      setIsSubmitting(false)
    }
  }

  // Resetear formulario
  const resetForm = () => {
    setFormData({ name: '', description: '' })
    setFormErrors({ name: '' })
    setEditingGenre(null)
  }

  // Editar género
  const handleEdit = (genre: Genre) => {
    setEditingGenre(genre)
    setFormData({
      name: genre.name,
      description: genre.description || ''
    })
    setShowModal(true)
  }

  // Eliminar género
  const handleDelete = async (id: number) => {
    if (!confirm('¿Estás seguro de eliminar este género? Esta acción no se puede deshacer.')) return

    try {
      setDeletingGenreId(id)
      const response = await fetch(`/api/genres/${id}`, {
        method: 'DELETE'
      })

      if (!response.ok) {
        throw new Error('Error al eliminar')
      }

      toast.success('Género eliminado')
      fetchGenres()
    } catch (error) {
      toast.error('Error al eliminar el género')
    } finally {
      setDeletingGenreId(null)
    }
  }

  // Abrir modal para nuevo género
  const handleNewGenre = () => {
    resetForm()
    setShowModal(true)
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white shadow">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="py-6">
            <h1 className="text-3xl font-bold text-gray-900">
              Administración de Géneros
            </h1>
          </div>
        </div>
      </div>

      {/* Contenido principal */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Filtros y acciones */}
        <div className="bg-white rounded-lg shadow p-6 mb-6">
          <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
            {/* Búsqueda */}
            <div className="relative flex-1 max-w-md">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
              <input
                type="text"
                placeholder="Buscar géneros..."
                className="pl-10 pr-4 py-2 w-full border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
              />
            </div>

            {/* Botón nuevo género */}
            <button
              onClick={handleNewGenre}
              className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors flex items-center gap-2"
            >
              <Plus className="w-5 h-5" />
              Nuevo Género
            </button>
          </div>
        </div>

        {/* Lista de géneros */}
        <div className="bg-white rounded-lg shadow overflow-hidden">
          {loading ? (
            <div className="flex items-center justify-center h-64">
              <Loader2 className="w-8 h-8 text-blue-600 animate-spin" />
            </div>
          ) : filteredGenres.length === 0 ? (
            <div className="text-center py-12">
              <Hash className="w-12 h-12 text-gray-400 mx-auto mb-4" />
              <p className="text-gray-500">No se encontraron géneros</p>
            </div>
          ) : (
            <div className="overflow-x-auto">
              <table className="min-w-full divide-y divide-gray-200">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Género
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Descripción
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Slug
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Películas
                    </th>
                    <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Acciones
                    </th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {filteredGenres.map((genre) => (
                    <tr key={genre.id} className="hover:bg-gray-50">
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm font-medium text-gray-900">
                          {genre.name}
                        </div>
                      </td>
                      <td className="px-6 py-4">
                        <div className="text-sm text-gray-500 max-w-xs truncate">
                          {genre.description || '-'}
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm text-gray-400">
                          {genre.slug}
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        {genre._count?.movies || 0}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                        <div className="flex items-center justify-end gap-2">
                          <button
                            onClick={() => handleEdit(genre)}
                            className="text-blue-600 hover:text-blue-900 transition-colors"
                            title="Editar"
                          >
                            <Edit className="w-4 h-4" />
                          </button>
                          <button
                            onClick={() => handleDelete(genre.id)}
                            disabled={deletingGenreId === genre.id}
                            className="text-red-600 hover:text-red-900 transition-colors disabled:opacity-50"
                            title="Eliminar"
                          >
                            {deletingGenreId === genre.id ? (
                              <Loader2 className="w-4 h-4 animate-spin" />
                            ) : (
                              <Trash2 className="w-4 h-4" />
                            )}
                          </button>
                        </div>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          )}
        </div>
      </div>

      {/* Modal de creación/edición */}
      {showModal && (
        <div className="fixed inset-0 bg-gray-500 bg-opacity-75 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg max-w-md w-full">
            <div className="bg-gray-50 px-6 py-4 border-b border-gray-200">
              <div className="flex items-center justify-between">
                <h2 className="text-xl font-semibold text-gray-900">
                  {editingGenre ? 'Editar Género' : 'Nuevo Género'}
                </h2>
                <button
                  onClick={() => {
                    setShowModal(false)
                    resetForm()
                  }}
                  className="text-gray-400 hover:text-gray-500"
                >
                  <X className="w-6 h-6" />
                </button>
              </div>
            </div>

            <div className="p-6">
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Nombre del Género *
                  </label>
                  <input
                    type="text"
                    value={formData.name}
                    onChange={(e) => {
                      setFormData({ ...formData, name: e.target.value })
                      if (formErrors.name) {
                        setFormErrors({ ...formErrors, name: '' })
                      }
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                    placeholder="Ej: Drama, Comedia, Thriller"
                  />
                  {formErrors.name && (
                    <p className="mt-1 text-sm text-red-600">{formErrors.name}</p>
                  )}
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Descripción
                  </label>
                  <textarea
                    value={formData.description}
                    onChange={(e) => setFormData({ ...formData, description: e.target.value })}
                    rows={3}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                    placeholder="Breve descripción del género (opcional)"
                  />
                </div>
              </div>

              {/* Botones de acción */}
              <div className="mt-6 flex items-center justify-end gap-3">
                <button
                  type="button"
                  onClick={() => {
                    setShowModal(false)
                    resetForm()
                  }}
                  className="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors"
                >
                  Cancelar
                </button>
                <button
                  type="button"
                  onClick={handleSubmit}
                  disabled={isSubmitting}
                  className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-2"
                >
                  {isSubmitting ? (
                    <>
                      <Loader2 className="w-4 h-4 animate-spin" />
                      Guardando...
                    </>
                  ) : (
                    <>
                      <Save className="w-4 h-4" />
                      {editingGenre ? 'Actualizar' : 'Crear'} Género
                    </>
                  )}
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}

// ==================================================
// src/app/admin/layout.tsx
// ==================================================
// src/app/admin/layout.tsx
'use client'

import Link from 'next/link'
import { 
  Film, 
  Users, 
  Building2, 
  Award, 
  Globe, 
  Tv,
  Home,
  Menu,
  X,
  Tag,
  Hash
} from 'lucide-react'
import { ReactNode, useState } from 'react'

interface AdminLayoutProps {
  children: ReactNode
}

export default function AdminLayout({ children }: AdminLayoutProps) {
  const [sidebarOpen, setSidebarOpen] = useState(false)

  const navigation = [
    { name: 'Dashboard', href: '/admin', icon: Home },
    { name: 'Películas', href: '/admin/movies', icon: Film },
    { name: 'Personas', href: '/admin/people', icon: Users },
    { name: 'Géneros', href: '/admin/genres', icon: Hash },
    { name: 'Productoras', href: '/admin/companies/production', icon: Building2 },
    { name: 'Distribuidoras', href: '/admin/companies/distribution', icon: Building2 },
    { name: 'Pantallas de Estreno', href: '/admin/screening-venues', icon: Tv },
    { name: 'Premios', href: '/admin/awards', icon: Award },
    { name: 'Lugares', href: '/admin/locations', icon: Globe },
    { name: 'Temas', href: '/admin/themes', icon: Tag },
    { name: 'Calificaciones', href: '/admin/calificaciones', icon: Tag }
  ]

  return (
    <div className="min-h-screen bg-gray-100" data-admin="true">
      {/* Sidebar móvil */}
      <div className={`fixed inset-0 z-40 md:hidden ${sidebarOpen ? '' : 'hidden'}`}>
        <div className="fixed inset-0 bg-gray-600 bg-opacity-75" onClick={() => setSidebarOpen(false)} />
        <nav className="fixed top-0 left-0 bottom-0 flex flex-col w-64 bg-white">
          <div className="flex items-center justify-between h-16 px-4 border-b border-gray-200">
            <h2 className="text-xl font-semibold text-gray-900">CineNacional Admin</h2>
            <button
              onClick={() => setSidebarOpen(false)}
              className="text-gray-500 hover:text-gray-700"
            >
              <X className="w-6 h-6" />
            </button>
          </div>
          <div className="flex-1 px-4 py-4 space-y-1">
            {navigation.map((item) => (
              <Link
                key={item.name}
                href={item.href}
                className="flex items-center px-3 py-2 text-sm font-medium rounded-lg hover:bg-gray-100 text-gray-700"
              >
                <item.icon className="w-5 h-5 mr-3 text-gray-600" />
                {item.name}
              </Link>
            ))}
          </div>
        </nav>
      </div>

      {/* Sidebar desktop */}
      <div className="hidden md:flex md:w-64 md:flex-col md:fixed md:inset-y-0">
        <nav className="flex-1 flex flex-col bg-white border-r border-gray-200">
          <div className="flex items-center h-16 px-4 border-b border-gray-200">
            <h2 className="text-xl font-semibold text-gray-900">CineNacional Admin</h2>
          </div>
          <div className="flex-1 px-4 py-4 space-y-1">
            {navigation.map((item) => (
              <Link
                key={item.name}
                href={item.href}
                className="flex items-center px-3 py-2 text-sm font-medium rounded-lg hover:bg-gray-100 text-gray-700"
              >
                <item.icon className="w-5 h-5 mr-3 text-gray-600" />
                {item.name}
              </Link>
            ))}
          </div>
          <div className="p-4 border-t border-gray-200">
            <Link
              href="/"
              className="flex items-center px-3 py-2 text-sm font-medium rounded-lg hover:bg-gray-100 text-gray-700"
            >
              Volver al sitio
            </Link>
          </div>
        </nav>
      </div>

      {/* Contenido principal */}
      <div className="md:pl-64">
        {/* Header móvil */}
        <div className="sticky top-0 z-10 md:hidden bg-white shadow">
          <div className="px-4 py-3">
            <button
              onClick={() => setSidebarOpen(true)}
              className="text-gray-500 hover:text-gray-700"
            >
              <Menu className="w-6 h-6" />
            </button>
          </div>
        </div>

        {/* Contenido */}
        <main className="text-gray-900">{children}</main>
      </div>
    </div>
  )
}

// ==================================================
// src/app/admin/locations/new/page.tsx
// ==================================================
// src/app/admin/locations/new/page.tsx

import { Suspense } from 'react'
import LocationForm from '@/components/admin/locations/LocationForm'
import Link from 'next/link'
import { ArrowLeft } from 'lucide-react'

export const metadata = {
  title: 'Nuevo Lugar - Admin',
  description: 'Crear nuevo lugar'
}

export default function NewLocationPage() {
  return (
    <div className="container mx-auto px-4 py-8 max-w-2xl">
      <div className="mb-8">
        <Link
          href="/admin/locations"
          className="inline-flex items-center gap-2 text-gray-600 hover:text-gray-900 mb-4"
        >
          <ArrowLeft className="w-4 h-4" />
          Volver a lugares
        </Link>
        
        <h1 className="text-3xl font-bold text-gray-900">Nuevo Lugar</h1>
        <p className="mt-2 text-gray-600">
          Agrega un nuevo país, provincia, estado o ciudad
        </p>
      </div>

      <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
        <Suspense fallback={<div>Cargando formulario...</div>}>
          <LocationForm />
        </Suspense>
      </div>
    </div>
  )
}

// ==================================================
// src/app/admin/locations/page.tsx
// ==================================================
// src/app/admin/locations/page.tsx

import Link from 'next/link'
import { Plus } from 'lucide-react'
import LocationTree from '@/components/admin/locations/LocationTree'

export const metadata = {
  title: 'Lugares - Admin',
  description: 'Administración de lugares'
}

// Revalidar cada 0 segundos (sin caché)
export const revalidate = 0

export default function LocationsAdminPage() {
  return (
    <div className="container mx-auto px-4 py-8">
      <div className="flex justify-between items-center mb-8">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">Lugares</h1>
          <p className="mt-2 text-gray-600">
            Gestiona la estructura jerárquica de países, provincias, estados y ciudades
          </p>
        </div>
        
        <Link
          href="/admin/locations/new"
          className="flex items-center gap-2 px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition-colors"
        >
          <Plus className="w-5 h-5" />
          Nuevo Lugar
        </Link>
      </div>

      <LocationTree />
    </div>
  )
}

// ==================================================
// src/app/admin/locations/[id]/edit/page.tsx
// ==================================================
// src/app/admin/locations/[id]/edit/page.tsx

import { notFound } from 'next/navigation'
import LocationForm from '@/components/admin/locations/LocationForm'
import Link from 'next/link'
import { ArrowLeft } from 'lucide-react'
import { prisma } from '@/lib/prisma'

export const metadata = {
  title: 'Editar Lugar - Admin',
  description: 'Editar lugar existente'
}

interface EditLocationPageProps {
  params: {
    id: string
  }
}

async function getLocation(id: number) {
  const location = await prisma.location.findUnique({
    where: { id },
    include: {
      parent: true
    }
  })
  
  return location
}

export default async function EditLocationPage({ params }: EditLocationPageProps) {
  const id = parseInt(params.id)
  
  if (isNaN(id)) {
    notFound()
  }
  
  const location = await getLocation(id)
  
  if (!location) {
    notFound()
  }

  // Convertir Decimal a string y simplificar el objeto para el formulario
  const locationData = {
    id: location.id,
    name: location.name,
    slug: location.slug,
    parentId: location.parentId,
    parent: location.parent ? {
      id: location.parent.id,
      name: location.parent.name
    } : undefined,
    latitude: location.latitude?.toString() || null,
    longitude: location.longitude?.toString() || null
  }

  return (
    <div className="container mx-auto px-4 py-8 max-w-2xl">
      <div className="mb-8">
        <Link
          href="/admin/locations"
          className="inline-flex items-center gap-2 text-gray-600 hover:text-gray-900 mb-4"
        >
          <ArrowLeft className="w-4 h-4" />
          Volver a lugares
        </Link>
        
        <h1 className="text-3xl font-bold text-gray-900">Editar Lugar</h1>
        <p className="mt-2 text-gray-600">
          Modifica la información de {location.name}
        </p>
      </div>

      <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
        <LocationForm location={locationData} />
      </div>
    </div>
  )
}

// ==================================================
// src/app/admin/movies/page.tsx
// ==================================================
// src/app/admin/movies/page.tsx
'use client'

import { useState, useEffect } from 'react'
import { toast } from 'react-hot-toast'
import MoviesFilters, { type MovieFilters } from '@/components/admin/movies/MoviesFilters'
import MoviesPagination from '@/components/admin/movies/MoviesPagination'
import MoviesTable from '@/components/admin/movies/MoviesTable'
import MovieModal from '@/components/admin/movies/MovieModal'
import { moviesService } from '@/services'
import { type Movie } from '@/lib/movies/movieTypes'
import { useMovieForm } from '@/hooks/useMovieForm'

export default function AdminMoviesPage() {
  const [movies, setMovies] = useState<Movie[]>([])
  const [loading, setLoading] = useState(true)
  const [totalPages, setTotalPages] = useState(1)
  const [showModal, setShowModal] = useState(false)
  const [editingMovie, setEditingMovie] = useState<Movie | null>(null)

  // Estados de filtros
  const [filters, setFilters] = useState<MovieFilters>({
    searchTerm: '',
    selectedStage: '',
    selectedYear: '',
    currentPage: 1
  })

  // Usar el custom hook
  const movieForm = useMovieForm({
    editingMovie,
    onSuccess: () => {
      setShowModal(false)
      setEditingMovie(null)
      fetchMovies()
    }
  })

  
  const handleFiltersChange = (newFilters: Partial<MovieFilters>) => {
    setFilters(prev => ({ ...prev, ...newFilters }))
  }

  // Cargar películas
  const fetchMovies = async () => {
    try {
      setLoading(true)
      const { movies, pagination } = await moviesService.getAll(filters)
      setMovies(movies)
      setTotalPages(pagination.totalPages)
    } catch (error) {
      toast.error('Error al cargar las películas')
      setMovies([])
      setTotalPages(1)
    } finally {
      setLoading(false)
    }
  }

  useEffect(() => {
    fetchMovies()
  }, [filters])

  // Editar película
  const handleEdit = async (movie: Movie) => {
    try {
      setEditingMovie(movie)
      await movieForm.loadMovieData(movie)
      setShowModal(true)
    } catch (error) {
      console.error('Error in handleEdit:', error)
      toast.error('Error al cargar los datos de la película')
    }
  }

  // Eliminar película
  const handleDelete = async (id: number) => {
    await moviesService.delete(id)
    fetchMovies()
  }

  // Abrir modal para nueva película
  const handleNewMovie = () => {
    setEditingMovie(null)
    movieForm.resetForNewMovie()
    setShowModal(true)
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white shadow">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="py-6">
            <h1 className="text-3xl font-bold text-gray-900">
              Administración de Películas
            </h1>
          </div>
        </div>
      </div>

      {/* Contenido principal */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Filtros y acciones */}
        <MoviesFilters
          filters={filters}
          onFiltersChange={handleFiltersChange}
          onNewMovie={handleNewMovie}
        />

        {/* Lista de películas */}
        <MoviesTable
          movies={movies}
          loading={loading}
          onEdit={handleEdit}
          onDelete={handleDelete}
        />

        {/* Paginación */}
        {totalPages > 1 && (
          <MoviesPagination
            currentPage={filters.currentPage}
            totalPages={totalPages}
            onPageChange={(page) => handleFiltersChange({ currentPage: page })}
          />
        )}

        {/* Modal con todas las props del hook */}
        <MovieModal
          isOpen={showModal}
          onClose={() => {
            setShowModal(false)
            setEditingMovie(null)
          }}
          editingMovie={editingMovie}
          onSubmit={movieForm.onSubmit}
          isSubmitting={movieForm.formState.isSubmitting}

          // Props del formulario
          register={movieForm.register}
          handleSubmit={movieForm.handleSubmit}
          watch={movieForm.watch}
          setValue={movieForm.setValue}
          reset={movieForm.reset}
          errors={movieForm.formState.errors}

          // Estados
          activeTab={movieForm.activeTab}
          setActiveTab={movieForm.setActiveTab}
          isPartialDate={movieForm.isPartialDate}
          setIsPartialDate={movieForm.setIsPartialDate}
          partialReleaseDate={movieForm.partialReleaseDate}
          setPartialReleaseDate={movieForm.setPartialReleaseDate}
          tipoDuracionDisabled={movieForm.tipoDuracionDisabled}

          handleScreeningVenuesChange={movieForm.handleScreeningVenuesChange}


          // Estados para fechas de rodaje
          isPartialFilmingStartDate={movieForm.isPartialFilmingStartDate}
          setIsPartialFilmingStartDate={movieForm.setIsPartialFilmingStartDate}
          partialFilmingStartDate={movieForm.partialFilmingStartDate}
          setPartialFilmingStartDate={movieForm.setPartialFilmingStartDate}
          isPartialFilmingEndDate={movieForm.isPartialFilmingEndDate}
          setIsPartialFilmingEndDate={movieForm.setIsPartialFilmingEndDate}
          partialFilmingEndDate={movieForm.partialFilmingEndDate}
          setPartialFilmingEndDate={movieForm.setPartialFilmingEndDate}

          // Metadata - ahora viene del hook
          availableRatings={movieForm.availableRatings}
          availableColorTypes={movieForm.availableColorTypes}

          // Relaciones
          movieFormInitialData={movieForm.movieFormInitialData}
          alternativeTitles={movieForm.alternativeTitles}
          setAlternativeTitles={movieForm.setAlternativeTitles}
          movieLinks={movieForm.movieLinks}

          // Callbacks
          handleGenresChange={movieForm.handleGenresChange}
          handleCastChange={movieForm.handleCastChange}
          handleCrewChange={movieForm.handleCrewChange}
          handleCountriesChange={movieForm.handleCountriesChange}
          handleProductionCompaniesChange={movieForm.handleProductionCompaniesChange}
          handleDistributionCompaniesChange={movieForm.handleDistributionCompaniesChange}
          handleThemesChange={movieForm.handleThemesChange}
          handleLinksChange={movieForm.handleLinksChange}
        />
      </div>
    </div>
  )
}

// ==================================================
// src/app/admin/people/new/page.tsx
// ==================================================
// src/app/admin/people/new/page.tsx

import { Metadata } from 'next';
import Link from 'next/link';
import { PersonForm } from '@/components/admin/people/PersonForm';
import { ArrowLeft, UserPlus } from 'lucide-react';

export const metadata: Metadata = {
  title: 'Nueva Persona | Admin',
  description: 'Crear nueva persona en el sistema',
};

export default function NewPersonPage() {
  return (
    <div className="min-h-screen bg-gray-50">
      <div className="container mx-auto py-6 px-4 sm:px-6 lg:px-8 max-w-5xl">
        {/* Header */}
        <div className="mb-6">
          <Link 
            href="/admin/people"
            className="inline-flex items-center gap-2 text-gray-600 hover:text-gray-900 transition-colors mb-4"
          >
            <ArrowLeft className="w-4 h-4" />
            Volver al listado
          </Link>
          
          <div className="flex items-center gap-3">
            <UserPlus className="h-8 w-8 text-gray-700" />
            <div>
              <h1 className="text-3xl font-bold text-gray-900">Nueva Persona</h1>
              <p className="text-gray-600 mt-1">
                Complete los datos para agregar una nueva persona al sistema
              </p>
            </div>
          </div>
        </div>

        {/* Formulario */}
        <PersonForm />
      </div>
    </div>
  );
}

// ==================================================
// src/app/admin/people/page.tsx
// ==================================================
// src/app/admin/people/page.tsx

import { Suspense } from 'react';
import { Metadata } from 'next';
import { PeopleTable } from '@/components/admin/people/PeopleTable';
import Link from 'next/link';
import { Plus, Users, Loader2 } from 'lucide-react';

export const metadata: Metadata = {
  title: 'Gestión de Personas | Admin',
  description: 'Administración de personas del cine argentino',
};

export default function PeoplePage() {
  return (
    <div className="min-h-screen bg-gray-50">
      <div className="container mx-auto py-6 px-4 sm:px-6 lg:px-8">
        {/* Header */}
        <div className="mb-8">
          <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between">
            <div>
              <h1 className="text-3xl font-bold text-gray-900 flex items-center gap-3">
                <Users className="h-8 w-8 text-gray-700" />
                Gestión de Personas
              </h1>
              <p className="mt-2 text-gray-600">
                Administra el registro de actores, directores y personal técnico del cine argentino
              </p>
            </div>
            
            <div className="mt-4 sm:mt-0">
              <Link 
                href="/admin/people/new"
                className="inline-flex items-center gap-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
              >
                <Plus className="w-5 h-5" />
                Nueva Persona
              </Link>
            </div>
          </div>
        </div>

        {/* Stats Cards (opcional - comentado por ahora) */}
        {/* 
        <div className="grid gap-4 md:grid-cols-3 mb-8">
          <div className="bg-white rounded-lg shadow p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600">Total Personas</p>
                <p className="text-2xl font-bold text-gray-900">-</p>
              </div>
              <Users className="h-8 w-8 text-gray-400" />
            </div>
          </div>
          
          <div className="bg-white rounded-lg shadow p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600">Actores</p>
                <p className="text-2xl font-bold text-gray-900">-</p>
              </div>
              <Users className="h-8 w-8 text-gray-400" />
            </div>
          </div>
          
          <div className="bg-white rounded-lg shadow p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600">Directores</p>
                <p className="text-2xl font-bold text-gray-900">-</p>
              </div>
              <Users className="h-8 w-8 text-gray-400" />
            </div>
          </div>
        </div>
        */}
        
        {/* Tabla */}
        <Suspense fallback={
          <div className="bg-white rounded-lg shadow overflow-hidden">
            <div className="flex items-center justify-center h-64">
              <Loader2 className="w-8 h-8 text-blue-600 animate-spin" />
            </div>
          </div>
        }>
          <PeopleTable />
        </Suspense>
      </div>
    </div>
  );
}

// ==================================================
// src/app/admin/people/[id]/edit/page.tsx
// ==================================================
// src/app/admin/people/[id]/edit/page.tsx

'use client';

import { useEffect, useState } from 'react';
import Link from 'next/link';
import { useRouter, useParams } from 'next/navigation';
import { PersonForm } from '@/components/admin/people/PersonForm';
import { ArrowLeft, Edit, Loader2, AlertCircle } from 'lucide-react';
import { usePerson } from '@/hooks/usePeople';

export default function EditPersonPage() {
  const router = useRouter();
  const params = useParams();
  const id = params.id as string;
  const { person, loading, error } = usePerson(id);

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50">
        <div className="container mx-auto py-6 px-4 sm:px-6 lg:px-8 max-w-5xl">
          <div className="flex items-center justify-center py-12">
            <Loader2 className="h-8 w-8 animate-spin text-gray-400" />
          </div>
        </div>
      </div>
    );
  }

  if (error || !person) {
    return (
      <div className="min-h-screen bg-gray-50">
        <div className="container mx-auto py-6 px-4 sm:px-6 lg:px-8 max-w-5xl">
          <div className="bg-red-50 border border-red-200 rounded-lg p-4 mb-4">
            <div className="flex">
              <AlertCircle className="h-5 w-5 text-red-400" />
              <div className="ml-3">
                <h3 className="text-sm font-medium text-red-800">
                  {error?.message || 'No se pudo cargar la información de la persona'}
                </h3>
              </div>
            </div>
          </div>
          <Link 
            href="/admin/people"
            className="inline-flex items-center gap-2 px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors"
          >
            <ArrowLeft className="w-4 h-4" />
            Volver al listado
          </Link>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="container mx-auto py-6 px-4 sm:px-6 lg:px-8 max-w-5xl">
        {/* Header */}
        <div className="mb-6">
          <Link 
            href="/admin/people"
            className="inline-flex items-center gap-2 text-gray-600 hover:text-gray-900 transition-colors mb-4"
          >
            <ArrowLeft className="w-4 h-4" />
            Volver al listado
          </Link>
          
          <div className="flex items-center gap-3">
            <Edit className="h-8 w-8 text-gray-700" />
            <div>
              <h1 className="text-3xl font-bold text-gray-900">
                Editar Persona
              </h1>
              <p className="text-gray-600 mt-1">
                Modificando: {person.firstName} {person.lastName}
              </p>
            </div>
          </div>
        </div>

        {/* Formulario */}
        <PersonForm 
          personId={parseInt(id)} 
          initialData={person}
          onSuccess={() => router.push('/admin/people')}
        />
      </div>
    </div>
  );
}

// ==================================================
// src/app/admin/people/[id]/page.tsx
// ==================================================
// src/app/admin/people/[id]/page.tsx

'use client';

import { useParams } from 'next/navigation';
import Link from 'next/link';
import Image from 'next/image';
import { 
  ArrowLeft, 
  Edit, 
  ExternalLink, 
  Calendar,
  MapPin,
  Film,
  Award,
  Loader2,
  AlertCircle,
  User
} from 'lucide-react';
import { usePerson } from '@/hooks/usePeople';
import { formatPersonName, formatGender, formatBirthInfo } from '@/lib/people/peopleUtils';
import { PERSON_LINK_TYPES } from '@/lib/people/peopleConstants';

export default function PersonDetailPage() {
  const params = useParams();
  const id = params.id as string;
  const { person, loading, error } = usePerson(id);

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50">
        <div className="container mx-auto py-6 px-4 sm:px-6 lg:px-8 max-w-6xl">
          <div className="flex items-center justify-center py-12">
            <Loader2 className="h-8 w-8 animate-spin text-gray-400" />
          </div>
        </div>
      </div>
    );
  }

  if (error || !person) {
    return (
      <div className="min-h-screen bg-gray-50">
        <div className="container mx-auto py-6 px-4 sm:px-6 lg:px-8 max-w-6xl">
          <div className="bg-red-50 border border-red-200 rounded-lg p-4 mb-4">
            <div className="flex">
              <AlertCircle className="h-5 w-5 text-red-400" />
              <div className="ml-3">
                <h3 className="text-sm font-medium text-red-800">
                  {error?.message || 'No se pudo cargar la información de la persona'}
                </h3>
              </div>
            </div>
          </div>
          <Link 
            href="/admin/people"
            className="inline-flex items-center gap-2 px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors"
          >
            <ArrowLeft className="w-4 h-4" />
            Volver al listado
          </Link>
        </div>
      </div>
    );
  }

  const fullName = formatPersonName(person);

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="container mx-auto py-6 px-4 sm:px-6 lg:px-8 max-w-6xl">
        {/* Header */}
        <div className="mb-6 flex items-center justify-between">
          <Link 
            href="/admin/people"
            className="inline-flex items-center gap-2 text-gray-600 hover:text-gray-900 transition-colors"
          >
            <ArrowLeft className="w-4 h-4" />
            Volver al listado
          </Link>
          
          <Link 
            href={`/admin/people/${id}/edit`}
            className="inline-flex items-center gap-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
          >
            <Edit className="w-4 h-4" />
            Editar
          </Link>
        </div>

        {/* Info principal */}
        <div className="grid gap-6 md:grid-cols-3">
          {/* Columna izquierda - Foto y datos básicos */}
          <div className="space-y-6">
            <div className="bg-white rounded-lg shadow p-6">
              <div className="space-y-4">
                {/* Foto */}
                <div className="relative aspect-[3/4] w-full overflow-hidden rounded-lg bg-gray-100">
                  {person.photoUrl ? (
                    <Image
                      src={person.photoUrl}
                      alt={fullName}
                      fill
                      className="object-cover"
                      sizes="(max-width: 768px) 100vw, 33vw"
                    />
                  ) : (
                    <div className="flex h-full items-center justify-center">
                      <User className="h-16 w-16 text-gray-400" />
                    </div>
                  )}
                </div>

                {/* Nombre y estado */}
                <div className="text-center">
                  <h1 className="text-2xl font-bold text-gray-900">{fullName}</h1>
                  {person.realName && (
                    <p className="text-sm text-gray-500 mt-1">
                      {person.realName}
                    </p>
                  )}
                  <div className="mt-3">
                    <span className={`inline-flex items-center px-3 py-1 rounded-full text-xs font-medium ${
                      person.isActive 
                        ? 'bg-green-100 text-green-800' 
                        : 'bg-gray-100 text-gray-800'
                    }`}>
                      {person.isActive ? 'Activo' : 'Inactivo'}
                    </span>
                  </div>
                </div>

                {/* Datos básicos */}
                <div className="space-y-3 text-sm">
                  {person.gender && (
                    <div className="flex items-center gap-2">
                      <User className="h-4 w-4 text-gray-400" />
                      <span className="text-gray-700">{formatGender(person.gender)}</span>
                    </div>
                  )}
                  
                  {person.birthDate && (
                    <div className="flex items-center gap-2">
                      <Calendar className="h-4 w-4 text-gray-400" />
                      <span className="text-gray-700">{formatBirthInfo(person)}</span>
                    </div>
                  )}
                  
                  {person.birthLocation && (
                    <div className="flex items-center gap-2">
                      <MapPin className="h-4 w-4 text-gray-400" />
                      <span className="text-gray-700">Nacido en {person.birthLocation.name}</span>
                    </div>
                  )}
                  
                  {person.deathDate && (
                    <>
                      <div className="flex items-center gap-2">
                        <Calendar className="h-4 w-4 text-gray-400" />
                        <span className="text-gray-700">
                          Fallecido el {new Date(person.deathDate).toLocaleDateString('es-AR')}
                        </span>
                      </div>
                      {person.deathLocation && (
                        <div className="flex items-center gap-2">
                          <MapPin className="h-4 w-4 text-gray-400" />
                          <span className="text-gray-700">en {person.deathLocation.name}</span>
                        </div>
                      )}
                    </>
                  )}
                </div>

                {/* Estadísticas */}
                <div className="grid grid-cols-2 gap-4 pt-4 border-t">
                  <div className="text-center">
                    <p className="text-2xl font-bold text-gray-900">
                      {(person._count?.castRoles || 0) + (person._count?.crewRoles || 0)}
                    </p>
                    <p className="text-xs text-gray-500">Películas</p>
                  </div>
                  <div className="text-center">
                    <p className="text-2xl font-bold text-gray-900">{person._count?.awards || 0}</p>
                    <p className="text-xs text-gray-500">Premios</p>
                  </div>
                </div>
              </div>
            </div>

            {/* Enlaces */}
            {person.links && person.links.length > 0 && (
              <div className="bg-white rounded-lg shadow p-6">
                <h3 className="text-lg font-medium text-gray-900 mb-4">Enlaces</h3>
                <div className="space-y-2">
                  {person.links
                    .filter(link => link.isActive)
                    .map((link) => (
                      <a
                        key={link.id}
                        href={link.url}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="flex items-center gap-2 text-sm text-blue-600 hover:text-blue-800 transition-colors"
                      >
                        <ExternalLink className="h-3 w-3" />
                        {link.title || PERSON_LINK_TYPES[link.type] || link.type}
                        {link.isVerified && (
                          <span className="ml-auto px-2 py-0.5 text-xs bg-green-100 text-green-800 rounded-full">
                            Verificado
                          </span>
                        )}
                      </a>
                    ))}
                </div>
              </div>
            )}
          </div>

          {/* Columna derecha - Contenido principal */}
          <div className="md:col-span-2 space-y-6">
            {/* Biografía */}
            <div className="bg-white rounded-lg shadow p-6">
              <h3 className="text-lg font-medium text-gray-900 mb-4">Biografía</h3>
              {person.biography ? (
                <div className="prose prose-sm max-w-none">
                  {person.biography.split('\n').map((paragraph, index) => (
                    <p key={index} className="mb-4 text-gray-700">{paragraph}</p>
                  ))}
                </div>
              ) : (
                <p className="text-gray-500">
                  No hay biografía disponible
                </p>
              )}
            </div>

            {/* Filmografía */}
            <div className="bg-white rounded-lg shadow p-6">
              <h3 className="text-lg font-medium text-gray-900 mb-4 flex items-center gap-2">
                <Film className="h-5 w-5" />
                Filmografía
              </h3>
              <div className="space-y-4">
                {person._count?.castRoles && person._count.castRoles > 0 && (
                  <div>
                    <h4 className="font-medium text-gray-900 mb-2">Como Actor/Actriz</h4>
                    <p className="text-gray-600">
                      {person._count.castRoles} películas
                    </p>
                  </div>
                )}
                
                {person._count?.crewRoles && person._count.crewRoles > 0 && (
                  <div>
                    <h4 className="font-medium text-gray-900 mb-2">Como Equipo Técnico</h4>
                    <p className="text-gray-600">
                      {person._count.crewRoles} películas
                    </p>
                  </div>
                )}
                
                {(!person._count?.castRoles && !person._count?.crewRoles) && (
                  <p className="text-gray-500">
                    No hay películas asociadas
                  </p>
                )}
              </div>
            </div>

            {/* Premios */}
            <div className="bg-white rounded-lg shadow p-6">
              <h3 className="text-lg font-medium text-gray-900 mb-4 flex items-center gap-2">
                <Award className="h-5 w-5" />
                Premios y Reconocimientos
              </h3>
              {person._count?.awards && person._count.awards > 0 ? (
                <p className="text-gray-600">
                  {person._count.awards} premios registrados
                </p>
              ) : (
                <p className="text-gray-500">
                  No hay premios registrados
                </p>
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

// ==================================================
// src/app/admin/screening-venues/page.tsx
// ==================================================
// src/app/admin/screening-venues/page.tsx
'use client'

import { useState, useEffect } from 'react'
import {
  Plus,
  Search,
  Edit,
  Trash2,
  Film,
  Tv,
  Globe,
  MapPin,
  X,
  Save,
  Loader2,
  Building,
  ExternalLink
} from 'lucide-react'

interface ScreeningVenue {
  id: number
  slug: string
  name: string
  type: string
  description?: string
  logoUrl?: string
  website?: string
  address?: string
  city?: string
  province?: string
  country?: string
  isActive: boolean
  _count: {
    screenings: number
  }
}

const venueTypeLabels = {
  CINEMA: 'Cine',
  STREAMING: 'Streaming',
  TV_CHANNEL: 'Canal de TV',
  OTHER: 'Otro'
}

const venueTypeIcons = {
  CINEMA: Building,
  STREAMING: Globe,
  TV_CHANNEL: Tv,
  OTHER: Film
}

export default function AdminScreeningVenuesPage() {
  const [venues, setVenues] = useState<ScreeningVenue[]>([])
  const [loading, setLoading] = useState(true)
  const [searchTerm, setSearchTerm] = useState('')
  const [filterType, setFilterType] = useState('')
  const [filterActive, setFilterActive] = useState('')
  const [currentPage, setCurrentPage] = useState(1)
  const [totalPages, setTotalPages] = useState(1)
  const [showModal, setShowModal] = useState(false)
  const [editingVenue, setEditingVenue] = useState<ScreeningVenue | null>(null)
  const [deletingVenueId, setDeletingVenueId] = useState<number | null>(null)
  const [isSubmitting, setIsSubmitting] = useState(false)

  // Form state
  const [formData, setFormData] = useState({
    name: '',
    type: 'CINEMA',
    description: '',
    logoUrl: '',
    website: '',
    address: '',
    city: '',
    province: '',
    country: 'Argentina',
    latitude: '',
    longitude: '',
    isActive: true
  })

  const [formErrors, setFormErrors] = useState<Record<string, string>>({})

  // Toast state
  const [toast, setToast] = useState<{ message: string; type: 'success' | 'error' } | null>(null)

  const showToast = (message: string, type: 'success' | 'error') => {
    setToast({ message, type })
    setTimeout(() => setToast(null), 3000)
  }

  // Cargar pantallas
  const fetchVenues = async () => {
    try {
      setLoading(true)
      const params = new URLSearchParams({
        page: currentPage.toString(),
        limit: '20',
        search: searchTerm,
        type: filterType,
        isActive: filterActive
      })

      const response = await fetch(`/api/screening-venues?${params}`)

      if (!response.ok) {
        throw new Error('Error al cargar las pantallas de estreno')
      }

      const data = await response.json()
      setVenues(data.venues || [])
      setTotalPages(data.pagination?.totalPages || 1)
    } catch (error) {
      showToast('Error al cargar las pantallas de estreno', 'error')
      setVenues([])
      setTotalPages(1)
    } finally {
      setLoading(false)
    }
  }

  useEffect(() => {
    fetchVenues()
  }, [currentPage, searchTerm, filterType, filterActive])

  // Validar formulario
  const validateForm = () => {
    const errors: Record<string, string> = {}
    
    if (!formData.name.trim()) {
      errors.name = 'El nombre es requerido'
    }
    
    if (!formData.type) {
      errors.type = 'El tipo es requerido'
    }
    
    if (formData.logoUrl && !isValidUrl(formData.logoUrl)) {
      errors.logoUrl = 'URL inválida'
    }
    
    if (formData.website && !isValidUrl(formData.website)) {
      errors.website = 'URL inválida'
    }
    
    setFormErrors(errors)
    return Object.keys(errors).length === 0
  }

  const isValidUrl = (url: string) => {
    try {
      new URL(url)
      return true
    } catch {
      return false
    }
  }

  // Crear o actualizar pantalla
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    
    if (!validateForm()) return
    
    setIsSubmitting(true)
    
    try {
      const processedData = {
        ...formData,
        latitude: formData.latitude ? parseFloat(formData.latitude) : undefined,
        longitude: formData.longitude ? parseFloat(formData.longitude) : undefined,
        logoUrl: formData.logoUrl || undefined,
        website: formData.website || undefined
      }

      const url = editingVenue
        ? `/api/screening-venues/${editingVenue.id}`
        : '/api/screening-venues'

      const method = editingVenue ? 'PUT' : 'POST'
      const response = await fetch(url, {
        method,
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(processedData)
      })

      if (!response.ok) {
        const error = await response.json()
        throw new Error(error.error || 'Error al guardar')
      }

      showToast(editingVenue ? 'Pantalla actualizada' : 'Pantalla creada', 'success')
      setShowModal(false)
      resetForm()
      setEditingVenue(null)
      fetchVenues()
    } catch (error) {
      showToast(error instanceof Error ? error.message : 'Error al guardar', 'error')
    } finally {
      setIsSubmitting(false)
    }
  }

  // Reset form
  const resetForm = () => {
    setFormData({
      name: '',
      type: 'CINEMA',
      description: '',
      logoUrl: '',
      website: '',
      address: '',
      city: '',
      province: '',
      country: 'Argentina',
      latitude: '',
      longitude: '',
      isActive: true
    })
    setFormErrors({})
  }

  // Editar pantalla
  const handleEdit = (venue: ScreeningVenue) => {
    setEditingVenue(venue)
    
    setFormData({
      name: venue.name,
      type: venue.type,
      description: venue.description || '',
      logoUrl: venue.logoUrl || '',
      website: venue.website || '',
      address: venue.address || '',
      city: venue.city || '',
      province: venue.province || '',
      country: venue.country || 'Argentina',
      latitude: '',
      longitude: '',
      isActive: venue.isActive
    })
    
    setShowModal(true)
  }

  // Eliminar pantalla
  const handleDelete = async (id: number) => {
    if (!confirm('¿Estás seguro de eliminar esta pantalla de estreno?')) return

    try {
      setDeletingVenueId(id)
      const response = await fetch(`/api/screening-venues/${id}`, {
        method: 'DELETE'
      })

      if (!response.ok) {
        const error = await response.json()
        throw new Error(error.error || 'Error al eliminar')
      }

      showToast('Pantalla eliminada', 'success')
      fetchVenues()
    } catch (error) {
      showToast(error instanceof Error ? error.message : 'Error al eliminar', 'error')
    } finally {
      setDeletingVenueId(null)
    }
  }

  // Abrir modal para nueva pantalla
  const handleNewVenue = () => {
    setEditingVenue(null)
    resetForm()
    setShowModal(true)
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Toast Notification */}
      {toast && (
        <div className={`fixed top-4 right-4 z-50 px-4 py-2 rounded-lg text-white ${
          toast.type === 'success' ? 'bg-green-500' : 'bg-red-500'
        }`}>
          {toast.message}
        </div>
      )}

      {/* Header */}
      <div className="bg-white shadow">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="py-6">
            <h1 className="text-3xl font-bold text-gray-900">
              Administración de Pantallas de Estreno
            </h1>
          </div>
        </div>
      </div>

      {/* Contenido principal */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Filtros y acciones */}
        <div className="bg-white rounded-lg shadow p-6 mb-6">
          <div className="grid grid-cols-1 md:grid-cols-5 gap-4">
            {/* Búsqueda */}
            <div className="relative md:col-span-2">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
              <input
                type="text"
                placeholder="Buscar pantallas..."
                className="pl-10 pr-4 py-2 w-full border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
              />
            </div>

            {/* Filtro por tipo */}
            <select
              className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
              value={filterType}
              onChange={(e) => setFilterType(e.target.value)}
            >
              <option value="">Todos los tipos</option>
              <option value="CINEMA">Cines</option>
              <option value="STREAMING">Streaming</option>
              <option value="TV_CHANNEL">Canales de TV</option>
              <option value="OTHER">Otros</option>
            </select>

            {/* Filtro por estado */}
            <select
              className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
              value={filterActive}
              onChange={(e) => setFilterActive(e.target.value)}
            >
              <option value="">Todos los estados</option>
              <option value="true">Activas</option>
              <option value="false">Inactivas</option>
            </select>

            {/* Botón nueva pantalla */}
            <button
              onClick={handleNewVenue}
              className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors flex items-center justify-center gap-2"
            >
              <Plus className="w-5 h-5" />
              Nueva Pantalla
            </button>
          </div>
        </div>

        {/* Lista de pantallas */}
        <div className="bg-white rounded-lg shadow overflow-hidden">
          {loading ? (
            <div className="flex items-center justify-center h-64">
              <Loader2 className="w-8 h-8 text-blue-600 animate-spin" />
            </div>
          ) : venues.length === 0 ? (
            <div className="text-center py-12">
              <Film className="w-12 h-12 text-gray-400 mx-auto mb-4" />
              <p className="text-gray-500">No se encontraron pantallas de estreno</p>
            </div>
          ) : (
            <div className="overflow-x-auto">
              <table className="min-w-full divide-y divide-gray-200">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Pantalla
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Tipo
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Ubicación
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Películas
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Estado
                    </th>
                    <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Acciones
                    </th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {venues.map((venue) => {
                    const Icon = venueTypeIcons[venue.type as keyof typeof venueTypeIcons] || Film
                    return (
                      <tr key={venue.id} className="hover:bg-gray-50">
                        <td className="px-6 py-4 whitespace-nowrap">
                          <div className="flex items-center">
                            <div className="flex-shrink-0 h-10 w-10">
                              {venue.logoUrl ? (
                                <img
                                  className="h-10 w-10 rounded-lg object-contain"
                                  src={venue.logoUrl}
                                  alt={venue.name}
                                />
                              ) : (
                                <div className="h-10 w-10 rounded-lg bg-gray-200 flex items-center justify-center">
                                  <Icon className="w-5 h-5 text-gray-400" />
                                </div>
                              )}
                            </div>
                            <div className="ml-4">
                              <div className="text-sm font-medium text-gray-900">
                                {venue.name}
                              </div>
                              {venue.website && (
                                <a
                                  href={venue.website}
                                  target="_blank"
                                  rel="noopener noreferrer"
                                  className="text-sm text-blue-600 hover:text-blue-800 flex items-center gap-1"
                                >
                                  <ExternalLink className="w-3 h-3" />
                                  Sitio web
                                </a>
                              )}
                            </div>
                          </div>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap">
                          <span className="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-blue-100 text-blue-800">
                            {venueTypeLabels[venue.type as keyof typeof venueTypeLabels]}
                          </span>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                          {venue.type === 'CINEMA' && venue.city ? (
                            <div className="flex items-center gap-1">
                              <MapPin className="w-4 h-4" />
                              {venue.city}
                              {venue.province && `, ${venue.province}`}
                            </div>
                          ) : (
                            <span className="text-gray-400">-</span>
                          )}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                          {venue._count.screenings}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap">
                          <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${
                            venue.isActive
                              ? 'bg-green-100 text-green-800'
                              : 'bg-gray-100 text-gray-800'
                          }`}>
                            {venue.isActive ? 'Activa' : 'Inactiva'}
                          </span>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                          <div className="flex items-center justify-end gap-2">
                            <button
                              onClick={() => handleEdit(venue)}
                              className="text-blue-600 hover:text-blue-900 transition-colors"
                              title="Editar"
                            >
                              <Edit className="w-4 h-4" />
                            </button>
                            <button
                              onClick={() => handleDelete(venue.id)}
                              disabled={deletingVenueId === venue.id || venue._count.screenings > 0}
                              className="text-red-600 hover:text-red-900 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                              title={venue._count.screenings > 0 ? 'No se puede eliminar con películas asociadas' : 'Eliminar'}
                            >
                              {deletingVenueId === venue.id ? (
                                <Loader2 className="w-4 h-4 animate-spin" />
                              ) : (
                                <Trash2 className="w-4 h-4" />
                              )}
                            </button>
                          </div>
                        </td>
                      </tr>
                    )
                  })}
                </tbody>
              </table>
            </div>
          )}
        </div>

        {/* Paginación */}
        {totalPages > 1 && (
          <div className="bg-white px-4 py-3 flex items-center justify-between border-t border-gray-200 sm:px-6 mt-4 rounded-lg shadow">
            <div className="flex-1 flex justify-between sm:hidden">
              <button
                onClick={() => setCurrentPage(p => Math.max(1, p - 1))}
                disabled={currentPage === 1}
                className="relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
              >
                Anterior
              </button>
              <button
                onClick={() => setCurrentPage(p => Math.min(totalPages, p + 1))}
                disabled={currentPage === totalPages}
                className="ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
              >
                Siguiente
              </button>
            </div>
            <div className="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
              <div>
                <p className="text-sm text-gray-700">
                  Página <span className="font-medium">{currentPage}</span> de{' '}
                  <span className="font-medium">{totalPages}</span>
                </p>
              </div>
              <div>
                <nav className="relative z-0 inline-flex rounded-md shadow-sm -space-x-px" aria-label="Pagination">
                  <button
                    onClick={() => setCurrentPage(p => Math.max(1, p - 1))}
                    disabled={currentPage === 1}
                    className="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    Anterior
                  </button>
                  <button
                    onClick={() => setCurrentPage(p => Math.min(totalPages, p + 1))}
                    disabled={currentPage === totalPages}
                    className="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    Siguiente
                  </button>
                </nav>
              </div>
            </div>
          </div>
        )}
      </div>

      {/* Modal de creación/edición */}
      {showModal && (
        <div className="fixed inset-0 bg-gray-500 bg-opacity-75 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg max-w-2xl w-full max-h-[90vh] overflow-hidden">
            <div className="bg-gray-50 px-6 py-4 border-b border-gray-200">
              <div className="flex items-center justify-between">
                <h2 className="text-xl font-semibold text-gray-900">
                  {editingVenue ? 'Editar Pantalla de Estreno' : 'Nueva Pantalla de Estreno'}
                </h2>
                <button
                  onClick={() => {
                    setShowModal(false)
                    resetForm()
                    setEditingVenue(null)
                  }}
                  className="text-gray-400 hover:text-gray-500"
                >
                  <X className="w-6 h-6" />
                </button>
              </div>
            </div>

            <div className="p-6 overflow-y-auto max-h-[calc(90vh-8rem)]">
              <div className="space-y-6">
                {/* Información básica */}
                <div>
                  <h3 className="text-lg font-medium text-gray-900 mb-4">
                    Información Básica
                  </h3>
                  
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        Nombre *
                      </label>
                      <input
                        type="text"
                        value={formData.name}
                        onChange={(e) => setFormData({ ...formData, name: e.target.value })}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                      />
                      {formErrors.name && (
                        <p className="mt-1 text-sm text-red-600">{formErrors.name}</p>
                      )}
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        Tipo *
                      </label>
                      <select
                        value={formData.type}
                        onChange={(e) => setFormData({ ...formData, type: e.target.value })}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                      >
                        <option value="CINEMA">Cine</option>
                        <option value="STREAMING">Streaming</option>
                        <option value="TV_CHANNEL">Canal de TV</option>
                        <option value="OTHER">Otro</option>
                      </select>
                      {formErrors.type && (
                        <p className="mt-1 text-sm text-red-600">{formErrors.type}</p>
                      )}
                    </div>
                  </div>

                  <div className="mt-4">
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Descripción
                    </label>
                    <textarea
                      value={formData.description}
                      onChange={(e) => setFormData({ ...formData, description: e.target.value })}
                      rows={3}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                    />
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mt-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        URL del Logo
                      </label>
                      <input
                        type="url"
                        value={formData.logoUrl}
                        onChange={(e) => setFormData({ ...formData, logoUrl: e.target.value })}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                      />
                      {formErrors.logoUrl && (
                        <p className="mt-1 text-sm text-red-600">{formErrors.logoUrl}</p>
                      )}
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        Sitio Web
                      </label>
                      <input
                        type="url"
                        value={formData.website}
                        onChange={(e) => setFormData({ ...formData, website: e.target.value })}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                      />
                      {formErrors.website && (
                        <p className="mt-1 text-sm text-red-600">{formErrors.website}</p>
                      )}
                    </div>
                  </div>
                </div>

                {/* Ubicación (solo para cines) */}
                {formData.type === 'CINEMA' && (
                  <div>
                    <h3 className="text-lg font-medium text-gray-900 mb-4">
                      Ubicación
                    </h3>
                    
                    <div className="space-y-4">
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">
                          Dirección
                        </label>
                        <input
                          type="text"
                          value={formData.address}
                          onChange={(e) => setFormData({ ...formData, address: e.target.value })}
                          className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                        />
                      </div>

                      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-1">
                            Ciudad
                          </label>
                          <input
                            type="text"
                            value={formData.city}
                            onChange={(e) => setFormData({ ...formData, city: e.target.value })}
                            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                          />
                        </div>

                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-1">
                            Provincia
                          </label>
                          <input
                            type="text"
                            value={formData.province}
                            onChange={(e) => setFormData({ ...formData, province: e.target.value })}
                            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                          />
                        </div>

                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-1">
                            País
                          </label>
                          <input
                            type="text"
                            value={formData.country}
                            onChange={(e) => setFormData({ ...formData, country: e.target.value })}
                            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                          />
                        </div>
                      </div>

                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-1">
                            Latitud
                          </label>
                          <input
                            type="number"
                            step="0.000001"
                            value={formData.latitude}
                            onChange={(e) => setFormData({ ...formData, latitude: e.target.value })}
                            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                          />
                        </div>

                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-1">
                            Longitud
                          </label>
                          <input
                            type="number"
                            step="0.000001"
                            value={formData.longitude}
                            onChange={(e) => setFormData({ ...formData, longitude: e.target.value })}
                            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                          />
                        </div>
                      </div>
                    </div>
                  </div>
                )}

                {/* Estado */}
                <div>
                  <label className="flex items-center gap-2">
                    <input
                      type="checkbox"
                      checked={formData.isActive}
                      onChange={(e) => setFormData({ ...formData, isActive: e.target.checked })}
                      className="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500 focus:ring-2"
                    />
                    <span className="text-sm font-medium text-gray-700">
                      Pantalla activa
                    </span>
                  </label>
                </div>
              </div>

              {/* Botones */}
              <div className="mt-6 flex items-center justify-end gap-4 pt-4 border-t border-gray-200">
                <button
                  type="button"
                  onClick={() => {
                    setShowModal(false)
                    resetForm()
                    setEditingVenue(null)
                  }}
                  className="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors"
                >
                  Cancelar
                </button>
                <button
                  onClick={handleSubmit}
                  disabled={isSubmitting}
                  className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-2"
                >
                  {isSubmitting ? (
                    <>
                      <Loader2 className="w-4 h-4 animate-spin" />
                      Guardando...
                    </>
                  ) : (
                    <>
                      <Save className="w-4 h-4" />
                      {editingVenue ? 'Actualizar' : 'Crear'} Pantalla
                    </>
                  )}
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}

// ==================================================
// src/app/admin/themes/page.tsx
// ==================================================
// src/app/admin/themes/page.tsx
'use client'

import { useState, useEffect } from 'react'
import { useForm } from 'react-hook-form'
import { zodResolver } from '@hookform/resolvers/zod'
import { z } from 'zod'
import {
  Plus,
  Search,
  Edit,
  Trash2,
  Tag,
  X,
  Save,
  Loader2,
  Hash
} from 'lucide-react'
import { toast } from 'react-hot-toast'

// Schema de validación
const themeFormSchema = z.object({
  name: z.string().min(1, 'El nombre es requerido').max(100),
  description: z.string().optional()
})

type ThemeFormData = z.infer<typeof themeFormSchema>

interface Theme {
  id: number
  slug: string
  name: string
  description?: string
  usageCount: number
  movieCount?: number
  createdAt: string
}

export default function AdminThemesPage() {
  const [themes, setThemes] = useState<Theme[]>([])
  const [loading, setLoading] = useState(true)
  const [searchTerm, setSearchTerm] = useState('')
  const [sortBy, setSortBy] = useState('name')
  const [showModal, setShowModal] = useState(false)
  const [editingTheme, setEditingTheme] = useState<Theme | null>(null)
  const [deletingThemeId, setDeletingThemeId] = useState<number | null>(null)

  // Form
  const {
    register,
    handleSubmit,
    reset,
    setValue,
    formState: { errors, isSubmitting }
  } = useForm<ThemeFormData>({
    resolver: zodResolver(themeFormSchema)
  })

  // Cargar themes
  const fetchThemes = async () => {
    try {
      setLoading(true)
      const params = new URLSearchParams({
        search: searchTerm,
        sortBy: sortBy,
        sortOrder: sortBy === 'usageCount' ? 'desc' : 'asc'
      })

      const response = await fetch(`/api/themes?${params}`)
      if (!response.ok) throw new Error('Error al cargar los themes')

      const data = await response.json()
      setThemes(data || [])
    } catch (error) {
      toast.error('Error al cargar los themes')
      setThemes([])
    } finally {
      setLoading(false)
    }
  }

  useEffect(() => {
    fetchThemes()
  }, [searchTerm, sortBy])

  // Crear o actualizar theme
  const onSubmit = async (data: ThemeFormData) => {
    try {
      const url = editingTheme
        ? `/api/themes/${editingTheme.id}`
        : '/api/themes'

      const method = editingTheme ? 'PUT' : 'POST'
      const response = await fetch(url, {
        method,
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data)
      })

      if (!response.ok) {
        const error = await response.json()
        throw new Error(error.error || 'Error al guardar')
      }

      toast.success(editingTheme ? 'Theme actualizado' : 'Theme creado')
      setShowModal(false)
      reset()
      setEditingTheme(null)
      fetchThemes()
    } catch (error) {
      toast.error(error instanceof Error ? error.message : 'Error al guardar')
    }
  }

  // Editar theme
  const handleEdit = (theme: Theme) => {
    setEditingTheme(theme)
    setValue('name', theme.name)
    setValue('description', theme.description || '')
    setShowModal(true)
  }

  // Eliminar theme
  const handleDelete = async (id: number) => {
    if (!confirm('¿Estás seguro de eliminar este theme?')) return

    try {
      setDeletingThemeId(id)
      const response = await fetch(`/api/themes/${id}`, {
        method: 'DELETE'
      })

      if (!response.ok) {
        const error = await response.json()
        throw new Error(error.error || 'Error al eliminar')
      }

      toast.success('Theme eliminado')
      fetchThemes()
    } catch (error) {
      toast.error(error instanceof Error ? error.message : 'Error al eliminar')
    } finally {
      setDeletingThemeId(null)
    }
  }

  // Abrir modal para nuevo theme
  const handleNewTheme = () => {
    setEditingTheme(null)
    reset()
    setShowModal(true)
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white shadow">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="py-6">
            <h1 className="text-3xl font-bold text-gray-900">
              Administración de Themes/Keywords
            </h1>
            <p className="mt-2 text-gray-600">
              Gestiona los temas y palabras clave para categorizar las películas
            </p>
          </div>
        </div>
      </div>

      {/* Contenido principal */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Filtros y acciones */}
        <div className="bg-white rounded-lg shadow p-6 mb-6">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            {/* Búsqueda */}
            <div className="relative">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
              <input
                type="text"
                placeholder="Buscar themes..."
                className="pl-10 pr-4 py-2 w-full border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
              />
            </div>

            {/* Ordenar por */}
            <select
              className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
              value={sortBy}
              onChange={(e) => setSortBy(e.target.value)}
            >
              <option value="name">Nombre</option>
              <option value="usageCount">Más usadas</option>
              <option value="createdAt">Más recientes</option>
            </select>

            {/* Botón nuevo theme */}
            <button
              onClick={handleNewTheme}
              className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors flex items-center justify-center gap-2"
            >
              <Plus className="w-5 h-5" />
              Nuevo Theme
            </button>
          </div>

          {/* Estadísticas */}
          <div className="mt-6 grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="bg-gray-50 rounded-lg p-4">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-gray-500">Total Themes</p>
                  <p className="text-2xl font-bold text-gray-900">{themes.length}</p>
                </div>
                <Tag className="w-8 h-8 text-gray-400" />
              </div>
            </div>
            <div className="bg-gray-50 rounded-lg p-4">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-gray-500">Total Asignaciones</p>
                  <p className="text-2xl font-bold text-gray-900">
                    {themes.reduce((sum, t) => sum + (t.movieCount || 0), 0)}
                  </p>
                </div>
                <Hash className="w-8 h-8 text-gray-400" />
              </div>
            </div>
          </div>
        </div>

        {/* Lista de themes */}
        <div className="bg-white rounded-lg shadow overflow-hidden">
          {loading ? (
            <div className="flex items-center justify-center h-64">
              <Loader2 className="w-8 h-8 text-blue-600 animate-spin" />
            </div>
          ) : themes.length === 0 ? (
            <div className="text-center py-12">
              <Tag className="w-12 h-12 text-gray-400 mx-auto mb-4" />
              <p className="text-gray-500">No se encontraron themes</p>
            </div>
          ) : (
            <div className="overflow-x-auto">
              <table className="min-w-full divide-y divide-gray-200">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Theme
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Descripción
                    </th>
                    <th className="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Películas
                    </th>
                    <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Acciones
                    </th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {themes.map((theme) => (
                    <tr key={theme.id} className="hover:bg-gray-50">
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="flex items-center">
                          <Tag className="w-5 h-5 text-gray-400 mr-3" />
                          <div>
                            <div className="text-sm font-medium text-gray-900">
                              {theme.name}
                            </div>
                            <div className="text-sm text-gray-500">
                              /{theme.slug}
                            </div>
                          </div>
                        </div>
                      </td>
                      <td className="px-6 py-4">
                        <p className="text-sm text-gray-500 line-clamp-2">
                          {theme.description || '-'}
                        </p>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-center">
                        <span className="text-sm font-medium text-gray-900">
                          {theme.movieCount || 0}
                        </span>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                        <div className="flex items-center justify-end gap-2">
                          <button
                            onClick={() => handleEdit(theme)}
                            className="text-blue-600 hover:text-blue-900 transition-colors"
                            title="Editar"
                          >
                            <Edit className="w-4 h-4" />
                          </button>
                          <button
                            onClick={() => handleDelete(theme.id)}
                            disabled={deletingThemeId === theme.id || (theme.movieCount || 0) > 0}
                            className="text-red-600 hover:text-red-900 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                            title={theme.movieCount ? `En uso en ${theme.movieCount} películas` : 'Eliminar'}
                          >
                            {deletingThemeId === theme.id ? (
                              <Loader2 className="w-4 h-4 animate-spin" />
                            ) : (
                              <Trash2 className="w-4 h-4" />
                            )}
                          </button>
                        </div>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          )}
        </div>
      </div>

      {/* Modal de creación/edición */}
      {showModal && (
        <div className="fixed inset-0 bg-gray-500 bg-opacity-75 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg max-w-md w-full p-6">
            <div className="mb-4">
              <h2 className="text-xl font-semibold text-gray-900">
                {editingTheme ? 'Editar Theme' : 'Nuevo Theme'}
              </h2>
            </div>

            <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Nombre *
                </label>
                <input
                  type="text"
                  {...register('name')}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                  placeholder="Ej: Basada en hechos reales"
                />
                {errors.name && (
                  <p className="mt-1 text-sm text-red-600">{errors.name.message}</p>
                )}
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Descripción
                </label>
                <textarea
                  {...register('description')}
                  rows={3}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                  placeholder="Descripción opcional del theme"
                />
              </div>

              <div className="flex items-center justify-end gap-3 pt-4">
                <button
                  type="button"
                  onClick={() => {
                    setShowModal(false)
                    reset()
                    setEditingTheme(null)
                  }}
                  className="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors"
                >
                  Cancelar
                </button>
                <button
                  type="submit"
                  disabled={isSubmitting}
                  className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-2"
                >
                  {isSubmitting ? (
                    <>
                      <Loader2 className="w-4 h-4 animate-spin" />
                      Guardando...
                    </>
                  ) : (
                    <>
                      <Save className="w-4 h-4" />
                      {editingTheme ? 'Actualizar' : 'Crear'} Theme
                    </>
                  )}
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
    </div>
  )
}

// ==================================================
// src/app/api/calificaciones/route.ts
// ==================================================
import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/prisma'
import { createSlug } from '@/lib/utils'

// GET /api/calificaciones - Listar todas las calificaciones
export async function GET() {
  try {
    const ratings = await prisma.rating.findMany({
      orderBy: { name: 'asc' },
      include: {
        _count: {
          select: { movies: true }
        }
      }
    })

    return NextResponse.json(ratings)
  } catch (error) {
    console.error('Error fetching ratings:', error)
    return NextResponse.json(
      { error: 'Error al obtener las calificaciones' },
      { status: 500 }
    )
  }
}

// POST /api/calificaciones - Crear nueva calificación
export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    
    // Validar datos requeridos
    if (!body.name || !body.name.trim()) {
      return NextResponse.json(
        { error: 'El nombre es requerido' },
        { status: 400 }
      )
    }

    // Generar slug único
    let slug = createSlug(body.name)
    let slugExists = await prisma.rating.findUnique({ where: { slug } })
    let counter = 1
    
    while (slugExists) {
      slug = `${createSlug(body.name)}-${counter}`
      slugExists = await prisma.rating.findUnique({ where: { slug } })
      counter++
    }

    const rating = await prisma.rating.create({
      data: {
        name: body.name.trim(),
        abbreviation: body.abbreviation?.trim() || null,
        description: body.description?.trim() || null,
        slug
      }
    })

    return NextResponse.json(rating, { status: 201 })
  } catch (error) {
    console.error('Error creating rating:', error)
    return NextResponse.json(
      { error: 'Error al crear la calificación' },
      { status: 500 }
    )
  }
}

// ==================================================
// src/app/api/calificaciones/[id]/route.ts
// ==================================================
import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/prisma'

// GET /api/calificaciones/[id] - Obtener una calificación por ID
export async function GET(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const id = parseInt(params.id)
    
    const rating = await prisma.rating.findUnique({
      where: { id },
      include: {
        _count: {
          select: { movies: true }
        }
      }
    })
    
    if (!rating) {
      return NextResponse.json(
        { error: 'Calificación no encontrada' },
        { status: 404 }
      )
    }

    return NextResponse.json(rating)
  } catch (error) {
    console.error('Error fetching rating:', error)
    return NextResponse.json(
      { error: 'Error al obtener la calificación' },
      { status: 500 }
    )
  }
}

// PUT /api/calificaciones/[id] - Actualizar calificación
export async function PUT(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const id = parseInt(params.id)
    const body = await request.json()
    
    // Validar datos requeridos
    if (!body.name || !body.name.trim()) {
      return NextResponse.json(
        { error: 'El nombre es requerido' },
        { status: 400 }
      )
    }

    // Verificar que la calificación existe
    const existingRating = await prisma.rating.findUnique({
      where: { id }
    })
    
    if (!existingRating) {
      return NextResponse.json(
        { error: 'Calificación no encontrada' },
        { status: 404 }
      )
    }

    const rating = await prisma.rating.update({
      where: { id },
      data: {
        name: body.name.trim(),
        abbreviation: body.abbreviation?.trim() || null,
        description: body.description?.trim() || null
      }
    })

    return NextResponse.json(rating)
  } catch (error) {
    console.error('Error updating rating:', error)
    return NextResponse.json(
      { error: 'Error al actualizar la calificación' },
      { status: 500 }
    )
  }
}

// DELETE /api/calificaciones/[id] - Eliminar calificación
export async function DELETE(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const id = parseInt(params.id)
    
    // Verificar que la calificación existe
    const rating = await prisma.rating.findUnique({
      where: { id },
      include: {
        _count: {
          select: { movies: true }
        }
      }
    })
    
    if (!rating) {
      return NextResponse.json(
        { error: 'Calificación no encontrada' },
        { status: 404 }
      )
    }

    // Verificar si tiene películas asociadas
    if (rating._count.movies > 0) {
      return NextResponse.json(
        { error: 'No se puede eliminar una calificación que tiene películas asociadas' },
        { status: 400 }
      )
    }

    // Eliminar calificación
    await prisma.rating.delete({
      where: { id }
    })

    return NextResponse.json(
      { message: 'Calificación eliminada exitosamente' },
      { status: 200 }
    )
  } catch (error) {
    console.error('Error deleting rating:', error)
    return NextResponse.json(
      { error: 'Error al eliminar la calificación' },
      { status: 500 }
    )
  }
}

// ==================================================
// src/app/api/color-types/route.ts
// ==================================================
import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/prisma'

// GET /api/color-types - Listar todos los tipos de color
export async function GET() {
  try {
    const colorTypes = await prisma.colorType.findMany({
      orderBy: { displayOrder: 'asc' }
    })

    return NextResponse.json(colorTypes)
  } catch (error) {
    console.error('Error fetching color types:', error)
    return NextResponse.json(
      { error: 'Error al obtener los tipos de color' },
      { status: 500 }
    )
  }
}

// ==================================================
// src/app/api/companies/distribution/route.ts
// ==================================================
// =====================================================
// src/app/api/companies/distribution/route.ts
// =====================================================
import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/prisma'
import { createSlug } from '@/lib/utils'

// GET /api/companies/distribution - Listar distribuidoras
export async function GET(request: NextRequest) {
  try {
    const searchParams = request.nextUrl.searchParams
    const search = searchParams.get('search') || ''

    const where = search ? {
      name: { contains: search, mode: 'insensitive' as const }
    } : {}

    const companies = await prisma.distributionCompany.findMany({
      where,
      orderBy: { name: 'asc' }
    })

    return NextResponse.json(companies)
  } catch (error) {
    console.error('Error fetching distribution companies:', error)
    return NextResponse.json(
      { error: 'Error al obtener las distribuidoras' },
      { status: 500 }
    )
  }
}

// POST /api/companies/distribution - Crear nueva distribuidora
export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    
    let slug = createSlug(body.name)
    let slugExists = await prisma.distributionCompany.findUnique({ where: { slug } })
    let counter = 1
    
    while (slugExists) {
      slug = `${createSlug(body.name)}-${counter}`
      slugExists = await prisma.distributionCompany.findUnique({ where: { slug } })
      counter++
    }

    const company = await prisma.distributionCompany.create({
      data: {
        ...body,
        slug
      }
    })

    return NextResponse.json(company, { status: 201 })
  } catch (error) {
    console.error('Error creating distribution company:', error)
    return NextResponse.json(
      { error: 'Error al crear la distribuidora' },
      { status: 500 }
    )
  }
}

// ==================================================
// src/app/api/companies/production/route.ts
// ==================================================
// =====================================================
// src/app/api/companies/production/route.ts
// =====================================================
import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/prisma'
import { createSlug } from '@/lib/utils'

// GET /api/companies/production - Listar productoras
export async function GET(request: NextRequest) {
  try {
    const searchParams = request.nextUrl.searchParams
    const search = searchParams.get('search') || ''

    const where = search ? {
      name: { contains: search, mode: 'insensitive' as const }
    } : {}

    const companies = await prisma.productionCompany.findMany({
      where,
      orderBy: { name: 'asc' }
    })

    return NextResponse.json(companies)
  } catch (error) {
    console.error('Error fetching production companies:', error)
    return NextResponse.json(
      { error: 'Error al obtener las productoras' },
      { status: 500 }
    )
  }
}

// POST /api/companies/production - Crear nueva productora
export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    
    let slug = createSlug(body.name)
    let slugExists = await prisma.productionCompany.findUnique({ where: { slug } })
    let counter = 1
    
    while (slugExists) {
      slug = `${createSlug(body.name)}-${counter}`
      slugExists = await prisma.productionCompany.findUnique({ where: { slug } })
      counter++
    }

    const company = await prisma.productionCompany.create({
      data: {
        ...body,
        slug
      }
    })

    return NextResponse.json(company, { status: 201 })
  } catch (error) {
    console.error('Error creating production company:', error)
    return NextResponse.json(
      { error: 'Error al crear la productora' },
      { status: 500 }
    )
  }
}


// ==================================================
// src/app/api/countries/route.ts
// ==================================================
// src/app/api/countries/route.ts
import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/prisma'

// GET /api/countries - Listar todos los países con conteo de películas
export async function GET() {
  try {
    const countries = await prisma.country.findMany({
      orderBy: { name: 'asc' },
      include: {
        _count: {
          select: { movies: true }
        }
      }
    })

    return NextResponse.json(countries)
  } catch (error) {
    console.error('Error fetching countries:', error)
    return NextResponse.json(
      { error: 'Error al obtener los países' },
      { status: 500 }
    )
  }
}

// POST /api/countries - Crear nuevo país
export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    
    // Validar datos requeridos
    if (!body.code || body.code.trim() === '') {
      return NextResponse.json(
        { error: 'El código del país es requerido' },
        { status: 400 }
      )
    }
    
    if (!body.name || body.name.trim() === '') {
      return NextResponse.json(
        { error: 'El nombre del país es requerido' },
        { status: 400 }
      )
    }
    
    // Validar formato del código
    const code = body.code.trim().toUpperCase()
    if (!/^[A-Z]{2}$/.test(code)) {
      return NextResponse.json(
        { error: 'El código debe ser de 2 letras mayúsculas (ISO 3166-1 alpha-2)' },
        { status: 400 }
      )
    }
    
    // Verificar si el código ya existe
    const existingCountry = await prisma.country.findUnique({
      where: { code }
    })
    
    if (existingCountry) {
      return NextResponse.json(
        { error: 'Ya existe un país con ese código' },
        { status: 400 }
      )
    }

    // Crear país
    const country = await prisma.country.create({
      data: {
        code,
        name: body.name.trim()
      },
      include: {
        _count: {
          select: { movies: true }
        }
      }
    })

    return NextResponse.json(country, { status: 201 })
  } catch (error) {
    console.error('Error creating country:', error)
    return NextResponse.json(
      { error: 'Error al crear el país' },
      { status: 500 }
    )
  }
}

// ==================================================
// src/app/api/countries/[id]/route.ts
// ==================================================
// src/app/api/countries/[id]/route.ts
import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/prisma'

// GET /api/countries/[id] - Obtener país por ID
export async function GET(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const id = parseInt(params.id)
    
    if (isNaN(id)) {
      return NextResponse.json(
        { error: 'ID inválido' },
        { status: 400 }
      )
    }
    
    const country = await prisma.country.findUnique({
      where: { id },
      include: {
        _count: {
          select: { movies: true }
        }
      }
    })
    
    if (!country) {
      return NextResponse.json(
        { error: 'País no encontrado' },
        { status: 404 }
      )
    }
    
    return NextResponse.json(country)
  } catch (error) {
    console.error('Error fetching country:', error)
    return NextResponse.json(
      { error: 'Error al obtener el país' },
      { status: 500 }
    )
  }
}

// PUT /api/countries/[id] - Actualizar país
export async function PUT(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const id = parseInt(params.id)
    const body = await request.json()
    
    if (isNaN(id)) {
      return NextResponse.json(
        { error: 'ID inválido' },
        { status: 400 }
      )
    }
    
    // Validar datos requeridos
    if (!body.code || body.code.trim() === '') {
      return NextResponse.json(
        { error: 'El código del país es requerido' },
        { status: 400 }
      )
    }
    
    if (!body.name || body.name.trim() === '') {
      return NextResponse.json(
        { error: 'El nombre del país es requerido' },
        { status: 400 }
      )
    }
    
    // Validar formato del código
    const code = body.code.trim().toUpperCase()
    if (!/^[A-Z]{2}$/.test(code)) {
      return NextResponse.json(
        { error: 'El código debe ser de 2 letras mayúsculas (ISO 3166-1 alpha-2)' },
        { status: 400 }
      )
    }
    
    // Verificar que el país existe
    const existingCountry = await prisma.country.findUnique({
      where: { id }
    })
    
    if (!existingCountry) {
      return NextResponse.json(
        { error: 'País no encontrado' },
        { status: 404 }
      )
    }
    
    // Verificar si el nuevo código ya existe en otro país
    if (code !== existingCountry.code) {
      const codeExists = await prisma.country.findFirst({
        where: {
          code,
          NOT: { id }
        }
      })
      
      if (codeExists) {
        return NextResponse.json(
          { error: 'Ya existe otro país con ese código' },
          { status: 400 }
        )
      }
    }
    
    // Actualizar país
    const country = await prisma.country.update({
      where: { id },
      data: {
        code,
        name: body.name.trim()
      },
      include: {
        _count: {
          select: { movies: true }
        }
      }
    })
    
    return NextResponse.json(country)
  } catch (error) {
    console.error('Error updating country:', error)
    return NextResponse.json(
      { error: 'Error al actualizar el país' },
      { status: 500 }
    )
  }
}

// DELETE /api/countries/[id] - Eliminar país
export async function DELETE(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const id = parseInt(params.id)
    
    if (isNaN(id)) {
      return NextResponse.json(
        { error: 'ID inválido' },
        { status: 400 }
      )
    }
    
    // Verificar que el país existe
    const country = await prisma.country.findUnique({
      where: { id },
      include: {
        _count: {
          select: { movies: true }
        }
      }
    })
    
    if (!country) {
      return NextResponse.json(
        { error: 'País no encontrado' },
        { status: 404 }
      )
    }
    
    // Verificar si tiene películas asociadas
    if (country._count.movies > 0) {
      return NextResponse.json(
        { 
          error: `No se puede eliminar el país porque tiene ${country._count.movies} película(s) asociada(s)` 
        },
        { status: 400 }
      )
    }
    
    // Eliminar país
    await prisma.country.delete({
      where: { id }
    })
    
    return NextResponse.json(
      { message: 'País eliminado exitosamente' },
      { status: 200 }
    )
  } catch (error) {
    console.error('Error deleting country:', error)
    return NextResponse.json(
      { error: 'Error al eliminar el país' },
      { status: 500 }
    )
  }
}

// ==================================================
// src/app/api/genres/route.ts
// ==================================================
// src/app/api/genres/route.ts
import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/prisma'
import { createSlug } from '@/lib/utils'

// GET /api/genres - Listar todos los géneros con conteo de películas
export async function GET() {
  try {
    const genres = await prisma.genre.findMany({
      orderBy: { name: 'asc' },
      include: {
        _count: {
          select: { movies: true }
        }
      }
    })

    return NextResponse.json(genres)
  } catch (error) {
    console.error('Error fetching genres:', error)
    return NextResponse.json(
      { error: 'Error al obtener los géneros' },
      { status: 500 }
    )
  }
}

// POST /api/genres - Crear nuevo género
export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    
    // Validar datos requeridos
    if (!body.name || body.name.trim() === '') {
      return NextResponse.json(
        { error: 'El nombre del género es requerido' },
        { status: 400 }
      )
    }

    // Generar slug único
    let slug = createSlug(body.name)
    let slugExists = await prisma.genre.findUnique({ where: { slug } })
    let counter = 1
    
    while (slugExists) {
      slug = `${createSlug(body.name)}-${counter}`
      slugExists = await prisma.genre.findUnique({ where: { slug } })
      counter++
    }

    // Crear género
    const genre = await prisma.genre.create({
      data: {
        name: body.name.trim(),
        slug,
        description: body.description?.trim() || null
      },
      include: {
        _count: {
          select: { movies: true }
        }
      }
    })

    return NextResponse.json(genre, { status: 201 })
  } catch (error) {
    console.error('Error creating genre:', error)
    return NextResponse.json(
      { error: 'Error al crear el género' },
      { status: 500 }
    )
  }
}

// ==================================================
// src/app/api/genres/[id]/route.ts
// ==================================================
// src/app/api/genres/[id]/route.ts
import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/prisma'

// GET /api/genres/[id] - Obtener género por ID
export async function GET(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const id = parseInt(params.id)
    
    if (isNaN(id)) {
      return NextResponse.json(
        { error: 'ID inválido' },
        { status: 400 }
      )
    }
    
    const genre = await prisma.genre.findUnique({
      where: { id },
      include: {
        _count: {
          select: { movies: true }
        }
      }
    })
    
    if (!genre) {
      return NextResponse.json(
        { error: 'Género no encontrado' },
        { status: 404 }
      )
    }
    
    return NextResponse.json(genre)
  } catch (error) {
    console.error('Error fetching genre:', error)
    return NextResponse.json(
      { error: 'Error al obtener el género' },
      { status: 500 }
    )
  }
}

// PUT /api/genres/[id] - Actualizar género
export async function PUT(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const id = parseInt(params.id)
    const body = await request.json()
    
    if (isNaN(id)) {
      return NextResponse.json(
        { error: 'ID inválido' },
        { status: 400 }
      )
    }
    
    // Validar datos requeridos
    if (!body.name || body.name.trim() === '') {
      return NextResponse.json(
        { error: 'El nombre del género es requerido' },
        { status: 400 }
      )
    }
    
    // Verificar que el género existe
    const existingGenre = await prisma.genre.findUnique({
      where: { id }
    })
    
    if (!existingGenre) {
      return NextResponse.json(
        { error: 'Género no encontrado' },
        { status: 404 }
      )
    }
    
    // Actualizar género
    const genre = await prisma.genre.update({
      where: { id },
      data: {
        name: body.name.trim(),
        description: body.description?.trim() || null
      },
      include: {
        _count: {
          select: { movies: true }
        }
      }
    })
    
    return NextResponse.json(genre)
  } catch (error) {
    console.error('Error updating genre:', error)
    return NextResponse.json(
      { error: 'Error al actualizar el género' },
      { status: 500 }
    )
  }
}

// DELETE /api/genres/[id] - Eliminar género
export async function DELETE(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const id = parseInt(params.id)
    
    if (isNaN(id)) {
      return NextResponse.json(
        { error: 'ID inválido' },
        { status: 400 }
      )
    }
    
    // Verificar que el género existe
    const genre = await prisma.genre.findUnique({
      where: { id },
      include: {
        _count: {
          select: { movies: true }
        }
      }
    })
    
    if (!genre) {
      return NextResponse.json(
        { error: 'Género no encontrado' },
        { status: 404 }
      )
    }
    
    // Verificar si tiene películas asociadas
    if (genre._count.movies > 0) {
      return NextResponse.json(
        { 
          error: `No se puede eliminar el género porque tiene ${genre._count.movies} película(s) asociada(s)` 
        },
        { status: 400 }
      )
    }
    
    // Eliminar género
    await prisma.genre.delete({
      where: { id }
    })
    
    return NextResponse.json(
      { message: 'Género eliminado exitosamente' },
      { status: 200 }
    )
  } catch (error) {
    console.error('Error deleting genre:', error)
    return NextResponse.json(
      { error: 'Error al eliminar el género' },
      { status: 500 }
    )
  }
}

// ==================================================
// src/app/api/images/[movieId]/route.ts
// ==================================================
import fs from 'fs';
import path from 'path';
import { NextRequest, NextResponse } from 'next/server';

export async function GET(
  request: NextRequest,
  { params }: { params: Promise<{ movieId: string }> }
) {
  const { movieId } = await params;
  
  try {
    // Ruta al directorio de imágenes
    const imageDir = path.join(process.cwd(), 'public', 'images', movieId);
    
    // Verificar si el directorio existe
    if (!fs.existsSync(imageDir)) {
      return NextResponse.json({ 
        error: 'Directorio de imágenes no encontrado',
        images: []
      }, { status: 404 });
    }
    
    // Leer archivos del directorio
    const files = fs.readdirSync(imageDir);
    
    // Filtrar solo archivos de imagen
    const imageFiles = files
      .filter(file => {
        const ext = path.extname(file).toLowerCase();
        return ['.jpg', '.jpeg', '.png', '.gif', '.webp'].includes(ext);
      })
      .map((file, index) => ({
        filename: file,
        url: `/images/${movieId}/${file}`,
        name: file.replace(/\.[^/.]+$/, ''), // nombre sin extensión
        index: index
      }))
      .sort(); // Ordenar alfabéticamente
    
    return NextResponse.json({
      movieId,
      count: imageFiles.length,
      images: imageFiles
    });
    
  } catch (error) {
    console.error('Error leyendo directorio de imágenes:', error);
    return NextResponse.json({ 
      error: 'Error interno del servidor',
      images: []
    }, { status: 500 });
  }
}

// ==================================================
// src/app/api/locations/check-slug/route.ts
// ==================================================
// src/app/api/locations/check-slug/route.ts

import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/prisma'
import { generateSlug } from '@/lib/utils/slugs'

// POST /api/locations/check-slug - Verificar si un slug está disponible
export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const { name, excludeId } = body

    if (!name || name.trim() === '') {
      return NextResponse.json(
        { available: false, slug: '', error: 'El nombre es requerido' },
        { status: 400 }
      )
    }

    const baseSlug = generateSlug(name)
    let slug = baseSlug
    let counter = 1
    let available = false

    // Buscar un slug disponible
    while (!available) {
      const where: any = { slug }
      if (excludeId) {
        where.NOT = { id: parseInt(excludeId) }
      }

      const exists = await prisma.location.findFirst({ where })
      
      if (!exists) {
        available = true
      } else {
        slug = `${baseSlug}-${counter}`
        counter++
      }
    }

    return NextResponse.json({ available: true, slug })
  } catch (error) {
    console.error('Error checking slug:', error)
    return NextResponse.json(
      { available: false, slug: '', error: 'Error al verificar el slug' },
      { status: 500 }
    )
  }
}

// ==================================================
// src/app/api/locations/route.ts
// ==================================================
// src/app/api/locations/route.ts

import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/prisma'
import { generateUniqueSlug } from '@/lib/utils/slugs'

// Forzar que esta ruta sea dinámica
export const dynamic = 'force-dynamic'
export const revalidate = 0

// GET /api/locations - Listar lugares con filtros opcionales
export async function GET(request: NextRequest) {
  try {
    const searchParams = request.nextUrl.searchParams
    const parentId = searchParams.get('parentId')
    const search = searchParams.get('search')
    const includeChildren = searchParams.get('includeChildren') === 'true'

    const where: any = {}
    
    if (parentId === 'null') {
      where.parentId = null
    } else if (parentId) {
      where.parentId = parseInt(parentId)
    }
    
    if (search) {
      where.name = {
        contains: search,
        mode: 'insensitive'
      }
    }

    const locations = await prisma.location.findMany({
      where,
      include: {
        parent: true,
        children: includeChildren ? {
          include: {
            children: true
          }
        } : false,
        _count: {
          select: {
            children: true,
            peopleBornHere: true,
            peopleDiedHere: true
          }
        }
      },
      orderBy: [
        { parentId: 'asc' },
        { name: 'asc' }
      ]
    })

    return NextResponse.json(locations, {
      headers: {
        'Cache-Control': 'no-store, no-cache, must-revalidate',
        'Pragma': 'no-cache',
        'Expires': '0',
      },
    })
  } catch (error) {
    console.error('Error fetching locations:', error)
    return NextResponse.json(
      { error: 'Error al obtener los lugares' },
      { status: 500 }
    )
  }
}

// POST /api/locations - Crear nuevo lugar
export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const { name, parentId, latitude, longitude } = body

    // Validaciones
    if (!name || name.trim() === '') {
      return NextResponse.json(
        { error: 'El nombre es requerido' },
        { status: 400 }
      )
    }

    // Generar slug único
    const slug = await generateUniqueSlug(name, 'location', prisma)

    const location = await prisma.location.create({
      data: {
        name,
        slug,
        parent: parentId ? { connect: { id: parseInt(parentId) } } : undefined,
        latitude: latitude ? parseFloat(latitude) : null,
        longitude: longitude ? parseFloat(longitude) : null
      },
      include: {
        parent: true
      }
    })

    return NextResponse.json(location, { status: 201 })
  } catch (error) {
    console.error('Error creating location:', error)
    return NextResponse.json(
      { error: 'Error al crear el lugar' },
      { status: 500 }
    )
  }
}

// ==================================================
// src/app/api/locations/search/route.ts
// ==================================================
// src/app/api/locations/search/route.ts

import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';

export async function GET(request: NextRequest) {
  try {
    const searchParams = request.nextUrl.searchParams;
    const query = searchParams.get('q') || '';

    if (!query || query.length < 2) {
      return NextResponse.json([]);
    }

    // Buscar ubicaciones que coincidan con el query
    const locations = await prisma.location.findMany({
      where: {
        name: {
          contains: query,
          mode: 'insensitive'
        }
      },
      include: {
        parent: {
          include: {
            parent: true
          }
        }
      },
      take: 20,
      orderBy: [
        {
          name: 'asc'
        }
      ]
    });

    // Construir el path completo para cada ubicación
    const locationsWithPath = await Promise.all(
      locations.map(async (location) => {
        let path = location.name;
        let current = location;
        
        while (current.parent) {
          path = `${current.parent.name}, ${path}`;
          
          if (current.parent.parent) {
            path = `${current.parent.parent.name}, ${path}`;
            break; // Asumimos máximo 3 niveles
          }
          break;
        }

        return {
          id: location.id,
          name: location.name,
          slug: location.slug,
          parentId: location.parentId,
          path,
          parent: location.parent
        };
      })
    );

    return NextResponse.json(locationsWithPath);
  } catch (error) {
    console.error('Error searching locations:', error);
    return NextResponse.json(
      { error: 'Error al buscar ubicaciones' },
      { status: 500 }
    );
  }
}

// ==================================================
// src/app/api/locations/tree/route.ts
// ==================================================
// src/app/api/locations/tree/route.ts

import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/prisma'

// Forzar que esta ruta sea dinámica
export const dynamic = 'force-dynamic'
export const revalidate = 0

interface LocationNode {
  id: number
  name: string
  slug: string
  parentId: number | null
  children: LocationNode[]
  _count: {
    children: number
    peopleBornHere: number
    peopleDiedHere: number
  }
}

// GET /api/locations/tree - Obtener estructura de árbol completa
export async function GET(request: NextRequest) {
  try {
    // Obtener todos los lugares
    const locations = await prisma.location.findMany({
      orderBy: [
        { parentId: 'asc' },
        { name: 'asc' }
      ],
      include: {
        _count: {
          select: {
            children: true,
            peopleBornHere: true,
            peopleDiedHere: true
          }
        }
      }
    })

    // Construir el árbol
    const locationMap = new Map<number, LocationNode>()
    const roots: LocationNode[] = []

    // Primero, crear todos los nodos
    locations.forEach(location => {
      locationMap.set(location.id, {
        id: location.id,
        name: location.name,
        slug: location.slug,
        parentId: location.parentId,
        children: [],
        _count: location._count
      })
    })

    // Luego, establecer las relaciones padre-hijo
    locations.forEach(location => {
      const node = locationMap.get(location.id)!
      if (location.parentId) {
        const parent = locationMap.get(location.parentId)
        if (parent) {
          parent.children.push(node)
        }
      } else {
        roots.push(node)
      }
    })

    // Ordenar los hijos de cada nodo alfabéticamente
    const sortChildren = (node: LocationNode) => {
      node.children.sort((a, b) => a.name.localeCompare(b.name))
      node.children.forEach(sortChildren)
    }
    roots.forEach(sortChildren)

    return NextResponse.json(roots, {
      headers: {
        'Cache-Control': 'no-store, no-cache, must-revalidate',
        'Pragma': 'no-cache',
        'Expires': '0',
      },
    })
  } catch (error) {
    console.error('Error fetching location tree:', error)
    return NextResponse.json(
      { error: 'Error al obtener el árbol de lugares' },
      { status: 500 }
    )
  }
}

// ==================================================
// src/app/api/locations/[id]/route.ts
// ==================================================
// src/app/api/locations/[id]/route.ts

import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/prisma'
import { generateUniqueSlug } from '@/lib/utils/slugs'

// GET /api/locations/[id] - Obtener un lugar por ID con path completo
export async function GET(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const id = parseInt(params.id)
    
    if (isNaN(id)) {
      return NextResponse.json({ error: 'Invalid ID' }, { status: 400 })
    }

    const location = await prisma.location.findUnique({
      where: { id },
      include: {
        parent: {
          include: {
            parent: true
          }
        },
        children: {
          orderBy: { name: 'asc' }
        },
        _count: {
          select: {
            children: true,
            peopleBornHere: true,
            peopleDiedHere: true
          }
        }
      }
    })

    if (!location) {
      return NextResponse.json(
        { error: 'Lugar no encontrado' },
        { status: 404 }
      )
    }

    // Construir el path completo
    let path = location.name
    let current = location
    
    while (current.parent) {
      path = `${current.parent.name} > ${path}`
      
      if (current.parent.parentId) {
        const grandParent = await prisma.location.findUnique({
          where: { id: current.parent.parentId },
          include: { parent: true }
        })
        
        if (grandParent) {
          current = { ...current, parent: grandParent }
        } else {
          break
        }
      } else {
        break
      }
    }

    // Retornar la location con el path incluido
    return NextResponse.json({
      ...location,
      path
    })
  } catch (error) {
    console.error('Error fetching location:', error)
    return NextResponse.json(
      { error: 'Error al obtener el lugar' },
      { status: 500 }
    )
  }
}

// PUT /api/locations/[id] - Actualizar un lugar
export async function PUT(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const id = parseInt(params.id)
    const body = await request.json()
    const { name, parentId, latitude, longitude } = body

    // Validaciones
    if (!name || name.trim() === '') {
      return NextResponse.json(
        { error: 'El nombre es requerido' },
        { status: 400 }
      )
    }

    // Verificar que no se está asignando como padre a sí mismo o a sus descendientes
    if (parentId === id) {
      return NextResponse.json(
        { error: 'Un lugar no puede ser su propio padre' },
        { status: 400 }
      )
    }

    if (parentId) {
      // Verificar que no se está creando un ciclo
      const isDescendant = await checkIfDescendant(id, parseInt(parentId))
      if (isDescendant) {
        return NextResponse.json(
          { error: 'No se puede asignar un descendiente como padre' },
          { status: 400 }
        )
      }
    }

    // Generar nuevo slug si cambió el nombre
    const currentLocation = await prisma.location.findUnique({
      where: { id }
    })

    if (!currentLocation) {
      return NextResponse.json(
        { error: 'Lugar no encontrado' },
        { status: 404 }
      )
    }

    let slug = currentLocation.slug
    if (currentLocation.name !== name) {
      slug = await generateUniqueSlug(name, 'location', prisma, id)
    }

    const location = await prisma.location.update({
      where: { id },
      data: {
        name,
        slug,
        parent: parentId ? { connect: { id: parseInt(parentId) } } : { disconnect: true },
        latitude: latitude ? parseFloat(latitude) : null,
        longitude: longitude ? parseFloat(longitude) : null
      },
      include: {
        parent: true
      }
    })

    return NextResponse.json(location)
  } catch (error) {
    console.error('Error updating location:', error)
    return NextResponse.json(
      { error: 'Error al actualizar el lugar' },
      { status: 500 }
    )
  }
}

// DELETE /api/locations/[id] - Eliminar un lugar
export async function DELETE(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const id = parseInt(params.id)

    // Verificar si tiene hijos
    const location = await prisma.location.findUnique({
      where: { id },
      include: {
        _count: {
          select: {
            children: true,
            peopleBornHere: true,
            peopleDiedHere: true
          }
        }
      }
    })

    if (!location) {
      return NextResponse.json(
        { error: 'Lugar no encontrado' },
        { status: 404 }
      )
    }

    // Verificar si tiene relaciones
    const hasRelations = 
      location._count.children > 0 ||
      location._count.peopleBornHere > 0 ||
      location._count.peopleDiedHere > 0

    if (hasRelations) {
      const relations = []
      if (location._count.children > 0) relations.push(`${location._count.children} lugares hijos`)
      if (location._count.peopleBornHere > 0) relations.push(`${location._count.peopleBornHere} personas nacidas aquí`)
      if (location._count.peopleDiedHere > 0) relations.push(`${location._count.peopleDiedHere} personas fallecidas aquí`)

      return NextResponse.json(
        { error: `No se puede eliminar el lugar porque tiene: ${relations.join(', ')}` },
        { status: 400 }
      )
    }

    await prisma.location.delete({
      where: { id }
    })

    return NextResponse.json({ success: true })
  } catch (error) {
    console.error('Error deleting location:', error)
    return NextResponse.json(
      { error: 'Error al eliminar el lugar' },
      { status: 500 }
    )
  }
}

// Función auxiliar para verificar si un lugar es descendiente de otro
async function checkIfDescendant(ancestorId: number, descendantId: number): Promise<boolean> {
  const descendant = await prisma.location.findUnique({
    where: { id: descendantId },
    select: { parentId: true }
  })

  if (!descendant || !descendant.parentId) {
    return false
  }

  if (descendant.parentId === ancestorId) {
    return true
  }

  return checkIfDescendant(ancestorId, descendant.parentId)
}

// ==================================================
// src/app/api/movies/route.ts
// ==================================================
// src/app/api/movies/route.ts
import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/prisma'
import { createSlug } from '@/lib/utils'
import { z } from 'zod'
import { movieSchema } from '@/lib/schemas'


// GET /api/movies - Listar películas con filtros
export async function GET(request: NextRequest) {
  try {
    const searchParams = request.nextUrl.searchParams
    const page = parseInt(searchParams.get('page') || '1')
    const limit = parseInt(searchParams.get('limit') || '20')
    const search = searchParams.get('search') || ''
    const genre = searchParams.get('genre') || ''
    const year = searchParams.get('year') || ''
    const stage = searchParams.get('stage') || ''
    const sortBy = searchParams.get('sortBy') || 'createdAt'
    const sortOrder = searchParams.get('sortOrder') || 'desc'

    const skip = (page - 1) * limit

    // Construir filtros
    const where: any = {}

    if (search) {
      where.OR = [
        { title: { contains: search, mode: 'insensitive' } },
        { synopsis: { contains: search, mode: 'insensitive' } }
      ]
    }

    if (genre) {
      where.genres = {
        some: {
          genre: {
            slug: genre
          }
        }
      }
    }

    if (year) {
      where.year = parseInt(year)
    }

    if (stage) {
      where.stage = stage
    }

    // Obtener total de registros
    const total = await prisma.movie.count({ where })

    // Obtener películas
    const movies = await prisma.movie.findMany({
      where,
      skip,
      take: limit,
      orderBy: {
        [sortBy]: sortOrder
      },
      include: {
        colorType: true,
        genres: {
          include: {
            genre: true
          }
        },
        cast: {
          where: {
            isPrincipal: true
          },
          include: {
            person: true
          },
          orderBy: {
            billingOrder: 'asc'
          },
          take: 3
        },
        crew: {
          where: {
            role: 'Director'
          },
          include: {
            person: true
          }
        },
        movieCountries: {  // CAMBIADO DE countries A movieCountries
          where: {
            isPrimary: true
          },
          include: {
            country: true
          }
        },
        themes: {
          include: {
            theme: true
          }
        },
        images: {
          where: {
            type: 'POSTER',
            isPrimary: true
          },
          take: 1
        }
      }
    })

    // Formatear respuesta
    const formattedMovies = movies.map(movie => ({
      id: movie.id,
      slug: movie.slug,
      title: movie.title,
      year: movie.year,
      releaseYear: movie.releaseYear,
      releaseMonth: movie.releaseMonth,
      releaseDay: movie.releaseDay,
      // Opcionalmente, crear un campo de fecha formateada para mostrar
      releaseDateFormatted: movie.releaseDay
        ? `${movie.releaseYear}-${String(movie.releaseMonth).padStart(2, '0')}-${String(movie.releaseDay).padStart(2, '0')}`
        : movie.releaseMonth
          ? `${movie.releaseYear}-${String(movie.releaseMonth).padStart(2, '0')}`
          : movie.releaseYear?.toString() || null,
      // Construir fecha de inicio de filmación si existe
      filmingStartDate: movie.filmingStartYear
        ? new Date(
          movie.filmingStartYear,
          (movie.filmingStartMonth || 1) - 1,
          movie.filmingStartDay || 1
        ).toISOString()
        : null,

      // Construir fecha de fin de filmación si existe  
      filmingEndDate: movie.filmingEndYear
        ? new Date(
          movie.filmingEndYear,
          (movie.filmingEndMonth || 1) - 1,
          movie.filmingEndDay || 1
        ).toISOString()
        : null,
      duration: movie.duration,
      posterUrl: movie.posterUrl || movie.images[0]?.url,
      stage: movie.stage,
      colorType: movie.colorType,
      genres: movie.genres.map(g => g.genre),
      directors: movie.crew.map(c => c.person),
      mainCast: movie.cast.map(c => ({
        person: c.person,
        character: c.characterName
      })),
      country: movie.movieCountries[0]?.country.name || 'Argentina',  // CAMBIADO DE countries A movieCountries
      countries: movie.countries || ['Argentina'],  // Campo array directo
      isCoProduction: movie.is_coproduction || false,
      productionType: movie.production_type || 'national',
      themes: movie.themes
    }))

    return NextResponse.json({
      movies: formattedMovies,
      pagination: {
        page,
        limit,
        total,
        totalPages: Math.ceil(total / limit)
      }
    })
  } catch (error) {
    console.error('Error fetching movies:', error)
    return NextResponse.json(
      { error: 'Error al obtener las películas' },
      { status: 500 }
    )
  }
}

// POST /api/movies - Crear nueva película
export async function POST(request: NextRequest) {
  try {
    const body = await request.json()

    // Validar datos
    const validatedData = movieSchema.parse(body)

    // Generar slug único
    let slug = createSlug(validatedData.title)
    let slugExists = await prisma.movie.findUnique({ where: { slug } })
    let counter = 1

    while (slugExists) {
      slug = `${createSlug(validatedData.title)}-${counter}`
      slugExists = await prisma.movie.findUnique({ where: { slug } })
      counter++
    }

    // Extraer relaciones del body
    const {
      genres,
      cast,
      crew,
      countries,
      productionCompanies,
      distributionCompanies,
      alternativeTitles,
      themes,
      links,
      ...movieData
    } = validatedData

    // Transformar cast y crew para quitar la propiedad 'person'
    const processedCast = cast?.map((item: any) => ({
      personId: item.personId,
      characterName: item.characterName,
      billingOrder: item.billingOrder,
      isPrincipal: item.isPrincipal
    }))

    const processedCrew = crew?.map((item: any) => ({
      personId: item.personId,
      role: item.role,
      department: item.department,
      billingOrder: item.billingOrder
    }))

    // Crear película con relaciones
    const movie = await prisma.movie.create({
      data: {
        ...movieData,
        slug,
        releaseYear: movieData.releaseYear || null,
        releaseMonth: movieData.releaseMonth || null,
        releaseDay: movieData.releaseDay || null,
        filmingStartYear: movieData.filmingStartYear || null,
        filmingStartMonth: movieData.filmingStartMonth || null,
        filmingStartDay: movieData.filmingStartDay || null,
        filmingEndYear: movieData.filmingEndYear || null,
        filmingEndMonth: movieData.filmingEndMonth || null,
        filmingEndDay: movieData.filmingEndDay || null,

        // Crear relaciones
        genres: genres ? {
          create: genres.map((genreId, index) => ({
            genreId,
            isPrimary: index === 0
          }))
        } : undefined,
        alternativeTitles: alternativeTitles ? {
          create: alternativeTitles
        } : undefined,
        cast: cast ? {
          create: cast
        } : undefined,
        crew: crew ? {
          create: crew
        } : undefined,
        movieCountries: countries ? {  // CAMBIADO DE countries A movieCountries
          create: countries.map((countryId, index) => ({
            countryId,
            isPrimary: index === 0
          }))
        } : undefined,
        productionCompanies: productionCompanies ? {
          create: productionCompanies.map((companyId, index) => ({
            companyId,
            isPrimary: index === 0
          }))
        } : undefined,
        distributionCompanies: distributionCompanies ? {
          create: distributionCompanies.map(companyId => ({
            companyId,
            territory: 'Argentina'
          }))
        } : undefined,
        themes: themes ? {
          create: themes.map(themeId => ({
            themeId
          }))
        } : undefined,
        links: links ? {
          create: links.map((link: any) => ({
            type: link.type,
            url: link.url,
            title: link.title,
            isActive: link.isActive !== false
          }))
        } : undefined
      },
      include: {
        genres: {
          include: {
            genre: true
          }
        },
        cast: {
          include: {
            person: true
          }
        },
        crew: {
          include: {
            person: true
          }
        },
        movieCountries: {  // CAMBIADO DE countries A movieCountries
          include: {
            country: true
          }
        },
        themes: {
          include: {
            theme: true
          }
        },
        alternativeTitles: true,
        links: true
      }
    })

    return NextResponse.json(movie, { status: 201 })
  } catch (error) {
    if (error instanceof z.ZodError) {
      return NextResponse.json(
        { error: 'Datos inválidos', details: error.errors },
        { status: 400 }
      )
    }

    console.error('Error creating movie:', error)
    return NextResponse.json(
      { error: 'Error al crear la película' },
      { status: 500 }
    )
  }
}

// ==================================================
// src/app/api/movies/[id]/route.ts
// ==================================================
// ==================================================
// src/app/api/movies/[id]/route.ts
// ==================================================
import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/prisma'
import { z } from 'zod'
import { movieSchema } from '@/lib/schemas'

// GET /api/movies/[id] - Obtener película por ID o slug
export async function GET(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const idOrSlug = params.id

    // Determinar si es ID o slug
    const isId = /^\d+$/.test(idOrSlug)

    const movie = await prisma.movie.findUnique({
      where: isId ? { id: parseInt(idOrSlug) } : { slug: idOrSlug },
      include: {
        colorType: true,
        genres: {
          include: {
            genre: true
          }
        },
        cast: {
          include: {
            person: true
          },
          orderBy: {
            billingOrder: 'asc'
          }
        },
        crew: {
          include: {
            person: true
          },
          orderBy: [
            { department: 'asc' },
            { billingOrder: 'asc' }
          ]
        },
        movieCountries: {
          include: {
            country: true
          }
        },

        productionCompanies: {
          include: {
            company: true
          }
        },
        distributionCompanies: {
          include: {
            company: true
          }
        },
        images: {
          orderBy: {
            displayOrder: 'asc'
          }
        },
        videos: {
          orderBy: {
            isPrimary: 'desc'
          }
        },
        awards: {
          include: {
            award: true,
            recipient: true
          }
        },
        themes: {
          include: {
            theme: true
          }
        },
        links: {
          where: {
            isActive: true
          },
          orderBy: {
            type: 'asc'
          }
        },
        screenings: {
          include: {
            venue: true
          }
        }
      }
    })

    if (!movie) {
      return NextResponse.json(
        { error: 'Película no encontrada' },
        { status: 404 }
      )
    }

    return NextResponse.json(movie)
  } catch (error) {
    console.error('Error fetching movie:', error)
    return NextResponse.json(
      { error: 'Error al obtener la película' },
      { status: 500 }
    )
  }
}

// PUT /api/movies/[id] - Actualizar película
export async function PUT(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const id = parseInt(params.id)
    const body = await request.json()
    console.log('📥 Datos recibidos en API PUT:', {
      releaseYear: body.releaseYear,
      releaseMonth: body.releaseMonth,
      releaseDay: body.releaseDay,
      filmingStartYear: body.filmingStartYear,
      filmingStartMonth: body.filmingStartMonth,
      filmingStartDay: body.filmingStartDay,
      filmingEndYear: body.filmingEndYear,
      filmingEndMonth: body.filmingEndMonth,
      filmingEndDay: body.filmingEndDay
    })

    // Limpiar datos antes de validar
    const cleanedData = {
      ...body,
      ratingId: body.ratingId === 0 ? null : body.ratingId
    };


    // Validar datos
    const validatedData = movieSchema.parse(cleanedData)

    // Verificar que la película existe
    const existingMovie = await prisma.movie.findUnique({
      where: { id }
    })

    if (!existingMovie) {
      return NextResponse.json(
        { error: 'Película no encontrada' },
        { status: 404 }
      )
    }

    // Extraer relaciones - EXACTAMENTE COMO EN EL POST
    const {
      genres,
      cast,
      crew,
      countries,
      productionCompanies,
      distributionCompanies,
      themes,
      alternativeTitles,
      links,
      screeningVenues,
      ...movieData
    } = validatedData

    // Usar transacción para actualizar todo
    const movie = await prisma.$transaction(async (tx) => {
      // Separar los campos de fecha y otros campos especiales
      const {
        colorTypeId,
        ratingId,
        releaseYear,
        releaseMonth,
        releaseDay,
        filmingStartYear,
        filmingStartMonth,
        filmingStartDay,
        filmingEndYear,
        filmingEndMonth,
        filmingEndDay,
        ...movieDataClean
      } = movieData

      console.log('💾 Datos a guardar en DB:', {
        releaseYear,
        releaseMonth,
        releaseDay,
        filmingStartYear,
        filmingStartMonth,
        filmingStartDay,
        filmingEndYear,
        filmingEndMonth,
        filmingEndDay
      })


      // 1. Actualizar datos básicos de la película - EXACTAMENTE COMO EN EL POST
      const updatedMovie = await tx.movie.update({
        where: { id },
        data: {
          ...movieDataClean,
          releaseYear: releaseYear !== undefined ? releaseYear : null,
          releaseMonth: releaseMonth !== undefined ? releaseMonth : null,
          releaseDay: releaseDay !== undefined ? releaseDay : null,
          filmingStartYear: filmingStartYear !== undefined ? filmingStartYear : null,
          filmingStartMonth: filmingStartMonth !== undefined ? filmingStartMonth : null,
          filmingStartDay: filmingStartDay !== undefined ? filmingStartDay : null,
          filmingEndYear: filmingEndYear !== undefined ? filmingEndYear : null,
          filmingEndMonth: filmingEndMonth !== undefined ? filmingEndMonth : null,
          filmingEndDay: filmingEndDay !== undefined ? filmingEndDay : null,
          ...(ratingId !== undefined && {
            rating: (ratingId === null || ratingId === 0)  // Tratar 0 como null
              ? { disconnect: true }
              : { connect: { id: ratingId } }
          }),
          ...(colorTypeId && {
            colorType: { connect: { id: colorTypeId } }
          })
        }
      })

      // 2. Actualizar géneros
      if (genres) {
        await tx.movieGenre.deleteMany({ where: { movieId: id } })
        if (genres.length > 0) {
          await tx.movieGenre.createMany({
            data: genres.map((genreId, index) => ({
              movieId: id,
              genreId,
              isPrimary: index === 0
            }))
          })
        }
      }

      // 3. Actualizar cast
      if (cast) {
        await tx.movieCast.deleteMany({ where: { movieId: id } })
        if (cast.length > 0) {
          await tx.movieCast.createMany({
            data: cast.map(item => ({
              movieId: id,
              ...item
            }))
          })
        }
      }

      // 4. Actualizar crew
      if (crew) {
        await tx.movieCrew.deleteMany({ where: { movieId: id } })
        if (crew.length > 0) {
          await tx.movieCrew.createMany({
            data: crew.map(item => ({
              movieId: id,
              ...item
            }))
          })
        }
      }

      // 5. Actualizar países
      if (countries) {
        await tx.movieCountry.deleteMany({ where: { movieId: id } })
        if (countries.length > 0) {
          await tx.movieCountry.createMany({
            data: countries.map((countryId, index) => ({
              movieId: id,
              countryId,
              isPrimary: index === 0
            }))
          })
        }
      }

      // 7. Actualizar productoras
      if (productionCompanies) {
        await tx.movieProductionCompany.deleteMany({ where: { movieId: id } })
        if (productionCompanies.length > 0) {
          await tx.movieProductionCompany.createMany({
            data: productionCompanies.map((companyId, index) => ({
              movieId: id,
              companyId,
              isPrimary: index === 0
            }))
          })
        }
      }

      // 8. Actualizar distribuidoras
      if (distributionCompanies) {
        await tx.movieDistributionCompany.deleteMany({ where: { movieId: id } })
        if (distributionCompanies.length > 0) {
          await tx.movieDistributionCompany.createMany({
            data: distributionCompanies.map(companyId => ({
              movieId: id,
              companyId,
              territory: 'Argentina'
            }))
          })
        }
      }

      // 9. Actualizar temas
      if (themes) {
        await tx.movieTheme.deleteMany({ where: { movieId: id } })
        if (themes.length > 0) {
          await tx.movieTheme.createMany({
            data: themes.map(themeId => ({
              movieId: id,
              themeId
            }))
          })
        }
      }

      // 10. Actualizar títulos alternativos
      if (alternativeTitles !== undefined) {
        await tx.movieAlternativeTitle.deleteMany({ where: { movieId: id } })
        if (alternativeTitles && alternativeTitles.length > 0) {
          await tx.movieAlternativeTitle.createMany({
            data: alternativeTitles.map(title => ({
              movieId: id,
              title: title.title,
              description: title.description || null
            }))
          })
        }
      }

      // 11. Actualizar links oficiales
      if (links !== undefined) {
        await tx.movieLink.deleteMany({ where: { movieId: id } })
        if (links && links.length > 0) {
          await tx.movieLink.createMany({
            data: links.map((link: any) => ({
              movieId: id,
              type: link.type,
              url: link.url,
              title: link.title || null,
              isActive: link.isActive !== false
            }))
          })
        }
      }

      // 12. Actualizar screening venues
      if (screeningVenues !== undefined) {
        await tx.movieScreening.deleteMany({ where: { movieId: id } })
        if (screeningVenues && screeningVenues.length > 0) {
          await tx.movieScreening.createMany({
            data: screeningVenues.map((sv: any) => ({
              movieId: id,
              venueId: sv.venueId,
              screeningDate: sv.screeningDate ? new Date(sv.screeningDate) : null,
              isPremiere: sv.isPremiere || false,
              isExclusive: sv.isExclusive || false
            }))
          })
        }
      }

      // 13. Retornar la película actualizada con todas las relaciones
      return await tx.movie.findUnique({
        where: { id },
        include: {
          genres: {
            include: {
              genre: true
            }
          },
          cast: {
            include: {
              person: true
            }
          },
          crew: {
            include: {
              person: true
            }
          },
          themes: {
            include: {
              theme: true
            }
          },
          movieCountries: {
            include: {
              country: true
            }
          },
          productionCompanies: {
            include: {
              company: true
            }
          },
          distributionCompanies: {
            include: {
              company: true
            }
          },
          links: true,
          screenings: {
            include: {
              venue: true
            }
          },
          colorType: true,
        }
      })
    }, {
      maxWait: 10000, // Esperar máximo 10 segundos para iniciar
      timeout: 30000, // Timeout de 30 segundos para la transacción
    })

    return NextResponse.json(movie)
  } catch (error) {
    if (error instanceof z.ZodError) {
      console.log('=== ERRORES DE VALIDACIÓN ZOD ===')
      console.log(JSON.stringify(error.errors, null, 2))
      console.log('=================================')
      return NextResponse.json(
        { error: 'Datos inválidos', details: error.errors },
        { status: 400 }
      )
    }

    console.error('Error updating movie:', error)
    return NextResponse.json(
      { error: 'Error al actualizar la película' },
      { status: 500 }
    )
  }
}

// DELETE /api/movies/[id] - Eliminar película
export async function DELETE(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const id = parseInt(params.id)

    // Verificar que la película existe
    const movie = await prisma.movie.findUnique({
      where: { id }
    })

    if (!movie) {
      return NextResponse.json(
        { error: 'Película no encontrada' },
        { status: 404 }
      )
    }

    // Eliminar película (las relaciones se eliminan en cascada)
    await prisma.movie.delete({
      where: { id }
    })

    return NextResponse.json(
      { message: 'Película eliminada exitosamente' },
      { status: 200 }
    )
  } catch (error) {
    console.error('Error deleting movie:', error)
    return NextResponse.json(
      { error: 'Error al eliminar la película' },
      { status: 500 }
    )
  }
}

// ==================================================
// src/app/api/people/route.ts
// ==================================================
// src/app/api/people/route.ts

import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';
import { generatePersonSlug } from '@/lib/people/peopleUtils';

export async function GET(request: NextRequest) {
  try {
    const searchParams = request.nextUrl.searchParams;
    const search = searchParams.get('search');
    const gender = searchParams.get('gender');
    const isActive = searchParams.get('isActive');
    const hasLinks = searchParams.get('hasLinks');
    const page = parseInt(searchParams.get('page') || '1');
    const limit = parseInt(searchParams.get('limit') || '20');

    // Construir where clause
    const where: any = {};

    if (search) {
      where.OR = [
        { firstName: { contains: search, mode: 'insensitive' } },
        { lastName: { contains: search, mode: 'insensitive' } },
        { realName: { contains: search, mode: 'insensitive' } },
      ];
    }

    if (gender) {
      where.gender = gender;
    }

    if (isActive !== null && isActive !== '') {
      where.isActive = isActive === 'true';
    }

    if (hasLinks !== null && hasLinks !== '') {
      where.hasLinks = hasLinks === 'true';
    }

    // Obtener total para paginación
    const totalCount = await prisma.person.count({ where });

    // Obtener personas con paginación
    const people = await prisma.person.findMany({
      where,
      include: {
        _count: {
          select: {
            links: true,
            castRoles: true,
            crewRoles: true,
          },
        },
      },
      orderBy: [
        { lastName: 'asc' },
        { firstName: 'asc' },
      ],
      skip: (page - 1) * limit,
      take: limit,
    });

    const totalPages = Math.ceil(totalCount / limit);

    return NextResponse.json({
      data: people,
      totalCount,
      page,
      totalPages,
      hasMore: page < totalPages,
    });
  } catch (error) {
    console.error('Error fetching people:', error);
    return NextResponse.json(
      { message: 'Error al obtener personas' },
      { status: 500 }
    );
  }
}

export async function POST(request: NextRequest) {
  try {
    const data = await request.json();

    // Si es una creación rápida (solo con nombre)
    if (data.name && !data.firstName && !data.lastName) {
      // Dividir el nombre en firstName y lastName
      const nameParts = data.name.trim().split(' ');
      data.firstName = nameParts[0];
      data.lastName = nameParts.slice(1).join(' ') || null;
    }

    // Generar slug único basado en firstName y lastName
    let baseSlug = generatePersonSlug(data.firstName, data.lastName);
    let slug = baseSlug;
    let counter = 1;

    // Verificar si el slug ya existe y generar uno único
    while (await prisma.person.findUnique({ where: { slug } })) {
      slug = `${baseSlug}-${counter}`;
      counter++;
    }

    // Preparar los datos de la persona
    const personData: any = {
      slug,
      firstName: data.firstName || null,
      lastName: data.lastName || null,
      realName: data.realName || null,
      birthDate: data.birthDate ? new Date(data.birthDate) : null,
      deathDate: data.deathDate ? new Date(data.deathDate) : null,
      birthLocationId: data.birthLocationId || null,
      deathLocationId: data.deathLocationId || null,
      biography: data.biography || null,
      photoUrl: data.photoUrl || null,
      gender: data.gender || null,
      hideAge: data.hideAge || false,
      isActive: data.isActive ?? true,
      hasLinks: data.links && data.links.length > 0,
    };

    // TODO: Manejar ubicaciones birthLocation y deathLocation
    // Por ahora solo guardamos el texto en la biografía o notas

    // Crear la persona y sus links en una transacción
    const person = await prisma.$transaction(async (tx) => {
      // Crear la persona
      const newPerson = await tx.person.create({
        data: personData,
      });

      // Si hay links, crearlos
      if (data.links && data.links.length > 0) {
        await tx.personLink.createMany({
          data: data.links.map((link: any, index: number) => ({
            personId: newPerson.id,
            type: link.type,
            url: link.url,
            title: link.title || null,
            displayOrder: link.displayOrder ?? index,
            isVerified: link.isVerified || false,
            isActive: link.isActive ?? true,
          })),
        });
      }

      // Retornar la persona con sus relaciones
      return tx.person.findUnique({
        where: { id: newPerson.id },
        include: {
          links: true,
          _count: {
            select: {
              links: true,
              castRoles: true,
              crewRoles: true,
            },
          },
        },
      });
    });

    return NextResponse.json(person, { status: 201 });
  } catch (error) {
    console.error('Error creating person:', error);
    return NextResponse.json(
      { message: 'Error al crear persona' },
      { status: 500 }
    );
  }
}

// ==================================================
// src/app/api/people/[id]/route.ts
// ==================================================
// src/app/api/people/[id]/route.ts

import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';
import { generatePersonSlug } from '@/lib/people/peopleUtils';

export async function GET(
    request: NextRequest,
    { params }: { params: Promise<{ id: string }> }
) {
    try {
        const { id } = await params;
        const person = await prisma.person.findUnique({
            where: { id: parseInt(id) },
            include: {
                links: {
                    orderBy: { displayOrder: 'asc' },
                },
                birthLocation: true,
                deathLocation: true,
                _count: {
                    select: {
                        castRoles: true,
                        crewRoles: true,
                        awards: true,
                    },
                },
            },
        });

        if (!person) {
            return NextResponse.json(
                { message: 'Persona no encontrada' },
                { status: 404 }
            );
        }

        return NextResponse.json(person);
    } catch (error) {
        console.error('Error fetching person:', error);
        return NextResponse.json(
            { message: 'Error al obtener persona' },
            { status: 500 }
        );
    }
}

export async function PUT(
    request: NextRequest,
    { params }: { params: Promise<{ id: string }> }
) {
    try {
        const { id } = await params;
        const data = await request.json();
        const personId = parseInt(id);

        console.log('Data received in API:', data); // Log para debugging

        // Verificar si necesitamos actualizar el slug
        let slug = undefined;
        const currentPerson = await prisma.person.findUnique({
            where: { id: personId },
            select: { firstName: true, lastName: true, slug: true },
        });

        if (currentPerson) {
            const nameChanged =
                currentPerson.firstName !== data.firstName ||
                currentPerson.lastName !== data.lastName;

            if (nameChanged) {
                // Generar nuevo slug si cambió el nombre
                let baseSlug = generatePersonSlug(data.firstName, data.lastName);
                slug = baseSlug;
                let counter = 1;

                // Verificar que el nuevo slug no exista (excepto para la persona actual)
                while (true) {
                    const existing = await prisma.person.findUnique({
                        where: { slug },
                        select: { id: true },
                    });

                    if (!existing || existing.id === personId) break;

                    slug = `${baseSlug}-${counter}`;
                    counter++;
                }
            }
        }

        // Preparar datos de actualización con campos de fecha parciales
        const updateData: any = {
            ...(slug && { slug }),
            firstName: data.firstName || null,
            lastName: data.lastName || null,
            realName: data.realName || null,
            // Usar los campos de fecha parciales que vienen del servicio
            birthYear: data.birthYear || null,
            birthMonth: data.birthMonth || null,
            birthDay: data.birthDay || null,
            deathYear: data.deathYear || null,
            deathMonth: data.deathMonth || null,
            deathDay: data.deathDay || null,
            birthLocationId: data.birthLocationId || null,
            deathLocationId: data.deathLocationId || null,
            biography: data.biography || null,
            photoUrl: data.photoUrl || null,
            gender: data.gender || null,
            hideAge: data.hideAge || false,
            isActive: data.isActive ?? true,
            hasLinks: data.links && data.links.length > 0,
        };

        console.log('Update data prepared:', updateData); // Log para debugging

        // Actualizar persona y links en una transacción
        const person = await prisma.$transaction(async (tx) => {
            // Actualizar la persona
            const updatedPerson = await tx.person.update({
                where: { id: personId },
                data: updateData,
            });

            // Eliminar links existentes
            await tx.personLink.deleteMany({
                where: { personId },
            });

            // Crear nuevos links si existen
            if (data.links && data.links.length > 0) {
                await tx.personLink.createMany({
                    data: data.links.map((link: any, index: number) => ({
                        personId,
                        type: link.type,
                        url: link.url,
                        title: link.title || null,
                        displayOrder: link.displayOrder ?? index,
                        isVerified: link.isVerified || false,
                        isActive: link.isActive ?? true,
                    })),
                });
            }

            // Retornar la persona actualizada con sus relaciones
            return tx.person.findUnique({
                where: { id: personId },
                include: {
                    links: true,
                    birthLocation: true,
                    deathLocation: true,
                    _count: {
                        select: {
                            links: true,
                            castRoles: true,
                            crewRoles: true,
                        },
                    },
                },
            });
        });

        return NextResponse.json(person);
    } catch (error) {
        console.error('Error updating person:', error);
        return NextResponse.json(
            { message: 'Error al actualizar persona' },
            { status: 500 }
        );
    }
}

export async function DELETE(
    request: NextRequest,
    { params }: { params: Promise<{ id: string }> }
) {
    try {
        const { id } = await params;
        // Verificar si la persona tiene películas asociadas
        const person = await prisma.person.findUnique({
            where: { id: parseInt(id) },
            include: {
                _count: {
                    select: {
                        castRoles: true,
                        crewRoles: true,
                    },
                },
            },
        });

        if (!person) {
            return NextResponse.json(
                { message: 'Persona no encontrada' },
                { status: 404 }
            );
        }

        const totalRoles = person._count.castRoles + person._count.crewRoles;
        if (totalRoles > 0) {
            return NextResponse.json(
                {
                    message: `No se puede eliminar esta persona porque está asociada a ${totalRoles} película(s)`
                },
                { status: 400 }
            );
        }

        // Eliminar la persona (los links se eliminan en cascada)
        await prisma.person.delete({
            where: { id: parseInt(id) },
        });

        return NextResponse.json({ message: 'Persona eliminada correctamente' });
    } catch (error) {
        console.error('Error deleting person:', error);
        return NextResponse.json(
            { message: 'Error al eliminar persona' },
            { status: 500 }
        );
    }
}

// ==================================================
// src/app/api/project-structure/route.ts
// ==================================================
// src/app/api/project-structure/route.ts
import { NextResponse } from 'next/server';
import fs from 'fs';
import path from 'path';

export async function GET(request: Request) {
  // Verificar clave de seguridad
  const { searchParams } = new URL(request.url);
  const key = searchParams.get('key');
  
  if (key !== 'cinenacional2024') {
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
  }
  
  // Función para escanear directorio
  function scanDir(dir: string, base = ''): any {
    try {
      const items = fs.readdirSync(dir);
      const result: any = {};
      
      items.forEach(item => {
        // Ignorar archivos y carpetas que no necesitamos
        if (item.startsWith('.') || 
            item === 'node_modules' || 
            item === '.next' ||
            item === 'out' ||
            item === 'coverage' ||
            item === '.vercel') return;
        
        const fullPath = path.join(dir, item);
        try {
          const stats = fs.statSync(fullPath);
          
          if (stats.isDirectory()) {
            const subResult = scanDir(fullPath, path.join(base, item));
            // Solo incluir directorios que tengan contenido
            if (Object.keys(subResult).length > 0) {
              result[item] = subResult;
            }
          } else if (item.match(/\.(ts|tsx|js|jsx|json|css|scss|md|sql|prisma)$/)) {
            // Crear URL de GitHub para cada archivo
            result[item] = `https://raw.githubusercontent.com/diegopapic/cinenacional/main/${path.join(base, item).replace(/\\/g, '/')}`;
          }
        } catch (error) {
          console.error(`Error reading ${fullPath}:`, error);
        }
      });
      
      return result;
    } catch (error) {
      console.error(`Error scanning directory ${dir}:`, error);
      return {};
    }
  }
  
  try {
    const projectRoot = process.cwd();
    const structure = scanDir(projectRoot);
    
    // Agregar algunos archivos importantes en la raíz manualmente si no fueron escaneados
    const rootFiles = ['package.json', 'tsconfig.json', 'next.config.js', 'next.config.mjs', '.env.example', 'README.md'];
    const quickLinks: any = {};
    
    rootFiles.forEach(file => {
      const filePath = path.join(projectRoot, file);
      if (fs.existsSync(filePath)) {
        quickLinks[file] = `https://raw.githubusercontent.com/diegopapic/cinenacional/main/${file}`;
      }
    });
    
    return NextResponse.json({
      timestamp: new Date().toISOString(),
      repository: "https://github.com/diegopapic/cinenacional",
      structure,
      quickLinks,
      totalFiles: countFiles(structure)
    });
  } catch (error) {
    // Si hay algún error al escanear, devolver una respuesta de error informativa
    return NextResponse.json({
      error: 'Error scanning project',
      details: error instanceof Error ? error.message : 'Unknown error',
      // Proporcionar al menos los enlaces básicos
      quickLinks: {
        package: "https://raw.githubusercontent.com/diegopapic/cinenacional/main/package.json",
        tsconfig: "https://raw.githubusercontent.com/diegopapic/cinenacional/main/tsconfig.json"
      }
    });
  }
}

// Función auxiliar para contar archivos
function countFiles(obj: any): number {
  let count = 0;
  for (const key in obj) {
    if (typeof obj[key] === 'string') {
      count++;
    } else if (typeof obj[key] === 'object') {
      count += countFiles(obj[key]);
    }
  }
  return count;
}

// ==================================================
// src/app/api/screening-venues/route.ts
// ==================================================
// src/app/api/screening-venues/route.ts
import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/prisma'
import { createSlug } from '@/lib/utils'
import { z } from 'zod'

// Schema de validación
const screeningVenueSchema = z.object({
  name: z.string().min(1, 'El nombre es requerido'),
  type: z.enum(['CINEMA', 'STREAMING', 'TV_CHANNEL', 'OTHER']),
  description: z.string().optional(),
  logoUrl: z.string().url().optional().or(z.literal('')),
  website: z.string().url().optional().or(z.literal('')),
  address: z.string().optional(),
  city: z.string().optional(),
  province: z.string().optional(),
  country: z.string().optional(),
  latitude: z.number().optional(),
  longitude: z.number().optional(),
  isActive: z.boolean().optional()
})

// GET /api/screening-venues - Listar pantallas de estreno
export async function GET(request: NextRequest) {
  try {
    const searchParams = request.nextUrl.searchParams
    const search = searchParams.get('search') || ''
    const type = searchParams.get('type') || ''
    const isActive = searchParams.get('isActive')
    const page = parseInt(searchParams.get('page') || '1')
    const limit = parseInt(searchParams.get('limit') || '20')

    const skip = (page - 1) * limit

    // Construir filtros
    const where: any = {}

    if (search) {
      where.OR = [
        { name: { contains: search, mode: 'insensitive' } },
        { description: { contains: search, mode: 'insensitive' } }
      ]
    }

    if (type) {
      where.type = type
    }

    if (isActive !== null && isActive !== '') {
      where.isActive = isActive === 'true'
    }

    // Obtener total
    const total = await prisma.screeningVenue.count({ where })

    // Obtener venues sin la relación screenings por ahora
    const venues = await prisma.screeningVenue.findMany({
      where,
      skip,
      take: limit,
      orderBy: [
        { type: 'asc' },
        { name: 'asc' }
      ]
    })

    // Agregar un contador falso de screenings por ahora
    const venuesWithCount = venues.map(venue => ({
      ...venue,
      _count: {
        screenings: 0
      }
    }))

    return NextResponse.json({
      venues: venuesWithCount,
      pagination: {
        page,
        limit,
        total,
        totalPages: Math.ceil(total / limit)
      }
    })
  } catch (error) {
    console.error('Error fetching screening venues:', error)
    return NextResponse.json(
      { error: 'Error al obtener las pantallas de estreno' },
      { status: 500 }
    )
  }
}

// POST /api/screening-venues - Crear nueva pantalla de estreno
export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    
    // Validar datos
    const validatedData = screeningVenueSchema.parse(body)
    
    // Generar slug único
    let slug = createSlug(validatedData.name)
    let slugExists = await prisma.screeningVenue.findUnique({ where: { slug } })
    let counter = 1
    
    while (slugExists) {
      slug = `${createSlug(validatedData.name)}-${counter}`
      slugExists = await prisma.screeningVenue.findUnique({ where: { slug } })
      counter++
    }

    const venue = await prisma.screeningVenue.create({
      data: {
        ...validatedData,
        slug
      }
    })

    return NextResponse.json(venue, { status: 201 })
  } catch (error) {
    if (error instanceof z.ZodError) {
      return NextResponse.json(
        { error: 'Datos inválidos', details: error.errors },
        { status: 400 }
      )
    }
    
    console.error('Error creating screening venue:', error)
    return NextResponse.json(
      { error: 'Error al crear la pantalla de estreno' },
      { status: 500 }
    )
  }
}

// ==================================================
// src/app/api/screening-venues/[id]/route.ts
// ==================================================
// src/app/api/screening-venues/[id]/route.ts
import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/prisma'
import { z } from 'zod'

// Schema de validación
const screeningVenueSchema = z.object({
  name: z.string().min(1, 'El nombre es requerido'),
  type: z.enum(['CINEMA', 'STREAMING', 'TV_CHANNEL', 'OTHER']),
  description: z.string().optional(),
  logoUrl: z.string().url().optional().or(z.literal('')),
  website: z.string().url().optional().or(z.literal('')),
  address: z.string().optional(),
  city: z.string().optional(),
  province: z.string().optional(),
  country: z.string().optional(),
  latitude: z.number().optional(),
  longitude: z.number().optional(),
  isActive: z.boolean().optional()
})

// GET /api/screening-venues/[id] - Obtener pantalla por ID
export async function GET(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const id = parseInt(params.id)
    
    const venue = await prisma.screeningVenue.findUnique({
      where: { id }
    })

    if (!venue) {
      return NextResponse.json(
        { error: 'Pantalla de estreno no encontrada' },
        { status: 404 }
      )
    }

    // Agregar contador falso por ahora
    const venueWithCount = {
      ...venue,
      screenings: [],
      _count: {
        screenings: 0
      }
    }

    return NextResponse.json(venueWithCount)
  } catch (error) {
    console.error('Error fetching screening venue:', error)
    return NextResponse.json(
      { error: 'Error al obtener la pantalla de estreno' },
      { status: 500 }
    )
  }
}

// PUT /api/screening-venues/[id] - Actualizar pantalla
export async function PUT(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const id = parseInt(params.id)
    const body = await request.json()
    
    // Validar datos
    const validatedData = screeningVenueSchema.parse(body)
    
    // Verificar que existe
    const existingVenue = await prisma.screeningVenue.findUnique({
      where: { id }
    })
    
    if (!existingVenue) {
      return NextResponse.json(
        { error: 'Pantalla de estreno no encontrada' },
        { status: 404 }
      )
    }

    const venue = await prisma.screeningVenue.update({
      where: { id },
      data: validatedData
    })

    return NextResponse.json(venue)
  } catch (error) {
    if (error instanceof z.ZodError) {
      return NextResponse.json(
        { error: 'Datos inválidos', details: error.errors },
        { status: 400 }
      )
    }
    
    console.error('Error updating screening venue:', error)
    return NextResponse.json(
      { error: 'Error al actualizar la pantalla de estreno' },
      { status: 500 }
    )
  }
}

// DELETE /api/screening-venues/[id] - Eliminar pantalla
export async function DELETE(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const id = parseInt(params.id)
    
    // Verificar que existe
    const venue = await prisma.screeningVenue.findUnique({
      where: { id }
    })
    
    if (!venue) {
      return NextResponse.json(
        { error: 'Pantalla de estreno no encontrada' },
        { status: 404 }
      )
    }

    // Por ahora no verificamos películas asociadas ya que no existe la tabla movie_screenings
    await prisma.screeningVenue.delete({
      where: { id }
    })

    return NextResponse.json(
      { message: 'Pantalla de estreno eliminada exitosamente' },
      { status: 200 }
    )
  } catch (error) {
    console.error('Error deleting screening venue:', error)
    return NextResponse.json(
      { error: 'Error al eliminar la pantalla de estreno' },
      { status: 500 }
    )
  }
}

// ==================================================
// src/app/api/themes/route.ts
// ==================================================
// src/app/api/themes/route.ts
import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/prisma'
import { createSlug } from '@/lib/utils'

// GET /api/themes - Listar todos los themes/keywords
export async function GET(request: NextRequest) {
  try {
    const searchParams = request.nextUrl.searchParams
    const search = searchParams.get('search') || ''
    const sortBy = searchParams.get('sortBy') || 'name'
    const sortOrder = searchParams.get('sortOrder') || 'asc'

    const where = search ? {
      OR: [
        { name: { contains: search, mode: 'insensitive' as const } },
        { description: { contains: search, mode: 'insensitive' as const } }
      ]
    } : {}

    const themes = await prisma.theme.findMany({
      where,
      orderBy: {
        [sortBy]: sortOrder
      },
      include: {
        _count: {
          select: { movies: true }
        }
      }
    })

    // Formatear respuesta con contador de películas
    const formattedThemes = themes.map(theme => ({
      ...theme,
      movieCount: theme._count.movies
    }))

    return NextResponse.json(formattedThemes)
  } catch (error) {
    console.error('Error fetching themes:', error)
    return NextResponse.json(
      { error: 'Error al obtener los themes' },
      { status: 500 }
    )
  }
}

// POST /api/themes - Crear nuevo theme/keyword
export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    
    // Validar datos requeridos
    if (!body.name) {
      return NextResponse.json(
        { error: 'El nombre es requerido' },
        { status: 400 }
      )
    }

    // Generar slug único
    let slug = createSlug(body.name)
    let slugExists = await prisma.theme.findUnique({ where: { slug } })
    let counter = 1
    
    while (slugExists) {
      slug = `${createSlug(body.name)}-${counter}`
      slugExists = await prisma.theme.findUnique({ where: { slug } })
      counter++
    }

    const theme = await prisma.theme.create({
      data: {
        name: body.name,
        slug,
        description: body.description
      }
    })

    return NextResponse.json(theme, { status: 201 })
  } catch (error) {
    console.error('Error creating theme:', error)
    return NextResponse.json(
      { error: 'Error al crear el theme' },
      { status: 500 }
    )
  }
}

// ==================================================
// src/app/api/themes/[id]/route.ts
// ==================================================
// src/app/api/themes/[id]/route.ts
import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/prisma'
import { createSlug } from '@/lib/utils'

// GET /api/themes/[id] - Obtener theme específico
export async function GET(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const id = parseInt(params.id)
    
    const theme = await prisma.theme.findUnique({
      where: { id },
      include: {
        movies: {
          include: {
            movie: {
              select: {
                id: true,
                title: true,
                slug: true,
                year: true,
                posterUrl: true
              }
            }
          }
        },
        _count: {
          select: { movies: true }
        }
      }
    })

    if (!theme) {
      return NextResponse.json(
        { error: 'Theme no encontrado' },
        { status: 404 }
      )
    }

    return NextResponse.json({
      ...theme,
      movieCount: theme._count.movies
    })
  } catch (error) {
    console.error('Error fetching theme:', error)
    return NextResponse.json(
      { error: 'Error al obtener el theme' },
      { status: 500 }
    )
  }
}

// PUT /api/themes/[id] - Actualizar theme
export async function PUT(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const id = parseInt(params.id)
    const body = await request.json()
    
    // Verificar que existe
    const existingTheme = await prisma.theme.findUnique({
      where: { id }
    })
    
    if (!existingTheme) {
      return NextResponse.json(
        { error: 'Theme no encontrado' },
        { status: 404 }
      )
    }

    // Si se cambia el nombre, generar nuevo slug
    let updateData: any = {
      description: body.description
    }

    if (body.name && body.name !== existingTheme.name) {
      let slug = createSlug(body.name)
      let slugExists = await prisma.theme.findUnique({ 
        where: { 
          slug,
          NOT: { id }
        } 
      })
      let counter = 1
      
      while (slugExists) {
        slug = `${createSlug(body.name)}-${counter}`
        slugExists = await prisma.theme.findUnique({ 
          where: { 
            slug,
            NOT: { id }
          } 
        })
        counter++
      }

      updateData.name = body.name
      updateData.slug = slug
    }

    const theme = await prisma.theme.update({
      where: { id },
      data: updateData
    })

    return NextResponse.json(theme)
  } catch (error) {
    console.error('Error updating theme:', error)
    return NextResponse.json(
      { error: 'Error al actualizar el theme' },
      { status: 500 }
    )
  }
}

// DELETE /api/themes/[id] - Eliminar theme
export async function DELETE(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const id = parseInt(params.id)
    
    // Verificar que no esté en uso
    const themeWithMovies = await prisma.theme.findUnique({
      where: { id },
      include: {
        _count: {
          select: { movies: true }
        }
      }
    })
    
    if (!themeWithMovies) {
      return NextResponse.json(
        { error: 'Theme no encontrado' },
        { status: 404 }
      )
    }

    if (themeWithMovies._count.movies > 0) {
      return NextResponse.json(
        { error: `No se puede eliminar el theme porque está asignado a ${themeWithMovies._count.movies} película(s)` },
        { status: 400 }
      )
    }

    await prisma.theme.delete({
      where: { id }
    })

    return NextResponse.json(
      { message: 'Theme eliminado exitosamente' },
      { status: 200 }
    )
  } catch (error) {
    console.error('Error deleting theme:', error)
    return NextResponse.json(
      { error: 'Error al eliminar el theme' },
      { status: 500 }
    )
  }
}

// ==================================================
// src/app/layout.tsx
// ==================================================
// src/app/layout.tsx
import type { Metadata } from 'next'
import { Inter, Crimson_Text } from 'next/font/google'
import './globals.css'
import Header from '@/components/layout/Header'
import Footer from '@/components/layout/Footer'
import { Toaster } from 'react-hot-toast'

// Configurar las fuentes
const inter = Inter({ 
  subsets: ['latin'],
  weight: ['300', '400', '500', '600'],
  variable: '--font-inter',
  display: 'swap',
})

const crimsonText = Crimson_Text({ 
  subsets: ['latin'],
  weight: ['400', '600'],
  style: ['normal', 'italic'],
  variable: '--font-crimson',
  display: 'swap',
})

export const metadata: Metadata = {
  title: 'CineNacional - Base de Datos del Cine Argentino',
  description: 'La base de datos más completa del cine argentino. Descubre películas, directores, actores y toda la historia cinematográfica de Argentina.',
  keywords: 'cine argentino, películas argentinas, actores argentinos, directores argentinos, base de datos cine',
  openGraph: {
    title: 'CineNacional - Base de Datos del Cine Argentino',
    description: 'La base de datos más completa del cine argentino',
    url: 'https://cinenacional.vercel.app',
    siteName: 'CineNacional',
    images: [
      {
        url: '/og-image.jpg',
        width: 1200,
        height: 630,
        alt: 'CineNacional',
      },
    ],
    locale: 'es_AR',
    type: 'website',
  },
  robots: {
    index: true,
    follow: true,
    googleBot: {
      index: true,
      follow: true,
      'max-video-preview': -1,
      'max-image-preview': 'large',
      'max-snippet': -1,
    },
  },
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="es" className={`h-full ${inter.variable} ${crimsonText.variable}`}>
      <body className={`${inter.className} min-h-full flex flex-col bg-zinc-950 text-white`}>
        <Header />
        <main className="flex-grow">
          {children}
        </main>
        <Footer />
        <Toaster 
          position="top-right"
          toastOptions={{
            duration: 4000,
            style: {
              background: '#363636',
              color: '#fff',
            },
            success: {
              style: {
                background: '#10b981',
              },
            },
            error: {
              style: {
                background: '#ef4444',
              },
            },
          }}
        />
      </body>
    </html>
  )
}

// ==================================================
// src/app/listados/peliculas/page.tsx
// ==================================================
'use client';

import React, { useState, useEffect } from 'react';

export default function MovieListPage() {
  const [viewMode, setViewMode] = useState('compact');
  const [currentPage, setCurrentPage] = useState(1);
  const itemsPerPage = 10;
  const totalMovies = 847;
  const totalPages = Math.ceil(totalMovies / itemsPerPage);

  // Sample movie data
  const movies = [
    { id: 1, title: 'Relatos Salvajes', director: 'Damián Szifron', year: 2014, genre: 'Comedia Negra, Drama', duration: 122, synopsis: 'Seis relatos que alternan la comedia negra y la tragedia. Sus personajes se verán empujados hacia el abismo y hacia el innegable placer de perder el control al cruzar la delgada línea que separa la civilización de la barbarie.', rating: 8.1 },
    { id: 2, title: 'El Secreto de sus Ojos', director: 'Juan José Campanella', year: 2009, genre: 'Drama, Thriller', duration: 129, synopsis: 'Benjamín Espósito es oficial de un Juzgado de Instrucción de Buenos Aires recién retirado. Obsesionado por un brutal asesinato ocurrido veinticinco años antes, decide escribir una novela sobre el caso, del cual fue testigo y protagonista.', rating: 8.2 },
    { id: 3, title: 'Nueve Reinas', director: 'Fabián Bielinsky', year: 2000, genre: 'Thriller, Drama', duration: 114, synopsis: 'Dos estafadores, uno joven y otro veterano, se unen para realizar un negocio millonario. La venta de unos sellos falsos conocidos como las "nueve reinas" se convierte en una carrera contra el tiempo donde nada es lo que parece.', rating: 7.9 },
    { id: 4, title: 'La Historia Oficial', director: 'Luis Puenzo', year: 1985, genre: 'Drama', duration: 112, synopsis: 'Buenos Aires, década del 80. Alicia es una profesora de historia casada con Roberto, un empresario. La pareja tiene una hija adoptiva, Gaby. La vida de Alicia cambiará cuando comience a sospechar sobre el verdadero origen de su hija.', rating: 7.8 },
    { id: 5, title: 'El Hijo de la Novia', director: 'Juan José Campanella', year: 2001, genre: 'Drama, Comedia', duration: 123, synopsis: 'Rafael Belvedere está en crisis: a los 42 años, sigue soltero, no tiene amigos y está agobiado por las responsabilidades. Su padre quiere casarse por la iglesia con su madre, que padece Alzheimer, para complacerla.', rating: 7.8 },
    { id: 6, title: 'Medianeras', director: 'Gustavo Taretto', year: 2011, genre: 'Drama, Romance', duration: 95, synopsis: 'Buenos Aires es una ciudad de departamentos. Martín y Mariana viven a metros de distancia, pero nunca se cruzaron. Mientras tanto, ambos buscan en Internet lo que no pueden encontrar afuera.', rating: 7.5 },
    { id: 7, title: 'Un Cuento Chino', director: 'Sebastián Borensztein', year: 2011, genre: 'Comedia, Drama', duration: 93, synopsis: 'Roberto es un ferretero solitario que colecciona noticias insólitas. Un día conoce a Jun, un chino que no habla español. A pesar de la barrera del idioma, Roberto lo ayudará en su búsqueda.', rating: 7.7 },
    { id: 8, title: 'Pizza, Birra, Faso', director: 'Bruno Stagnaro, Adrián Caetano', year: 1998, genre: 'Drama, Crimen', duration: 92, synopsis: 'Cordobés y sus amigos sobreviven robando en las calles de Buenos Aires. Cuando su novia queda embarazada, Cordobés intenta conseguir dinero para un futuro mejor, pero la vida en la calle no perdona.', rating: 7.1 },
    { id: 9, title: 'Esperando la Carroza', director: 'Alejandro Doria', year: 1985, genre: 'Comedia', duration: 87, synopsis: 'Mamá Cora tiene tres hijos que no quieren hacerse cargo de ella. Durante un almuerzo familiar, la anciana desaparece y todos creen que se suicidó tirándose al río, desatando un caos familiar lleno de hipocresía.', rating: 8.1 },
    { id: 10, title: 'Comodines', director: 'Jorge Nisco', year: 1997, genre: 'Acción, Comedia', duration: 90, synopsis: 'Dos policías muy diferentes deben trabajar juntos para resolver un caso de corrupción policial. Entre persecuciones y tiroteos, desarrollarán una amistad mientras intentan sobrevivir a la investigación.', rating: 6.5 }
  ];

  const getDisplayedMovies = () => {
    const start = (currentPage - 1) * itemsPerPage;
    const end = start + itemsPerPage;
    return movies.slice(start, end);
  };

  const handlePageChange = (page: number) => {
    setCurrentPage(page);
    window.scrollTo(0, 0);
  };

  const renderPagination = () => {
    const pages = [];
    const maxVisible = 5;
    
    if (totalPages <= maxVisible) {
      for (let i = 1; i <= totalPages; i++) {
        pages.push(i);
      }
    } else {
      if (currentPage <= 3) {
        pages.push(1, 2, 3, '...', totalPages - 1, totalPages);
      } else if (currentPage >= totalPages - 2) {
        pages.push(1, 2, '...', totalPages - 2, totalPages - 1, totalPages);
      } else {
        pages.push(1, '...', currentPage - 1, currentPage, currentPage + 1, '...', totalPages);
      }
    }
    
    return pages;
  };

  // Add styles
  const styles = `
    @import url('https://fonts.googleapis.com/css2?family=Crimson+Text:ital,wght@0,400;0,600;1,400&family=Inter:wght@300;400;500;600&display=swap');
    
    body {
      font-family: 'Inter', system-ui, sans-serif;
      font-weight: 300;
      letter-spacing: -0.01em;
      background-color: #0f1419;
      color: white;
    }
    
    .serif-heading {
      font-family: 'Crimson Text', Georgia, serif;
      font-weight: 600;
      letter-spacing: -0.02em;
    }
    
    .serif-body {
      font-family: 'Crimson Text', Georgia, serif;
      font-weight: 400;
      line-height: 1.7;
    }
    
    .poster-shadow {
      box-shadow: 0 20px 40px rgba(0,0,0,0.4);
    }
    
    .glass-effect {
      backdrop-filter: blur(10px);
      background: rgba(42, 42, 42, 0.8);
    }
    
    .gradient-text {
      background: linear-gradient(135deg, #3b82f6, #60a5fa);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
    }
    
    .movie-placeholder {
      background: linear-gradient(135deg, #1a2332, #0f1419);
      border: 1px solid #3b82f6;
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      text-align: center;
      padding: 2rem;
      position: relative;
      overflow: hidden;
    }
    
    .movie-placeholder::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: linear-gradient(45deg, transparent 30%, rgba(59, 130, 246, 0.1) 50%, transparent 70%);
      animation: shimmer 2s infinite;
    }
    
    .placeholder-small {
      background: linear-gradient(135deg, #1a2332, #0f1419);
      border: 1px solid #374151;
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      text-align: center;
      padding: 1rem;
    }
    
    .animate-fade-in {
      animation: fadeIn 0.5s ease-in-out;
    }
    
    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(10px); }
      to { opacity: 1; transform: translateY(0); }
    }
    
    @keyframes shimmer {
      0% { transform: translateX(-100%); }
      100% { transform: translateX(100%); }
    }
    
    .bg-cine-dark { background-color: #0f1419; }
    .bg-cine-gray { background-color: #1a2332; }
    .text-cine-accent { color: #3b82f6; }
    .bg-cine-accent { background-color: #3b82f6; }
    .border-cine-accent { border-color: #3b82f6; }
    .hover\\:bg-cine-accent:hover { background-color: #3b82f6; }
    .hover\\:text-cine-accent:hover { color: #3b82f6; }
    .hover\\:border-cine-accent:hover { border-color: #3b82f6; }
  `;

  return (
    <>
      <style>{styles}</style>
      <div className="bg-cine-dark text-white min-h-screen">
        {/* Main Content */}
        <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
          {/* Page Header */}
          <div className="mb-8">
            <h2 className="serif-heading text-4xl text-white mb-2">Películas Argentinas</h2>
            <p className="text-gray-400">Explorá el catálogo completo del cine nacional</p>
          </div>

          {/* Filters and View Toggle */}
          <div className="glass-effect rounded-lg p-6 mb-8">
            <div className="flex flex-col lg:flex-row justify-between items-start lg:items-center gap-6">
              {/* Filters */}
              <div className="flex flex-wrap gap-3">
                <select className="bg-cine-dark border border-gray-600 rounded-lg px-4 py-2 text-sm focus:outline-none focus:border-cine-accent transition-colors text-white">
                  <option>Todos los géneros</option>
                  <option>Drama</option>
                  <option>Comedia</option>
                  <option>Thriller</option>
                  <option>Documental</option>
                  <option>Romance</option>
                  <option>Acción</option>
                </select>
                <select className="bg-cine-dark border border-gray-600 rounded-lg px-4 py-2 text-sm focus:outline-none focus:border-cine-accent transition-colors text-white">
                  <option>Todas las décadas</option>
                  <option>2020s</option>
                  <option>2010s</option>
                  <option>2000s</option>
                  <option>1990s</option>
                  <option>1980s</option>
                </select>
                <select className="bg-cine-dark border border-gray-600 rounded-lg px-4 py-2 text-sm focus:outline-none focus:border-cine-accent transition-colors text-white">
                  <option>Ordenar por: Más recientes</option>
                  <option>Título (A-Z)</option>
                  <option>Título (Z-A)</option>
                  <option>Año (Ascendente)</option>
                  <option>Año (Descendente)</option>
                  <option>Calificación</option>
                </select>
              </div>

              {/* View Toggle */}
              <div className="flex items-center bg-cine-dark rounded-lg p-1 border border-gray-600">
                <button 
                  onClick={() => setViewMode('compact')}
                  className={`px-4 py-2 text-sm font-medium rounded-md transition-all duration-200 ${
                    viewMode === 'compact' 
                      ? 'bg-cine-accent text-white' 
                      : 'text-gray-400 hover:text-white'
                  }`}
                >
                  Vista Compacta
                </button>
                <button 
                  onClick={() => setViewMode('detail')}
                  className={`px-4 py-2 text-sm font-medium rounded-md transition-all duration-200 ${
                    viewMode === 'detail' 
                      ? 'bg-cine-accent text-white' 
                      : 'text-gray-400 hover:text-white'
                  }`}
                >
                  Vista Detallada
                </button>
              </div>
            </div>
          </div>

          {/* Movies Display */}
          {viewMode === 'compact' ? (
            // Compact Grid View
            <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-6 mb-12">
              {getDisplayedMovies().map((movie, index) => (
                <div 
                  key={movie.id} 
                  className="group cursor-pointer animate-fade-in"
                  style={{animationDelay: `${index * 0.05}s`}}
                >
                  <div className="relative aspect-[2/3] rounded-lg overflow-hidden poster-shadow transform group-hover:scale-105 transition-transform duration-300">
                    <div className="movie-placeholder w-full h-full">
                      <svg className="w-16 h-16 text-cine-accent mb-4 opacity-60" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="1.5" d="M15.75 10.5l4.72-4.72a.75.75 0 011.28.53v11.38a.75.75 0 01-1.28.53l-4.72-4.72M4.5 18.75h9a2.25 2.25 0 002.25-2.25v-9a2.25 2.25 0 00-2.25-2.25h-9A2.25 2.25 0 002.25 7.5v9a2.25 2.25 0 002.25 2.25z"/>
                      </svg>
                      <p className="text-sm text-gray-400">Afiche</p>
                    </div>
                    <div className="absolute inset-0 bg-gradient-to-t from-black/80 via-black/0 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
                    {movie.rating && (
                      <div className="absolute top-2 right-2 bg-black/70 backdrop-blur-sm px-2 py-1 rounded-md flex items-center space-x-1 opacity-0 group-hover:opacity-100 transition-opacity duration-300">
                        <svg className="w-3 h-3 text-yellow-400 fill-current" viewBox="0 0 20 20">
                          <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"/>
                        </svg>
                        <span className="text-xs font-medium text-white">{movie.rating}</span>
                      </div>
                    )}
                  </div>
                  <div className="mt-3">
                    <h3 className="font-medium text-white line-clamp-1 group-hover:text-cine-accent transition-colors">{movie.title}</h3>
                    <p className="text-sm text-gray-400">{movie.director}</p>
                    <p className="text-sm text-gray-500">{movie.year}</p>
                  </div>
                </div>
              ))}
            </div>
          ) : (
            // Detail List View
            <div className="space-y-4 mb-12">
              {getDisplayedMovies().map((movie, index) => (
                <div 
                  key={movie.id} 
                  className="glass-effect rounded-lg p-6 hover:border-cine-accent border border-transparent transition-all duration-300 cursor-pointer animate-fade-in"
                  style={{animationDelay: `${index * 0.05}s`}}
                >
                  <div className="flex flex-col md:flex-row gap-6">
                    <div className="w-full md:w-32 flex-shrink-0">
                      <div className="aspect-[2/3] md:aspect-auto md:h-48 rounded-lg overflow-hidden">
                        <div className="placeholder-small w-full h-full">
                          <svg className="w-8 h-8 text-gray-500 mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="1.5" d="M15.75 10.5l4.72-4.72a.75.75 0 011.28.53v11.38a.75.75 0 01-1.28.53l-4.72-4.72M4.5 18.75h9a2.25 2.25 0 002.25-2.25v-9a2.25 2.25 0 00-2.25-2.25h-9A2.25 2.25 0 002.25 7.5v9a2.25 2.25 0 002.25 2.25z"/>
                          </svg>
                          <p className="text-xs text-gray-400 text-center">Sin imagen</p>
                        </div>
                      </div>
                    </div>
                    <div className="flex-1 space-y-3">
                      <div>
                        <div className="flex items-start justify-between">
                          <h3 className="text-xl font-medium text-white hover:text-cine-accent transition-colors">{movie.title}</h3>
                          {movie.rating && (
                            <div className="flex items-center space-x-1 bg-cine-dark px-2 py-1 rounded-md">
                              <svg className="w-4 h-4 text-yellow-400 fill-current" viewBox="0 0 20 20">
                                <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"/>
                              </svg>
                              <span className="text-sm font-medium text-yellow-400">{movie.rating}</span>
                            </div>
                          )}
                        </div>
                        <div className="flex flex-wrap gap-4 mt-2 text-sm text-gray-400">
                          <span className="flex items-center gap-1">
                            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                            </svg>
                            {movie.director}
                          </span>
                          <span className="flex items-center gap-1">
                            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                            </svg>
                            {movie.year}
                          </span>
                          <span className="flex items-center gap-1">
                            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M7 4v16M17 4v16M3 8h4m10 0h4M3 16h4m10 0h4"></path>
                            </svg>
                            {movie.genre}
                          </span>
                          <span className="flex items-center gap-1">
                            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                            </svg>
                            {movie.duration} min
                          </span>
                        </div>
                      </div>
                      <p className="text-gray-300 serif-body line-clamp-3">{movie.synopsis}</p>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}

          {/* Pagination */}
          <div className="flex flex-col sm:flex-row justify-between items-center gap-6">
            <p className="text-sm text-gray-400">
              Mostrando <span className="font-medium text-white">{(currentPage - 1) * itemsPerPage + 1}</span> a{' '}
              <span className="font-medium text-white">
                {Math.min(currentPage * itemsPerPage, totalMovies)}
              </span>{' '}
              de <span className="font-medium text-white">{totalMovies}</span> películas
            </p>
            <nav className="flex items-center space-x-2">
              <button 
                onClick={() => handlePageChange(currentPage - 1)}
                disabled={currentPage === 1}
                className="px-3 py-2 text-sm font-medium text-gray-400 bg-cine-gray border border-gray-700 rounded-lg hover:bg-cine-dark hover:border-cine-accent transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
              >
                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 19l-7-7 7-7"></path>
                </svg>
              </button>
              
              {renderPagination().map((page, index) => (
                <React.Fragment key={index}>
                  {page === '...' ? (
                    <span className="px-2 text-gray-500">...</span>
                  ) : (
                    <button
                      onClick={() => handlePageChange(page as number)}
                      className={`px-4 py-2 text-sm font-medium rounded-lg transition-colors ${
                        currentPage === page
                          ? 'text-white bg-cine-accent'
                          : 'text-gray-300 bg-cine-gray border border-gray-700 hover:bg-cine-dark hover:border-cine-accent'
                      }`}
                    >
                      {page}
                    </button>
                  )}
                </React.Fragment>
              ))}
              
              <button 
                onClick={() => handlePageChange(currentPage + 1)}
                disabled={currentPage === totalPages}
                className="px-3 py-2 text-sm font-medium text-gray-400 bg-cine-gray border border-gray-700 rounded-lg hover:bg-cine-dark hover:border-cine-accent transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
              >
                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 5l7 7-7 7"></path>
                </svg>
              </button>
            </nav>
          </div>
        </main>
      </div>
    </>
  );
}

// ==================================================
// src/app/listados/personas/page.tsx
// ==================================================
'use client';

import React, { useState, useEffect } from 'react';

export default function PeopleListPage() {
  const [viewMode, setViewMode] = useState('compact');
  const [currentPage, setCurrentPage] = useState(1);
  const [filterRole, setFilterRole] = useState('all');
  const itemsPerPage = 12;
  const totalPeople = 1243;
  const totalPages = Math.ceil(totalPeople / itemsPerPage);

  // Sample people data
  const people = [
    { 
      id: 1, 
      name: 'Ricardo Darín', 
      primaryRole: 'Actor',
      birthYear: 1957,
      birthPlace: 'Buenos Aires, Argentina',
      filmCount: 87,
      awards: 42,
      notableFilms: ['El Secreto de sus Ojos', 'Nueve Reinas', 'Un Cuento Chino', 'Relatos Salvajes'],
      bio: 'Uno de los actores más reconocidos del cine argentino, con una carrera que abarca más de cuatro décadas. Ganador de múltiples premios internacionales.',
      roles: ['Actor', 'Productor']
    },
    { 
      id: 2, 
      name: 'Juan José Campanella', 
      primaryRole: 'Director',
      birthYear: 1959,
      birthPlace: 'Buenos Aires, Argentina',
      filmCount: 15,
      awards: 28,
      notableFilms: ['El Secreto de sus Ojos', 'El Hijo de la Novia', 'Luna de Avellaneda', 'El Mismo Amor'],
      bio: 'Director y guionista argentino ganador del Oscar. Reconocido por su trabajo tanto en cine como en televisión internacional.',
      roles: ['Director', 'Guionista', 'Productor']
    },
    { 
      id: 3, 
      name: 'Norma Aleandro', 
      primaryRole: 'Actriz',
      birthYear: 1936,
      birthPlace: 'Buenos Aires, Argentina',
      filmCount: 62,
      awards: 35,
      notableFilms: ['La Historia Oficial', 'El Hijo de la Novia', 'Gaby: A True Story', 'Cama Adentro'],
      bio: 'Primera actriz argentina, ícono del cine y teatro nacional. Ganadora de múltiples premios internacionales incluyendo el premio a mejor actriz en Cannes.',
      roles: ['Actriz', 'Directora teatral']
    },
    { 
      id: 4, 
      name: 'Damián Szifron', 
      primaryRole: 'Director',
      birthYear: 1975,
      birthPlace: 'Ramos Mejía, Argentina',
      filmCount: 8,
      awards: 22,
      notableFilms: ['Relatos Salvajes', 'El Fondo del Mar', 'Tiempo de Valientes'],
      bio: 'Director, guionista y productor argentino. Creador de series exitosas y director del film más taquillero del cine argentino.',
      roles: ['Director', 'Guionista', 'Productor']
    },
    { 
      id: 5, 
      name: 'Érica Rivas', 
      primaryRole: 'Actriz',
      birthYear: 1974,
      birthPlace: 'Buenos Aires, Argentina',
      filmCount: 34,
      awards: 18,
      notableFilms: ['Relatos Salvajes', 'La Señal', 'Elena Sabe', 'Los Marziano'],
      bio: 'Actriz argentina de cine, teatro y televisión. Reconocida por su versatilidad y compromiso con cada personaje.',
      roles: ['Actriz', 'Cantante']
    },
    { 
      id: 6, 
      name: 'Fabián Bielinsky', 
      primaryRole: 'Director',
      birthYear: 1959,
      birthPlace: 'Buenos Aires, Argentina',
      deathYear: 2006,
      filmCount: 3,
      awards: 15,
      notableFilms: ['Nueve Reinas', 'El Aura'],
      bio: 'Director y guionista argentino cuya breve pero brillante carrera dejó una marca indeleble en el cine nacional.',
      roles: ['Director', 'Guionista']
    },
    { 
      id: 7, 
      name: 'Cecilia Roth', 
      primaryRole: 'Actriz',
      birthYear: 1956,
      birthPlace: 'Buenos Aires, Argentina',
      filmCount: 73,
      awards: 31,
      notableFilms: ['Todo sobre mi madre', 'Martín (Hache)', 'El Lado Oscuro del Corazón', 'Kamchatka'],
      bio: 'Actriz argentina-española con una destacada carrera internacional. Musa de Pedro Almodóvar y figura clave del cine argentino.',
      roles: ['Actriz']
    },
    { 
      id: 8, 
      name: 'Gustavo Santaolalla', 
      primaryRole: 'Compositor',
      birthYear: 1951,
      birthPlace: 'El Palomar, Argentina',
      filmCount: 45,
      awards: 38,
      notableFilms: ['Relatos Salvajes', 'Diarios de Motocicleta', 'Brokeback Mountain', 'Babel'],
      bio: 'Músico, compositor y productor argentino. Doble ganador del Oscar por mejor banda sonora original.',
      roles: ['Compositor', 'Músico', 'Productor']
    },
    { 
      id: 9, 
      name: 'Mercedes Morán', 
      primaryRole: 'Actriz',
      birthYear: 1955,
      birthPlace: 'Concarán, San Luis, Argentina',
      filmCount: 48,
      awards: 25,
      notableFilms: ['La Ciénaga', 'Diarios de Motocicleta', 'Neruda', 'El Reino'],
      bio: 'Actriz argentina reconocida por su trabajo con directores como Lucrecia Martel y Pablo Trapero. Una de las actrices más respetadas del cine latinoamericano.',
      roles: ['Actriz', 'Productora']
    },
    { 
      id: 10, 
      name: 'Leonardo Sbaraglia', 
      primaryRole: 'Actor',
      birthYear: 1970,
      birthPlace: 'Buenos Aires, Argentina',
      filmCount: 56,
      awards: 29,
      notableFilms: ['Relatos Salvajes', 'Plata Quemada', 'Intacto', 'El Secreto de sus Ojos'],
      bio: 'Actor argentino con una sólida carrera internacional. Reconocido por su carisma y versatilidad en géneros diversos.',
      roles: ['Actor']
    },
    { 
      id: 11, 
      name: 'Lucrecia Martel', 
      primaryRole: 'Directora',
      birthYear: 1966,
      birthPlace: 'Salta, Argentina',
      filmCount: 6,
      awards: 42,
      notableFilms: ['La Ciénaga', 'La Niña Santa', 'La Mujer sin Cabeza', 'Zama'],
      bio: 'Directora y guionista argentina, una de las voces más importantes del nuevo cine argentino. Su obra es estudiada en universidades de todo el mundo.',
      roles: ['Directora', 'Guionista']
    },
    { 
      id: 12, 
      name: 'Diego Peretti', 
      primaryRole: 'Actor',
      birthYear: 1963,
      birthPlace: 'Buenos Aires, Argentina',
      filmCount: 41,
      awards: 19,
      notableFilms: ['Tiempo de Valientes', 'No Sos Vos, Soy Yo', 'Los Simuladores', 'El Robo del Siglo'],
      bio: 'Actor y psiquiatra argentino. Conocido por su trabajo en comedia y su capacidad para crear personajes memorables.',
      roles: ['Actor', 'Guionista']
    }
  ];

  const getDisplayedPeople = () => {
    let filteredPeople = people;
    
    if (filterRole !== 'all') {
      filteredPeople = people.filter(person => 
        person.roles.some(role => role.toLowerCase() === filterRole.toLowerCase())
      );
    }
    
    const start = (currentPage - 1) * itemsPerPage;
    const end = start + itemsPerPage;
    return filteredPeople.slice(start, end);
  };

  const handlePageChange = (page: number) => {
    setCurrentPage(page);
    window.scrollTo(0, 0);
  };

  const renderPagination = () => {
    const pages = [];
    const maxVisible = 5;
    
    if (totalPages <= maxVisible) {
      for (let i = 1; i <= totalPages; i++) {
        pages.push(i);
      }
    } else {
      if (currentPage <= 3) {
        pages.push(1, 2, 3, '...', totalPages - 1, totalPages);
      } else if (currentPage >= totalPages - 2) {
        pages.push(1, 2, '...', totalPages - 2, totalPages - 1, totalPages);
      } else {
        pages.push(1, '...', currentPage - 1, currentPage, currentPage + 1, '...', totalPages);
      }
    }
    
    return pages;
  };

  // Add styles
  const styles = `
    @import url('https://fonts.googleapis.com/css2?family=Crimson+Text:ital,wght@0,400;0,600;1,400&family=Inter:wght@300;400;500;600&display=swap');
    
    body {
      font-family: 'Inter', system-ui, sans-serif;
      font-weight: 300;
      letter-spacing: -0.01em;
      background-color: #0f1419;
      color: white;
    }
    
    .serif-heading {
      font-family: 'Crimson Text', Georgia, serif;
      font-weight: 600;
      letter-spacing: -0.02em;
    }
    
    .serif-body {
      font-family: 'Crimson Text', Georgia, serif;
      font-weight: 400;
      line-height: 1.7;
    }
    
    .poster-shadow {
      box-shadow: 0 20px 40px rgba(0,0,0,0.4);
    }
    
    .glass-effect {
      backdrop-filter: blur(10px);
      background: rgba(42, 42, 42, 0.8);
    }
    
    .gradient-text {
      background: linear-gradient(135deg, #3b82f6, #60a5fa);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
    }
    
    .person-placeholder {
      background: linear-gradient(135deg, #1a2332, #0f1419);
      border: 1px solid #374151;
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      text-align: center;
      position: relative;
      overflow: hidden;
    }
    
    .person-placeholder::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: linear-gradient(45deg, transparent 30%, rgba(59, 130, 246, 0.1) 50%, transparent 70%);
      animation: shimmer 2s infinite;
    }
    
    .animate-fade-in {
      animation: fadeIn 0.5s ease-in-out;
    }
    
    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(10px); }
      to { opacity: 1; transform: translateY(0); }
    }
    
    @keyframes shimmer {
      0% { transform: translateX(-100%); }
      100% { transform: translateX(100%); }
    }
    
    .bg-cine-dark { background-color: #0f1419; }
    .bg-cine-gray { background-color: #1a2332; }
    .text-cine-accent { color: #3b82f6; }
    .bg-cine-accent { background-color: #3b82f6; }
    .border-cine-accent { border-color: #3b82f6; }
    .hover\\:bg-cine-accent:hover { background-color: #3b82f6; }
    .hover\\:text-cine-accent:hover { color: #3b82f6; }
    .hover\\:border-cine-accent:hover { border-color: #3b82f6; }
    
    .role-badge {
      display: inline-flex;
      align-items: center;
      padding: 0.125rem 0.5rem;
      font-size: 0.75rem;
      font-weight: 500;
      border-radius: 9999px;
      background-color: rgba(59, 130, 246, 0.1);
      color: #60a5fa;
      border: 1px solid rgba(59, 130, 246, 0.2);
    }
  `;

  return (
    <>
      <style>{styles}</style>
      <div className="bg-cine-dark text-white min-h-screen">
        {/* Main Content */}
        <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
          {/* Page Header */}
          <div className="mb-8">
            <h2 className="serif-heading text-4xl text-white mb-2">Personas del Cine Argentino</h2>
            <p className="text-gray-400">Directores, actores, guionistas y técnicos que construyen nuestra industria</p>
          </div>

          {/* Filters and View Toggle */}
          <div className="glass-effect rounded-lg p-6 mb-8">
            <div className="flex flex-col lg:flex-row justify-between items-start lg:items-center gap-6">
              {/* Filters */}
              <div className="flex flex-wrap gap-3">
                <select 
                  value={filterRole}
                  onChange={(e) => setFilterRole(e.target.value)}
                  className="bg-cine-dark border border-gray-600 rounded-lg px-4 py-2 text-sm focus:outline-none focus:border-cine-accent transition-colors text-white"
                >
                  <option value="all">Todos los roles</option>
                  <option value="actor">Actores</option>
                  <option value="actriz">Actrices</option>
                  <option value="director">Directores</option>
                  <option value="guionista">Guionistas</option>
                  <option value="productor">Productores</option>
                  <option value="compositor">Compositores</option>
                </select>
                <select className="bg-cine-dark border border-gray-600 rounded-lg px-4 py-2 text-sm focus:outline-none focus:border-cine-accent transition-colors text-white">
                  <option>Ordenar por: Nombre (A-Z)</option>
                  <option>Nombre (Z-A)</option>
                  <option>Más películas</option>
                  <option>Más premios</option>
                  <option>Más reciente</option>
                </select>
                <select className="bg-cine-dark border border-gray-600 rounded-lg px-4 py-2 text-sm focus:outline-none focus:border-cine-accent transition-colors text-white">
                  <option>Todas las décadas</option>
                  <option>Activos en 2020s</option>
                  <option>Activos en 2010s</option>
                  <option>Activos en 2000s</option>
                  <option>Activos en 1990s</option>
                </select>
              </div>

              {/* View Toggle */}
              <div className="flex items-center bg-cine-dark rounded-lg p-1 border border-gray-600">
                <button 
                  onClick={() => setViewMode('compact')}
                  className={`px-4 py-2 text-sm font-medium rounded-md transition-all duration-200 ${
                    viewMode === 'compact' 
                      ? 'bg-cine-accent text-white' 
                      : 'text-gray-400 hover:text-white'
                  }`}
                >
                  Vista Compacta
                </button>
                <button 
                  onClick={() => setViewMode('detail')}
                  className={`px-4 py-2 text-sm font-medium rounded-md transition-all duration-200 ${
                    viewMode === 'detail' 
                      ? 'bg-cine-accent text-white' 
                      : 'text-gray-400 hover:text-white'
                  }`}
                >
                  Vista Detallada
                </button>
              </div>
            </div>
          </div>

          {/* People Display */}
          {viewMode === 'compact' ? (
            // Compact Grid View
            <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-6 gap-6 mb-12">
              {getDisplayedPeople().map((person, index) => (
                <div 
                  key={person.id} 
                  className="group cursor-pointer animate-fade-in text-center"
                  style={{animationDelay: `${index * 0.05}s`}}
                >
                  <div className="relative mb-3">
                    <div className="w-32 h-32 mx-auto rounded-full overflow-hidden transform group-hover:scale-105 transition-transform duration-300">
                      <div className="person-placeholder w-full h-full">
                        <svg className="w-12 h-12 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="1.5" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"/>
                        </svg>
                      </div>
                    </div>
                    {person.deathYear && (
                      <div className="absolute top-0 right-0 bg-black/70 text-white text-xs px-2 py-1 rounded-full">
                        {person.birthYear}-{person.deathYear}
                      </div>
                    )}
                  </div>
                  <div>
                    <h3 className="font-medium text-white line-clamp-1 group-hover:text-cine-accent transition-colors">{person.name}</h3>
                    <p className="text-sm text-gray-400">{person.primaryRole}</p>
                    <div className="flex items-center justify-center gap-2 mt-2 text-xs text-gray-500">
                      <span className="flex items-center gap-1">
                        <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M7 4v16M17 4v16M3 8h4m10 0h4M3 16h4m10 0h4"></path>
                        </svg>
                        {person.filmCount}
                      </span>
                      <span className="flex items-center gap-1">
                        <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M5 3v4M3 5h4M6 17v4m-2-2h4m5-16l2.286 6.857L21 12l-5.714 2.143L13 21l-2.286-6.857L5 12l5.714-2.143L13 3z"></path>
                        </svg>
                        {person.awards}
                      </span>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          ) : (
            // Detail List View
            <div className="space-y-4 mb-12">
              {getDisplayedPeople().map((person, index) => (
                <div 
                  key={person.id} 
                  className="glass-effect rounded-lg p-6 hover:border-cine-accent border border-transparent transition-all duration-300 cursor-pointer animate-fade-in"
                  style={{animationDelay: `${index * 0.05}s`}}
                >
                  <div className="flex flex-col md:flex-row gap-6">
                    <div className="w-full md:w-32 flex-shrink-0">
                      <div className="w-32 h-32 mx-auto md:mx-0 rounded-full overflow-hidden">
                        <div className="person-placeholder w-full h-full">
                          <svg className="w-12 h-12 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="1.5" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"/>
                          </svg>
                        </div>
                      </div>
                    </div>
                    <div className="flex-1 space-y-3">
                      <div>
                        <div className="flex items-start justify-between mb-2">
                          <div>
                            <h3 className="text-xl font-medium text-white hover:text-cine-accent transition-colors inline-block">{person.name}</h3>
                            <div className="flex flex-wrap gap-2 mt-1">
                              {person.roles.map((role, idx) => (
                                <span key={idx} className="role-badge">{role}</span>
                              ))}
                            </div>
                          </div>
                          <div className="flex items-center gap-4 text-sm text-gray-400">
                            <span className="flex items-center gap-1">
                              <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M7 4v16M17 4v16M3 8h4m10 0h4M3 16h4m10 0h4"></path>
                              </svg>
                              {person.filmCount} películas
                            </span>
                            <span className="flex items-center gap-1">
                              <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M5 3v4M3 5h4M6 17v4m-2-2h4m5-16l2.286 6.857L21 12l-5.714 2.143L13 21l-2.286-6.857L5 12l5.714-2.143L13 3z"></path>
                              </svg>
                              {person.awards} premios
                            </span>
                          </div>
                        </div>
                        <div className="flex flex-wrap gap-4 text-sm text-gray-400">
                          <span className="flex items-center gap-1">
                            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                            </svg>
                            {person.birthYear}{person.deathYear && ` - ${person.deathYear}`}
                          </span>
                          <span className="flex items-center gap-1">
                            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path>
                            </svg>
                            {person.birthPlace}
                          </span>
                        </div>
                      </div>
                      <p className="text-gray-300 serif-body">{person.bio}</p>
                      <div>
                        <h4 className="text-sm font-medium text-cine-accent mb-2">Películas destacadas:</h4>
                        <div className="flex flex-wrap gap-2">
                          {person.notableFilms.slice(0, 4).map((film, idx) => (
                            <span key={idx} className="text-sm bg-cine-dark px-3 py-1 rounded-full text-gray-300 hover:text-white hover:bg-cine-gray transition-colors cursor-pointer">
                              {film}
                            </span>
                          ))}
                          {person.notableFilms.length > 4 && (
                            <span className="text-sm text-gray-500">
                              +{person.notableFilms.length - 4} más
                            </span>
                          )}
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}

          {/* Pagination */}
          <div className="flex flex-col sm:flex-row justify-between items-center gap-6">
            <p className="text-sm text-gray-400">
              Mostrando <span className="font-medium text-white">{(currentPage - 1) * itemsPerPage + 1}</span> a{' '}
              <span className="font-medium text-white">
                {Math.min(currentPage * itemsPerPage, totalPeople)}
              </span>{' '}
              de <span className="font-medium text-white">{totalPeople}</span> personas
            </p>
            <nav className="flex items-center space-x-2">
              <button 
                onClick={() => handlePageChange(currentPage - 1)}
                disabled={currentPage === 1}
                className="px-3 py-2 text-sm font-medium text-gray-400 bg-cine-gray border border-gray-700 rounded-lg hover:bg-cine-dark hover:border-cine-accent transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
              >
                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 19l-7-7 7-7"></path>
                </svg>
              </button>
              
              {renderPagination().map((page, index) => (
                <React.Fragment key={index}>
                  {page === '...' ? (
                    <span className="px-2 text-gray-500">...</span>
                  ) : (
                    <button
                      onClick={() => handlePageChange(page as number)}
                      className={`px-4 py-2 text-sm font-medium rounded-lg transition-colors ${
                        currentPage === page
                          ? 'text-white bg-cine-accent'
                          : 'text-gray-300 bg-cine-gray border border-gray-700 hover:bg-cine-dark hover:border-cine-accent'
                      }`}
                    >
                      {page}
                    </button>
                  )}
                </React.Fragment>
              ))}
              
              <button 
                onClick={() => handlePageChange(currentPage + 1)}
                disabled={currentPage === totalPages}
                className="px-3 py-2 text-sm font-medium text-gray-400 bg-cine-gray border border-gray-700 rounded-lg hover:bg-cine-dark hover:border-cine-accent transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
              >
                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 5l7 7-7 7"></path>
                </svg>
              </button>
            </nav>
          </div>
        </main>
      </div>
    </>
  );
}

// ==================================================
// src/app/page.tsx
// ==================================================
'use client';

import { useState, useEffect } from 'react';
import Link from 'next/link';

export default function HomePage() {
  // Películas para el hero rotativo
  const peliculasHero = [
    { id: 1, titulo: "El Secreto de Sus Ojos", año: "2009", genero: "Drama, Thriller", director: "Juan José Campanella", imagen: "https://images.unsplash.com/photo-1518998053901-5348d3961a04?w=1024&fit=crop&auto=format" },
    { id: 2, titulo: "Relatos Salvajes", año: "2014", genero: "Comedia negra", director: "Damián Szifron", imagen: "https://images.unsplash.com/photo-1507003211169-0a1dd7506d40?w=1024&fit=crop&auto=format" },
    { id: 3, titulo: "Argentina, 1985", año: "2022", genero: "Drama histórico", director: "Santiago Mitre", imagen: "https://images.unsplash.com/photo-1519225421980-715cb0215aed?w=1024&fit=crop&auto=format" },
    { id: 4, titulo: "La Ciénaga", año: "2001", genero: "Drama", director: "Lucrecia Martel", imagen: "https://images.unsplash.com/photo-1489599328131-cdd7553e2ad1?w=1024&fit=crop&auto=format" },
    { id: 5, titulo: "Nueve Reinas", año: "2000", genero: "Thriller", director: "Fabián Bielinsky", imagen: "https://images.unsplash.com/photo-1556388158-158ea5ccacbd?w=1024&fit=crop&auto=format" },
  ];

  const [peliculaHeroIndex, setPeliculaHeroIndex] = useState(0);

  // Datos de ejemplo - en producción vendrían de tu API/DB
  const ultimosEstrenos = [
    { id: 1, titulo: "Argentina, 1985", fechaEstreno: "13 de octubre", director: "Santiago Mitre", genero: "Drama histórico" },
    { id: 2, titulo: "El Empleado y el Patrón", fechaEstreno: "28 de abril", director: "Manuel Nieto Zas", genero: "Drama" },
    { id: 3, titulo: "La Odisea de los Giles", fechaEstreno: "15 de agosto", director: "Sebastián Borensztein", genero: "Comedia dramática" },
    { id: 4, titulo: "El Ángel", fechaEstreno: "9 de agosto", director: "Luis Ortega", genero: "Drama criminal" },
    { id: 5, titulo: "Relatos Salvajes", fechaEstreno: "21 de agosto", director: "Damián Szifron", genero: "Comedia negra" },
    { id: 6, titulo: "Elsa y Fred", fechaEstreno: "26 de mayo", director: "Marcos Carnevale", genero: "Romance" },
  ];

  const proximosEstrenos = [
    { id: 1, titulo: "Título de la Película", fecha: "15 de julio", director: "Director Nombre", genero: "Drama" },
    { id: 2, titulo: "Otra Película", fecha: "22 de julio", director: "Otro Director", genero: "Comedia" },
    { id: 3, titulo: "Película Esperada", fecha: "5 de agosto", director: "Director Conocido", genero: "Thriller" },
    { id: 4, titulo: "Film Independiente", fecha: "12 de agosto", director: "Director Emergente", genero: "Drama social" },
    { id: 5, titulo: "Película de Acción", fecha: "19 de agosto", director: "Director Acción", genero: "Acción" },
    { id: 6, titulo: "Documental", fecha: "26 de agosto", director: "Documentalista", genero: "Documental" },
  ];

  const obituarios = [
    { id: 1, nombre: "Luis Brandoni", rol: "Actor", edad: "85 años", fecha: "5 de junio", imagen: "/images/persons/luis-brandoni.jpg" },
    { id: 2, nombre: "María Vaner", rol: "Actriz", edad: "90 años", fecha: "28 de mayo", imagen: "/images/persons/maria-vaner.jpg" },
  ];

  const efemerides = [
    { hace: "Hace 40 años", evento: 'se estrenaba "Camila" de María Luisa Bemberg', tipo: "pelicula", imagen: "/images/movies/camila.jpg" },
    { hace: "Hace 50 años", evento: "nacía el director Juan José Campanella", tipo: "persona", imagen: "/images/persons/juan-jose-campanella.jpg" },
  ];

  const ultimasPeliculas = [
    { id: 1, titulo: "La Ciénaga" },
    { id: 2, titulo: "El Aura" },
    { id: 3, titulo: "XXY" },
    { id: 4, titulo: "Historias Mínimas" },
    { id: 5, titulo: "Pizza, Birra, Faso" },
    { id: 6, titulo: "Mundo Grúa" },
    { id: 7, titulo: "Bolivia" },
    { id: 8, titulo: "Los Rubios" },
  ];

  const ultimasPersonas = [
    { id: 1, nombre: "Ricardo Darín", rol: "Actor" },
    { id: 2, nombre: "Lucrecia Martel", rol: "Directora" },
    { id: 3, nombre: "Guillermo Francella", rol: "Actor" },
    { id: 4, nombre: "Cecilia Roth", rol: "Actriz" },
    { id: 5, nombre: "Pablo Trapero", rol: "Director" },
    { id: 6, nombre: "Érica Rivas", rol: "Actriz" },
  ];

  // Ajustar gradientes al tamaño real de la imagen
  useEffect(() => {
    const adjustGradients = () => {
      const img = document.querySelector('.hero-image') as HTMLImageElement;
      const container = document.querySelector('.hero-image-wrapper') as HTMLElement;
      const gradientsContainer = document.querySelector('.hero-gradients-container') as HTMLElement;
      
      if (img && container && gradientsContainer && img.complete) {
        const containerWidth = container.offsetWidth;
        const containerHeight = container.offsetHeight;
        const imgAspectRatio = img.naturalWidth / img.naturalHeight;
        const containerAspectRatio = containerWidth / containerHeight;
        
        let displayWidth, displayHeight;
        
        if (imgAspectRatio > containerAspectRatio) {
          // Imagen más ancha - se ajusta por ancho
          displayWidth = containerWidth;
          displayHeight = containerWidth / imgAspectRatio;
        } else {
          // Imagen más alta - se ajusta por altura
          displayHeight = containerHeight;
          displayWidth = containerHeight * imgAspectRatio;
        }
        
        // Centrar y ajustar el contenedor de gradientes
        gradientsContainer.style.width = `${displayWidth}px`;
        gradientsContainer.style.height = `${displayHeight}px`;
        gradientsContainer.style.left = `${(containerWidth - displayWidth) / 2}px`;
        gradientsContainer.style.top = `${(containerHeight - displayHeight) / 2}px`;
      }
    };

    // Ajustar cuando la imagen cambie
    const img = document.querySelector('.hero-image') as HTMLImageElement;
    if (img) {
      img.addEventListener('load', adjustGradients);
      // También ajustar al cambiar el tamaño de la ventana
      window.addEventListener('resize', adjustGradients);
      
      // Ajustar inmediatamente si la imagen ya está cargada
      if (img.complete) {
        adjustGradients();
      }
    }

    return () => {
      if (img) {
        img.removeEventListener('load', adjustGradients);
      }
      window.removeEventListener('resize', adjustGradients);
    };
  }, []);

  // Cambiar imagen cada 8 segundos
  useEffect(() => {
    const imageUrls = peliculasHero.map(p => p.imagen);
    if (imageUrls.length > 0) {
      const interval = setInterval(() => {
        const randomIndex = Math.floor(Math.random() * imageUrls.length);
        const heroElement = document.querySelector('.hero-image');
        if (heroElement) {
          (heroElement as HTMLImageElement).src = imageUrls[randomIndex];
        }
      }, 8000);
      return () => clearInterval(interval);
    }
  }, [peliculasHero]);

  const peliculaHeroActual = peliculasHero[peliculaHeroIndex];

  return (
    <div className="bg-cine-dark text-white min-h-screen">
      {/* Movie Hero Background - idéntico al componente MovieHero pero sin contenido */}
      <div className="relative hero-background-container -mt-16 pt-16">
        {/* Wrapper de imagen con gradientes */}
        <div className="hero-image-wrapper">
          {peliculaHeroActual && (
            <>
              <img 
                src={peliculaHeroActual.imagen}
                alt="Imagen destacada del cine argentino"
                className="hero-image"
              />
              {/* Contenedor de gradientes que se ajusta a la imagen */}
              <div className="hero-gradients-container">
                <div className="hero-gradient-left"></div>
                <div className="hero-gradient-right"></div>
                <div className="hero-gradient-top"></div>
                <div className="hero-gradient-bottom-inner"></div>
                
                {/* Epígrafe con título y año - dentro del contenedor de gradientes */}
                <div className="absolute bottom-4 right-4 z-20">
                  <p className="text-xs text-gray-400 drop-shadow-lg">
                    {peliculaHeroActual.titulo} ({peliculaHeroActual.año})
                  </p>
                </div>
              </div>
            </>
          )}
        </div>
        
        {/* Gradientes globales del contenedor */}
        <div className="hero-gradient-bottom"></div>
        <div className="hero-vignette"></div>
      </div>

      {/* Main Content */}
      <div className="bg-cine-dark">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
          
          {/* Últimos Estrenos */}
          <section className="mb-12">
            <h2 className="serif-heading text-3xl mb-6 text-white">Últimos Estrenos</h2>
            <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-4">
              {ultimosEstrenos.map((pelicula) => (
                <Link
                  key={pelicula.id}
                  href={`/pelicula/${pelicula.id}`}
                  className="group cursor-pointer"
                >
                  <div className="aspect-[2/3] rounded-lg overflow-hidden mb-2 transform group-hover:scale-105 transition-transform poster-shadow relative">
                    <div className="movie-placeholder w-full h-full">
                      <svg className="w-12 h-12 text-cine-accent mb-2 opacity-60" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="1.5" d="M15.75 10.5l4.72-4.72a.75.75 0 011.28.53v11.38a.75.75 0 01-1.28.53l-4.72-4.72M4.5 18.75h9a2.25 2.25 0 002.25-2.25v-9a2.25 2.25 0 00-2.25-2.25h-9A2.25 2.25 0 002.25 7.5v9a2.25 2.25 0 002.25 2.25z"/>
                      </svg>
                      <p className="text-xs text-gray-400">Afiche</p>
                    </div>
                    {/* Badge de fecha sobre el afiche */}
                    <div className="absolute top-2 right-2 bg-black/80 backdrop-blur-sm px-2 py-1 rounded text-xs text-white">
                      {pelicula.fechaEstreno}
                    </div>
                  </div>
                  <h3 className="font-medium text-sm text-white line-clamp-2">{pelicula.titulo}</h3>
                  <p className="text-gray-400 text-xs">{pelicula.genero}</p>
                  <p className="text-gray-400 text-xs">Dir: {pelicula.director}</p>
                </Link>
              ))}
            </div>
            
            {/* Botón Ver Más */}
            <div className="mt-6 text-center">
              <Link 
                href="/estrenos" 
                className="inline-block border border-cine-accent text-cine-accent hover:bg-cine-accent hover:text-white px-6 py-2 rounded-lg font-medium transition-colors"
              >
                Ver más estrenos
              </Link>
            </div>
          </section>

          {/* Próximos Estrenos */}
          <section className="mb-12">
            <h2 className="serif-heading text-3xl mb-6 text-white">Próximos Estrenos</h2>
            <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-4">
              {proximosEstrenos.map((pelicula) => (
                <Link
                  key={pelicula.id}
                  href={`/pelicula/${pelicula.id}`}
                  className="group cursor-pointer"
                >
                  <div className="aspect-[2/3] rounded-lg overflow-hidden mb-2 transform group-hover:scale-105 transition-transform poster-shadow relative">
                    <div className="movie-placeholder w-full h-full">
                      <svg className="w-12 h-12 text-cine-accent mb-2 opacity-60" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="1.5" d="M15.75 10.5l4.72-4.72a.75.75 0 011.28.53v11.38a.75.75 0 01-1.28.53l-4.72-4.72M4.5 18.75h9a2.25 2.25 0 002.25-2.25v-9a2.25 2.25 0 00-2.25-2.25h-9A2.25 2.25 0 002.25 7.5v9a2.25 2.25 0 002.25 2.25z"/>
                      </svg>
                      <p className="text-xs text-gray-400">Afiche</p>
                    </div>
                    {/* Badge de fecha sobre el afiche */}
                    <div className="absolute top-2 right-2 bg-black/80 backdrop-blur-sm px-2 py-1 rounded text-xs text-white">
                      {pelicula.fecha}
                    </div>
                  </div>
                  <h3 className="font-medium text-sm text-white line-clamp-2">{pelicula.titulo}</h3>
                  <p className="text-gray-400 text-xs">{pelicula.genero}</p>
                  <p className="text-gray-400 text-xs">Dir: {pelicula.director}</p>
                </Link>
              ))}
            </div>
            
            {/* Botón Ver Más */}
            <div className="mt-6 text-center">
              <Link 
                href="/proximos-estrenos" 
                className="inline-block border border-cine-accent text-cine-accent hover:bg-cine-accent hover:text-white px-6 py-2 rounded-lg font-medium transition-colors"
              >
                Ver más próximos estrenos
              </Link>
            </div>
          </section>

          {/* Grid Layout para Obituarios y Efemérides */}
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-12">
            {/* Obituarios */}
            <section>
              <h2 className="serif-heading text-3xl mb-6 text-white">Obituarios</h2>
              <div className="glass-effect rounded-lg p-6">
                <div className="space-y-4">
                  {obituarios.map((persona) => (
                    <div key={persona.id} className="flex items-center space-x-4 pb-4 border-b border-gray-700 last:border-0 last:pb-0">
                      <div className="w-24 h-24 rounded-full flex-shrink-0 person-placeholder">
                        <svg className="w-12 h-12 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="1.5" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"/>
                        </svg>
                      </div>
                      <div className="flex-1">
                        <h3 className="font-medium text-white text-lg">{persona.nombre}</h3>
                        <p className="text-sm text-gray-400">{persona.rol} • {persona.edad}</p>
                        <p className="text-sm text-gray-500">{persona.fecha}</p>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
              {/* Botón Ver Más */}
              <div className="mt-6 text-center">
                <Link 
                  href="/obituarios" 
                  className="inline-block border border-cine-accent text-cine-accent hover:bg-cine-accent hover:text-white px-6 py-2 rounded-lg font-medium transition-colors"
                >
                  Ver más obituarios
                </Link>
              </div>
            </section>

            {/* Efemérides */}
            <section>
              <h2 className="serif-heading text-3xl mb-6 text-white">Efemérides del Día</h2>
              <div className="glass-effect rounded-lg p-6">
                <div className="space-y-4">
                  {efemerides.map((item, index) => (
                    <div key={index} className="flex items-center space-x-4 pb-4 border-b border-gray-700 last:border-0 last:pb-0">
                      {/* Contenedor de imagen con ancho fijo para alineación */}
                      <div className="w-24 h-24 flex items-center justify-center flex-shrink-0">
                        {item.tipo === "pelicula" ? (
                          <div className="w-16 h-24 rounded movie-placeholder">
                            <svg className="w-8 h-8 text-cine-accent opacity-60" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="1.5" d="M15.75 10.5l4.72-4.72a.75.75 0 011.28.53v11.38a.75.75 0 01-1.28.53l-4.72-4.72M4.5 18.75h9a2.25 2.25 0 002.25-2.25v-9a2.25 2.25 0 00-2.25-2.25h-9A2.25 2.25 0 002.25 7.5v9a2.25 2.25 0 002.25 2.25z"/>
                            </svg>
                          </div>
                        ) : (
                          <div className="w-24 h-24 rounded-full person-placeholder">
                            <svg className="w-12 h-12 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="1.5" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"/>
                            </svg>
                          </div>
                        )}
                      </div>
                      <div className="flex-1">
                        <h3 className="font-medium text-cine-accent text-lg">{item.hace}</h3>
                        <p className="text-sm mt-1 text-gray-300">... {item.evento}</p>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
              {/* Botón Ver Más */}
              <div className="mt-6 text-center">
                <Link 
                  href="/efemerides" 
                  className="inline-block border border-cine-accent text-cine-accent hover:bg-cine-accent hover:text-white px-6 py-2 rounded-lg font-medium transition-colors"
                >
                  Ver más efemérides
                </Link>
              </div>
            </section>
          </div>

          {/* Últimas Películas Ingresadas */}
          <section className="mb-12">
            <h2 className="serif-heading text-3xl mb-6 text-white">Últimas Películas Ingresadas</h2>
            <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-8 gap-3">
              {ultimasPeliculas.map((pelicula) => (
                <Link 
                  key={pelicula.id} 
                  href={`/pelicula/${pelicula.id}`} 
                  className="group cursor-pointer"
                >
                  <div className="aspect-[2/3] rounded overflow-hidden mb-1 transform group-hover:scale-105 transition-transform">
                    <div className="placeholder-small w-full h-full">
                      <svg className="w-6 h-6 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="1.5" d="M15.75 10.5l4.72-4.72a.75.75 0 011.28.53v11.38a.75.75 0 01-1.28.53l-4.72-4.72M4.5 18.75h9a2.25 2.25 0 002.25-2.25v-9a2.25 2.25 0 00-2.25-2.25h-9A2.25 2.25 0 002.25 7.5v9a2.25 2.25 0 002.25 2.25z"/>
                      </svg>
                    </div>
                  </div>
                  <h3 className="text-xs font-medium text-white truncate">{pelicula.titulo}</h3>
                </Link>
              ))}
            </div>
          </section>

          {/* Últimas Personas Ingresadas */}
          <section className="mb-12">
            <h2 className="serif-heading text-3xl mb-6 text-white">Últimas Personas Ingresadas</h2>
            <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-4">
              {ultimasPersonas.map((persona) => (
                <Link
                  key={persona.id}
                  href={`/persona/${persona.id}`}
                  className="text-center cursor-pointer group"
                >
                  <div className="w-24 h-24 mx-auto rounded-full overflow-hidden mb-2 person-placeholder">
                    <svg className="w-12 h-12 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="1.5" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"/>
                    </svg>
                  </div>
                  <h3 className="text-sm font-medium text-white group-hover:text-cine-accent transition-colors">{persona.nombre}</h3>
                  <p className="text-xs text-gray-400">{persona.rol}</p>
                </Link>
              ))}
            </div>
          </section>
        </div>
      </div>
    </div>
  );
}

// ==================================================
// src/app/peliculas/[slug]/page.tsx
// ==================================================
'use client';

import { useState, useEffect } from 'react';
import { TrailerSection } from "@/components/movies/TrailerSection";
import { MovieHero } from "@/components/movies/MovieHero";
import { CastSection } from "@/components/movies/CastSection";
import { CrewSection } from "@/components/movies/CrewSection";
import { MoviePoster } from "@/components/movies/MoviePoster";
import { MovieInfo } from "@/components/movies/MovieInfo";
import { MovieSidebar } from "@/components/movies/MovieSidebar";
import { ImageGallery } from "@/components/movies/ImageGallery";
import { SimilarMovies } from "@/components/movies/SimilarMovies";
import Head from 'next/head';

export default function MoviePage() {
  const [movieGallery, setMovieGallery] = useState<string[]>([]);
  const currentMovieId = 'relatos-salvajes';

  // Función para cargar imágenes desde la API
  const loadMovieImages = async (movieId: string) => {
    console.log(`🔍 Intentando cargar imágenes para: ${movieId}`);

    try {
      const response = await fetch(`/api/images/${movieId}`);
      console.log(`📡 Respuesta de la API:`, response.status);

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      console.log(`📦 Datos recibidos:`, data);

      if (data.images && data.images.length > 0) {
        // Optimizar URLs para resolución máxima de 1024px
        const images = data.images.map((img: any) => {
          let url = img.url;
          // Si es de Unsplash, limitar a 1024px de ancho máximo
          if (url.includes('unsplash.com')) {
            url = url.replace(/w=\d+/, 'w=1024').replace(/h=\d+/, '');
            if (!url.includes('w=')) {
              url += url.includes('?') ? '&w=1024&fit=crop&auto=format' : '?w=1024&fit=crop&auto=format';
            }
          }
          return url;
        });

        setMovieGallery(images);
        console.log(`✅ Cargadas ${data.count} imágenes optimizadas a 1024px:`, images);
      } else {
        console.log('⚠️ No se encontraron imágenes, usando fallback');
        setMovieGallery(getFallbackImages());
      }
    } catch (error) {
      console.error('❌ Error cargando imágenes:', error);
      setMovieGallery(getFallbackImages());
    }
  };

  // Función para obtener imágenes de fallback optimizadas
  const getFallbackImages = () => [
    'https://images.unsplash.com/photo-1518998053901-5348d3961a04?w=1024&fit=crop&auto=format',
    'https://images.unsplash.com/photo-1507003211169-0a1dd7506d40?w=1024&fit=crop&auto=format',
    'https://images.unsplash.com/photo-1519225421980-715cb0215aed?w=1024&fit=crop&auto=format',
    'https://images.unsplash.com/photo-1489599328131-cdd7553e2ad1?w=1024&fit=crop&auto=format',
    'https://images.unsplash.com/photo-1556388158-158ea5ccacbd?w=1024&fit=crop&auto=format'
  ];

  // Cargar imágenes al montar el componente
  useEffect(() => {
    loadMovieImages(currentMovieId);
  }, []);
  //
  return (
    <>
      <Head>
        <title>Relatos Salvajes - cinenacional.com</title>
        <meta name="description" content="Seis relatos que alternan entre la comedia y el drama, que exploran los temas de la venganza, el amor y la vulnerabilidad del ser humano en situaciones extraordinarias." />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
      </Head>

      <div className="bg-cine-dark text-white min-h-screen">


        {/* Movie Hero Background - ACTUALIZADO */}
        <MovieHero
          title="Relatos Salvajes"
          year={2014}
          duration={122}
          genres={["Comedia Negra", "Drama"]}
          rating={8.1}
          gallery={movieGallery}
        />

        {/* Movie Content */}
        <div className="bg-cine-dark">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
              {/* Poster */}
              <div className="lg:col-span-1">
                <MoviePoster
                  title="Relatos Salvajes"
                // imageUrl={movieData.posterUrl} // Cuando tengas la URL del poster
                />
              </div>

              {/* Movie Info */}
              <div className="lg:col-span-2">
                <MovieInfo
                  synopsis="Seis relatos que alternan entre la comedia y el drama, que exploran los temas de la venganza, el amor y la vulnerabilidad del ser humano en situaciones extraordinarias. Una película que retrata la condición humana cuando es llevada al límite."
                  director={{
                    name: "Damián Szifron"
                    // image: "url-de-la-imagen" // cuando tengas la imagen
                  }}
                  trailerUrl="https://youtu.be/3BxE9osMt5U?si=mLEH7dp-ll7ZJsXG"
                  onTrailerClick={() => {
                    // Aquí puedes hacer scroll a la sección del trailer
                    // o abrir un modal con el video
                    const trailerSection = document.querySelector('#trailer-section');
                    trailerSection?.scrollIntoView({ behavior: 'smooth' });
                  }}
                  onShareClick={() => {
                    // Lógica para compartir
                    if (navigator.share) {
                      navigator.share({
                        title: 'Relatos Salvajes',
                        text: 'Mira esta película argentina increíble',
                        url: window.location.href
                      });
                    }
                  }}
                />
              </div>
            </div>
          </div>
        </div>

        {/* Technical Info */}
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
            {/* Cast & Crew */}
            <div className="lg:col-span-2">
              <h2 className="serif-heading text-2xl mb-6 text-white">Reparto y Equipo</h2>

              {/* Cast */}
              <CastSection
                mainCast={[
                  { name: 'Ricardo Darín', character: 'Diego' },
                  { name: 'Érica Rivas', character: 'Romina' },
                  { name: 'Leonardo Sbaraglia', character: 'Cuenca' }
                ]} fullCast={[
                  { name: 'Oscar Martínez', character: 'Mauricio' },
                  { name: 'Julieta Zylberberg', character: 'Isabel' },
                  { name: 'Rita Cortese', character: 'Cocinera' },
                  { name: 'Darío Grandinetti', character: 'Ariel' },
                  { name: 'María Marull', character: 'Victoria' },
                  { name: 'Mónica Villa', character: 'Novia' },
                  { name: 'Diego Starosta', character: 'Novio' },
                  { name: 'Nancy Dupláa', character: 'Mujer en ruta' },
                  { name: 'Cesar Bordón', character: 'Hombre en ruta' },
                  { name: 'Walter Donado', character: 'Piloto' }
                ]}
              />

              {/* Crew */}
              <CrewSection
                basicCrew={{
                  "Dirección": [
                    { name: "Damián Szifron", role: "Director" }
                  ],
                  "Guión": [
                    { name: "Damián Szifron", role: "Guionista" }
                  ],
                  "Fotografía": [
                    { name: "Javier Juliá", role: "Director de fotografía" }
                  ],
                  "Música": [
                    { name: "Gustavo Santaolalla", role: "Compositor" }
                  ],
                  "Montaje": [
                    { name: "Pablo Barbieri", role: "Editor" },
                    { name: "Damián Szifrón", role: "Editor" }
                  ],
                  "Dirección de Arte": [
                    { name: "Clara Notari", role: "Dirección de arte" }
                  ],
                  "Producción": [
                    { name: "Hugo Sigman", role: "Producción" },
                    { name: "Matías Mosteirín", role: "Producción" },
                    { name: "Esther García", role: "Producción" },
                    { name: "Pedro Almodóvar", role: "Producción" },
                    { name: "Agustín Almodóvar", role: "Producción" }
                  ]
                }}
                fullCrew={{
                  "Dirección": [
                    { name: "Damián Szifrón", role: "Director" },
                    { name: "Cristian Trebotic", role: "Asistente de Dirección" },
                    { name: "Natalia Urruty", role: "Asistente de Dirección" },
                    { name: "Javier Braier", role: "Dirección de casting" },
                    { name: "Lorena Lisotti", role: "Continuista" },
                    { name: "Marcello Pozzo", role: "Ayudante de dirección" },
                    { name: "Agustín Arévalo", role: "2do ayudante de dirección" },
                    { name: "Lucila Frank", role: "Refuerzo de dirección" },
                    { name: "Iair Said", role: "Asistente de casting" },
                    { name: "Katia Szechtman", role: "Asistente de casting" }
                  ],
                  "Guión": [
                    { name: "Damián Szifron", role: "Guionista" }
                  ],
                  "Fotografía": [
                    { name: "Javier Juliá", role: "Director de fotografía" }
                  ],
                  "Música": [
                    { name: "Gustavo Santaolalla", role: "Compositor" }
                  ],
                  "Producción": [
                    { name: "Matías Mosteirín", role: "Producción" },
                    { name: "Esther García", role: "Producción" },
                    { name: "Hugo Sigman", role: "Producción" },
                    { name: "Pedro Almodóvar", role: "Producción" },
                    { name: "Agustín Almodóvar", role: "Producción" },
                    { name: "Claudio F. Belocopitt", role: "Productor asociado" },
                    { name: "Gerardo Rozín", role: "Productor asociado" },
                    { name: "Leticia Cristi", role: "Producción ejecutiva" },
                    { name: "Pola Zito", role: "Producción ejecutiva" },
                    { name: "Analía Castro", role: "Jefe de Producción" },
                    { name: "Axel Kuschevatzky", role: "Coproducción" },
                    { name: "Carolina Agunin", role: "Coordinación de producción" },
                    { name: "Covadonga R. Gamboa", role: "Jefe de Producción" }
                  ],
                  "Montaje": [
                    { name: "Pablo Barbieri", role: "Editor" },
                    { name: "Damián Szifrón", role: "Editor" }
                  ],
                  "Dirección de Arte": [
                    { name: "Clara Notari", role: "Dirección de arte" },
                    { name: "Ruth Fischerman", role: "Vestuario" },
                    { name: "Marisa Amenta", role: "Maquillaje" }
                  ]
                }}
              />
            </div>

            {/* Sidebar Info */}
            <div className="lg:col-span-1">
              <MovieSidebar
                year={2014}
                duration={122}
                country="Argentina"
                rating="Solo apta para mayor de 16 años"
                format="Color | Sonora"
                genres={["Comedia Negra", "Drama", "Thriller"]}
                themes={[
                  "Accidente automovilístico",
                  "Aviones",
                  "Casamiento",
                  "Cocinero",
                  "Ruta"
                ]}
              />
            </div>
          </div>
        </div>

        {/* Image Gallery */}

        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12 border-t border-gray-800">
          <h2 className="serif-heading text-2xl text-white mb-6">Galería de Imágenes</h2>
          <ImageGallery
            images={movieGallery}
            movieTitle="Relatos Salvajes"
          />
        </div>
        {/* Trailer */}
        <TrailerSection
          trailerUrl="https://youtu.be/3BxE9osMt5U?si=mLEH7dp-ll7ZJsXG"
          movieTitle="Relatos Salvajes"
        />
        {/* Similar Movies */}
        <SimilarMovies
          movies={[
            {
              title: 'El Secreto de sus Ojos',
              year: '2009',
              slug: 'el-secreto-de-sus-ojos'
            },
            {
              title: 'Nueve Reinas',
              year: '2000',
              slug: 'nueve-reinas'
            },
            {
              title: 'El Hijo de la Novia',
              year: '2001',
              slug: 'el-hijo-de-la-novia'
            },
            {
              title: 'La Historia Oficial',
              year: '1985',
              slug: 'la-historia-oficial'
            }
          ]}
        />
      </div>
    </>
  );
}

// ==================================================
// src/app/personas/[slug]/page.tsx
// ==================================================
'use client';

import { useState, useEffect } from 'react';
import Head from 'next/head';

interface FilmographyItem {
  id: string;
  title: string;
  year: number;
  role?: string;
  genre?: string;
  award?: {
    type: 'oscar' | 'goya' | 'other';
    text: string;
  };
}

interface PersonData {
  id: string;
  name: string;
  birthDate: string;
  birthPlace: string;
  bio: string;
  photoUrl?: string;
  stats: {
    totalMovies: number;
    asDirector: number;
    awards: number;
  };
  filmography: {
    director: FilmographyItem[];
    writer: FilmographyItem[];
    assistantDirector: FilmographyItem[];
    production: FilmographyItem[];
    other: FilmographyItem[];
  };
  awards: Array<{
    name: string;
    description: string;
    type: 'gold' | 'blue' | 'green';
  }>;
}

export default function PersonPage() {
  const [activeTab, setActiveTab] = useState<keyof PersonData['filmography']>('director');
  const [showAllFilmography, setShowAllFilmography] = useState(false);
  
  // Datos de ejemplo para Adolfo Aristarain
  const personData: PersonData = {
    id: 'adolfo-aristarain',
    name: 'Adolfo Aristarain',
    birthDate: '19 de octubre de 1943',
    birthPlace: 'Buenos Aires, Argentina',
    bio: 'Director, guionista y productor argentino reconocido como uno de los cineastas más importantes del cine latinoamericano. Sus películas se caracterizan por su profundidad narrativa y su compromiso con temáticas sociales.',
    photoUrl: '/images/persons/adolfo-aristarain.jpg',
    stats: {
      totalMovies: 47,
      asDirector: 15,
      awards: 23
    },
    filmography: {
      director: [
        { id: '1', title: 'La suerte está echada', year: 2013, genre: 'Drama' },
        { id: '2', title: 'Adiós, querida Luna', year: 2011, genre: 'Drama' },
        { id: '3', title: 'Valentín', year: 2008, genre: 'Drama' },
        { id: '4', title: 'Roma', year: 2004, genre: 'Drama' },
        { id: '5', title: 'Lugares comunes', year: 2002, genre: 'Drama', award: { type: 'goya', text: 'Premio Goya' } },
        { id: '6', title: 'Martín (Hache)', year: 1997, genre: 'Drama', award: { type: 'goya', text: 'Premio Goya' } },
        { id: '7', title: 'Un lugar en el mundo', year: 1992, genre: 'Drama', award: { type: 'oscar', text: 'Nominada al Oscar' } },
        { id: '8', title: 'Últimos días de la víctima', year: 1987, genre: 'Thriller' },
        { id: '9', title: 'Tiempo de revancha', year: 1985, genre: 'Thriller' },
        { id: '10', title: 'La playa del amor', year: 1980, genre: 'Drama' },
      ],
      writer: [
        { id: '11', title: 'La suerte está echada', year: 2013 },
        { id: '12', title: 'Roma', year: 2004 },
        { id: '13', title: 'Lugares comunes', year: 2002 },
        { id: '14', title: 'Martín (Hache)', year: 1997 },
        { id: '15', title: 'Un lugar en el mundo', year: 1992 },
        { id: '16', title: 'Tiempo de revancha', year: 1985 },
      ],
      assistantDirector: [
        { id: '17', title: 'La tregua', year: 1974 },
        { id: '18', title: 'Los golpes bajos', year: 1974 },
        { id: '19', title: 'La Patagonia rebelde', year: 1974 },
        { id: '20', title: 'Quebracho', year: 1974 },
      ],
      production: [
        { id: '21', title: 'Roma', year: 2004 },
        { id: '22', title: 'Lugares comunes', year: 2002 },
      ],
      other: [
        { id: '23', title: 'El amor es una mujer gorda', year: 1987, role: 'Montaje' },
        { id: '24', title: 'Crecer de golpe', year: 1977, role: 'Ayudante de dirección' },
      ]
    },
    awards: [
      {
        name: 'Premio Goya',
        description: 'Mejor Película Iberoamericana por "Martín (Hache)" (1998)',
        type: 'gold'
      },
      {
        name: 'Nominación al Oscar',
        description: 'Mejor Película Extranjera por "Un lugar en el mundo" (1993)',
        type: 'blue'
      },
      {
        name: 'Festival de San Sebastián',
        description: 'Concha de Plata al Mejor Director (2002)',
        type: 'green'
      }
    ]
  };

  const tabLabels = {
    director: 'Dirección',
    writer: 'Guión',
    assistantDirector: 'Asistente de Dirección',
    production: 'Producción',
    other: 'Otros Roles'
  };

  const getFilmographyToShow = () => {
    const items = personData.filmography[activeTab];
    return showAllFilmography ? items : items.slice(0, 10);
  };

  return (
    <>
      <Head>
        <title>{personData.name} - CineNacional</title>
        <meta name="description" content={personData.bio} />
      </Head>

      <div className="bg-cine-dark text-white min-h-screen">

        {/* Person Header Section */}
        <section className="relative bg-gradient-to-b from-cine-gray to-cine-dark py-12">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div className="flex flex-col md:flex-row gap-8 items-start">
              {/* Portrait */}
              <div className="flex-shrink-0">
                <div className="relative">
                  <div className="w-48 h-64 md:w-64 md:h-80 rounded-lg overflow-hidden poster-shadow">
                    {personData.photoUrl ? (
                      <img 
                        src={personData.photoUrl} 
                        alt={personData.name}
                        className="w-full h-full object-cover"
                      />
                    ) : (
                      <div className="person-placeholder w-full h-full">
                        <svg className="w-16 h-16 text-gray-500 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="1.5" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"/>
                        </svg>
                        <p className="text-sm text-gray-400">Foto no disponible</p>
                      </div>
                    )}
                  </div>
                </div>
              </div>
              
              {/* Person Info */}
              <div className="flex-grow">
                <h1 className="serif-heading text-5xl md:text-6xl mb-4 text-white">{personData.name}</h1>
                
                <div className="space-y-3 text-gray-300">
                  <div className="text-sm">
                    <div>
                      <span className="text-gray-500">Nació el </span>
                      <span>{personData.birthDate}</span>
                      <span className="text-gray-500"> en </span>
                      <span>{personData.birthPlace}</span>
                    </div>
                  </div>
                  
                  <div className="mt-6">
                    <p className="text-gray-300 leading-relaxed max-w-3xl serif-body">
                      {personData.bio}
                    </p>
                  </div>

                  {/* Quick Stats */}
                  <div className="flex gap-8 mt-8">
                    <div className="text-center">
                      <div className="text-3xl font-light text-cine-accent">{personData.stats.totalMovies}</div>
                      <div className="text-xs text-gray-500 uppercase tracking-wider mt-1">Películas</div>
                    </div>
                    <div className="text-center">
                      <div className="text-3xl font-light text-cine-accent">{personData.stats.asDirector}</div>
                      <div className="text-xs text-gray-500 uppercase tracking-wider mt-1">Como Director</div>
                    </div>
                    <div className="text-center">
                      <div className="text-3xl font-light text-cine-accent">{personData.stats.awards}</div>
                      <div className="text-xs text-gray-500 uppercase tracking-wider mt-1">Premios</div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </section>

        {/* Filmography Section */}
        <section className="py-12">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            {/* Navigation Tabs */}
            <div className="border-b border-gray-700 mb-8">
              <nav className="flex space-x-8 overflow-x-auto">
                {Object.entries(tabLabels).map(([key, label]) => {
                  const count = personData.filmography[key as keyof PersonData['filmography']].length;
                  return (
                    <button
                      key={key}
                      onClick={() => setActiveTab(key as keyof PersonData['filmography'])}
                      className={`pb-4 px-1 border-b-2 font-medium text-sm whitespace-nowrap transition-colors ${
                        activeTab === key
                          ? 'border-cine-accent text-white'
                          : 'border-transparent text-gray-400 hover:text-white'
                      }`}
                    >
                      {label} ({count})
                    </button>
                  );
                })}
              </nav>
            </div>

            {/* Filmography Grid */}
            <div className="space-y-1">
              <h2 className="text-2xl font-light mb-6 text-white">
                Filmografía como {tabLabels[activeTab]}
              </h2>
              
              {/* Film Items */}
              <div className="divide-y divide-gray-800/50">
                {getFilmographyToShow().map((film) => (
                  <div key={film.id} className="py-4 hover:bg-cine-gray/30 transition-colors group">
                    <div className="flex items-center gap-4">
                      <span className="text-gray-500 text-sm w-12 text-left">{film.year}</span>
                      <div className="flex-grow">
                        <a href={`/pelicula/${film.id}`} className="hover-line text-lg text-white">
                          {film.title}
                        </a>
                        {film.award && (
                          <span className={`ml-2 text-xs px-2 py-0.5 rounded ${
                            film.award.type === 'oscar' 
                              ? 'bg-blue-900/30 text-cine-gold' 
                              : film.award.type === 'goya'
                              ? 'bg-yellow-900/30 text-yellow-400'
                              : 'bg-green-900/30 text-green-400'
                          }`}>
                            {film.award.text}
                          </span>
                        )}
                        {film.role && (
                          <span className="ml-2 text-xs text-gray-500">({film.role})</span>
                        )}
                      </div>
                      <div className="opacity-0 group-hover:opacity-100 transition-opacity">
                        <span className="text-xs text-gray-500">{film.genre || 'Drama'}</span>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>

            {/* Show More Button */}
            {personData.filmography[activeTab].length > 10 && (
              <div className="mt-8 text-center">
                <button 
                  onClick={() => setShowAllFilmography(!showAllFilmography)}
                  className="text-cine-accent hover:text-cine-gold text-sm font-medium transition-colors flex items-center space-x-2 mx-auto"
                >
                  <span>{showAllFilmography ? 'Ver menos' : 'Ver filmografía completa'}</span>
                  <svg 
                    className={`w-4 h-4 transition-transform duration-200 ${showAllFilmography ? 'rotate-180' : ''}`} 
                    fill="none" 
                    stroke="currentColor" 
                    viewBox="0 0 24 24"
                  >
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M19 9l-7 7-7-7" />
                  </svg>
                </button>
              </div>
            )}
          </div>
        </section>

        {/* Awards Section */}
        <section className="py-12 bg-cine-gray/30">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <h2 className="text-2xl font-light mb-8 text-white">Premios y Reconocimientos</h2>
            
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {personData.awards.map((award, index) => (
                <div key={index} className="bg-cine-gray/50 rounded-lg p-6 hover:bg-cine-gray/70 transition-colors">
                  <div className={`mb-3 ${
                    award.type === 'gold' ? 'text-yellow-400' : 
                    award.type === 'blue' ? 'text-cine-accent' : 
                    'text-green-400'
                  }`}>
                    <svg className="w-8 h-8" fill="currentColor" viewBox="0 0 20 20">
                      <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"/>
                    </svg>
                  </div>
                  <h3 className="font-medium text-white mb-1">{award.name}</h3>
                  <p className="text-sm text-gray-400">{award.description}</p>
                </div>
              ))}
            </div>
          </div>
        </section>

        {/* Related People Section */}
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12 border-t border-gray-800">
          <h2 className="serif-heading text-2xl text-white mb-6">Personas Relacionadas</h2>
          <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-4">
            {[
              { name: 'Ricardo Darín', role: 'Actor' },
              { name: 'Damián Szifrón', role: 'Director' },
              { name: 'Juan José Campanella', role: 'Director' },
              { name: 'Cecilia Roth', role: 'Actriz' }
            ].map((person, index) => (
              <div key={index} className="group cursor-pointer text-center">
                <div className="w-20 h-20 rounded-full person-placeholder mx-auto mb-2 transform group-hover:scale-105 transition-transform">
                  <svg className="w-8 h-8 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="1.5" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"/>
                  </svg>
                </div>
                <p className="text-sm font-medium text-white group-hover:text-cine-accent transition-colors">{person.name}</p>
                <p className="text-xs text-gray-400">{person.role}</p>
              </div>
            ))}
          </div>
        </div>
      </div>

      <style jsx>{`
        .hover-line {
          position: relative;
          display: inline-block;
        }
        .hover-line::after {
          content: '';
          position: absolute;
          width: 0;
          height: 1px;
          bottom: -2px;
          left: 0;
          background-color: #60a5fa;
          transition: width 0.3s ease;
        }
        .hover-line:hover::after {
          width: 100%;
        }
        .gradient-text {
          background: linear-gradient(135deg, #3b82f6, #60a5fa);
          -webkit-background-clip: text;
          -webkit-text-fill-color: transparent;
          background-clip: text;
        }
        .person-placeholder {
          background: linear-gradient(135deg, #1a2332, #0f1419);
          border: 1px solid #374151;
          display: flex;
          flex-direction: column;
          justify-content: center;
          align-items: center;
          text-align: center;
          position: relative;
          overflow: hidden;
        }
        .poster-shadow {
          box-shadow: 0 20px 40px rgba(0,0,0,0.4);
        }
        .glass-effect {
          backdrop-filter: blur(10px);
          background: rgba(42, 42, 42, 0.8);
        }
      `}</style>
    </>
  );
}

// ==================================================
// src/app/test-env/page.tsx
// ==================================================
// src/app/test-env/page.tsx
export default function TestEnv() {
  return (
    <div className="p-8">
      <h1 className="text-2xl mb-4">Variables de Cloudinary</h1>
      <pre className="bg-gray-100 p-4 rounded">
        {JSON.stringify({
          CLOUD_NAME: process.env.NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME || 'NO DEFINIDO',
          API_KEY: process.env.NEXT_PUBLIC_CLOUDINARY_API_KEY ? 'DEFINIDO' : 'NO DEFINIDO',
          HAS_SECRET: process.env.CLOUDINARY_API_SECRET ? 'SI' : 'NO'
        }, null, 2)}
      </pre>
    </div>
  )
}

// ==================================================
// src/components/admin/AlternativeTitlesManager.tsx
// ==================================================
'use client'

import { useState, useEffect } from 'react'
import { Plus, X, Edit2, Save } from 'lucide-react'

interface AlternativeTitle {
  id?: number
  title: string
  description?: string
}

interface AlternativeTitlesManagerProps {
  onChange: (titles: AlternativeTitle[]) => void
  initialTitles?: AlternativeTitle[]
}

export default function AlternativeTitlesManager({ 
  onChange, 
  initialTitles = [] 
}: AlternativeTitlesManagerProps) {
  const [titles, setTitles] = useState<AlternativeTitle[]>(initialTitles)
  const [showForm, setShowForm] = useState(false)
  const [editingIndex, setEditingIndex] = useState<number | null>(null)
  const [currentTitle, setCurrentTitle] = useState<AlternativeTitle>({
    title: '',
    description: ''
  })

  useEffect(() => {
    onChange(titles)
  }, [titles])

  const handleAdd = () => {
    if (!currentTitle.title.trim()) return
    
    if (editingIndex !== null) {
      const updatedTitles = [...titles]
      updatedTitles[editingIndex] = currentTitle
      setTitles(updatedTitles)
      setEditingIndex(null)
    } else {
      setTitles([...titles, currentTitle])
    }
    
    setCurrentTitle({ title: '', description: '' })
    setShowForm(false)
  }

  const handleEdit = (index: number) => {
    setCurrentTitle(titles[index])
    setEditingIndex(index)
    setShowForm(true)
  }

  const handleDelete = (index: number) => {
    setTitles(titles.filter((_, i) => i !== index))
  }

  const handleCancel = () => {
    setCurrentTitle({ title: '', description: '' })
    setEditingIndex(null)
    setShowForm(false)
  }

  return (
    <div className="space-y-4">
      <div className="flex items-center justify-between">
        <h3 className="text-lg font-medium text-gray-900">Títulos Alternativos</h3>
        {!showForm && (
          <button
            type="button"
            onClick={() => setShowForm(true)}
            className="inline-flex items-center gap-2 px-3 py-1.5 text-sm bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
          >
            <Plus className="w-4 h-4" />
            Agregar Título
          </button>
        )}
      </div>

      {/* Lista de títulos */}
      {titles.length > 0 && (
        <div className="space-y-2">
          {titles.map((title, index) => (
            <div key={index} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
              <div className="flex-1">
                <p className="font-medium text-gray-900">{title.title}</p>
                {title.description && (
                  <p className="text-sm text-gray-600 mt-1">{title.description}</p>
                )}
              </div>
              <div className="flex items-center gap-2">
                <button
                  type="button"
                  onClick={() => handleEdit(index)}
                  className="text-blue-600 hover:text-blue-800 p-1"
                  title="Editar"
                >
                  <Edit2 className="w-4 h-4" />
                </button>
                <button
                  type="button"
                  onClick={() => handleDelete(index)}
                  className="text-red-600 hover:text-red-800 p-1"
                  title="Eliminar"
                >
                  <X className="w-4 h-4" />
                </button>
              </div>
            </div>
          ))}
        </div>
      )}

      {/* Formulario */}
      {showForm && (
        <div className="border border-gray-200 rounded-lg p-4 space-y-4 bg-gray-50">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Título alternativo *
            </label>
            <input
              type="text"
              value={currentTitle.title}
              onChange={(e) => setCurrentTitle({ ...currentTitle, title: e.target.value })}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
              placeholder="Ej: Wild Tales"
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Descripción (opcional)
            </label>
            <input
              type="text"
              value={currentTitle.description || ''}
              onChange={(e) => setCurrentTitle({ ...currentTitle, description: e.target.value })}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
              placeholder="Ej: Título de rodaje, Título internacional, Título abreviado, etc."
            />
          </div>

          <div className="flex justify-end gap-3">
            <button
              type="button"
              onClick={handleCancel}
              className="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50"
            >
              Cancelar
            </button>
            <button
              type="button"
              onClick={handleAdd}
              disabled={!currentTitle.title.trim()}
              className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-2"
            >
              <Save className="w-4 h-4" />
              {editingIndex !== null ? 'Actualizar' : 'Agregar'}
            </button>
          </div>
        </div>
      )}

      {titles.length === 0 && !showForm && (
        <p className="text-sm text-gray-500 italic">No hay títulos alternativos agregados</p>
      )}
    </div>
  )
}

// ==================================================
// src/components/admin/CloudinaryGallery.tsx
// ==================================================
// src/components/admin/CloudinaryGallery.tsx
'use client'

import { CldUploadWidget } from 'next-cloudinary'
import { useState } from 'react'
import { Plus, X } from 'lucide-react'
import { CloudinaryImage } from '@/components/movies/CloudinaryImage'

interface CloudinaryGalleryProps {
  movieId: number
  images: Array<{
    url: string
    publicId?: string
  }>
  onChange: (images: any[]) => void
}

export function CloudinaryGallery({ movieId, images, onChange }: CloudinaryGalleryProps) {
  const [galleryImages, setGalleryImages] = useState(images)

  const handleUploadSuccess = (result: any) => {
    const newImage = {
      url: result.info.secure_url,
      publicId: result.info.public_id,
      type: 'STILL'
    }
    
    const updated = [...galleryImages, newImage]
    setGalleryImages(updated)
    onChange(updated)
  }

  const handleRemove = (index: number) => {
    const updated = galleryImages.filter((_, i) => i !== index)
    setGalleryImages(updated)
    onChange(updated)
  }

  return (
    <div>
      <h3 className="text-lg font-medium text-gray-900 mb-4">
        Galería de Imágenes
      </h3>
      
      <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
        {galleryImages.map((image, index) => (
          <div key={index} className="relative group">
            <CloudinaryImage
              src={image.url}
              alt={`Imagen ${index + 1}`}
              width={300}
              height={200}
              className="w-full aspect-video object-cover rounded-lg"
            />
            <button
              type="button"
              onClick={() => handleRemove(index)}
              className="absolute top-2 right-2 p-1 bg-red-600 text-white rounded-full opacity-0 group-hover:opacity-100 transition-opacity"
            >
              <X className="w-4 h-4" />
            </button>
          </div>
        ))}
        
        <CldUploadWidget
          uploadPreset="cinenacional-unsigned"
          options={{
            folder: `cinenacional/gallery/${movieId}`,
            sources: ['local', 'url'],
            multiple: true,
            maxFiles: 10
          }}
          onUpload={handleUploadSuccess}
        >
          {({ open }) => (
            <button
              type="button"
              onClick={() => open()}
              className="aspect-video border-2 border-dashed border-gray-300 rounded-lg flex items-center justify-center hover:border-gray-400 transition-colors"
            >
              <div className="text-center">
                <Plus className="w-8 h-8 text-gray-400 mx-auto" />
                <span className="text-sm text-gray-500 mt-2 block">
                  Agregar imágenes
                </span>
              </div>
            </button>
          )}
        </CldUploadWidget>
      </div>
    </div>
  )
}

// ==================================================
// src/components/admin/CloudinaryUploadWidget.tsx
// ==================================================
// src/components/admin/CloudinaryUploadWidget.tsx
'use client'

import { CldUploadWidget } from 'next-cloudinary'
import { useState, useEffect } from 'react'
import { Upload, X, ImageIcon } from 'lucide-react'
import Image from 'next/image'
import { toast } from 'react-hot-toast'

declare global {
  interface Window {
    cloudinaryWidget: any;
  }
}

interface CloudinaryUploadWidgetProps {
  value?: string
  onChange: (url: string, publicId?: string) => void
  label: string
  type?: 'poster' | 'backdrop' | 'gallery'
  movieId?: string | number
  disabled?: boolean
}

export function CloudinaryUploadWidget({ 
  value, 
  onChange, 
  label, 
  type = 'poster',
  movieId,
  disabled = false
}: CloudinaryUploadWidgetProps) {
  const [imageUrl, setImageUrl] = useState(value || '')
  
  // Sincronizar con el valor externo
  useEffect(() => {
    setImageUrl(value || '')
  }, [value])
  
  // Configuración según el tipo de imagen
  const getUploadPreset = () => {
    // Puedes crear estos presets en tu dashboard de Cloudinary
    switch(type) {
      case 'poster':
        return {
          folder: `cinenacional/posters${movieId ? `/${movieId}` : ''}`,
          transformation: [
            { width: 500, height: 750, crop: 'fill', gravity: 'auto' }
          ],
          format: 'auto',
          quality: 'auto:best'
        }
      case 'backdrop':
        return {
          folder: `cinenacional/backdrops${movieId ? `/${movieId}` : ''}`,
          transformation: [
            { width: 1920, height: 1080, crop: 'fill', gravity: 'auto' }
          ],
          format: 'auto',
          quality: 'auto:best'
        }
      default:
        return {
          folder: `cinenacional/gallery${movieId ? `/${movieId}` : ''}`,
          transformation: [
            { width: 1200, height: 1200, crop: 'limit' }
          ],
          format: 'auto',
          quality: 'auto:good'
        }
    }
  }

  const handleUploadSuccess = (result: any) => {
    console.log('Upload result:', result)
    const { secure_url, public_id } = result.info
    console.log('Setting imageUrl to:', secure_url)
    setImageUrl(secure_url)
    onChange(secure_url, public_id)
    toast.success('Imagen subida exitosamente')
  }

  const handleRemove = () => {
    setImageUrl('')
    onChange('', '')
  }

  const aspectRatio = type === 'poster' ? '2/3' : type === 'backdrop' ? '16/9' : '1/1'
  const dimensions = type === 'poster' ? '500x750px' : type === 'backdrop' ? '1920x1080px' : '1200x1200px'

  return (
    <div>
      <label className="block text-sm font-medium text-gray-700 mb-2">
        {label}
      </label>
      
      {!imageUrl ? (
        <CldUploadWidget
          uploadPreset="cinenacional-unsigned"
          options={{
            ...getUploadPreset(),
            sources: ['local', 'url', 'google_drive', 'dropbox'],
            multiple: false,
            maxFiles: 1,
            clientAllowedFormats: ['jpg', 'jpeg', 'png', 'webp'],
            maxFileSize: 10000000, // 10MB
            showCompletedButton: true,  
            showUploadMoreButton: false, 
            singleUploadAutoClose: false,
            showSkipCropButton: false,
            showPoweredBy: false,
            autoMinimize: false,
            language: 'es',
            text: {
              es: {
                or: 'O',
                menu: {
                  files: 'Mis archivos',
                  web: 'Dirección web',
                },
                selection_counter: {
                  selected: 'Seleccionado'
                },
                actions: {
                  upload: 'Subir',
                  clear_all: 'Limpiar todo',
                  log_out: 'Cerrar sesión',
                  done: 'Listo'
                },
                messages: {
                  max_files_limit: 'Solo puedes subir 1 archivo',
                  min_files_limit: 'Debes subir al menos 1 archivo',
                  max_file_size: 'El archivo es demasiado grande (máx. 10MB)',
                  allowed_formats: 'Formato no permitido. Usa: JPG, PNG, WEBP',
                  upload_successful: 'Subida exitosa',
                  upload_failed: 'Error al subir'
                },
                local: {
                  browse: 'Buscar',
                  dd_title_single: 'Arrastra y suelta tu imagen aquí',
                  drop_title_single: 'Suelta el archivo para subirlo',
                }
              }
            }
          }}
          onOpen={(widget: any) => {
            console.log('Widget opened')
            // Guardar referencia al widget
            window.cloudinaryWidget = widget
          }}
          onUpload={(result: any, widget: any) => {
            handleUploadSuccess(result)
            // Prevenir el cierre automático
            if (widget && widget.isShowing()) {
              console.log('Preventing auto-close')
              setTimeout(() => {
                if (!widget.isShowing() && window.cloudinaryWidget) {
                  console.log('Reopening widget')
                  window.cloudinaryWidget.open()
                }
              }, 100)
            }
          }}
          onSuccess={(result: any) => {
            console.log('Success event:', result)
            handleUploadSuccess(result)
          }}
          onClose={(result: any) => {
            console.log('Widget closed', result)
          }}
        >
          {({ open }) => (
            <button
              type="button"
              onClick={() => open()}
              disabled={disabled}
              className="relative block w-full border-2 border-dashed border-gray-300 rounded-lg p-12 text-center hover:border-gray-400 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 cursor-pointer transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
            >
              <Upload className="mx-auto h-12 w-12 text-gray-400" />
              <p className="mt-2 text-sm font-medium text-gray-900">
                Click para subir o arrastra una imagen aquí
              </p>
              <p className="mt-1 text-xs text-gray-500">
                JPG, PNG o WEBP hasta 10MB
              </p>
              <p className="mt-1 text-xs text-gray-400">
                Tamaño recomendado: {dimensions}
              </p>
            </button>
          )}
        </CldUploadWidget>
      ) : (
        <div className="space-y-2">
          {/* Preview de la imagen con borde interactivo - envuelto en CldUploadWidget */}
          <CldUploadWidget
            uploadPreset="cinenacional-unsigned"
            options={{
              ...getUploadPreset(),
              sources: ['local', 'url'],
              multiple: false,
              maxFiles: 1,
              singleUploadAutoClose: false,
              showCompletedButton: true,
            }}
            onUpload={(result: any) => handleUploadSuccess(result)}
            onSuccess={(result: any) => handleUploadSuccess(result)}
          >
            {({ open }) => (
              <div 
                onClick={() => open()}
                className="relative rounded-lg overflow-hidden bg-gray-100 shadow-lg cursor-pointer border-2 border-transparent hover:border-blue-500 transition-all group"
                style={{ aspectRatio }}
              >
                <Image
                  src={imageUrl}
                  alt={label}
                  fill
                  className="object-cover"
                />
                
                {/* Overlay al hacer hover */}
                <div className="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-40 transition-all flex items-center justify-center opacity-0 group-hover:opacity-100 pointer-events-none">
                  <p className="text-white font-medium text-lg drop-shadow-lg">Click para cambiar</p>
                </div>
              </div>
            )}
          </CldUploadWidget>
          
          {/* Botones siempre visibles */}
          <div className="flex gap-2">
            <CldUploadWidget
              uploadPreset="cinenacional-unsigned"
              options={{
                ...getUploadPreset(),
                sources: ['local', 'url'],
                multiple: false,
                maxFiles: 1,
                singleUploadAutoClose: false,
                showCompletedButton: true,
              }}
              onUpload={(result: any) => handleUploadSuccess(result)}
              onSuccess={(result: any) => handleUploadSuccess(result)}
            >
              {({ open }) => (
                <button
                  type="button"
                  onClick={() => open()}
                  className="flex-1 bg-gray-100 text-gray-700 px-4 py-2 rounded-lg hover:bg-gray-200 transition-colors flex items-center justify-center gap-2"
                >
                  <ImageIcon className="w-4 h-4" />
                  <span>Cambiar imagen</span>
                </button>
              )}
            </CldUploadWidget>
            
            <button
              type="button"
              onClick={handleRemove}
              className="bg-red-100 text-red-700 px-4 py-2 rounded-lg hover:bg-red-200 transition-colors flex items-center gap-2"
            >
              <X className="w-4 h-4" />
              <span>Eliminar</span>
            </button>
          </div>
          
          {/* Info de la imagen */}
          <div className="text-xs text-gray-500 text-center">
            Imagen subida correctamente • {dimensions}
          </div>
          <div className="text-xs text-gray-400 text-center">
            Puedes hacer click en la imagen o usar los botones para cambiarla
          </div>
        </div>
      )}
    </div>
  )
}

// ==================================================
// src/components/admin/CountrySelector.tsx
// ==================================================
// src/components/admin/CountrySelector.tsx
'use client'

import { useState, useRef, useEffect } from 'react'
import { X, Globe, Search } from 'lucide-react'

interface Country {
  id: number
  name: string
  code?: string
}

interface CountrySelectorProps {
  availableCountries: Country[]
  selectedCountries: number[]
  onChange: (countries: number[]) => void
  placeholder?: string
}

export function CountrySelector({
  availableCountries,
  selectedCountries,
  onChange,
  placeholder = "Buscar país..."
}: CountrySelectorProps) {
  const [searchTerm, setSearchTerm] = useState('')
  const [showSuggestions, setShowSuggestions] = useState(false)
  const [highlightedIndex, setHighlightedIndex] = useState(-1)
  const inputRef = useRef<HTMLInputElement>(null)
  const containerRef = useRef<HTMLDivElement>(null)

  // Países frecuentes para mostrar primero
  const frequentCountries = ['Argentina', 'España', 'Francia', 'Brasil', 'México', 'Chile', 'Uruguay', 'Estados Unidos', 'Italia', 'Alemania']

  // Obtener los objetos de países seleccionados
  const selectedCountryObjects = selectedCountries
    .map(id => availableCountries.find(c => c.id === id))
    .filter(Boolean) as Country[]

  // Filtrar países disponibles (excluyendo los ya seleccionados)
  const filteredCountries = availableCountries
    .filter(country => !selectedCountries.includes(country.id))
    .filter(country => 
      searchTerm === '' || 
      country.name.toLowerCase().includes(searchTerm.toLowerCase())
    )
    .sort((a, b) => {
      // Priorizar países frecuentes
      const aIsFrequent = frequentCountries.includes(a.name)
      const bIsFrequent = frequentCountries.includes(b.name)
      
      if (aIsFrequent && !bIsFrequent) return -1
      if (!aIsFrequent && bIsFrequent) return 1
      
      // Luego ordenar alfabéticamente
      return a.name.localeCompare(b.name)
    })

  // Manejar click fuera del componente
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (containerRef.current && !containerRef.current.contains(event.target as Node)) {
        setShowSuggestions(false)
      }
    }

    document.addEventListener('mousedown', handleClickOutside)
    return () => document.removeEventListener('mousedown', handleClickOutside)
  }, [])

  // Manejar navegación con teclado
  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === 'ArrowDown') {
      e.preventDefault()
      setHighlightedIndex(prev => 
        prev < filteredCountries.length - 1 ? prev + 1 : prev
      )
    } else if (e.key === 'ArrowUp') {
      e.preventDefault()
      setHighlightedIndex(prev => prev > 0 ? prev - 1 : -1)
    } else if (e.key === 'Enter') {
      e.preventDefault()
      if (highlightedIndex >= 0 && highlightedIndex < filteredCountries.length) {
        handleSelectCountry(filteredCountries[highlightedIndex])
      }
    } else if (e.key === 'Escape') {
      setShowSuggestions(false)
      setHighlightedIndex(-1)
    }
  }

  const handleSelectCountry = (country: Country) => {
    onChange([...selectedCountries, country.id])
    setSearchTerm('')
    setShowSuggestions(false)
    setHighlightedIndex(-1)
    inputRef.current?.focus()
  }

  const handleRemoveCountry = (countryId: number) => {
    onChange(selectedCountries.filter(id => id !== countryId))
  }

  return (
    <div ref={containerRef} className="space-y-3">
      {/* Campo de búsqueda */}
      <div className="relative">
        <div className="relative">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
          <input
            ref={inputRef}
            type="text"
            value={searchTerm}
            onChange={(e) => {
              setSearchTerm(e.target.value)
              setShowSuggestions(true)
              setHighlightedIndex(-1)
            }}
            onFocus={() => setShowSuggestions(true)}
            onKeyDown={handleKeyDown}
            placeholder={placeholder}
            className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
          />
        </div>

        {/* Lista de sugerencias */}
        {showSuggestions && (searchTerm || filteredCountries.length > 0) && (
          <div className="absolute z-10 w-full mt-1 bg-white border border-gray-200 rounded-lg shadow-lg max-h-60 overflow-auto">
            {filteredCountries.length === 0 ? (
              <div className="px-4 py-3 text-sm text-gray-500">
                No se encontraron países
              </div>
            ) : (
              <>
                {searchTerm === '' && (
                  <div className="px-4 py-2 text-xs font-medium text-gray-500 uppercase tracking-wider border-b border-gray-100">
                    Países frecuentes
                  </div>
                )}
                {filteredCountries.map((country, index) => {
                  const isFrequent = searchTerm === '' && frequentCountries.includes(country.name)
                  const isHighlighted = index === highlightedIndex
                  
                  return (
                    <div
                      key={country.id}
                      onClick={() => handleSelectCountry(country)}
                      className={`px-4 py-2 cursor-pointer transition-colors ${
                        isHighlighted 
                          ? 'bg-blue-50 text-blue-700' 
                          : 'hover:bg-gray-50 text-gray-900'
                      } ${!isFrequent && searchTerm === '' && index === frequentCountries.filter(fc => 
                        availableCountries.some(ac => ac.name === fc && !selectedCountries.includes(ac.id))
                      ).length ? 'border-t border-gray-100' : ''}`}
                    >
                      <div className="flex items-center justify-between">
                        <span className="text-sm">{country.name}</span>
                        {isFrequent && searchTerm === '' && (
                          <span className="text-xs text-gray-400">Frecuente</span>
                        )}
                      </div>
                    </div>
                  )
                })}
              </>
            )}
          </div>
        )}
      </div>

      {/* Países seleccionados como chips */}
      {selectedCountryObjects.length > 0 && (
        <div className="flex flex-wrap gap-2">
          {selectedCountryObjects.map((country) => (
            <div
              key={country.id}
              className="inline-flex items-center gap-1 px-3 py-1 bg-blue-100 text-blue-700 rounded-full text-sm"
            >
              <Globe className="w-3 h-3" />
              <span>{country.name}</span>
              <button
                type="button"
                onClick={() => handleRemoveCountry(country.id)}
                className="ml-1 hover:text-blue-900 transition-colors"
              >
                <X className="w-3 h-3" />
              </button>
            </div>
          ))}
        </div>
      )}

      {/* Texto de ayuda */}
      <p className="text-xs text-gray-500">
        {selectedCountryObjects.length === 0 
          ? "Comienza a escribir para buscar países coproductores" 
          : `${selectedCountryObjects.length} ${selectedCountryObjects.length === 1 ? 'país seleccionado' : 'países seleccionados'}`
        }
      </p>
    </div>
  )
}

// ==================================================
// src/components/admin/locations/LocationForm.tsx
// ==================================================
// src/components/admin/locations/LocationForm.tsx

'use client'

import { useState, useEffect, useCallback, useRef } from 'react'
import { useRouter, useSearchParams } from 'next/navigation'
import Link from 'next/link'
import { X } from 'lucide-react'
import { useDebounce } from '@/hooks/useDebounce'

interface Location {
  id: number
  name: string
  slug: string
  parentId: number | null
  parent?: {
    id: number
    name: string
  }
  latitude?: string | null
  longitude?: string | null
  path?: string
}

interface LocationFormProps {
  location?: Location
}

export default function LocationForm({ location }: LocationFormProps) {
  const router = useRouter()
  const searchParams = useSearchParams()
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState('')
  const [slug, setSlug] = useState(location?.slug || '')
  const [isCheckingSlug, setIsCheckingSlug] = useState(false)
  
  // Estados para el autocomplete
  const [parentSearch, setParentSearch] = useState('')
  const [selectedParent, setSelectedParent] = useState<Location | null>(null)
  const [suggestions, setSuggestions] = useState<Location[]>([])
  const [showSuggestions, setShowSuggestions] = useState(false)
  const [isSearching, setIsSearching] = useState(false)
  const autocompleteRef = useRef<HTMLDivElement>(null)
  
  // Usar el hook useDebounce para el término de búsqueda
  const debouncedSearchTerm = useDebounce(parentSearch, 300)
  
  // Obtener parentId de la URL si existe
  const urlParentId = searchParams.get('parentId')
  
  const [formData, setFormData] = useState({
    name: location?.name || '',
    parentId: location?.parentId || urlParentId || '',
    latitude: location?.latitude || '',
    longitude: location?.longitude || ''
  })

  // Cargar el lugar padre si existe
  useEffect(() => {
    if (location?.parent || urlParentId) {
      loadInitialParent()
    }
  }, [])

  // Efecto para buscar cuando cambia el término debounced
  useEffect(() => {
    if (debouncedSearchTerm.length >= 2) {
      searchLocations(debouncedSearchTerm)
    } else if (debouncedSearchTerm.length === 0) {
      setSuggestions([])
      setShowSuggestions(false)
    }
  }, [debouncedSearchTerm])

  // Manejar clics fuera del autocomplete
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (autocompleteRef.current && !autocompleteRef.current.contains(event.target as Node)) {
        setShowSuggestions(false)
      }
    }

    document.addEventListener('mousedown', handleClickOutside)
    return () => document.removeEventListener('mousedown', handleClickOutside)
  }, [])

  // Verificar slug cuando cambia el nombre
  useEffect(() => {
    const timeoutId = setTimeout(() => {
      if (formData.name && formData.name !== location?.name) {
        checkSlugAvailability()
      }
    }, 500)

    return () => clearTimeout(timeoutId)
  }, [formData.name])

  const loadInitialParent = async () => {
    try {
      let parentId = location?.parentId || urlParentId
      if (!parentId) return

      const response = await fetch(`/api/locations/${parentId}`)
      if (response.ok) {
        const parentData = await response.json()
        setSelectedParent(parentData)
        setParentSearch(parentData.name)
      }
    } catch (error) {
      console.error('Error loading parent location:', error)
    }
  }

  const checkSlugAvailability = async () => {
    setIsCheckingSlug(true)
    try {
      const response = await fetch('/api/locations/check-slug', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          name: formData.name,
          excludeId: location?.id
        })
      })
      
      if (response.ok) {
        const data = await response.json()
        setSlug(data.slug)
      }
    } catch (error) {
      console.error('Error checking slug:', error)
    } finally {
      setIsCheckingSlug(false)
    }
  }

  // Función de búsqueda
  const searchLocations = async (searchTerm: string) => {
    setIsSearching(true)
    try {
      const params = new URLSearchParams({
        q: searchTerm,
        limit: '10'
      })
      
      if (location?.id) {
        params.append('excludeId', location.id.toString())
      }

      const response = await fetch(`/api/locations/search?${params}`)
      if (response.ok) {
        const data = await response.json()
        setSuggestions(data)
        setShowSuggestions(true)
      }
    } catch (error) {
      console.error('Error searching locations:', error)
    } finally {
      setIsSearching(false)
    }
  }

  const handleParentSearchChange = (value: string) => {
    setParentSearch(value)
    setSelectedParent(null)
    setFormData(prev => ({ ...prev, parentId: '' }))
    
    if (!value.trim()) {
      setSuggestions([])
      setShowSuggestions(false)
    }
  }

  const handleSelectParent = (parent: Location) => {
    setSelectedParent(parent)
    setParentSearch(parent.name)
    setFormData(prev => ({ ...prev, parentId: parent.id.toString() }))
    setShowSuggestions(false)
    setSuggestions([])
  }

  const handleClearParent = () => {
    setSelectedParent(null)
    setParentSearch('')
    setFormData(prev => ({ ...prev, parentId: '' }))
    setSuggestions([])
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setError('')
    setIsLoading(true)

    try {
      const url = location 
        ? `/api/locations/${location.id}`
        : '/api/locations'
      
      const method = location ? 'PUT' : 'POST'
      
      const response = await fetch(url, {
        method,
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          ...formData,
          parentId: formData.parentId || null
        })
      })

      const data = await response.json()

      if (!response.ok) {
        throw new Error(data.error || 'Error al guardar el lugar')
      }

      router.push(`/admin/locations?refresh=${Date.now()}`)
      router.refresh()
    } catch (error) {
      setError(error instanceof Error ? error.message : 'Error al guardar el lugar')
    } finally {
      setIsLoading(false)
    }
  }

  const handleChange = (field: keyof typeof formData, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }))
  }

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      {error && (
        <div className="bg-red-50 border border-red-400 text-red-700 px-4 py-3 rounded">
          {error}
        </div>
      )}

      <div>
        <label htmlFor="name" className="block text-sm font-medium text-gray-700">
          Nombre *
        </label>
        <input
          type="text"
          id="name"
          value={formData.name}
          onChange={(e) => handleChange('name', e.target.value)}
          required
          className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
        />
        {slug && (
          <p className="mt-1 text-sm text-gray-500">
            Slug: {slug} {isCheckingSlug && '(verificando...)'}
          </p>
        )}
      </div>

      <div ref={autocompleteRef}>
        <label htmlFor="parentSearch" className="block text-sm font-medium text-gray-700">
          Lugar padre (opcional)
        </label>
        <div className="relative mt-1">
          <div className="relative">
            <input
              type="text"
              id="parentSearch"
              value={parentSearch}
              onChange={(e) => handleParentSearchChange(e.target.value)}
              placeholder="Buscar lugar padre..."
              className="block w-full px-3 py-2 pr-10 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
            />
            {(parentSearch || selectedParent) && (
              <button
                type="button"
                onClick={handleClearParent}
                className="absolute inset-y-0 right-0 flex items-center pr-3"
              >
                <X className="h-4 w-4 text-gray-400 hover:text-gray-600" />
              </button>
            )}
          </div>
          
          {selectedParent && selectedParent.path && (
            <p className="mt-1 text-sm text-gray-500">
              Ubicación: {selectedParent.path}
            </p>
          )}

          {/* Dropdown de sugerencias */}
          {showSuggestions && (
            <div className="absolute z-10 w-full mt-1 bg-white border border-gray-300 rounded-md shadow-lg max-h-60 overflow-auto">
              {isSearching ? (
                <div className="px-3 py-2 text-sm text-gray-500">Buscando...</div>
              ) : suggestions.length > 0 ? (
                <ul className="py-1">
                  {suggestions.map((suggestion) => (
                    <li
                      key={suggestion.id}
                      onClick={() => handleSelectParent(suggestion)}
                      className="px-3 py-2 hover:bg-gray-100 cursor-pointer"
                    >
                      <div className="text-sm font-medium text-gray-900">
                        {suggestion.name}
                      </div>
                      {suggestion.path && suggestion.path !== suggestion.name && (
                        <div className="text-xs text-gray-500">
                          {suggestion.path}
                        </div>
                      )}
                    </li>
                  ))}
                </ul>
              ) : (
                <div className="px-3 py-2 text-sm text-gray-500">
                  No se encontraron lugares
                </div>
              )}
            </div>
          )}
        </div>
      </div>

      <div className="grid grid-cols-2 gap-4">
        <div>
          <label htmlFor="latitude" className="block text-sm font-medium text-gray-700">
            Latitud (opcional)
          </label>
          <input
            type="number"
            id="latitude"
            value={formData.latitude}
            onChange={(e) => handleChange('latitude', e.target.value)}
            step="0.00000001"
            min="-90"
            max="90"
            className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
          />
        </div>

        <div>
          <label htmlFor="longitude" className="block text-sm font-medium text-gray-700">
            Longitud (opcional)
          </label>
          <input
            type="number"
            id="longitude"
            value={formData.longitude}
            onChange={(e) => handleChange('longitude', e.target.value)}
            step="0.00000001"
            min="-180"
            max="180"
            className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
          />
        </div>
      </div>

      <div className="flex justify-end gap-4">
        <Link
          href="/admin/locations"
          className="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50"
        >
          Cancelar
        </Link>
        <button
          type="submit"
          disabled={isLoading || !formData.name}
          className="px-4 py-2 text-sm font-medium text-white bg-indigo-600 border border-transparent rounded-md hover:bg-indigo-700 disabled:opacity-50 disabled:cursor-not-allowed"
        >
          {isLoading ? 'Guardando...' : (location ? 'Actualizar' : 'Crear')}
        </button>
      </div>
    </form>
  )
}

// ==================================================
// src/components/admin/locations/LocationTree.tsx
// ==================================================
// src/components/admin/locations/LocationTree.tsx

'use client'

import { useState, useEffect } from 'react'
import { useRouter } from 'next/navigation'
import LocationTreeNode from './LocationTreeNode'
import { Search, Loader2, RefreshCw } from 'lucide-react'

interface LocationNode {
  id: number
  name: string
  slug: string
  children: LocationNode[]
  _count: {
    children: number
    peopleBornHere: number
    peopleDiedHere: number
  }
}

export default function LocationTree() {
  const router = useRouter()
  const [locations, setLocations] = useState<LocationNode[]>([])
  const [filteredLocations, setFilteredLocations] = useState<LocationNode[]>([])
  const [isLoading, setIsLoading] = useState(true)
  const [searchTerm, setSearchTerm] = useState('')
  const [deleteModal, setDeleteModal] = useState<{ id: number; name: string } | null>(null)

  useEffect(() => {
    loadLocationTree()
  }, [])

  useEffect(() => {
    filterLocations()
  }, [searchTerm, locations])

  const loadLocationTree = async () => {
    setIsLoading(true)
    try {
      // Agregar timestamp para evitar caché
      const response = await fetch(`/api/locations/tree?t=${Date.now()}`, {
        cache: 'no-store',
        headers: {
          'Cache-Control': 'no-cache',
          'Pragma': 'no-cache',
        },
      })
      if (response.ok) {
        const data = await response.json()
        setLocations(data)
      }
    } catch (error) {
      console.error('Error loading location tree:', error)
    } finally {
      setIsLoading(false)
    }
  }

  const filterLocations = () => {
    if (!searchTerm.trim()) {
      setFilteredLocations(locations)
      return
    }

    const term = searchTerm.toLowerCase()
    
    const filterNode = (node: LocationNode): LocationNode | null => {
      // Verificar si el nodo actual coincide
      const nodeMatches = node.name.toLowerCase().includes(term)
      
      // Filtrar recursivamente los hijos
      const filteredChildren = node.children
        .map(child => filterNode(child))
        .filter((child): child is LocationNode => child !== null)
      
      // Incluir el nodo si coincide o si tiene hijos que coinciden
      if (nodeMatches || filteredChildren.length > 0) {
        return {
          ...node,
          children: filteredChildren
        }
      }
      
      return null
    }
    
    const filtered = locations
      .map(node => filterNode(node))
      .filter((node): node is LocationNode => node !== null)
    
    setFilteredLocations(filtered)
  }

  const handleDelete = async (id: number, name: string) => {
    setDeleteModal({ id, name })
  }

  const confirmDelete = async () => {
    if (!deleteModal) return

    try {
      const response = await fetch(`/api/locations/${deleteModal.id}`, {
        method: 'DELETE'
      })

      const data = await response.json()

      if (!response.ok) {
        alert(data.error || 'Error al eliminar el lugar')
        return
      }

      // Recargar el árbol
      await loadLocationTree()
      router.refresh()
    } catch (error) {
      console.error('Error deleting location:', error)
      alert('Error al eliminar el lugar')
    } finally {
      setDeleteModal(null)
    }
  }

  return (
    <div className="space-y-4">
      {/* Barra de búsqueda y botón refrescar */}
      <div className="flex gap-2">
        <div className="relative flex-1">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
          <input
            type="text"
            placeholder="Buscar lugares..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
          />
        </div>
        <button
          onClick={loadLocationTree}
          disabled={isLoading}
          className="px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors flex items-center gap-2 disabled:opacity-50"
          title="Refrescar lista"
        >
          <RefreshCw className={`w-4 h-4 ${isLoading ? 'animate-spin' : ''}`} />
          Refrescar
        </button>
      </div>

      {/* Árbol de lugares */}
      {isLoading ? (
        <div className="flex justify-center items-center py-12">
          <Loader2 className="w-8 h-8 animate-spin text-gray-500" />
        </div>
      ) : filteredLocations.length === 0 ? (
        <div className="text-center py-12 text-gray-500">
          {searchTerm ? 'No se encontraron lugares que coincidan con la búsqueda' : 'No hay lugares cargados'}
        </div>
      ) : (
        <div className="bg-white rounded-lg shadow-sm border border-gray-200">
          {filteredLocations.map((location) => (
            <LocationTreeNode
              key={location.id}
              node={location}
              level={0}
              onDelete={handleDelete}
            />
          ))}
        </div>
      )}

      {/* Modal de confirmación de eliminación */}
      {deleteModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 max-w-md w-full mx-4">
            <h3 className="text-lg font-semibold mb-4">Confirmar eliminación</h3>
            <p className="text-gray-600 mb-6">
              ¿Estás seguro de que quieres eliminar "{deleteModal.name}"?
            </p>
            <div className="flex justify-end gap-3">
              <button
                onClick={() => setDeleteModal(null)}
                className="px-4 py-2 text-gray-700 bg-gray-100 rounded-lg hover:bg-gray-200 transition-colors"
              >
                Cancelar
              </button>
              <button
                onClick={confirmDelete}
                className="px-4 py-2 text-white bg-red-600 rounded-lg hover:bg-red-700 transition-colors"
              >
                Eliminar
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}

// ==================================================
// src/components/admin/locations/LocationTreeNode.tsx
// ==================================================
// src/components/admin/locations/LocationTreeNode.tsx

'use client'

import { useState } from 'react'
import Link from 'next/link'
import { ChevronRight, ChevronDown, MapPin, Edit, Trash2, Plus, Users } from 'lucide-react'

interface LocationNode {
  id: number
  name: string
  slug: string
  children: LocationNode[]
  _count: {
    children: number
    peopleBornHere: number
    peopleDiedHere: number
  }
}

interface LocationTreeNodeProps {
  node: LocationNode
  level: number
  onDelete: (id: number, name: string) => void
}

export default function LocationTreeNode({ node, level, onDelete }: LocationTreeNodeProps) {
  const [isExpanded, setIsExpanded] = useState(level < 1) // Expandir solo el primer nivel por defecto
  const hasChildren = node.children.length > 0

  const handleToggle = () => {
    if (hasChildren) {
      setIsExpanded(!isExpanded)
    }
  }

  const handleDelete = (e: React.MouseEvent) => {
    e.stopPropagation()
    onDelete(node.id, node.name)
  }

  // Determinar si tiene relaciones que impiden su eliminación
  const hasRelations = 
    node._count.children > 0 ||
    node._count.peopleBornHere > 0 ||
    node._count.peopleDiedHere > 0

  // Construir tooltip con información de relaciones
  const getRelationsTooltip = () => {
    const relations = []
    if (node._count.children > 0) relations.push(`${node._count.children} lugares`)
    if (node._count.peopleBornHere > 0) relations.push(`${node._count.peopleBornHere} nacimientos`)
    if (node._count.peopleDiedHere > 0) relations.push(`${node._count.peopleDiedHere} fallecimientos`)
    return relations.join(', ')
  }

  return (
    <div className="select-none">
      <div
        className={`flex items-center gap-2 py-2 px-3 hover:bg-gray-50 rounded-lg cursor-pointer group`}
        style={{ paddingLeft: `${level * 1.5 + 0.75}rem` }}
      >
        {/* Chevron para expandir/colapsar */}
        <button
          onClick={handleToggle}
          className={`p-0.5 ${!hasChildren ? 'invisible' : ''}`}
        >
          {isExpanded ? (
            <ChevronDown className="w-4 h-4 text-gray-500" />
          ) : (
            <ChevronRight className="w-4 h-4 text-gray-500" />
          )}
        </button>

        {/* Icono de lugar */}
        <MapPin className="w-4 h-4 text-gray-400" />

        {/* Nombre del lugar */}
        <span className="flex-1 text-sm font-medium text-gray-900">
          {node.name}
        </span>

        {/* Badges de contadores */}
        <div className="flex items-center gap-2 opacity-0 group-hover:opacity-100 transition-opacity">
          {node._count.peopleBornHere + node._count.peopleDiedHere > 0 && (
            <span className="flex items-center gap-1 text-xs text-gray-500" title="Personas relacionadas">
              <Users className="w-3 h-3" />
              {node._count.peopleBornHere + node._count.peopleDiedHere}
            </span>
          )}
        </div>

        {/* Acciones */}
        <div className="flex items-center gap-1 opacity-0 group-hover:opacity-100 transition-opacity">
          <Link
            href={`/admin/locations/new?parentId=${node.id}`}
            className="p-1.5 text-gray-400 hover:text-gray-600 hover:bg-gray-100 rounded"
            title="Agregar lugar hijo"
            onClick={(e) => e.stopPropagation()}
          >
            <Plus className="w-4 h-4" />
          </Link>
          
          <Link
            href={`/admin/locations/${node.id}/edit`}
            className="p-1.5 text-gray-400 hover:text-gray-600 hover:bg-gray-100 rounded"
            title="Editar"
            onClick={(e) => e.stopPropagation()}
          >
            <Edit className="w-4 h-4" />
          </Link>
          
          <button
            onClick={handleDelete}
            disabled={hasRelations}
            className={`p-1.5 rounded ${
              hasRelations
                ? 'text-gray-300 cursor-not-allowed'
                : 'text-gray-400 hover:text-red-600 hover:bg-red-50'
            }`}
            title={hasRelations ? `No se puede eliminar: ${getRelationsTooltip()}` : 'Eliminar'}
          >
            <Trash2 className="w-4 h-4" />
          </button>
        </div>
      </div>

      {/* Hijos */}
      {isExpanded && hasChildren && (
        <div>
          {node.children.map((child) => (
            <LocationTreeNode
              key={child.id}
              node={child}
              level={level + 1}
              onDelete={onDelete}
            />
          ))}
        </div>
      )}
    </div>
  )
}

// ==================================================
// src/components/admin/MovieFormEnhanced.tsx
// ==================================================
// src/components/admin/MovieFormEnhanced.tsx
'use client'

import { useState, useEffect } from 'react'
import {
  Plus,
  X,
  Search,
  UserPlus,
  Building,
  Globe,
  Hash,
  Trash2,
  Tag
} from 'lucide-react'
import ScreeningVenueSelector from './ScreeningVenueSelector'


interface MovieFormEnhancedProps {
  onGenresChange: (genres: number[]) => void
  onCastChange: (cast: any[]) => void
  onCrewChange: (crew: any[]) => void
  onCountriesChange: (countries: number[]) => void
  onProductionCompaniesChange: (companies: number[]) => void
  onDistributionCompaniesChange: (companies: number[]) => void
  onScreeningVenuesChange: (venues: any[]) => void
  onThemesChange?: (themes: number[]) => void
  initialData?: {
    genres?: any[]
    cast?: any[]
    crew?: any[]
    countries?: any[]
    productionCompanies?: any[]
    distributionCompanies?: any[]
    themes?: any[]
    screeningVenues?: any[]
  }
  showOnlyBasicInfo?: boolean
  showOnlyCast?: boolean
  showOnlyCrew?: boolean
  showOnlyCompanies?: boolean
}

export default function MovieFormEnhanced({
  onGenresChange,
  onCastChange,
  onCrewChange,
  onCountriesChange,
  onProductionCompaniesChange,
  onDistributionCompaniesChange,
  onScreeningVenuesChange,
  onThemesChange = () => { },
  initialData,
  showOnlyBasicInfo = false,
  showOnlyCast = false,
  showOnlyCrew = false,
  showOnlyCompanies = false
}: MovieFormEnhancedProps) {
  // Estados para las listas disponibles
  const [availableGenres, setAvailableGenres] = useState<any[]>([])
  const [availablePeople, setAvailablePeople] = useState<any[]>([])
  const [availableCountries, setAvailableCountries] = useState<any[]>([])
  const [availableProductionCompanies, setAvailableProductionCompanies] = useState<any[]>([])
  const [availableDistributionCompanies, setAvailableDistributionCompanies] = useState<any[]>([])
  const [availableThemes, setAvailableThemes] = useState<any[]>([])

  // Estados para las selecciones
  const [selectedGenres, setSelectedGenres] = useState<number[]>([])
  const [cast, setCast] = useState<any[]>([])
  const [crew, setCrew] = useState<any[]>([])
  const [selectedCountries, setSelectedCountries] = useState<number[]>([])
  const [selectedProductionCompanies, setSelectedProductionCompanies] = useState<number[]>([])
  const [selectedDistributionCompanies, setSelectedDistributionCompanies] = useState<number[]>([])
  const [selectedThemes, setSelectedThemes] = useState<number[]>([])
  const [screeningVenues, setScreeningVenues] = useState<any[]>([])

  // Estados para búsqueda
  const [personSearch, setPersonSearch] = useState('')
  const [themeSearch, setThemeSearch] = useState('')
  const [countrySearch, setCountrySearch] = useState('')
  const [showPersonSearch, setShowPersonSearch] = useState(false)
  const [addingType, setAddingType] = useState<'cast' | 'crew' | null>(null)

  const [dataReady, setDataReady] = useState(false)

  // Estado para nuevo actor/crew
  const [newPerson, setNewPerson] = useState({
    personId: 0,
    characterName: '',
    role: '',
    department: '',
    billingOrder: 0
  })

  const [isInitialized, setIsInitialized] = useState(false)

  // Cargar datos iniciales
  useEffect(() => {
    fetchInitialData()
  }, [])

  useEffect(() => {
    setIsInitialized(false)  // Resetear cuando cambia initialData
  }, [initialData])

  // Inicializar con datos existentes - CORREGIDO
  useEffect(() => {
    if (initialData && !isInitialized) {
      if (initialData.genres) {
        const genreIds = initialData.genres.map(g => g.genreId || g.id)
        setSelectedGenres(genreIds)
      }

      if (initialData.cast) {
        setCast(initialData.cast)
      }

      if (initialData.crew) {
        setCrew(initialData.crew)
      }

      if (initialData.screeningVenues) {
        setScreeningVenues(initialData.screeningVenues)
      }

      // CORRECCIÓN IMPORTANTE: Manejar correctamente los países
      if (initialData.countries) {
        const countryIds = initialData.countries.map(c => {
          // Manejar diferentes estructuras posibles
          if (typeof c === 'number') return c
          if (c.countryId) return c.countryId  // Si viene de movieCountries
          if (c.id) return c.id
          if (c.country && c.country.id) return c.country.id
          return null
        }).filter(id => id !== null)

        setSelectedCountries(countryIds)
      }

      if (initialData.productionCompanies) {
        const companyIds = initialData.productionCompanies.map(c => c.companyId || c.id || c.company?.id)
        setSelectedProductionCompanies(companyIds)
      }

      if (initialData.distributionCompanies) {
        const companyIds = initialData.distributionCompanies.map(c => c.companyId || c.id || c.company?.id)
        setSelectedDistributionCompanies(companyIds)
      }

      if (initialData.themes) {
        const themeIds = initialData.themes.map(t => t.themeId || t.id)
        setSelectedThemes(themeIds)
      }

      setIsInitialized(true)
    }
  }, [initialData, isInitialized])

  // Notificar cambios al componente padre
  useEffect(() => {
    if (isInitialized) {
      onGenresChange(selectedGenres)
    }
  }, [selectedGenres, onGenresChange, isInitialized])

  useEffect(() => {
    if (isInitialized) {
      onScreeningVenuesChange(screeningVenues)
    }
  }, [screeningVenues, onScreeningVenuesChange, isInitialized])

  useEffect(() => {
    if (isInitialized) {
      onCastChange(cast)
    }
  }, [cast, onCastChange, isInitialized])

  useEffect(() => {
    if (isInitialized) {
      onCrewChange(crew)
    }
  }, [crew, onCrewChange, isInitialized])

  useEffect(() => {
    if (isInitialized) {
      onCountriesChange(selectedCountries)
    }
  }, [selectedCountries, onCountriesChange, isInitialized])

  useEffect(() => {
    if (isInitialized) {
      onProductionCompaniesChange(selectedProductionCompanies)
    }
  }, [selectedProductionCompanies, onProductionCompaniesChange, isInitialized])

  useEffect(() => {
    if (isInitialized) {
      onDistributionCompaniesChange(selectedDistributionCompanies)
    }
  }, [selectedDistributionCompanies, onDistributionCompaniesChange, isInitialized])

  useEffect(() => {
    if (isInitialized) {
      onThemesChange(selectedThemes)
    }
  }, [selectedThemes, onThemesChange, isInitialized])

  // Cargar datos de la API
  const fetchInitialData = async () => {
    try {
      const [genresRes, countriesRes, prodCompaniesRes, distCompaniesRes, themesRes] = await Promise.all([
        fetch('/api/genres'),
        fetch('/api/countries'),
        fetch('/api/companies/production'),
        fetch('/api/companies/distribution'),
        fetch('/api/themes').catch(() => ({ ok: false, json: () => [] }))
      ])

      // Verificar que todas las respuestas sean OK
      if (!genresRes.ok || !countriesRes.ok || !prodCompaniesRes.ok || !distCompaniesRes.ok) {
        throw new Error('Error fetching data')
      }

      const [genres, countries, prodCompanies, distCompanies, themes] = await Promise.all([
        genresRes.json(),
        countriesRes.json(),
        prodCompaniesRes.json(),
        distCompaniesRes.json(),
        themesRes.ok ? themesRes.json() : []
      ])

      // Asegurar que siempre sean arrays
      setAvailableGenres(Array.isArray(genres) ? genres : [])
      setAvailableCountries(Array.isArray(countries) ? countries : [])
      setAvailableProductionCompanies(Array.isArray(prodCompanies) ? prodCompanies : [])
      setAvailableDistributionCompanies(Array.isArray(distCompanies) ? distCompanies : [])
      setAvailableThemes(Array.isArray(themes) ? themes : [])

    } catch (error) {
      console.error('Error loading initial data:', error)
      // Asegurar que los estados sean arrays vacíos en caso de error
      setAvailableGenres([])
      setAvailableCountries([])
      setAvailableProductionCompanies([])
      setAvailableDistributionCompanies([])
      setAvailableThemes([])
    }
  }

  // Buscar personas
  const searchPeople = async (search: string) => {
    if (search.length < 2) return

    try {
      const response = await fetch(`/api/people?search=${encodeURIComponent(search)}&limit=10`)
      const data = await response.json()
      setAvailablePeople(data)
    } catch (error) {
      console.error('Error searching people:', error)
    }
  }

  // Agregar persona al cast o crew
  const addPerson = () => {
    if (!newPerson.personId) return

    const selectedPerson = availablePeople.find((p: any) => p.id === newPerson.personId)
    if (!selectedPerson) return

    if (addingType === 'cast') {
      setCast([...cast, {
        personId: newPerson.personId,
        person: selectedPerson,
        characterName: newPerson.characterName,
        billingOrder: cast.length + 1,
        isPrincipal: cast.length < 5
      }])
    } else if (addingType === 'crew') {
      setCrew([...crew, {
        personId: newPerson.personId,
        person: selectedPerson,
        role: newPerson.role,
        department: newPerson.department,
        billingOrder: crew.filter(c => c.role === newPerson.role).length + 1
      }])
    }

    // Limpiar formulario
    setNewPerson({
      personId: 0,
      characterName: '',
      role: '',
      department: '',
      billingOrder: 0
    })
    setShowPersonSearch(false)
    setAddingType(null)
    setPersonSearch('')
  }

  // Crear nueva persona
  const createNewPerson = async () => {
    if (!personSearch) return

    try {
      const response = await fetch('/api/people', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ name: personSearch })
      })

      if (response.ok) {
        const newPersonData = await response.json()
        setAvailablePeople([newPersonData])
        setNewPerson({ ...newPerson, personId: newPersonData.id })
      }
    } catch (error) {
      console.error('Error creating person:', error)
    }
  }

  // Renderizar solo las secciones necesarias según las props
  if (showOnlyBasicInfo) {
    return (
      <div className="space-y-6">
        {/* Géneros */}
        <div>
          <h3 className="text-lg font-medium text-gray-900 mb-4 flex items-center gap-2">
            <Hash className="w-5 h-5" />
            Géneros
          </h3>
          <div className="flex flex-wrap gap-2">
            {availableGenres.map((genre: any) => (
              <label
                key={genre.id}
                className="inline-flex items-center"
              >
                <input
                  type="checkbox"
                  className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                  checked={selectedGenres.includes(genre.id)}
                  onChange={(e) => {
                    if (e.target.checked) {
                      setSelectedGenres([...selectedGenres, genre.id])
                    } else {
                      setSelectedGenres(selectedGenres.filter(id => id !== genre.id))
                    }
                  }}
                />
                <span className="ml-2 text-sm text-gray-700">{genre.name}</span>
              </label>
            ))}
          </div>
        </div>

        {/* Países */}
        <div>
          <h3 className="text-lg font-medium text-gray-900 mb-4 flex items-center gap-2">
            <Globe className="w-5 h-5" />
            Países Coproductores
          </h3>

          {/* Tags de países seleccionados */}
          {selectedCountries.length > 0 && (
            <div className="flex flex-wrap gap-2 mb-3">
              {selectedCountries.map(countryId => {
                const country = availableCountries.find(c => c.id === countryId)
                if (!country) return null
                return (
                  <span
                    key={country.id}
                    className="inline-flex items-center gap-1 px-3 py-1 rounded-full text-sm bg-blue-100 text-blue-800"
                  >
                    {country.name}
                    <button
                      type="button"
                      onClick={() => setSelectedCountries(selectedCountries.filter(id => id !== country.id))}
                      className="ml-1 hover:text-blue-600"
                    >
                      <X className="w-3 h-3" />
                    </button>
                  </span>
                )
              })}
            </div>
          )}

          {/* Buscador de países */}
          <div className="relative">
            <input
              type="text"
              placeholder="Buscar países..."
              value={countrySearch}
              onChange={(e) => setCountrySearch(e.target.value)}
              className="w-full px-3 py-2 pr-10 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
            <Search className="absolute right-3 top-2.5 w-5 h-5 text-gray-400" />
          </div>

          {/* Lista filtrada de países */}
          {countrySearch && (
            <div className="mt-2 max-h-48 overflow-y-auto border border-gray-200 rounded-lg">
              {availableCountries
                .filter((country: any) =>
                  country.name.toLowerCase().includes(countrySearch.toLowerCase()) &&
                  !selectedCountries.includes(country.id)
                )
                .map((country: any) => (
                  <button
                    key={country.id}
                    type="button"
                    onClick={() => {
                      setSelectedCountries([...selectedCountries, country.id])
                      setCountrySearch('')
                    }}
                    className="w-full text-left px-3 py-2 hover:bg-gray-50 border-b border-gray-100 last:border-b-0"
                  >
                    <span className="text-sm text-gray-700">{country.name}</span>
                  </button>
                ))}
              {availableCountries.filter((country: any) =>
                country.name.toLowerCase().includes(countrySearch.toLowerCase()) &&
                !selectedCountries.includes(country.id)
              ).length === 0 && (
                  <div className="px-3 py-2 text-sm text-gray-500">
                    No se encontraron países
                  </div>
                )}
            </div>
          )}

          <p className="mt-1 text-xs text-gray-500">
            Escribe para buscar y agregar países
          </p>
        </div>
        <div className="col-span-2 mt-4">
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Pantallas de Estreno
          </label>
          <ScreeningVenueSelector
            selectedVenueIds={screeningVenues}
            onChange={(venues) => {
              setScreeningVenues(venues)
            }}
          />
          <p className="mt-1 text-sm text-gray-500">
            Selecciona las pantallas donde se estrenó o estrenará la película
          </p>
        </div>
        {/* Temas */}
        {availableThemes.length > 0 && (
          <div>
            <h3 className="text-lg font-medium text-gray-900 mb-4 flex items-center gap-2">
              <Tag className="w-5 h-5" />
              Temas / Palabras Clave
            </h3>

            {/* Tags de temas seleccionados */}
            {selectedThemes.length > 0 && (
              <div className="flex flex-wrap gap-2 mb-3">
                {selectedThemes.map(themeId => {
                  const theme = availableThemes.find(t => t.id === themeId)
                  if (!theme) return null
                  return (
                    <span
                      key={theme.id}
                      className="inline-flex items-center gap-1 px-3 py-1 rounded-full text-sm bg-purple-100 text-purple-800"
                    >
                      {theme.name}
                      <button
                        type="button"
                        onClick={() => setSelectedThemes(selectedThemes.filter(id => id !== theme.id))}
                        className="ml-1 hover:text-purple-600"
                      >
                        <X className="w-3 h-3" />
                      </button>
                    </span>
                  )
                })}
              </div>
            )}

            {/* Buscador de temas */}
            <div className="relative">
              <input
                type="text"
                placeholder="Buscar temas..."
                value={themeSearch}
                onChange={(e) => setThemeSearch(e.target.value)}
                className="w-full px-3 py-2 pr-10 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
              <Search className="absolute right-3 top-2.5 w-5 h-5 text-gray-400" />
            </div>

            {/* Lista filtrada de temas */}
            {themeSearch && (
              <div className="mt-2 max-h-48 overflow-y-auto border border-gray-200 rounded-lg">
                {availableThemes
                  .filter((theme: any) =>
                    theme.name.toLowerCase().includes(themeSearch.toLowerCase()) &&
                    !selectedThemes.includes(theme.id)
                  )
                  .map((theme: any) => (
                    <button
                      key={theme.id}
                      type="button"
                      onClick={() => {
                        setSelectedThemes([...selectedThemes, theme.id])
                        setThemeSearch('')
                      }}
                      className="w-full text-left px-3 py-2 hover:bg-gray-50 border-b border-gray-100 last:border-b-0"
                    >
                      <span className="text-sm text-gray-700">{theme.name}</span>
                    </button>
                  ))}
                {availableThemes.filter((theme: any) =>
                  theme.name.toLowerCase().includes(themeSearch.toLowerCase()) &&
                  !selectedThemes.includes(theme.id)
                ).length === 0 && (
                    <div className="px-3 py-2 text-sm text-gray-500">
                      No se encontraron temas
                    </div>
                  )}
              </div>
            )}

            <p className="mt-1 text-xs text-gray-500">
              Escribe para buscar y agregar temas
            </p>
          </div>
        )}
      </div>
    )
  }

  if (showOnlyCast) {
    return (
      <div className="space-y-6">
        {/* Cast */}
        <div>
          <h3 className="text-lg font-medium text-gray-900 mb-4 flex items-center gap-2">
            <UserPlus className="w-5 h-5" />
            Reparto
          </h3>

          {cast.length > 0 && (
            <div className="mb-4 space-y-2">
              {cast.map((member, index) => (
                <div key={index} className="flex items-center gap-4 p-3 bg-gray-50 rounded-lg">
                  <div className="flex-1">
                    <span className="font-medium">{member.person?.name || 'Sin nombre'}</span>
                    {member.characterName && (
                      <span className="text-gray-500"> como {member.characterName}</span>
                    )}
                  </div>
                  <button
                    type="button"
                    onClick={() => setCast(cast.filter((_, i) => i !== index))}
                    className="text-red-600 hover:text-red-800"
                  >
                    <Trash2 className="w-4 h-4" />
                  </button>
                </div>
              ))}
            </div>
          )}

          <button
            type="button"
            onClick={() => {
              setAddingType('cast')
              setShowPersonSearch(true)
            }}
            className="inline-flex items-center gap-2 px-4 py-2 border border-gray-300 rounded-lg text-sm font-medium text-gray-700 bg-white hover:bg-gray-50"
          >
            <Plus className="w-4 h-4" />
            Agregar Actor/Actriz
          </button>
        </div>

        {/* Modal de búsqueda de personas */}
        {showPersonSearch && (
          <div className="fixed inset-0 bg-gray-500 bg-opacity-75 flex items-center justify-center p-4 z-50">
            <div className="bg-white rounded-lg max-w-md w-full p-6">
              <h3 className="text-lg font-medium text-gray-900 mb-4">
                {addingType === 'cast' ? 'Agregar Actor/Actriz' : 'Agregar Miembro del Equipo'}
              </h3>

              <div className="space-y-4">
                {/* Búsqueda de persona */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Buscar Persona
                  </label>
                  <div className="relative">
                    <input
                      type="text"
                      value={personSearch}
                      onChange={(e) => {
                        setPersonSearch(e.target.value)
                        searchPeople(e.target.value)
                      }}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      placeholder="Escriba el nombre..."
                    />
                    <Search className="absolute right-3 top-2.5 w-5 h-5 text-gray-400" />
                  </div>

                  {availablePeople.length > 0 && (
                    <div className="mt-2 border border-gray-200 rounded-lg max-h-40 overflow-y-auto">
                      {availablePeople.map((person: any) => (
                        <button
                          key={person.id}
                          type="button"
                          onClick={() => setNewPerson({ ...newPerson, personId: person.id })}
                          className={`w-full text-left px-3 py-2 hover:bg-gray-50 ${newPerson.personId === person.id ? 'bg-blue-50' : ''
                            }`}
                        >
                          {person.name}
                        </button>
                      ))}
                    </div>
                  )}

                  {personSearch && availablePeople.length === 0 && (
                    <button
                      type="button"
                      onClick={createNewPerson}
                      className="mt-2 text-sm text-blue-600 hover:text-blue-800"
                    >
                      Crear nueva persona: "{personSearch}"
                    </button>
                  )}
                </div>

                {/* Campos específicos según el tipo */}
                {addingType === 'cast' && (
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Personaje
                    </label>
                    <input
                      type="text"
                      value={newPerson.characterName}
                      onChange={(e) => setNewPerson({ ...newPerson, characterName: e.target.value })}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      placeholder="Nombre del personaje"
                    />
                  </div>
                )}

                {addingType === 'crew' && (
                  <>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        Rol
                      </label>
                      <select
                        value={newPerson.role}
                        onChange={(e) => setNewPerson({ ...newPerson, role: e.target.value })}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      >
                        <option value="">Seleccionar...</option>
                        <option value="Director">Director</option>
                        <option value="Guionista">Guionista</option>
                        <option value="Productor">Productor</option>
                        <option value="Productor Ejecutivo">Productor Ejecutivo</option>
                        <option value="Director de Fotografía">Director de Fotografía</option>
                        <option value="Editor">Editor</option>
                        <option value="Compositor">Compositor</option>
                        <option value="Director de Arte">Director de Arte</option>
                        <option value="Diseñador de Vestuario">Diseñador de Vestuario</option>
                        <option value="Maquillador">Maquillador</option>
                        <option value="Sonidista">Sonidista</option>
                      </select>
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        Departamento
                      </label>
                      <select
                        value={newPerson.department}
                        onChange={(e) => setNewPerson({ ...newPerson, department: e.target.value })}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      >
                        <option value="">Seleccionar...</option>
                        <option value="Dirección">Dirección</option>
                        <option value="Guión">Guión</option>
                        <option value="Producción">Producción</option>
                        <option value="Fotografía">Fotografía</option>
                        <option value="Montaje">Montaje</option>
                        <option value="Música">Música</option>
                        <option value="Arte">Arte</option>
                        <option value="Vestuario">Vestuario</option>
                        <option value="Maquillaje">Maquillaje</option>
                        <option value="Sonido">Sonido</option>
                        <option value="Efectos Especiales">Efectos Especiales</option>
                      </select>
                    </div>
                  </>
                )}
              </div>

              {/* Botones de acción */}
              <div className="mt-6 flex justify-end gap-3">
                <button
                  type="button"
                  onClick={() => {
                    setShowPersonSearch(false)
                    setAddingType(null)
                    setPersonSearch('')
                    setNewPerson({
                      personId: 0,
                      characterName: '',
                      role: '',
                      department: '',
                      billingOrder: 0
                    })
                  }}
                  className="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50"
                >
                  Cancelar
                </button>
                <button
                  type="button"
                  onClick={addPerson}
                  disabled={!newPerson.personId || (addingType === 'crew' && !newPerson.role)}
                  className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Agregar
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    )
  }

  if (showOnlyCrew) {
    return (
      <div className="space-y-6">
        {/* Crew */}
        <div>
          <h3 className="text-lg font-medium text-gray-900 mb-4 flex items-center gap-2">
            <UserPlus className="w-5 h-5" />
            Equipo Técnico
          </h3>

          {crew.length > 0 && (
            <div className="mb-4 space-y-2">
              {crew.map((member, index) => (
                <div key={index} className="flex items-center gap-4 p-3 bg-gray-50 rounded-lg">
                  <div className="flex-1">
                    <span className="font-medium">{member.person?.name || 'Sin nombre'}</span>
                    <span className="text-gray-500"> - {member.role}</span>
                    {member.department && (
                      <span className="text-gray-400"> ({member.department})</span>
                    )}
                  </div>
                  <button
                    type="button"
                    onClick={() => setCrew(crew.filter((_, i) => i !== index))}
                    className="text-red-600 hover:text-red-800"
                  >
                    <Trash2 className="w-4 h-4" />
                  </button>
                </div>
              ))}
            </div>
          )}

          <button
            type="button"
            onClick={() => {
              setAddingType('crew')
              setShowPersonSearch(true)
            }}
            className="inline-flex items-center gap-2 px-4 py-2 border border-gray-300 rounded-lg text-sm font-medium text-gray-700 bg-white hover:bg-gray-50"
          >
            <Plus className="w-4 h-4" />
            Agregar Miembro del Equipo
          </button>
        </div>

        {/* Modal de búsqueda de personas */}
        {showPersonSearch && (
          <div className="fixed inset-0 bg-gray-500 bg-opacity-75 flex items-center justify-center p-4 z-50">
            <div className="bg-white rounded-lg max-w-md w-full p-6">
              <h3 className="text-lg font-medium text-gray-900 mb-4">
                {addingType === 'cast' ? 'Agregar Actor/Actriz' : 'Agregar Miembro del Equipo'}
              </h3>

              <div className="space-y-4">
                {/* Búsqueda de persona */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Buscar Persona
                  </label>
                  <div className="relative">
                    <input
                      type="text"
                      value={personSearch}
                      onChange={(e) => {
                        setPersonSearch(e.target.value)
                        searchPeople(e.target.value)
                      }}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      placeholder="Escriba el nombre..."
                    />
                    <Search className="absolute right-3 top-2.5 w-5 h-5 text-gray-400" />
                  </div>

                  {availablePeople.length > 0 && (
                    <div className="mt-2 border border-gray-200 rounded-lg max-h-40 overflow-y-auto">
                      {availablePeople.map((person: any) => (
                        <button
                          key={person.id}
                          type="button"
                          onClick={() => setNewPerson({ ...newPerson, personId: person.id })}
                          className={`w-full text-left px-3 py-2 hover:bg-gray-50 ${newPerson.personId === person.id ? 'bg-blue-50' : ''
                            }`}
                        >
                          {person.name}
                        </button>
                      ))}
                    </div>
                  )}

                  {personSearch && availablePeople.length === 0 && (
                    <button
                      type="button"
                      onClick={createNewPerson}
                      className="mt-2 text-sm text-blue-600 hover:text-blue-800"
                    >
                      Crear nueva persona: "{personSearch}"
                    </button>
                  )}
                </div>

                {/* Campos específicos según el tipo */}
                {addingType === 'cast' && (
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Personaje
                    </label>
                    <input
                      type="text"
                      value={newPerson.characterName}
                      onChange={(e) => setNewPerson({ ...newPerson, characterName: e.target.value })}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      placeholder="Nombre del personaje"
                    />
                  </div>
                )}

                {addingType === 'crew' && (
                  <>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        Rol
                      </label>
                      <select
                        value={newPerson.role}
                        onChange={(e) => setNewPerson({ ...newPerson, role: e.target.value })}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      >
                        <option value="">Seleccionar...</option>
                        <option value="Director">Director</option>
                        <option value="Guionista">Guionista</option>
                        <option value="Productor">Productor</option>
                        <option value="Productor Ejecutivo">Productor Ejecutivo</option>
                        <option value="Director de Fotografía">Director de Fotografía</option>
                        <option value="Editor">Editor</option>
                        <option value="Compositor">Compositor</option>
                        <option value="Director de Arte">Director de Arte</option>
                        <option value="Diseñador de Vestuario">Diseñador de Vestuario</option>
                        <option value="Maquillador">Maquillador</option>
                        <option value="Sonidista">Sonidista</option>
                      </select>
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        Departamento
                      </label>
                      <select
                        value={newPerson.department}
                        onChange={(e) => setNewPerson({ ...newPerson, department: e.target.value })}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      >
                        <option value="">Seleccionar...</option>
                        <option value="Dirección">Dirección</option>
                        <option value="Guión">Guión</option>
                        <option value="Producción">Producción</option>
                        <option value="Fotografía">Fotografía</option>
                        <option value="Montaje">Montaje</option>
                        <option value="Música">Música</option>
                        <option value="Arte">Arte</option>
                        <option value="Vestuario">Vestuario</option>
                        <option value="Maquillaje">Maquillaje</option>
                        <option value="Sonido">Sonido</option>
                        <option value="Efectos Especiales">Efectos Especiales</option>
                      </select>
                    </div>
                  </>
                )}
              </div>

              {/* Botones de acción */}
              <div className="mt-6 flex justify-end gap-3">
                <button
                  type="button"
                  onClick={() => {
                    setShowPersonSearch(false)
                    setAddingType(null)
                    setPersonSearch('')
                    setNewPerson({
                      personId: 0,
                      characterName: '',
                      role: '',
                      department: '',
                      billingOrder: 0
                    })
                  }}
                  className="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50"
                >
                  Cancelar
                </button>
                <button
                  type="button"
                  onClick={addPerson}
                  disabled={!newPerson.personId || (addingType === 'crew' && !newPerson.role)}
                  className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Agregar
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    )
  }

  if (showOnlyCompanies) {
    return (
      <div className="space-y-6">
        {/* Productoras */}
        <div>
          <h3 className="text-lg font-medium text-gray-900 mb-4 flex items-center gap-2">
            <Building className="w-5 h-5" />
            Productoras
          </h3>
          <select
            multiple
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            value={selectedProductionCompanies.map(String)}
            onChange={(e) => {
              const selected = Array.from(e.target.selectedOptions, option => parseInt(option.value))
              setSelectedProductionCompanies(selected)
            }}
          >
            {availableProductionCompanies.map((company: any) => (
              <option key={company.id} value={company.id}>
                {company.name}
              </option>
            ))}
          </select>
          <p className="mt-1 text-sm text-gray-500">
            Mantén presionado Ctrl/Cmd para seleccionar múltiples opciones
          </p>
        </div>

        {/* Distribuidoras */}
        <div>
          <h3 className="text-lg font-medium text-gray-900 mb-4 flex items-center gap-2">
            <Building className="w-5 h-5" />
            Distribuidoras
          </h3>
          <select
            multiple
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            value={selectedDistributionCompanies.map(String)}
            onChange={(e) => {
              const selected = Array.from(e.target.selectedOptions, option => parseInt(option.value))
              setSelectedDistributionCompanies(selected)
            }}
          >
            {availableDistributionCompanies.map((company: any) => (
              <option key={company.id} value={company.id}>
                {company.name}
              </option>
            ))}
          </select>
          <p className="mt-1 text-sm text-gray-500">
            Mantén presionado Ctrl/Cmd para seleccionar múltiples opciones
          </p>
        </div>
      </div>
    )
  }

  // Renderizar todo por defecto
  return (
    <div className="space-y-6">
      {/* Géneros */}
      <div>
        <h3 className="text-lg font-medium text-gray-900 mb-4 flex items-center gap-2">
          <Hash className="w-5 h-5" />
          Géneros
        </h3>
        <div className="flex flex-wrap gap-2">
          {availableGenres.map((genre: any) => (
            <label
              key={genre.id}
              className="inline-flex items-center"
            >
              <input
                type="checkbox"
                className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                checked={selectedGenres.includes(genre.id)}
                onChange={(e) => {
                  if (e.target.checked) {
                    setSelectedGenres([...selectedGenres, genre.id])
                  } else {
                    setSelectedGenres(selectedGenres.filter(id => id !== genre.id))
                  }
                }}
              />
              <span className="ml-2 text-sm text-gray-700">{genre.name}</span>
            </label>
          ))}
        </div>
      </div>

      {/* Cast */}
      <div>
        <h3 className="text-lg font-medium text-gray-900 mb-4 flex items-center gap-2">
          <UserPlus className="w-5 h-5" />
          Reparto
        </h3>

        {cast.length > 0 && (
          <div className="mb-4 space-y-2">
            {cast.map((member, index) => (
              <div key={index} className="flex items-center gap-4 p-3 bg-gray-50 rounded-lg">
                <div className="flex-1">
                  <span className="font-medium">{member.person?.name || 'Sin nombre'}</span>
                  {member.characterName && (
                    <span className="text-gray-500"> como {member.characterName}</span>
                  )}
                </div>
                <button
                  type="button"
                  onClick={() => setCast(cast.filter((_, i) => i !== index))}
                  className="text-red-600 hover:text-red-800"
                >
                  <Trash2 className="w-4 h-4" />
                </button>
              </div>
            ))}
          </div>
        )}

        <button
          type="button"
          onClick={() => {
            setAddingType('cast')
            setShowPersonSearch(true)
          }}
          className="inline-flex items-center gap-2 px-4 py-2 border border-gray-300 rounded-lg text-sm font-medium text-gray-700 bg-white hover:bg-gray-50"
        >
          <Plus className="w-4 h-4" />
          Agregar Actor/Actriz
        </button>
      </div>

      {/* Crew */}
      <div>
        <h3 className="text-lg font-medium text-gray-900 mb-4 flex items-center gap-2">
          <UserPlus className="w-5 h-5" />
          Equipo Técnico
        </h3>

        {crew.length > 0 && (
          <div className="mb-4 space-y-2">
            {crew.map((member, index) => (
              <div key={index} className="flex items-center gap-4 p-3 bg-gray-50 rounded-lg">
                <div className="flex-1">
                  <span className="font-medium">{member.person?.name || 'Sin nombre'}</span>
                  <span className="text-gray-500"> - {member.role}</span>
                  {member.department && (
                    <span className="text-gray-400"> ({member.department})</span>
                  )}
                </div>
                <button
                  type="button"
                  onClick={() => setCrew(crew.filter((_, i) => i !== index))}
                  className="text-red-600 hover:text-red-800"
                >
                  <Trash2 className="w-4 h-4" />
                </button>
              </div>
            ))}
          </div>
        )}

        <button
          type="button"
          onClick={() => {
            setAddingType('crew')
            setShowPersonSearch(true)
          }}
          className="inline-flex items-center gap-2 px-4 py-2 border border-gray-300 rounded-lg text-sm font-medium text-gray-700 bg-white hover:bg-gray-50"
        >
          <Plus className="w-4 h-4" />
          Agregar Miembro del Equipo
        </button>
      </div>

      {/* Países */}
      <div>
        <h3 className="text-lg font-medium text-gray-900 mb-4 flex items-center gap-2">
          <Globe className="w-5 h-5" />
          Países Coproductores
        </h3>
        <div className="flex flex-wrap gap-2">
          {availableCountries.map((country: any) => (
            <button
              key={country.id}
              type="button"
              onClick={() => {
                if (selectedCountries.includes(country.id)) {
                  setSelectedCountries(selectedCountries.filter(id => id !== country.id))
                } else {
                  setSelectedCountries([...selectedCountries, country.id])
                }
              }}
              className={`px-3 py-1 rounded-full text-sm font-medium transition-colors ${selectedCountries.includes(country.id)
                ? 'bg-blue-600 text-white'
                : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
                }`}
            >
              {country.name}
            </button>
          ))}
        </div>
      </div>

      {/* Temas */}
      {availableThemes.length > 0 && (
        <div>
          <h3 className="text-lg font-medium text-gray-900 mb-4 flex items-center gap-2">
            <Tag className="w-5 h-5" />
            Temas / Palabras Clave
          </h3>

          {/* Tags de temas seleccionados */}
          {selectedThemes.length > 0 && (
            <div className="flex flex-wrap gap-2 mb-3">
              {selectedThemes.map(themeId => {
                const theme = availableThemes.find(t => t.id === themeId)
                if (!theme) return null
                return (
                  <span
                    key={theme.id}
                    className="inline-flex items-center gap-1 px-3 py-1 rounded-full text-sm bg-purple-100 text-purple-800"
                  >
                    {theme.name}
                    <button
                      type="button"
                      onClick={() => setSelectedThemes(selectedThemes.filter(id => id !== theme.id))}
                      className="ml-1 hover:text-purple-600"
                    >
                      <X className="w-3 h-3" />
                    </button>
                  </span>
                )
              })}
            </div>
          )}

          {/* Buscador de temas */}
          <div className="relative">
            <input
              type="text"
              placeholder="Buscar temas..."
              value={themeSearch}
              onChange={(e) => setThemeSearch(e.target.value)}
              className="w-full px-3 py-2 pr-10 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
            <Search className="absolute right-3 top-2.5 w-5 h-5 text-gray-400" />
          </div>

          {/* Lista filtrada de temas */}
          {themeSearch && (
            <div className="mt-2 max-h-48 overflow-y-auto border border-gray-200 rounded-lg">
              {availableThemes
                .filter((theme: any) =>
                  theme.name.toLowerCase().includes(themeSearch.toLowerCase()) &&
                  !selectedThemes.includes(theme.id)
                )
                .map((theme: any) => (
                  <button
                    key={theme.id}
                    type="button"
                    onClick={() => {
                      setSelectedThemes([...selectedThemes, theme.id])
                      setThemeSearch('')
                    }}
                    className="w-full text-left px-3 py-2 hover:bg-gray-50 border-b border-gray-100 last:border-b-0"
                  >
                    <span className="text-sm text-gray-700">{theme.name}</span>
                  </button>
                ))}
              {availableThemes.filter((theme: any) =>
                theme.name.toLowerCase().includes(themeSearch.toLowerCase()) &&
                !selectedThemes.includes(theme.id)
              ).length === 0 && (
                  <div className="px-3 py-2 text-sm text-gray-500">
                    No se encontraron temas
                  </div>
                )}
            </div>
          )}

          <p className="mt-1 text-xs text-gray-500">
            Escribe para buscar y agregar temas
          </p>
        </div>
      )}

      {/* Productoras */}
      <div>
        <h3 className="text-lg font-medium text-gray-900 mb-4 flex items-center gap-2">
          <Building className="w-5 h-5" />
          Productoras
        </h3>
        <select
          multiple
          className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          value={selectedProductionCompanies.map(String)}
          onChange={(e) => {
            const selected = Array.from(e.target.selectedOptions, option => parseInt(option.value))
            setSelectedProductionCompanies(selected)
          }}
        >
          {availableProductionCompanies.map((company: any) => (
            <option key={company.id} value={company.id}>
              {company.name}
            </option>
          ))}
        </select>
        <p className="mt-1 text-sm text-gray-500">
          Mantén presionado Ctrl/Cmd para seleccionar múltiples opciones
        </p>
      </div>

      {/* Distribuidoras */}
      <div>
        <h3 className="text-lg font-medium text-gray-900 mb-4 flex items-center gap-2">
          <Building className="w-5 h-5" />
          Distribuidoras
        </h3>
        <select
          multiple
          className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          value={selectedDistributionCompanies.map(String)}
          onChange={(e) => {
            const selected = Array.from(e.target.selectedOptions, option => parseInt(option.value))
            setSelectedDistributionCompanies(selected)
          }}
        >
          {availableDistributionCompanies.map((company: any) => (
            <option key={company.id} value={company.id}>
              {company.name}
            </option>
          ))}
        </select>
        <p className="mt-1 text-sm text-gray-500">
          Mantén presionado Ctrl/Cmd para seleccionar múltiples opciones
        </p>
      </div>

      {/* Modal de búsqueda de personas */}
      {showPersonSearch && (
        <div className="fixed inset-0 bg-gray-500 bg-opacity-75 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg max-w-md w-full p-6">
            <h3 className="text-lg font-medium text-gray-900 mb-4">
              {addingType === 'cast' ? 'Agregar Actor/Actriz' : 'Agregar Miembro del Equipo'}
            </h3>

            <div className="space-y-4">
              {/* Búsqueda de persona */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Buscar Persona
                </label>
                <div className="relative">
                  <input
                    type="text"
                    value={personSearch}
                    onChange={(e) => {
                      setPersonSearch(e.target.value)
                      searchPeople(e.target.value)
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder="Escriba el nombre..."
                  />
                  <Search className="absolute right-3 top-2.5 w-5 h-5 text-gray-400" />
                </div>

                {availablePeople.length > 0 && (
                  <div className="mt-2 border border-gray-200 rounded-lg max-h-40 overflow-y-auto">
                    {availablePeople.map((person: any) => (
                      <button
                        key={person.id}
                        type="button"
                        onClick={() => setNewPerson({ ...newPerson, personId: person.id })}
                        className={`w-full text-left px-3 py-2 hover:bg-gray-50 ${newPerson.personId === person.id ? 'bg-blue-50' : ''
                          }`}
                      >
                        {person.name}
                      </button>
                    ))}
                  </div>
                )}

                {personSearch && availablePeople.length === 0 && (
                  <button
                    type="button"
                    onClick={createNewPerson}
                    className="mt-2 text-sm text-blue-600 hover:text-blue-800"
                  >
                    Crear nueva persona: "{personSearch}"
                  </button>
                )}
              </div>

              {/* Campos específicos según el tipo */}
              {addingType === 'cast' && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Personaje
                  </label>
                  <input
                    type="text"
                    value={newPerson.characterName}
                    onChange={(e) => setNewPerson({ ...newPerson, characterName: e.target.value })}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder="Nombre del personaje"
                  />
                </div>
              )}

              {addingType === 'crew' && (
                <>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Rol
                    </label>
                    <select
                      value={newPerson.role}
                      onChange={(e) => setNewPerson({ ...newPerson, role: e.target.value })}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    >
                      <option value="">Seleccionar...</option>
                      <option value="Director">Director</option>
                      <option value="Guionista">Guionista</option>
                      <option value="Productor">Productor</option>
                      <option value="Productor Ejecutivo">Productor Ejecutivo</option>
                      <option value="Director de Fotografía">Director de Fotografía</option>
                      <option value="Editor">Editor</option>
                      <option value="Compositor">Compositor</option>
                      <option value="Director de Arte">Director de Arte</option>
                      <option value="Diseñador de Vestuario">Diseñador de Vestuario</option>
                      <option value="Maquillador">Maquillador</option>
                      <option value="Sonidista">Sonidista</option>
                    </select>
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Departamento
                    </label>
                    <select
                      value={newPerson.department}
                      onChange={(e) => setNewPerson({ ...newPerson, department: e.target.value })}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    >
                      <option value="">Seleccionar...</option>
                      <option value="Dirección">Dirección</option>
                      <option value="Guión">Guión</option>
                      <option value="Producción">Producción</option>
                      <option value="Fotografía">Fotografía</option>
                      <option value="Montaje">Montaje</option>
                      <option value="Música">Música</option>
                      <option value="Arte">Arte</option>
                      <option value="Vestuario">Vestuario</option>
                      <option value="Maquillaje">Maquillaje</option>
                      <option value="Sonido">Sonido</option>
                      <option value="Efectos Especiales">Efectos Especiales</option>
                    </select>
                  </div>
                </>
              )}
            </div>

            {/* Botones de acción */}
            <div className="mt-6 flex justify-end gap-3">
              <button
                type="button"
                onClick={() => {
                  setShowPersonSearch(false)
                  setAddingType(null)
                  setPersonSearch('')
                  setNewPerson({
                    personId: 0,
                    characterName: '',
                    role: '',
                    department: '',
                    billingOrder: 0
                  })
                }}
                className="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50"
              >
                Cancelar
              </button>
              <button
                type="button"
                onClick={addPerson}
                disabled={!newPerson.personId || (addingType === 'crew' && !newPerson.role)}
                className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
              >
                Agregar
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}

// ==================================================
// src/components/admin/MovieLinksManager.tsx
// ==================================================
import { useState } from 'react';
import { Plus, Trash2, Link, ExternalLink } from 'lucide-react';

interface MovieLink {
  id?: number;
  type: string;
  url: string;
  title?: string;
  isActive?: boolean;
}

interface MovieLinksManagerProps {
  initialLinks?: MovieLink[];
  onLinksChange: (links: MovieLink[]) => void;
}

const LINK_TYPES = [
  { value: 'INSTAGRAM', label: 'Instagram', icon: '📷' },
  { value: 'TWITTER', label: 'X (Twitter)', icon: '𝕏' },
  { value: 'FACEBOOK', label: 'Facebook', icon: '👤' },
  { value: 'TIKTOK', label: 'TikTok', icon: '🎵' },
  { value: 'YOUTUBE', label: 'YouTube', icon: '▶️' },
  { value: 'WEBSITE', label: 'Sitio Web Oficial', icon: '🌐' }
];

export default function MovieLinksManager({ 
  initialLinks = [], 
  onLinksChange 
}: MovieLinksManagerProps) {
  const [links, setLinks] = useState<MovieLink[]>(initialLinks);
  const [showAddForm, setShowAddForm] = useState(false);
  const [newLink, setNewLink] = useState<MovieLink>({
    type: 'WEBSITE',
    url: '',
    title: ''
  });

  const handleAddLink = () => {
    if (!newLink.url || !newLink.type) return;

    const updatedLinks = [...links, { ...newLink, isActive: true }];
    setLinks(updatedLinks);
    onLinksChange(updatedLinks);

    // Reset form
    setNewLink({ type: 'WEBSITE', url: '', title: '' });
    setShowAddForm(false);
  };

  const handleRemoveLink = (index: number) => {
    const updatedLinks = links.filter((_, i) => i !== index);
    setLinks(updatedLinks);
    onLinksChange(updatedLinks);
  };

  const getLinkTypeInfo = (type: string) => {
    return LINK_TYPES.find(t => t.value === type) || LINK_TYPES[5];
  };

  const getPlaceholderUrl = (type: string) => {
    switch (type) {
      case 'INSTAGRAM':
        return 'https://www.instagram.com/peliculaejemplo';
      case 'TWITTER':
        return 'https://twitter.com/peliculaejemplo';
      case 'FACEBOOK':
        return 'https://www.facebook.com/peliculaejemplo';
      case 'TIKTOK':
        return 'https://www.tiktok.com/@peliculaejemplo';
      case 'YOUTUBE':
        return 'https://www.youtube.com/channel/UCxxxxxx';
      case 'WEBSITE':
      default:
        return 'https://www.peliculaejemplo.com';
    }
  };

  return (
    <div className="space-y-4">
      <h3 className="text-lg font-medium text-gray-900 mb-4 flex items-center gap-2">
        <Link className="w-5 h-5" />
        Links Oficiales
      </h3>

      {/* Lista de links existentes */}
      {links.length > 0 && (
        <div className="space-y-2 mb-4">
          {links.map((link, index) => {
            const typeInfo = getLinkTypeInfo(link.type);
            return (
              <div 
                key={index} 
                className="flex items-center gap-4 p-3 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors"
              >
                <span className="text-2xl">{typeInfo.icon}</span>
                <div className="flex-1">
                  <div className="flex items-center gap-2">
                    <span className="font-medium text-gray-900">{typeInfo.label}</span>
                    {link.title && (
                      <span className="text-sm text-gray-500">- {link.title}</span>
                    )}
                  </div>
                  <a 
                    href={link.url} 
                    target="_blank" 
                    rel="noopener noreferrer"
                    className="text-sm text-blue-600 hover:text-blue-800 flex items-center gap-1"
                  >
                    {link.url}
                    <ExternalLink className="w-3 h-3" />
                  </a>
                </div>
                <button
                  type="button"
                  onClick={() => handleRemoveLink(index)}
                  className="text-red-600 hover:text-red-800 transition-colors"
                >
                  <Trash2 className="w-4 h-4" />
                </button>
              </div>
            );
          })}
        </div>
      )}

      {/* Formulario para agregar nuevo link */}
      {showAddForm ? (
        <div className="border border-gray-300 rounded-lg p-4 space-y-4 bg-gray-50">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Tipo de Link
              </label>
              <select
                value={newLink.type}
                onChange={(e) => setNewLink({ ...newLink, type: e.target.value })}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
              >
                {LINK_TYPES.map(type => (
                  <option key={type.value} value={type.value}>
                    {type.icon} {type.label}
                  </option>
                ))}
              </select>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Título/Descripción (opcional)
              </label>
              <input
                type="text"
                value={newLink.title || ''}
                onChange={(e) => setNewLink({ ...newLink, title: e.target.value })}
                placeholder="Ej: Cuenta oficial"
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
              />
            </div>
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              URL
            </label>
            <input
              type="url"
              value={newLink.url}
              onChange={(e) => setNewLink({ ...newLink, url: e.target.value })}
              placeholder={getPlaceholderUrl(newLink.type)}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
              required
            />
          </div>

          <div className="flex justify-end gap-3">
            <button
              type="button"
              onClick={() => {
                setShowAddForm(false);
                setNewLink({ type: 'WEBSITE', url: '', title: '' });
              }}
              className="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors"
            >
              Cancelar
            </button>
            <button
              type="button"
              onClick={handleAddLink}
              disabled={!newLink.url}
              className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
            >
              Agregar Link
            </button>
          </div>
        </div>
      ) : (
        <button
          type="button"
          onClick={() => setShowAddForm(true)}
          className="inline-flex items-center gap-2 px-4 py-2 border border-gray-300 rounded-lg text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 transition-colors"
        >
          <Plus className="w-4 h-4" />
          Agregar Link Oficial
        </button>
      )}

      {links.length === 0 && !showAddForm && (
        <p className="text-sm text-gray-500 italic">
          No hay links oficiales agregados para esta película.
        </p>
      )}
    </div>
  );
}

// ==================================================
// src/components/admin/movies/MovieModal/index.tsx
// ==================================================
// src/components/admin/movies/MovieModal/index.tsx
import * as Tabs from '@radix-ui/react-tabs'
import { UseFormRegister, UseFormHandleSubmit, UseFormWatch, UseFormSetValue, UseFormReset, FieldErrors } from 'react-hook-form'
import { MovieFormData, Movie, PartialReleaseDate, PartialFilmingDate } from '@/lib/movies/movieTypes'

// Componentes del modal
import MovieModalHeader from './MovieModalHeader'
import MovieModalTabs from './MovieModalTabs'
import MovieModalFooter from './MovieModalFooter'

// Tabs
import BasicInfoTab from './tabs/BasicInfoTab'
import MediaTab from './tabs/MediaTab'
import CastTab from './tabs/CastTab'
import CrewTab from './tabs/CrewTab'
import AdvancedTab from './tabs/AdvancedTab'

interface MovieModalProps {
  isOpen: boolean
  onClose: () => void
  editingMovie: Movie | null
  onSubmit: (data: MovieFormData) => Promise<void>
  isSubmitting: boolean

  // Props del formulario
  register: UseFormRegister<MovieFormData>
  handleSubmit: UseFormHandleSubmit<MovieFormData>
  watch: UseFormWatch<MovieFormData>
  setValue: UseFormSetValue<MovieFormData>
  reset: UseFormReset<MovieFormData>
  errors: FieldErrors<MovieFormData>

  // Estados que necesitamos pasar
  activeTab: string
  setActiveTab: (tab: string) => void
  isPartialDate: boolean
  setIsPartialDate: (value: boolean) => void
  partialReleaseDate: PartialReleaseDate
  setPartialReleaseDate: (value: PartialReleaseDate) => void
  tipoDuracionDisabled: boolean

  // Estados para fechas de rodaje
  isPartialFilmingStartDate: boolean
  setIsPartialFilmingStartDate: (value: boolean) => void
  partialFilmingStartDate: PartialFilmingDate
  setPartialFilmingStartDate: (value: PartialFilmingDate) => void

  isPartialFilmingEndDate: boolean
  setIsPartialFilmingEndDate: (value: boolean) => void
  partialFilmingEndDate: PartialFilmingDate
  setPartialFilmingEndDate: (value: PartialFilmingDate) => void
  handleScreeningVenuesChange: (venues: number[]) => void
  // Metadata
  availableRatings: any[]
  availableColorTypes: any[]

  // Relaciones
  movieFormInitialData: any
  alternativeTitles: any[]
  setAlternativeTitles: (titles: any[]) => void
  movieLinks: any[]

  // Callbacks
  handleGenresChange: (genres: number[]) => void
  handleCastChange: (cast: any[]) => void
  handleCrewChange: (crew: any[]) => void
  handleCountriesChange: (countries: number[]) => void
  handleProductionCompaniesChange: (companies: number[]) => void
  handleDistributionCompaniesChange: (companies: number[]) => void
  handleThemesChange: (themes: number[]) => void
  handleLinksChange: (links: any[]) => void
}

export default function MovieModal({
  isOpen,
  onClose,
  editingMovie,
  onSubmit,
  isSubmitting,
  register,
  handleSubmit,
  watch,
  setValue,
  reset,
  errors,
  activeTab,
  setActiveTab,
  isPartialDate,
  setIsPartialDate,
  partialReleaseDate,
  setPartialReleaseDate,
  tipoDuracionDisabled,
  isPartialFilmingStartDate,
  setIsPartialFilmingStartDate,
  partialFilmingStartDate,
  setPartialFilmingStartDate,
  isPartialFilmingEndDate,
  setIsPartialFilmingEndDate,
  partialFilmingEndDate,
  setPartialFilmingEndDate,
  availableRatings,
  availableColorTypes,
  movieFormInitialData,
  alternativeTitles,
  setAlternativeTitles,
  movieLinks,
  handleGenresChange,
  handleCastChange,
  handleCrewChange,
  handleCountriesChange,
  handleProductionCompaniesChange,
  handleDistributionCompaniesChange,
  handleScreeningVenuesChange,
  handleThemesChange,
  handleLinksChange
}: MovieModalProps) {
  if (!isOpen) return null

  return (
    <div className="fixed inset-0 bg-gray-500 bg-opacity-75 flex items-center justify-center p-4 z-50">
      <div className="bg-white rounded-lg max-w-4xl w-full max-h-[90vh] overflow-hidden">
        <MovieModalHeader
          isEditing={!!editingMovie}
          onClose={onClose}
        />

        <form onSubmit={handleSubmit(onSubmit)} className="overflow-y-auto max-h-[calc(90vh-8rem)]">
          <Tabs.Root value={activeTab} onValueChange={setActiveTab} className="w-full">
            <MovieModalTabs
              activeTab={activeTab}
              onTabChange={setActiveTab}
            />

            <div className="p-6">
              <Tabs.Content value="basic">
                <BasicInfoTab
                  register={register}
                  watch={watch}
                  setValue={setValue}
                  errors={errors}
                  isPartialDate={isPartialDate}
                  setIsPartialDate={setIsPartialDate}
                  partialReleaseDate={partialReleaseDate}
                  setPartialReleaseDate={setPartialReleaseDate}
                  tipoDuracionDisabled={tipoDuracionDisabled}
                  isPartialFilmingStartDate={isPartialFilmingStartDate}
                  setIsPartialFilmingStartDate={setIsPartialFilmingStartDate}
                  partialFilmingStartDate={partialFilmingStartDate}
                  setPartialFilmingStartDate={setPartialFilmingStartDate}
                  isPartialFilmingEndDate={isPartialFilmingEndDate}
                  setIsPartialFilmingEndDate={setIsPartialFilmingEndDate}
                  partialFilmingEndDate={partialFilmingEndDate}
                  setPartialFilmingEndDate={setPartialFilmingEndDate}
                  movieFormInitialData={movieFormInitialData}
                  movieLinks={movieLinks}
                  handleGenresChange={handleGenresChange}
                  handleCountriesChange={handleCountriesChange}
                  handleThemesChange={handleThemesChange}
                  handleLinksChange={handleLinksChange}
                  handleScreeningVenuesChange={handleScreeningVenuesChange}
                  editingMovieId={editingMovie?.id}
                />
              </Tabs.Content>

              <Tabs.Content value="media">
                <MediaTab
                  register={register}
                  watch={watch}
                  setValue={setValue}
                  editingMovieId={editingMovie?.id}
                />
              </Tabs.Content>

              <Tabs.Content value="cast">
                <CastTab
                  handleCastChange={handleCastChange}
                  movieFormInitialData={movieFormInitialData}
                  editingMovieId={editingMovie?.id}
                />
              </Tabs.Content>

              <Tabs.Content value="crew">
                <CrewTab
                  handleCrewChange={handleCrewChange}
                  movieFormInitialData={movieFormInitialData}
                  editingMovieId={editingMovie?.id}
                />
              </Tabs.Content>

              <Tabs.Content value="advanced">
                <AdvancedTab
                  register={register}
                  watch={watch}
                  availableRatings={availableRatings}
                  availableColorTypes={availableColorTypes}
                  alternativeTitles={alternativeTitles}
                  setAlternativeTitles={setAlternativeTitles}
                  movieFormInitialData={movieFormInitialData}
                  handleProductionCompaniesChange={handleProductionCompaniesChange}
                  handleDistributionCompaniesChange={handleDistributionCompaniesChange}
                  editingMovieId={editingMovie?.id}
                />
              </Tabs.Content>
            </div>
          </Tabs.Root>

          <MovieModalFooter
            isSubmitting={isSubmitting}
            isEditing={!!editingMovie}
            onCancel={onClose}
            errors={errors}
          />
        </form>
      </div>
    </div>
  )
}

// ==================================================
// src/components/admin/movies/MovieModal/MovieModalFooter.tsx
// ==================================================
// src/components/admin/movies/MovieModal/MovieModalFooter.tsx
import { Save, Loader2 } from 'lucide-react'

interface MovieModalFooterProps {
  isSubmitting: boolean
  isEditing: boolean
  onCancel: () => void
  errors: any
}

export default function MovieModalFooter({ 
  isSubmitting, 
  isEditing, 
  onCancel, 
  errors 
}: MovieModalFooterProps) {
  return (
    <div className="px-6 py-4 bg-gray-50 border-t border-gray-200 flex items-center justify-end gap-4">
      <button
        type="button"
        onClick={onCancel}
        className="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors"
      >
        Cancelar
      </button>
      
      {Object.keys(errors).length > 0 && (
        <div className="px-6 py-2 bg-red-50 text-red-800 text-sm">
          Errores: {Object.keys(errors).join(', ')}
        </div>
      )}
      
      <button
        type="submit"
        disabled={isSubmitting}
        className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-2"
      >
        {isSubmitting ? (
          <>
            <Loader2 className="w-4 h-4 animate-spin" />
            Guardando...
          </>
        ) : (
          <>
            <Save className="w-4 h-4" />
            {isEditing ? 'Actualizar' : 'Crear'} Película
          </>
        )}
      </button>
    </div>
  )
}

// ==================================================
// src/components/admin/movies/MovieModal/MovieModalHeader.tsx
// ==================================================
// src/components/admin/movies/MovieModal/MovieModalHeader.tsx
import { X } from 'lucide-react'

interface MovieModalHeaderProps {
  isEditing: boolean
  onClose: () => void
}

export default function MovieModalHeader({ isEditing, onClose }: MovieModalHeaderProps) {
  return (
    <div className="bg-gray-50 px-6 py-4 border-b border-gray-200">
      <div className="flex items-center justify-between">
        <h2 className="text-xl font-semibold text-gray-900">
          {isEditing ? 'Editar Película' : 'Nueva Película'}
        </h2>
        <button
          onClick={onClose}
          className="text-gray-400 hover:text-gray-500"
        >
          <X className="w-6 h-6" />
        </button>
      </div>
    </div>
  )
}

// ==================================================
// src/components/admin/movies/MovieModal/MovieModalTabs.tsx
// ==================================================
// src/components/admin/movies/MovieModal/MovieModalTabs.tsx
import * as Tabs from '@radix-ui/react-tabs'
import { Info, Image, Users, Briefcase, Settings } from 'lucide-react'

interface MovieModalTabsProps {
  activeTab: string
  onTabChange: (value: string) => void
}

const TABS = [
  { value: 'basic', label: 'Información Básica', icon: Info },
  { value: 'media', label: 'Multimedia', icon: Image },
  { value: 'cast', label: 'Reparto', icon: Users },
  { value: 'crew', label: 'Equipo Técnico', icon: Briefcase },
  { value: 'advanced', label: 'Avanzado', icon: Settings }
]

export default function MovieModalTabs({ activeTab, onTabChange }: MovieModalTabsProps) {
  return (
    <Tabs.List className="flex border-b border-gray-200 px-6 pt-4">
      {TABS.map((tab) => {
        const Icon = tab.icon
        return (
          <Tabs.Trigger
            key={tab.value}
            value={tab.value}
            className={`px-4 py-2 -mb-px text-sm font-medium transition-colors ${
              activeTab === tab.value
                ? 'text-blue-600 border-b-2 border-blue-600'
                : 'text-gray-500 hover:text-gray-700'
            }`}
          >
            <div className="flex items-center gap-2">
              <Icon className="w-4 h-4" />
              {tab.label}
            </div>
          </Tabs.Trigger>
        )
      })}
    </Tabs.List>
  )
}

// ==================================================
// src/components/admin/movies/MovieModal/tabs/AdvancedTab.tsx
// ==================================================
// src/components/admin/movies/MovieModal/tabs/AdvancedTab.tsx
import { UseFormRegister, UseFormWatch } from 'react-hook-form'
import { MovieFormData } from '@/lib/movies/movieTypes'
import { SOUND_TYPES } from '@/lib/movies/movieConstants'
import AlternativeTitlesManager from '@/components/admin/AlternativeTitlesManager'
import MovieFormEnhanced from '@/components/admin/MovieFormEnhanced'

interface AdvancedTabProps {
  register: UseFormRegister<MovieFormData>
  watch: UseFormWatch<MovieFormData>

  // Metadata
  availableRatings: any[]
  availableColorTypes: any[]

  // Títulos alternativos
  alternativeTitles: any[]
  setAlternativeTitles: (titles: any[]) => void

  // Compañías
  movieFormInitialData: any
  handleProductionCompaniesChange: (companies: number[]) => void
  handleDistributionCompaniesChange: (companies: number[]) => void

  editingMovieId?: number
}

export default function AdvancedTab({
  register,
  watch,
  availableRatings,
  availableColorTypes,
  alternativeTitles,
  setAlternativeTitles,
  movieFormInitialData,
  handleProductionCompaniesChange,
  handleDistributionCompaniesChange,
  editingMovieId
}: AdvancedTabProps) {
  return (
    <div className="space-y-6">
      {/* Información técnica */}
      <div className="space-y-4">
        <h3 className="text-lg font-medium text-gray-900 mb-4">
          Información Técnica
        </h3>

        <div className="grid grid-cols-2 gap-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Color
            </label>
            <select
              {...register('colorTypeId', { valueAsNumber: true })}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
            >
              <option value="">Seleccionar...</option>
              {availableColorTypes.map((colorType) => (
                <option key={colorType.id} value={colorType.id}>
                  {colorType.name}
                </option>
              ))}
            </select>
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Sonido
            </label>
            <select
              {...register('soundType')}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
            >
              <option value="">Seleccionar...</option>
              {SOUND_TYPES.map(sound => (
                <option key={sound.value} value={sound.value}>
                  {sound.label}
                </option>
              ))}
            </select>
          </div>
        </div>
      </div>

      {/* Clasificación */}
      <div>
        <label className="block text-sm font-medium text-gray-700 mb-1">
          Calificación
        </label>
        <select
          {...register('ratingId', {
            setValueAs: (v) => {
              if (v === '' || v === '0' || v === 0) return null;
              return Number(v);
            }
          })}
          className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
        >
          <option value="">Sin calificación</option>
          {availableRatings.map((rating) => (
            <option key={rating.id} value={rating.id}>
              {rating.name} {rating.abbreviation && `(${rating.abbreviation})`}
            </option>
          ))}
        </select>
        {(() => {
          const selectedRating = availableRatings.find(r => r.id === watch('ratingId'))
          return selectedRating?.description && (
            <p className="mt-1 text-sm text-gray-500">
              {selectedRating.description}
            </p>
          )
        })()}
      </div>

      {/* Títulos Alternativos */}
      <div className="mt-6">
        <AlternativeTitlesManager
          onChange={setAlternativeTitles}
          initialTitles={editingMovieId ? alternativeTitles : []}
        />
      </div>

      {/* Productoras y Distribuidoras */}
      <MovieFormEnhanced
        key={editingMovieId || 'new'}
        onGenresChange={() => { }}
        onCastChange={() => { }}
        onCrewChange={() => { }}
        onCountriesChange={() => { }}
        onProductionCompaniesChange={handleProductionCompaniesChange}
        onDistributionCompaniesChange={handleDistributionCompaniesChange}
        onThemesChange={() => { }}
        onScreeningVenuesChange={() => { }}
        initialData={movieFormInitialData}
        showOnlyCompanies={true}
      />

      <div>
        <label className="block text-sm font-medium text-gray-700 mb-1">
          Notas Internas
        </label>
        <textarea
          {...register('notes')}  // 👈 Usar register como los otros campos
          rows={4}
          placeholder="Anotaciones internas sobre esta película. No se mostrarán públicamente."
          className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
        />
        <p className="mt-1 text-sm text-gray-500">
          Este campo es solo para uso interno del equipo editorial.
        </p>
      </div>
    </div>
  )
}

// ==================================================
// src/components/admin/movies/MovieModal/tabs/BasicInfoTab.tsx
// ==================================================
// src/components/admin/movies/MovieModal/tabs/BasicInfoTab.tsx
import { UseFormRegister, UseFormWatch, UseFormSetValue, FieldErrors } from 'react-hook-form'
import { MovieFormData, PartialReleaseDate, PartialFilmingDate } from '@/lib/movies/movieTypes'
import { TIPOS_DURACION, DATA_COMPLETENESS_LEVELS } from '@/lib/movies/movieConstants'
import { MONTHS } from '@/lib/shared/dateUtils'
import { getErrorMessage } from '@/lib/movies/movieUtils'
import MovieFormEnhanced from '@/components/admin/MovieFormEnhanced'
import MovieLinksManager from '@/components/admin/MovieLinksManager'

interface BasicInfoTabProps {
  register: UseFormRegister<MovieFormData>
  watch: UseFormWatch<MovieFormData>
  setValue: UseFormSetValue<MovieFormData>
  errors: FieldErrors<MovieFormData>

  // Estados específicos
  isPartialDate: boolean
  setIsPartialDate: (value: boolean) => void
  partialReleaseDate: PartialReleaseDate
  setPartialReleaseDate: (value: PartialReleaseDate) => void
  tipoDuracionDisabled: boolean

  // Estados para fechas de rodaje
  isPartialFilmingStartDate: boolean
  setIsPartialFilmingStartDate: (value: boolean) => void
  partialFilmingStartDate: PartialFilmingDate
  setPartialFilmingStartDate: (value: PartialFilmingDate) => void

  isPartialFilmingEndDate: boolean
  setIsPartialFilmingEndDate: (value: boolean) => void
  partialFilmingEndDate: PartialFilmingDate
  setPartialFilmingEndDate: (value: PartialFilmingDate) => void

  handleScreeningVenuesChange: (venues: number[]) => void

  // Datos y callbacks
  movieFormInitialData: any
  movieLinks: any[]
  handleGenresChange: (genres: number[]) => void
  handleCountriesChange: (countries: number[]) => void
  handleThemesChange: (themes: number[]) => void
  handleLinksChange: (links: any[]) => void

  editingMovieId?: number
}

export default function BasicInfoTab({
  register,
  watch,
  setValue,
  errors,
  isPartialDate,
  setIsPartialDate,
  partialReleaseDate,
  setPartialReleaseDate,
  tipoDuracionDisabled,
  isPartialFilmingStartDate,
  setIsPartialFilmingStartDate,
  partialFilmingStartDate,
  setPartialFilmingStartDate,
  isPartialFilmingEndDate,
  setIsPartialFilmingEndDate,
  partialFilmingEndDate,
  setPartialFilmingEndDate,
  handleScreeningVenuesChange,
  movieFormInitialData,
  movieLinks,
  handleGenresChange,
  handleCountriesChange,
  handleThemesChange,
  handleLinksChange,
  editingMovieId
}: BasicInfoTabProps) {
  return (
    <div className="space-y-6">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {/* Columna izquierda */}
        <div className="space-y-4">
          <h3 className="text-lg font-medium text-gray-900 mb-4">
            Información Principal
          </h3>

          {/* Título */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Título *
            </label>
            <input
              type="text"
              {...register('title')}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
            />
            {errors.title && (
              <p className="mt-1 text-sm text-red-600">{getErrorMessage(errors.title)}</p>
            )}
          </div>

          <div className="grid grid-cols-2 gap-4">
            {/* Año */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Año
              </label>
              <input
                type="number"
                {...register('year', { valueAsNumber: true })}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
              />
              {errors.year && (
                <p className="mt-1 text-sm text-red-600">{getErrorMessage(errors.year)}</p>
              )}
            </div>

            {/* Fecha de Estreno */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Fecha de Estreno
              </label>

              <div className="mb-2">
                <label className="inline-flex items-center">
                  <input
                    type="checkbox"
                    checked={isPartialDate}
                    onChange={(e) => setIsPartialDate(e.target.checked)}
                    className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                  />
                  <span className="ml-2 text-sm text-gray-600">
                    Fecha incompleta
                  </span>
                </label>
              </div>

              {!isPartialDate ? (
                <input
                  type="date"
                  {...register('releaseDate')}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                />
              ) : (
                <div className="flex gap-2">
                  <div className="flex-1">
                    <input
                      type="number"
                      placeholder="Año"
                      min="1800"
                      max="2100"
                      value={partialReleaseDate.year || ''}
                      onChange={(e) => setPartialReleaseDate({
                        ...partialReleaseDate,
                        year: e.target.value ? parseInt(e.target.value) : null
                      })}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                    />
                  </div>
                  <div className="flex-1">
                    <select
                      value={partialReleaseDate.month || ''}
                      onChange={(e) => setPartialReleaseDate({
                        ...partialReleaseDate,
                        month: e.target.value ? parseInt(e.target.value) : null
                      })}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                    >
                      <option value="">Mes</option>
                      {MONTHS.map(month => (
                        <option key={month.value} value={month.value}>
                          {month.label}
                        </option>
                      ))}
                    </select>
                  </div>
                </div>
              )}
            </div>
          </div>



          {/* Fechas de rodaje */}
          <div className="space-y-4">
            {/* Fecha Inicio de Rodaje */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Fecha Inicio de Rodaje
              </label>

              <div className="mb-2">
                <label className="inline-flex items-center">
                  <input
                    type="checkbox"
                    checked={isPartialFilmingStartDate}
                    onChange={(e) => setIsPartialFilmingStartDate(e.target.checked)}
                    className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                  />
                  <span className="ml-2 text-sm text-gray-600">
                    Fecha incompleta
                  </span>
                </label>
              </div>

              {!isPartialFilmingStartDate ? (
                <input
                  type="date"
                  {...register('filmingStartDate')}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                />
              ) : (
                <div className="flex gap-2">
                  <div className="flex-1">
                    <input
                      type="number"
                      placeholder="Año"
                      min="1800"
                      max="2100"
                      value={partialFilmingStartDate.year || ''}
                      onChange={(e) => setPartialFilmingStartDate({
                        ...partialFilmingStartDate,
                        year: e.target.value ? parseInt(e.target.value) : null
                      })}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                    />
                  </div>
                  <div className="flex-1">
                    <select
                      value={partialFilmingStartDate.month || ''}
                      onChange={(e) => setPartialFilmingStartDate({
                        ...partialFilmingStartDate,
                        month: e.target.value ? parseInt(e.target.value) : null
                      })}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                    >
                      <option value="">Mes</option>
                      {MONTHS.map(month => (
                        <option key={month.value} value={month.value}>
                          {month.label}
                        </option>
                      ))}
                    </select>
                  </div>
                </div>
              )}
            </div>

            {/* Fecha Fin de Rodaje */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Fecha Fin de Rodaje
              </label>

              <div className="mb-2">
                <label className="inline-flex items-center">
                  <input
                    type="checkbox"
                    checked={isPartialFilmingEndDate}
                    onChange={(e) => setIsPartialFilmingEndDate(e.target.checked)}
                    className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                  />
                  <span className="ml-2 text-sm text-gray-600">
                    Fecha incompleta
                  </span>
                </label>
              </div>

              {!isPartialFilmingEndDate ? (
                <input
                  type="date"
                  {...register('filmingEndDate')}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                />
              ) : (
                <div className="flex gap-2">
                  <div className="flex-1">
                    <input
                      type="number"
                      placeholder="Año"
                      min="1800"
                      max="2100"
                      value={partialFilmingEndDate.year || ''}
                      onChange={(e) => setPartialFilmingEndDate({
                        ...partialFilmingEndDate,
                        year: e.target.value ? parseInt(e.target.value) : null
                      })}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                    />
                  </div>
                  <div className="flex-1">
                    <select
                      value={partialFilmingEndDate.month || ''}
                      onChange={(e) => setPartialFilmingEndDate({
                        ...partialFilmingEndDate,
                        month: e.target.value ? parseInt(e.target.value) : null
                      })}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                    >
                      <option value="">Mes</option>
                      {MONTHS.map(month => (
                        <option key={month.value} value={month.value}>
                          {month.label}
                        </option>
                      ))}
                    </select>
                  </div>
                </div>
              )}
            </div>
          </div>

          {/* Duración */}
          <div className="grid grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Duración (minutos)
              </label>
              <input
                type="number"
                {...register('duration', { valueAsNumber: true })}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Segundos
              </label>
              <input
                type="number"
                min="0"
                max="59"
                {...register('durationSeconds', { valueAsNumber: true })}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                placeholder="0-59"
              />
            </div>
          </div>

          {/* Tipo de duración */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Tipo de duración
              {tipoDuracionDisabled && (
                <span className="ml-2 text-xs text-green-600 font-normal">
                  (Calculado automáticamente)
                </span>
              )}
            </label>
            <select
              {...register('tipoDuracion')}
              disabled={tipoDuracionDisabled}
              className={`w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900 ${tipoDuracionDisabled ? 'bg-gray-100' : ''
                }`}
            >
              <option value="">Seleccionar tipo...</option>
              {TIPOS_DURACION.map((tipo) => (
                <option key={tipo.value} value={tipo.value}>
                  {tipo.label}
                </option>
              ))}
            </select>
          </div>

        </div>

        {/* Columna derecha */}
        <div className="space-y-4">
          <h3 className="text-lg font-medium text-gray-900 mb-4">
            Información Adicional
          </h3>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Sinopsis
            </label>
            <textarea
              {...register('synopsis')}
              rows={4}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Tagline
            </label>
            <input
              type="text"
              {...register('tagline')}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              IMDb ID
            </label>
            <input
              type="text"
              {...register('imdbId')}
              placeholder="tt0123456"
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Nivel de información cargada *
            </label>
            <select
              {...register('dataCompleteness')}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
            >
              {DATA_COMPLETENESS_LEVELS.map(level => (
                <option key={level.value} value={level.value}>
                  {level.icon} {level.label}
                </option>
              ))}
            </select>
            <p className="mt-1 text-xs text-gray-500">
              Indica el nivel de detalle cargado
            </p>
          </div>
        </div>
      </div>

      {/* Links Oficiales */}
      <div className="mt-6">
        <MovieLinksManager
          key={`links-${editingMovieId || 'new'}-${movieLinks.length}`}
          initialLinks={movieLinks}
          onLinksChange={handleLinksChange}
        />
      </div>

      {/* Géneros, Países e Idiomas */}
      <MovieFormEnhanced
        key={editingMovieId || 'new'}
        onGenresChange={handleGenresChange}
        onCastChange={() => { }}
        onCrewChange={() => { }}
        onCountriesChange={handleCountriesChange}
        onProductionCompaniesChange={() => { }}
        onDistributionCompaniesChange={() => { }}
        onThemesChange={handleThemesChange}
        onScreeningVenuesChange={handleScreeningVenuesChange}
        initialData={movieFormInitialData}
        showOnlyBasicInfo={true}
      />
    </div>
  )
}

// ==================================================
// src/components/admin/movies/MovieModal/tabs/CastTab.tsx
// ==================================================
// src/components/admin/movies/MovieModal/tabs/CastTab.tsx
import MovieFormEnhanced from '@/components/admin/MovieFormEnhanced'

interface CastTabProps {
  handleCastChange: (cast: any[]) => void
  movieFormInitialData: any
  editingMovieId?: number
}

export default function CastTab({ 
  handleCastChange, 
  movieFormInitialData,
  editingMovieId 
}: CastTabProps) {
  return (
    <MovieFormEnhanced
      key={editingMovieId || 'new'}
      onGenresChange={() => {}}
      onCastChange={handleCastChange}
      onCrewChange={() => {}}
      onCountriesChange={() => {}}
      onProductionCompaniesChange={() => {}}
      onDistributionCompaniesChange={() => {}}
      onThemesChange={() => {}}
      onScreeningVenuesChange={() => { }}
      initialData={movieFormInitialData}
      showOnlyCast={true}
    />
  )
}

// ==================================================
// src/components/admin/movies/MovieModal/tabs/CrewTab.tsx
// ==================================================
// src/components/admin/movies/MovieModal/tabs/CrewTab.tsx
import MovieFormEnhanced from '@/components/admin/MovieFormEnhanced'

interface CrewTabProps {
  handleCrewChange: (crew: any[]) => void
  movieFormInitialData: any
  editingMovieId?: number
}

export default function CrewTab({ 
  handleCrewChange, 
  movieFormInitialData,
  editingMovieId 
}: CrewTabProps) {
  return (
    <MovieFormEnhanced
      key={editingMovieId || 'new'}
      onGenresChange={() => {}}
      onCastChange={() => {}}
      onCrewChange={handleCrewChange}
      onCountriesChange={() => {}}
      onProductionCompaniesChange={() => {}}
      onDistributionCompaniesChange={() => {}}
      onThemesChange={() => {}}
      onScreeningVenuesChange={() => { }}
      initialData={movieFormInitialData}
      showOnlyCrew={true}
    />
  )
}

// ==================================================
// src/components/admin/movies/MovieModal/tabs/MediaTab.tsx
// ==================================================
// src/components/admin/movies/MovieModal/tabs/MediaTab.tsx
import { UseFormRegister, UseFormWatch, UseFormSetValue } from 'react-hook-form'
import { MovieFormData } from '@/lib/movies/movieTypes'
import { CloudinaryUploadWidget } from '@/components/admin/CloudinaryUploadWidget'

interface MediaTabProps {
  register: UseFormRegister<MovieFormData>
  watch: UseFormWatch<MovieFormData>
  setValue: UseFormSetValue<MovieFormData>
  editingMovieId?: number
}

export default function MediaTab({ 
  register, 
  watch, 
  setValue, 
  editingMovieId 
}: MediaTabProps) {
  return (
    <div className="space-y-6">
      <h3 className="text-lg font-medium text-gray-900 mb-4">
        Imágenes y Videos
      </h3>

      <CloudinaryUploadWidget
        value={watch('posterUrl')}
        onChange={(url, publicId) => {
          setValue('posterUrl', url)
          setValue('posterPublicId', publicId)
        }}
        label="Afiche de la Película"
        type="poster"
        movieId={editingMovieId}
      />

      <CloudinaryUploadWidget
        value={watch('backdropUrl')}
        onChange={(url, publicId) => {
          setValue('backdropUrl', url)
          setValue('backdropPublicId', publicId)
        }}
        label="Imagen de Fondo"
        type="backdrop"
        movieId={editingMovieId}
      />

      <div>
        <label className="block text-sm font-medium text-gray-700 mb-1">
          URL del Trailer
        </label>
        <input
          type="url"
          {...register('trailerUrl')}
          placeholder="https://youtube.com/watch?v=..."
          className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
        />
        <p className="mt-1 text-sm text-gray-500">
          Ingresa la URL completa del video en YouTube, Vimeo u otra plataforma
        </p>
      </div>
    </div>
  )
}

// ==================================================
// src/components/admin/movies/MoviesFilters.tsx
// ==================================================
// src/components/admin/movies/MoviesFilters.tsx
import { Search, Plus } from 'lucide-react'

export interface MovieFilters {
  searchTerm: string
  selectedStage: string
  selectedYear: string
  currentPage: number
}

interface MoviesFiltersProps {
  filters: MovieFilters
  onFiltersChange: (filters: Partial<MovieFilters>) => void
  onNewMovie: () => void
}

export default function MoviesFilters({ 
  filters, 
  onFiltersChange, 
  onNewMovie 
}: MoviesFiltersProps) {
  // Generar años desde el actual hasta 50 años atrás
  const currentYear = new Date().getFullYear()
  const years = Array.from({ length: 50 }, (_, i) => currentYear - i)

  const handleFilterChange = (key: keyof MovieFilters, value: string | number) => {
    onFiltersChange({ 
      [key]: value,
      // Resetear a página 1 cuando cambian los filtros
      currentPage: key !== 'currentPage' ? 1 : filters.currentPage 
    })
  }

  return (
    <div className="bg-white rounded-lg shadow p-6 mb-6">
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        {/* Búsqueda */}
        <div className="relative">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
          <input
            type="text"
            placeholder="Buscar películas..."
            className="pl-10 pr-4 py-2 w-full border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
            value={filters.searchTerm}
            onChange={(e) => handleFilterChange('searchTerm', e.target.value)}
          />
        </div>

        {/* Filtro por año */}
        <select
          className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
          value={filters.selectedYear}
          onChange={(e) => handleFilterChange('selectedYear', e.target.value)}
        >
          <option value="">Todos los años</option>
          {years.map(year => (
            <option key={year} value={year}>{year}</option>
          ))}
        </select>

        {/* Botón nueva película */}
        <button
          onClick={onNewMovie}
          className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors flex items-center justify-center gap-2"
        >
          <Plus className="w-5 h-5" />
          Nueva Película
        </button>
      </div>
    </div>
  )
}

// ==================================================
// src/components/admin/movies/MoviesPagination.tsx
// ==================================================
// src/components/admin/movies/MoviesPagination.tsx
interface MoviesPaginationProps {
  currentPage: number
  totalPages: number
  onPageChange: (page: number) => void
}

export default function MoviesPagination({
  currentPage,
  totalPages,
  onPageChange
}: MoviesPaginationProps) {
  const handlePrevious = () => {
    if (currentPage > 1) {
      onPageChange(currentPage - 1)
    }
  }

  const handleNext = () => {
    if (currentPage < totalPages) {
      onPageChange(currentPage + 1)
    }
  }

  return (
    <div className="bg-white px-4 py-3 flex items-center justify-between border-t border-gray-200 sm:px-6 mt-4 rounded-lg shadow">
      {/* Vista móvil */}
      <div className="flex-1 flex justify-between sm:hidden">
        <button
          onClick={handlePrevious}
          disabled={currentPage === 1}
          className="relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
        >
          Anterior
        </button>
        <button
          onClick={handleNext}
          disabled={currentPage === totalPages}
          className="ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
        >
          Siguiente
        </button>
      </div>

      {/* Vista desktop */}
      <div className="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
        <div>
          <p className="text-sm text-gray-700">
            Página <span className="font-medium">{currentPage}</span> de{' '}
            <span className="font-medium">{totalPages}</span>
          </p>
        </div>
        <div>
          <nav className="relative z-0 inline-flex rounded-md shadow-sm -space-x-px" aria-label="Pagination">
            <button
              onClick={handlePrevious}
              disabled={currentPage === 1}
              className="relative inline-flex items-center px-4 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
            >
              Anterior
            </button>
            
            {/* Números de página (opcional, para una versión más completa) */}
            <span className="relative inline-flex items-center px-4 py-2 border border-gray-300 bg-white text-sm font-medium text-gray-700">
              {currentPage}
            </span>
            
            <button
              onClick={handleNext}
              disabled={currentPage === totalPages}
              className="relative inline-flex items-center px-4 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
            >
              Siguiente
            </button>
          </nav>
        </div>
      </div>
    </div>
  )
}

// ==================================================
// src/components/admin/movies/MoviesTable.tsx
// ==================================================
// src/components/admin/movies/MoviesTable.tsx
import { useState } from 'react'
import { Film, Edit, Trash2, Eye, Star, Loader2 } from 'lucide-react'
import { toast } from 'react-hot-toast'
import { type Movie } from '@/lib/movies/movieTypes'

interface MoviesTableProps {
  movies: Movie[]
  loading: boolean
  onEdit: (movie: Movie) => void
  onDelete: (id: number) => Promise<void>
}

export default function MoviesTable({ 
  movies, 
  loading, 
  onEdit, 
  onDelete 
}: MoviesTableProps) {
  const [deletingMovieId, setDeletingMovieId] = useState<number | null>(null)

  const handleDelete = async (id: number) => {
    if (!confirm('¿Estás seguro de eliminar esta película?')) return
    
    try {
      setDeletingMovieId(id)
      await onDelete(id)
      toast.success('Película eliminada')
    } catch (error) {
      toast.error('Error al eliminar la película')
    } finally {
      setDeletingMovieId(null)
    }
  }

  if (loading) {
    return (
      <div className="bg-white rounded-lg shadow overflow-hidden">
        <div className="flex items-center justify-center h-64">
          <Loader2 className="w-8 h-8 text-blue-600 animate-spin" />
        </div>
      </div>
    )
  }

  if (!movies || movies.length === 0) {
    return (
      <div className="bg-white rounded-lg shadow overflow-hidden">
        <div className="text-center py-12">
          <Film className="w-12 h-12 text-gray-400 mx-auto mb-4" />
          <p className="text-gray-500">No se encontraron películas</p>
        </div>
      </div>
    )
  }

  return (
    <div className="bg-white rounded-lg shadow overflow-hidden">
      <div className="overflow-x-auto">
        <table className="min-w-full divide-y divide-gray-200">
          <thead className="bg-gray-50">
            <tr>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Película
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Año
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Director
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Estado
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Rating
              </th>
              <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                Acciones
              </th>
            </tr>
          </thead>
          <tbody className="bg-white divide-y divide-gray-200">
            {movies.map((movie) => (
              <MovieRow
                key={movie.id}
                movie={movie}
                onEdit={onEdit}
                onDelete={handleDelete}
                isDeleting={deletingMovieId === movie.id}
              />
            ))}
          </tbody>
        </table>
      </div>
    </div>
  )
}

// Componente interno para cada fila
interface MovieRowProps {
  movie: Movie
  onEdit: (movie: Movie) => void
  onDelete: (id: number) => void
  isDeleting: boolean
}

function MovieRow({ movie, onEdit, onDelete, isDeleting }: MovieRowProps) {
  return (
    <tr className="hover:bg-gray-50">
      <td className="px-6 py-4 whitespace-nowrap">
        <div className="flex items-center">
          <div className="flex-shrink-0 h-10 w-10">
            {movie.posterUrl ? (
              <img
                className="h-10 w-10 rounded-lg object-cover"
                src={movie.posterUrl}
                alt={movie.title}
              />
            ) : (
              <div className="h-10 w-10 rounded-lg bg-gray-200 flex items-center justify-center">
                <Film className="w-5 h-5 text-gray-400" />
              </div>
            )}
          </div>
          <div className="ml-4">
            <div className="text-sm font-medium text-gray-900">
              {movie.title}
            </div>
            {movie.originalTitle && (
              <div className="text-sm text-gray-500">
                {movie.originalTitle}
              </div>
            )}
          </div>
        </div>
      </td>
      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
        {movie.year}
      </td>
      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
        {movie.directors?.map(d => d.name).join(', ') || '-'}
      </td>
      <td className="px-6 py-4 whitespace-nowrap">
        {movie.rating ? (
          <div className="flex items-center">
            <Star className="w-4 h-4 text-yellow-400 fill-current" />
            <span className="ml-1 text-sm text-gray-900">
              {movie.rating}
            </span>
          </div>
        ) : (
          <span className="text-sm text-gray-400">-</span>
        )}
      </td>
      <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
        <div className="flex items-center justify-end gap-2">
          <a
            href={`/peliculas/${movie.slug}`}
            target="_blank"
            rel="noopener noreferrer"
            className="text-gray-600 hover:text-gray-900 transition-colors"
            title="Ver película"
          >
            <Eye className="w-4 h-4" />
          </a>
          <button
            onClick={() => onEdit(movie)}
            className="text-blue-600 hover:text-blue-900 transition-colors"
            title="Editar"
          >
            <Edit className="w-4 h-4" />
          </button>
          <button
            onClick={() => onDelete(movie.id)}
            disabled={isDeleting}
            className="text-red-600 hover:text-red-900 transition-colors disabled:opacity-50"
            title="Eliminar"
          >
            {isDeleting ? (
              <Loader2 className="w-4 h-4 animate-spin" />
            ) : (
              <Trash2 className="w-4 h-4" />
            )}
          </button>
        </div>
      </td>
    </tr>
  )
}

// ==================================================
// src/components/admin/MoviesFilters.tsx
// ==================================================
// src/components/admin/movies/MoviesFilters.tsx
import { Search, Plus } from 'lucide-react'

interface MoviesFiltersProps {
  searchTerm: string
  onSearchChange: (value: string) => void
  selectedStatus: string
  onStatusChange: (value: string) => void
  selectedStage: string
  onStageChange: (value: string) => void
  selectedYear: string
  onYearChange: (value: string) => void
  onNewMovie: () => void
}

export default function MoviesFilters({
  searchTerm,
  onSearchChange,
  selectedStatus,
  onStatusChange,
  selectedStage,
  onStageChange,
  selectedYear,
  onYearChange,
  onNewMovie
}: MoviesFiltersProps) {
  // Generar array de años (últimos 50 años)
  const currentYear = new Date().getFullYear()
  const years = Array.from({ length: 50 }, (_, i) => currentYear - i)

  return (
    <div className="bg-white rounded-lg shadow p-6 mb-6">
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        {/* Búsqueda */}
        <div className="relative">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
          <input
            type="text"
            placeholder="Buscar películas..."
            className="pl-10 pr-4 py-2 w-full border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
            value={searchTerm}
            onChange={(e) => onSearchChange(e.target.value)}
          />
        </div>

        {/* Filtro por estado */}
        <select
          className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
          value={selectedStatus}
          onChange={(e) => onStatusChange(e.target.value)}
        >
          <option value="">Todos los estados</option>
          <option value="DRAFT">Borrador</option>
          <option value="PUBLISHED">Publicado</option>
          <option value="ARCHIVED">Archivado</option>
        </select>

        {/* Filtro por año */}
        <select
          className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
          value={selectedYear}
          onChange={(e) => onYearChange(e.target.value)}
        >
          <option value="">Todos los años</option>
          {years.map(year => (
            <option key={year} value={year}>{year}</option>
          ))}
        </select>

        {/* Botón nueva película */}
        <button
          onClick={onNewMovie}
          className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors flex items-center justify-center gap-2"
        >
          <Plus className="w-5 h-5" />
          Nueva Película
        </button>
      </div>
    </div>
  )
}

// ==================================================
// src/components/admin/MoviesPagination.tsx
// ==================================================
// src/components/admin/MoviesPagination.tsx
interface MoviesPaginationProps {
  currentPage: number
  totalPages: number
  onPageChange: (page: number) => void
}

export default function MoviesPagination({
  currentPage,
  totalPages,
  onPageChange
}: MoviesPaginationProps) {
  // Si no hay múltiples páginas, no mostrar nada
  if (totalPages <= 1) return null

  const handlePrevious = () => {
    onPageChange(Math.max(1, currentPage - 1))
  }

  const handleNext = () => {
    onPageChange(Math.min(totalPages, currentPage + 1))
  }

  return (
    <div className="bg-white px-4 py-3 flex items-center justify-between border-t border-gray-200 sm:px-6 mt-4 rounded-lg shadow">
      {/* Vista móvil */}
      <div className="flex-1 flex justify-between sm:hidden">
        <button
          onClick={handlePrevious}
          disabled={currentPage === 1}
          className="relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
        >
          Anterior
        </button>
        <button
          onClick={handleNext}
          disabled={currentPage === totalPages}
          className="ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
        >
          Siguiente
        </button>
      </div>

      {/* Vista desktop */}
      <div className="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
        <div>
          <p className="text-sm text-gray-700">
            Página <span className="font-medium">{currentPage}</span> de{' '}
            <span className="font-medium">{totalPages}</span>
          </p>
        </div>
        <div>
          <nav className="relative z-0 inline-flex rounded-md shadow-sm -space-x-px" aria-label="Pagination">
            <button
              onClick={handlePrevious}
              disabled={currentPage === 1}
              className="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              Anterior
            </button>
            <button
              onClick={handleNext}
              disabled={currentPage === totalPages}
              className="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              Siguiente
            </button>
          </nav>
        </div>
      </div>
    </div>
  )
}

// ==================================================
// src/components/admin/MoviesTable.tsx
// ==================================================
// src/components/admin/MoviesTable.tsx
import { Film, Eye, Edit, Trash2, Loader2, Star } from 'lucide-react'

interface Director {
  id: number
  name: string
}

interface Movie {
  id: number
  slug: string
  title: string
  originalTitle?: string
  year: number
  releaseDate?: string
  duration?: number
  rating?: number
  posterUrl?: string
  status: string
  stage?: string
  dataCompleteness?: string
  directors?: Director[]
}

interface MoviesTableProps {
  movies: Movie[]
  loading: boolean
  deletingMovieId: number | null
  onEdit: (movie: Movie) => void
  onDelete: (id: number) => void
}

export default function MoviesTable({
  movies,
  loading,
  deletingMovieId,
  onEdit,
  onDelete
}: MoviesTableProps) {
  if (loading) {
    return (
      <div className="bg-white rounded-lg shadow overflow-hidden">
        <div className="flex items-center justify-center h-64">
          <Loader2 className="w-8 h-8 text-blue-600 animate-spin" />
        </div>
      </div>
    )
  }

  if (!movies || movies.length === 0) {
    return (
      <div className="bg-white rounded-lg shadow overflow-hidden">
        <div className="text-center py-12">
          <Film className="w-12 h-12 text-gray-400 mx-auto mb-4" />
          <p className="text-gray-500">No se encontraron películas</p>
        </div>
      </div>
    )
  }

  return (
    <div className="bg-white rounded-lg shadow overflow-hidden">
      <div className="overflow-x-auto">
        <table className="min-w-full divide-y divide-gray-200">
          <thead className="bg-gray-50">
            <tr>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Película
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Año
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Director
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Estado
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Completitud
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Rating
              </th>
              <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                Acciones
              </th>
            </tr>
          </thead>
          <tbody className="bg-white divide-y divide-gray-200">
            {movies.map((movie) => (
              <tr key={movie.id} className="hover:bg-gray-50">
                <td className="px-6 py-4 whitespace-nowrap">
                  <div className="flex items-center">
                    <div className="flex-shrink-0 h-10 w-10">
                      {movie.posterUrl ? (
                        <img
                          className="h-10 w-10 rounded-lg object-cover"
                          src={movie.posterUrl}
                          alt={movie.title}
                        />
                      ) : (
                        <div className="h-10 w-10 rounded-lg bg-gray-200 flex items-center justify-center">
                          <Film className="w-5 h-5 text-gray-400" />
                        </div>
                      )}
                    </div>
                    <div className="ml-4">
                      <div className="text-sm font-medium text-gray-900">
                        {movie.title}
                      </div>
                      {movie.originalTitle && (
                        <div className="text-sm text-gray-500">
                          {movie.originalTitle}
                        </div>
                      )}
                    </div>
                  </div>
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                  {movie.year}
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                  {movie.directors?.map(d => d.name).join(', ') || '-'}
                </td>
                <td className="px-6 py-4 whitespace-nowrap">
                  <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${
                    movie.status === 'PUBLISHED'
                      ? 'bg-green-100 text-green-800'
                      : movie.status === 'DRAFT'
                        ? 'bg-yellow-100 text-yellow-800'
                        : 'bg-gray-100 text-gray-800'
                  }`}>
                    {movie.status === 'PUBLISHED' ? 'Publicado' :
                      movie.status === 'DRAFT' ? 'Borrador' : 'Archivado'}
                  </span>
                </td>
                <td className="px-6 py-4 whitespace-nowrap">
                  <span className="text-sm text-gray-400">-</span>
                </td>
                <td className="px-6 py-4 whitespace-nowrap">
                  {movie.rating ? (
                    <div className="flex items-center">
                      <Star className="w-4 h-4 text-yellow-400 fill-current" />
                      <span className="ml-1 text-sm text-gray-900">
                        {movie.rating}
                      </span>
                    </div>
                  ) : (
                    <span className="text-sm text-gray-400">-</span>
                  )}
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                  <div className="flex items-center justify-end gap-2">
                    <a
                      href={`/peliculas/${movie.slug}`}
                      target="_blank"
                      rel="noopener noreferrer"
                      className="text-gray-600 hover:text-gray-900 transition-colors"
                      title="Ver película"
                    >
                      <Eye className="w-4 h-4" />
                    </a>
                    <button
                      onClick={() => onEdit(movie)}
                      className="text-blue-600 hover:text-blue-900 transition-colors"
                      title="Editar"
                    >
                      <Edit className="w-4 h-4" />
                    </button>
                    <button
                      onClick={() => onDelete(movie.id)}
                      disabled={deletingMovieId === movie.id}
                      className="text-red-600 hover:text-red-900 transition-colors disabled:opacity-50"
                      title="Eliminar"
                    >
                      {deletingMovieId === movie.id ? (
                        <Loader2 className="w-4 h-4 animate-spin" />
                      ) : (
                        <Trash2 className="w-4 h-4" />
                      )}
                    </button>
                  </div>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  )
}

// ==================================================
// src/components/admin/people/PeopleTable.tsx
// ==================================================
// src/components/admin/people/PeopleTable.tsx

'use client';

import { useState } from 'react';
import Link from 'next/link';
import { 
  Edit, 
  Trash2, 
  Search, 
  Eye, 
  Download,
  ChevronLeft,
  ChevronRight,
  Loader2,
  Users
} from 'lucide-react';
import { format } from 'date-fns';
import { es } from 'date-fns/locale';
import { usePeople } from '@/hooks/usePeople';
import { formatPersonName, formatGender, getPersonSummary } from '@/lib/people/peopleUtils';
import { GENDER_OPTIONS, PEOPLE_PAGINATION } from '@/lib/people/peopleConstants';

export function PeopleTable() {
  const [deleteId, setDeleteId] = useState<number | null>(null);
  const [deleteName, setDeleteName] = useState<string>('');
  const [showDeleteDialog, setShowDeleteDialog] = useState(false);
  
  const {
    people,
    totalCount,
    currentPage,
    totalPages,
    loading,
    filters,
    updateFilter,
    deletePerson,
    exportToCSV,
    goToNextPage,
    goToPreviousPage,
    canGoNext,
    canGoPrevious,
  } = usePeople();

  const handleDelete = async () => {
    if (deleteId) {
      try {
        await deletePerson(deleteId);
        setShowDeleteDialog(false);
        setDeleteId(null);
      } catch (error) {
        // El error ya se maneja en el hook
      }
    }
  };

  const handleDeleteClick = (person: any) => {
    setDeleteId(person.id);
    setDeleteName(formatPersonName(person));
    setShowDeleteDialog(true);
  };

  return (
    <>
      {/* Filtros */}
      <div className="mb-4 flex flex-wrap gap-4">
        <div className="relative flex-1 max-w-sm">
          <Search className="absolute left-3 top-2.5 h-4 w-4 text-gray-400" />
          <input
            type="text"
            placeholder="Buscar por nombre..."
            value={filters.search || ''}
            onChange={(e) => updateFilter('search', e.target.value)}
            className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
          />
        </div>
        
        <select
          value={filters.gender || ''}
          onChange={(e) => updateFilter('gender', e.target.value as any)}
          className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
        >
          <option value="">Todos los géneros</option>
          {GENDER_OPTIONS.map(option => (
            <option key={option.value} value={option.value}>
              {option.label}
            </option>
          ))}
        </select>

        <select
          value={String(filters.isActive ?? '')}
          onChange={(e) => updateFilter('isActive', e.target.value === '' ? '' : e.target.value === 'true')}
          className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
        >
          <option value="">Todos</option>
          <option value="true">Activos</option>
          <option value="false">Inactivos</option>
        </select>

        <button
          onClick={exportToCSV}
          disabled={loading}
          className="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors flex items-center gap-2"
        >
          <Download className="w-4 h-4" />
          Exportar CSV
        </button>
      </div>

      {/* Tabla */}
      <div className="bg-white rounded-lg shadow overflow-hidden">
        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Nombre
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Nombre Real
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Información
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Género
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Links
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Películas
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Estado
                </th>
                <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Acciones
                </th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {loading ? (
                <tr>
                  <td colSpan={8} className="text-center py-12">
                    <Loader2 className="w-8 h-8 text-blue-600 animate-spin mx-auto" />
                    <p className="mt-2 text-gray-500">Cargando personas...</p>
                  </td>
                </tr>
              ) : people?.length === 0 ? (
                <tr>
                  <td colSpan={8} className="text-center py-12">
                    <Users className="w-12 h-12 text-gray-400 mx-auto mb-4" />
                    <p className="text-gray-500">
                      {filters.search 
                        ? 'No se encontraron personas con ese criterio de búsqueda' 
                        : 'No hay personas registradas'}
                    </p>
                  </td>
                </tr>
              ) : (
                people?.map((person) => (
                  <tr key={person.id} className="hover:bg-gray-50">
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="text-sm font-medium text-gray-900">
                        {formatPersonName(person)}
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                      {person.realName || '-'}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                      {person.birthDate ? (
                        person.hideAge ? (
                          <span className="italic">Fecha oculta</span>
                        ) : (
                          getPersonSummary(person)
                        )
                      ) : (
                        '-'
                      )}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                      {formatGender(person.gender)}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      {person._count?.links ? (
                        <span className="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-blue-100 text-blue-800">
                          {person._count.links} {person._count.links === 1 ? 'link' : 'links'}
                        </span>
                      ) : (
                        <span className="text-sm text-gray-400">-</span>
                      )}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                      {(person._count?.castRoles || 0) + (person._count?.crewRoles || 0) > 0 ? (
                        <div>
                          {person._count?.castRoles || 0} como actor
                          {((person._count?.crewRoles || 0) > 0) && (
                            <>, {person._count?.crewRoles || 0} como crew</>
                          )}
                        </div>
                      ) : (
                        <span className="text-gray-400">-</span>
                      )}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${
                        person.isActive 
                          ? 'bg-green-100 text-green-800' 
                          : 'bg-gray-100 text-gray-800'
                      }`}>
                        {person.isActive ? 'Activo' : 'Inactivo'}
                      </span>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                      <div className="flex items-center justify-end gap-2">
                        <Link 
                          href={`/admin/people/${person.id}`}
                          className="text-gray-600 hover:text-gray-900 transition-colors"
                          title="Ver detalles"
                        >
                          <Eye className="w-4 h-4" />
                        </Link>
                        <Link 
                          href={`/admin/people/${person.id}/edit`}
                          className="text-blue-600 hover:text-blue-900 transition-colors"
                          title="Editar"
                        >
                          <Edit className="w-4 h-4" />
                        </Link>
                        <button
                          onClick={() => handleDeleteClick(person)}
                          disabled={
                            (person._count?.castRoles || 0) + (person._count?.crewRoles || 0) > 0
                          }
                          className="text-red-600 hover:text-red-900 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                          title={
                            (person._count?.castRoles || 0) + (person._count?.crewRoles || 0) > 0
                              ? "No se puede eliminar porque tiene películas asociadas"
                              : "Eliminar"
                          }
                        >
                          <Trash2 className="w-4 h-4" />
                        </button>
                      </div>
                    </td>
                  </tr>
                ))
              )}
            </tbody>
          </table>
        </div>
      </div>

      {/* Información y paginación */}
      {people && people.length > 0 && totalPages > 1 && (
        <div className="bg-white px-4 py-3 flex items-center justify-between border-t border-gray-200 sm:px-6 mt-4 rounded-lg shadow">
          {/* Vista móvil */}
          <div className="flex-1 flex justify-between sm:hidden">
            <button
              onClick={goToPreviousPage}
              disabled={!canGoPrevious || loading}
              className="relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              Anterior
            </button>
            <button
              onClick={goToNextPage}
              disabled={!canGoNext || loading}
              className="ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              Siguiente
            </button>
          </div>

          {/* Vista desktop */}
          <div className="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
            <div>
              <p className="text-sm text-gray-700">
                Mostrando <span className="font-medium">
                  {((currentPage - 1) * PEOPLE_PAGINATION.DEFAULT_LIMIT) + 1}
                </span> - <span className="font-medium">
                  {Math.min(currentPage * PEOPLE_PAGINATION.DEFAULT_LIMIT, totalCount)}
                </span> de <span className="font-medium">{totalCount}</span> personas
              </p>
            </div>
            <div>
              <nav className="relative z-0 inline-flex rounded-md shadow-sm -space-x-px">
                <button
                  onClick={goToPreviousPage}
                  disabled={!canGoPrevious || loading}
                  className="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  <ChevronLeft className="h-5 w-5" />
                  Anterior
                </button>
                
                <span className="relative inline-flex items-center px-4 py-2 border border-gray-300 bg-white text-sm font-medium text-gray-700">
                  Página {currentPage} de {totalPages}
                </span>
                
                <button
                  onClick={goToNextPage}
                  disabled={!canGoNext || loading}
                  className="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Siguiente
                  <ChevronRight className="h-5 w-5" />
                </button>
              </nav>
            </div>
          </div>
        </div>
      )}

      {/* Modal de confirmación de eliminación */}
      {showDeleteDialog && (
        <div className="fixed inset-0 bg-gray-500 bg-opacity-75 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg max-w-md w-full p-6">
            <h3 className="text-lg font-medium text-gray-900 mb-4">
              ¿Estás seguro?
            </h3>
            <p className="text-sm text-gray-500 mb-6">
              Esta acción no se puede deshacer. Se eliminará permanentemente a{' '}
              <span className="font-semibold">{deleteName}</span> del sistema.
            </p>
            <div className="flex justify-end gap-3">
              <button
                type="button"
                onClick={() => {
                  setShowDeleteDialog(false);
                  setDeleteId(null);
                }}
                className="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors"
              >
                Cancelar
              </button>
              <button
                type="button"
                onClick={handleDelete}
                className="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors"
              >
                Eliminar
              </button>
            </div>
          </div>
        </div>
      )}
    </>
  );
}

// ==================================================
// src/components/admin/people/PersonForm.tsx
// ==================================================
// src/components/admin/people/PersonForm.tsx

'use client';

import { useEffect } from 'react';
import { Save, Loader2, AlertCircle } from 'lucide-react';
import { usePeopleForm } from '@/hooks/usePeopleForm';
import { PersonWithRelations } from '@/lib/people/peopleTypes';

// Importar sub-componentes del formulario
import { BasicInfoFields } from './PersonFormFields/BasicInfoFields';
import { BiographyFields } from './PersonFormFields/BiographyFields';
import { LocationFields } from './PersonFormFields/LocationFields';
import { LinksSection } from './PersonFormFields/LinksSection';

interface PersonFormProps {
  personId?: number;
  initialData?: PersonWithRelations;
  onSuccess?: (person: PersonWithRelations) => void;
  onCancel?: () => void;
}

export function PersonForm({ 
  personId, 
  initialData, 
  onSuccess,
  onCancel 
}: PersonFormProps) {
  const {
    formData,
    loading,
    saving,
    errors,
    isDirty,
    isEdit,
    updateField,
    updateFields,
    addLink,
    updateLink,
    removeLink,
    save,
    cancel,
  } = usePeopleForm({ personId, onSuccess });

  // Si hay datos iniciales y no es edición, cargarlos
  useEffect(() => {
    if (initialData && !personId) {
      updateFields({
        firstName: initialData.firstName || '',
        lastName: initialData.lastName || '',
        realName: initialData.realName || '',
        gender: initialData.gender || '',
      });
    }
  }, [initialData, personId, updateFields]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    await save();
  };

  const handleCancel = () => {
    if (onCancel) {
      onCancel();
    } else {
      cancel();
    }
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center py-8">
        <Loader2 className="h-8 w-8 animate-spin text-gray-400" />
      </div>
    );
  }

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      {/* Mostrar errores si hay */}
      {errors.length > 0 && (
        <div className="bg-red-50 border border-red-200 rounded-lg p-4">
          <div className="flex">
            <AlertCircle className="h-5 w-5 text-red-400 mt-0.5" />
            <div className="ml-3">
              <h3 className="text-sm font-medium text-red-800">
                Se encontraron los siguientes errores:
              </h3>
              <ul className="mt-2 text-sm text-red-700 list-disc list-inside">
                {errors.map((error, index) => (
                  <li key={index}>{error}</li>
                ))}
              </ul>
            </div>
          </div>
        </div>
      )}

      {/* Información básica */}
      <div className="bg-white rounded-lg shadow p-6">
        <h3 className="text-lg font-medium text-gray-900 mb-6">
          Información Personal
        </h3>
        <BasicInfoFields
          formData={formData}
          updateField={updateField}
          isEdit={isEdit}
        />
      </div>

      {/* Ubicaciones */}
      <div className="bg-white rounded-lg shadow p-6">
        <h3 className="text-lg font-medium text-gray-900 mb-6">
          Ubicaciones
        </h3>
        <LocationFields
          formData={formData}
          updateField={updateField}
        />
      </div>

      {/* Biografía e información adicional */}
      <div className="bg-white rounded-lg shadow p-6">
        <h3 className="text-lg font-medium text-gray-900 mb-6">
          Información Adicional
        </h3>
        <BiographyFields
          formData={formData}
          updateField={updateField}
        />
      </div>

      {/* Links */}
      <div className="bg-white rounded-lg shadow p-6">
        <h3 className="text-lg font-medium text-gray-900 mb-6">
          Enlaces
        </h3>
        <LinksSection
          links={formData.links}
          onAddLink={addLink}
          onUpdateLink={updateLink}
          onRemoveLink={removeLink}
        />
      </div>

      {/* Botones de acción */}
      <div className="bg-white rounded-lg shadow p-6">
        <div className="flex items-center justify-between">
          <div className="text-sm text-gray-500">
            {isDirty && (
              <span className="text-orange-600">
                * Hay cambios sin guardar
              </span>
            )}
          </div>
          
          <div className="flex gap-3">
            <button
              type="button"
              onClick={handleCancel}
              className="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors"
            >
              Cancelar
            </button>
            
            <button
              type="submit"
              disabled={saving || loading}
              className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-2"
            >
              {saving ? (
                <>
                  <Loader2 className="w-4 h-4 animate-spin" />
                  Guardando...
                </>
              ) : (
                <>
                  <Save className="w-4 h-4" />
                  {isEdit ? 'Actualizar' : 'Crear'} Persona
                </>
              )}
            </button>
          </div>
        </div>
      </div>
    </form>
  );
}

// ==================================================
// src/components/admin/people/PersonFormFields/BasicInfoFields.tsx
// ==================================================
// src/components/admin/people/PersonFormFields/BasicInfoFields.tsx

import { useState, useEffect, useCallback } from 'react';
import { PersonFormData } from '@/lib/people/peopleTypes';
import { GENDER_OPTIONS } from '@/lib/people/peopleConstants';
import { PartialDate, MONTHS } from '@/lib/shared/dateUtils';

interface BasicInfoFieldsProps {
  formData: PersonFormData;
  updateField: <K extends keyof PersonFormData>(field: K, value: PersonFormData[K]) => void;
  isEdit?: boolean;
}

export function BasicInfoFields({ formData, updateField, isEdit }: BasicInfoFieldsProps) {
  // Estados para fechas parciales
  const [isPartialBirthDate, setIsPartialBirthDate] = useState(false);
  const [partialBirthDate, setPartialBirthDate] = useState<PartialDate>({
    year: null,
    month: null,
    day: null
  });

  const [isPartialDeathDate, setIsPartialDeathDate] = useState(false);
  const [partialDeathDate, setPartialDeathDate] = useState<PartialDate>({
    year: null,
    month: null,
    day: null
  });

  // Inicializar fechas parciales si estamos editando
  useEffect(() => {
    if (isEdit) {
      // Verificar si hay fechas parciales en formData
      if (formData.isPartialBirthDate && formData.partialBirthDate) {
        setIsPartialBirthDate(true);
        setPartialBirthDate(formData.partialBirthDate);
      } else if (formData.birthDate) {
        // Si hay fecha completa, mantener el checkbox desmarcado
        setIsPartialBirthDate(false);
      }
      
      if (formData.isPartialDeathDate && formData.partialDeathDate) {
        setIsPartialDeathDate(true);
        setPartialDeathDate(formData.partialDeathDate);
      } else if (formData.deathDate) {
        setIsPartialDeathDate(false);
      }
    }
  }, [isEdit, formData.isPartialBirthDate, formData.isPartialDeathDate]);

  // Handlers para cambios en fechas parciales
  const handlePartialBirthDateToggle = useCallback((checked: boolean) => {
    setIsPartialBirthDate(checked);
    
    if (checked) {
      // Al activar fecha parcial, limpiar fecha completa
      updateField('birthDate', '');
      updateField('isPartialBirthDate', true);
      // Si hay una fecha completa, convertirla a parcial (solo año y mes)
      if (formData.birthDate) {
        const [year, month] = formData.birthDate.split('-').map(v => parseInt(v));
        const newPartialDate = { 
          year: year || null, 
          month: month || null, 
          day: null // Siempre null para fechas parciales
        };
        setPartialBirthDate(newPartialDate);
        updateField('partialBirthDate', newPartialDate);
      }
    } else {
      // Al desactivar fecha parcial, limpiar datos parciales
      updateField('isPartialBirthDate', false);
      updateField('partialBirthDate', { year: null, month: null, day: null });
      setPartialBirthDate({ year: null, month: null, day: null });
    }
  }, [formData.birthDate, updateField]);

  const handlePartialDeathDateToggle = useCallback((checked: boolean) => {
    setIsPartialDeathDate(checked);
    
    if (checked) {
      updateField('deathDate', '');
      updateField('isPartialDeathDate', true);
      // Si hay una fecha completa, convertirla a parcial (solo año y mes)
      if (formData.deathDate) {
        const [year, month] = formData.deathDate.split('-').map(v => parseInt(v));
        const newPartialDate = { 
          year: year || null, 
          month: month || null, 
          day: null // Siempre null para fechas parciales
        };
        setPartialDeathDate(newPartialDate);
        updateField('partialDeathDate', newPartialDate);
      }
    } else {
      updateField('isPartialDeathDate', false);
      updateField('partialDeathDate', { year: null, month: null, day: null });
      setPartialDeathDate({ year: null, month: null, day: null });
    }
  }, [formData.deathDate, updateField]);

  // Handlers para cambios en los valores de las fechas parciales
  const handlePartialBirthDateChange = useCallback((field: keyof PartialDate, value: number | null) => {
    const newPartialDate = { ...partialBirthDate, [field]: value };
    setPartialBirthDate(newPartialDate);
    updateField('partialBirthDate', newPartialDate);
  }, [partialBirthDate, updateField]);

  const handlePartialDeathDateChange = useCallback((field: keyof PartialDate, value: number | null) => {
    const newPartialDate = { ...partialDeathDate, [field]: value };
    setPartialDeathDate(newPartialDate);
    updateField('partialDeathDate', newPartialDate);
  }, [partialDeathDate, updateField]);

  return (
    <div className="space-y-6">
      {/* Nombre y Apellido */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div>
          <label htmlFor="firstName" className="block text-sm font-medium text-gray-700 mb-1">
            Nombre <span className="text-gray-400">(opcional)</span>
          </label>
          <input
            type="text"
            id="firstName"
            value={formData.firstName}
            onChange={(e) => updateField('firstName', e.target.value)}
            placeholder="Ej: Juan"
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
          />
        </div>
        
        <div>
          <label htmlFor="lastName" className="block text-sm font-medium text-gray-700 mb-1">
            Apellido <span className="text-gray-400">(opcional)</span>
          </label>
          <input
            type="text"
            id="lastName"
            value={formData.lastName}
            onChange={(e) => updateField('lastName', e.target.value)}
            placeholder="Ej: Pérez"
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
          />
        </div>
      </div>
      
      <p className="text-sm text-gray-500">
        Debe ingresar al menos el nombre o el apellido
      </p>

      {/* Nombre Real */}
      <div>
        <label htmlFor="realName" className="block text-sm font-medium text-gray-700 mb-1">
          Nombre Real
          <span className="text-gray-400 ml-1">(si es diferente al artístico)</span>
        </label>
        <input
          type="text"
          id="realName"
          value={formData.realName}
          onChange={(e) => updateField('realName', e.target.value)}
          placeholder="Ej: Juan Carlos Pérez González"
          className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
        />
      </div>

      {/* Género */}
      <div>
        <label htmlFor="gender" className="block text-sm font-medium text-gray-700 mb-1">
          Género
        </label>
        <select
          id="gender"
          value={formData.gender}
          onChange={(e) => updateField('gender', e.target.value)}
          className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
        >
          <option value="">Seleccionar género</option>
          {GENDER_OPTIONS.map((option) => (
            <option key={option.value} value={option.value}>
              {option.label}
            </option>
          ))}
        </select>
      </div>

      {/* Fechas con soporte para fechas parciales */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {/* Fecha de Nacimiento */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Fecha de Nacimiento
          </label>

          <div className="mb-2">
            <label className="inline-flex items-center">
              <input
                type="checkbox"
                checked={isPartialBirthDate}
                onChange={(e) => handlePartialBirthDateToggle(e.target.checked)}
                className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
              />
              <span className="ml-2 text-sm text-gray-600">
                Fecha incompleta
              </span>
            </label>
          </div>

          {!isPartialBirthDate ? (
            <input
              type="date"
              value={formData.birthDate || ''}
              onChange={(e) => updateField('birthDate', e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
            />
          ) : (
            <div className="space-y-2">
              <div className="flex gap-2">
                <div className="flex-1">
                  <input
                    type="number"
                    placeholder="Año"
                    min="1800"
                    max="2100"
                    value={partialBirthDate.year || ''}
                    onChange={(e) => handlePartialBirthDateChange(
                      'year', 
                      e.target.value ? parseInt(e.target.value) : null
                    )}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                  />
                </div>
                <div className="flex-1">
                  <select
                    value={partialBirthDate.month || ''}
                    onChange={(e) => handlePartialBirthDateChange(
                      'month',
                      e.target.value ? parseInt(e.target.value) : null
                    )}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                  >
                    <option value="">Mes (opcional)</option>
                    {MONTHS.map(month => (
                      <option key={month.value} value={month.value}>
                        {month.label}
                      </option>
                    ))}
                  </select>
                </div>
              </div>
              <p className="text-xs text-gray-500">
                Ingrese el año (requerido) y mes (opcional) si los conoce
              </p>
            </div>
          )}
        </div>
        
        {/* Fecha de Fallecimiento */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Fecha de Fallecimiento
          </label>

          <div className="mb-2">
            <label className="inline-flex items-center">
              <input
                type="checkbox"
                checked={isPartialDeathDate}
                onChange={(e) => handlePartialDeathDateToggle(e.target.checked)}
                className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
              />
              <span className="ml-2 text-sm text-gray-600">
                Fecha incompleta
              </span>
            </label>
          </div>

          {!isPartialDeathDate ? (
            <input
              type="date"
              value={formData.deathDate || ''}
              onChange={(e) => updateField('deathDate', e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
            />
          ) : (
            <div className="space-y-2">
              <div className="flex gap-2">
                <div className="flex-1">
                  <input
                    type="number"
                    placeholder="Año"
                    min="1800"
                    max="2100"
                    value={partialDeathDate.year || ''}
                    onChange={(e) => handlePartialDeathDateChange(
                      'year',
                      e.target.value ? parseInt(e.target.value) : null
                    )}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                  />
                </div>
                <div className="flex-1">
                  <select
                    value={partialDeathDate.month || ''}
                    onChange={(e) => handlePartialDeathDateChange(
                      'month',
                      e.target.value ? parseInt(e.target.value) : null
                    )}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                  >
                    <option value="">Mes (opcional)</option>
                    {MONTHS.map(month => (
                      <option key={month.value} value={month.value}>
                        {month.label}
                      </option>
                    ))}
                  </select>
                </div>
              </div>
              <p className="text-xs text-gray-500">
                Ingrese el año (requerido) y mes (opcional) si los conoce
              </p>
            </div>
          )}
        </div>
      </div>

      {/* Ocultar edad */}
      <div className="flex items-center">
        <input
          type="checkbox"
          id="hideAge"
          checked={formData.hideAge}
          onChange={(e) => updateField('hideAge', e.target.checked)}
          className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
        />
        <label htmlFor="hideAge" className="ml-2 block text-sm text-gray-700">
          Ocultar fecha de nacimiento en el sitio público
        </label>
      </div>

      {/* Estado activo */}
      <div className="flex items-center pt-2">
        <input
          type="checkbox"
          id="isActive"
          checked={formData.isActive}
          onChange={(e) => updateField('isActive', e.target.checked)}
          className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
        />
        <label htmlFor="isActive" className="ml-2 block text-sm text-gray-700">
          Persona activa
        </label>
      </div>
    </div>
  );
}

// ==================================================
// src/components/admin/people/PersonFormFields/BiographyFields.tsx
// ==================================================
// src/components/admin/people/PersonFormFields/BiographyFields.tsx

import { PersonFormData } from '@/lib/people/peopleTypes';
import { Image, FileText } from 'lucide-react';

interface BiographyFieldsProps {
  formData: PersonFormData;
  updateField: <K extends keyof PersonFormData>(field: K, value: PersonFormData[K]) => void;
}

export function BiographyFields({ formData, updateField }: BiographyFieldsProps) {
  return (
    <div className="space-y-6">
      {/* Biografía */}
      <div>
        <label htmlFor="biography" className="block text-sm font-medium text-gray-700 mb-1">
          <span className="flex items-center gap-2">
            <FileText className="w-4 h-4" />
            Biografía
          </span>
        </label>
        <textarea
          id="biography"
          value={formData.biography}
          onChange={(e) => updateField('biography', e.target.value)}
          placeholder="Escriba aquí la biografía de la persona..."
          rows={6}
          className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900 resize-none"
        />
        <div className="mt-1 flex justify-between text-sm text-gray-500">
          <span>Puede usar formato Markdown para dar estilo al texto</span>
          <span>{(formData.biography  || '').length } caracteres</span>
        </div>
      </div>

      {/* URL de Foto */}
      <div>
        <label htmlFor="photoUrl" className="block text-sm font-medium text-gray-700 mb-1">
          <span className="flex items-center gap-2">
            <Image className="w-4 h-4" />
            URL de Foto
          </span>
        </label>
        <input
          type="url"
          id="photoUrl"
          value={formData.photoUrl}
          onChange={(e) => updateField('photoUrl', e.target.value)}
          placeholder="https://ejemplo.com/foto.jpg"
          className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
        />
        <p className="mt-1 text-sm text-gray-500">
          Ingrese la URL completa de la imagen. Se recomienda usar imágenes de al menos 400x600px
        </p>
      </div>

      {/* Vista previa de la imagen si hay URL */}
      {formData.photoUrl && (
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Vista previa
          </label>
          <div className="relative w-32 h-48 rounded-lg overflow-hidden border border-gray-300">
            <img
              src={formData.photoUrl}
              alt="Vista previa"
              className="w-full h-full object-cover"
              onError={(e) => {
                const target = e.target as HTMLImageElement;
                target.style.display = 'none';
                const errorDiv = target.nextElementSibling as HTMLElement;
                if (errorDiv) errorDiv.style.display = 'flex';
              }}
            />
            <div 
              className="absolute inset-0 bg-gray-100 items-center justify-center hidden"
              style={{ display: 'none' }}
            >
              <span className="text-sm text-gray-500">
                Error al cargar imagen
              </span>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

// ==================================================
// src/components/admin/people/PersonFormFields/LinksSection.tsx
// ==================================================
// src/components/admin/people/PersonFormFields/LinksSection.tsx

import { Plus, Trash2, ExternalLink, GripVertical } from 'lucide-react';
import { PersonLink } from '@/lib/people/peopleTypes';
import { PERSON_LINK_TYPE_OPTIONS, LINK_CATEGORIES } from '@/lib/people/peopleConstants';

interface LinksSectionProps {
  links: PersonLink[];
  onAddLink: () => void;
  onUpdateLink: (index: number, updates: Partial<PersonLink>) => void;
  onRemoveLink: (index: number) => void;
}

export function LinksSection({ 
  links, 
  onAddLink, 
  onUpdateLink, 
  onRemoveLink 
}: LinksSectionProps) {
  return (
    <div className="space-y-4">
      {/* Descripción y botón agregar */}
      <div className="flex justify-between items-center">
        <p className="text-sm text-gray-500">
          Agregue enlaces a perfiles en redes sociales, sitios web, etc.
        </p>
        <button
          type="button"
          onClick={onAddLink}
          className="inline-flex items-center gap-2 px-3 py-1.5 text-sm bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
        >
          <Plus className="w-4 h-4" />
          Agregar Enlace
        </button>
      </div>

      {/* Lista de links */}
      {links.length === 0 ? (
        <div className="text-center py-8 bg-gray-50 rounded-lg">
          <p className="text-gray-500 mb-4">
            No hay enlaces agregados
          </p>
          <button
            type="button"
            onClick={onAddLink}
            className="inline-flex items-center gap-2 px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors"
          >
            <Plus className="w-4 h-4" />
            Agregar primer enlace
          </button>
        </div>
      ) : (
        <div className="space-y-3">
          {links.map((link, index) => (
            <div key={index} className="border border-gray-200 rounded-lg p-4 bg-gray-50">
              <div className="space-y-4">
                {/* Header del link */}
                <div className="flex items-start justify-between">
                  <div className="flex items-center gap-2 text-sm text-gray-500">
                    <GripVertical className="w-4 h-4" />
                    Enlace #{index + 1}
                  </div>
                  <button
                    type="button"
                    onClick={() => onRemoveLink(index)}
                    className="text-red-600 hover:text-red-800 transition-colors"
                  >
                    <Trash2 className="w-4 h-4" />
                  </button>
                </div>

                {/* Tipo y Título */}
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Tipo de enlace
                    </label>
                    <select
                      value={link.type}
                      onChange={(e) => onUpdateLink(index, { type: e.target.value as any })}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                    >
                      {Object.entries(LINK_CATEGORIES).map(([key, category]) => (
                        <optgroup key={key} label={category.label}>
                          {category.types.map((type) => {
                            const option = PERSON_LINK_TYPE_OPTIONS.find(opt => opt.value === type);
                            return (
                              <option key={type} value={type}>
                                {option?.label || type}
                              </option>
                            );
                          })}
                        </optgroup>
                      ))}
                    </select>
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Título <span className="text-gray-400">(opcional)</span>
                    </label>
                    <input
                      type="text"
                      value={link.title || ''}
                      onChange={(e) => onUpdateLink(index, { title: e.target.value })}
                      placeholder="Ej: Perfil oficial"
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                    />
                  </div>
                </div>

                {/* URL */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    URL
                  </label>
                  <div className="flex gap-2">
                    <input
                      type="url"
                      value={link.url}
                      onChange={(e) => onUpdateLink(index, { url: e.target.value })}
                      placeholder="https://..."
                      required
                      className="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                    />
                    {link.url && (
                      <button
                        type="button"
                        onClick={() => window.open(link.url, '_blank')}
                        title="Abrir enlace"
                        className="px-3 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors"
                      >
                        <ExternalLink className="w-4 h-4" />
                      </button>
                    )}
                  </div>
                </div>

                {/* Opciones */}
                <div className="flex items-center gap-6">
                  <label className="inline-flex items-center">
                    <input
                      type="checkbox"
                      checked={link.isVerified}
                      onChange={(e) => onUpdateLink(index, { isVerified: e.target.checked })}
                      className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                    />
                    <span className="ml-2 text-sm text-gray-700">Verificado</span>
                  </label>

                  <label className="inline-flex items-center">
                    <input
                      type="checkbox"
                      checked={link.isActive}
                      onChange={(e) => onUpdateLink(index, { isActive: e.target.checked })}
                      className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                    />
                    <span className="ml-2 text-sm text-gray-700">Activo</span>
                  </label>
                </div>
              </div>
            </div>
          ))}
        </div>
      )}

      {/* Información adicional */}
      {links.length > 0 && (
        <p className="text-xs text-gray-500">
          Los enlaces verificados se mostrarán con un ícono especial. 
          Los enlaces inactivos no se mostrarán en el sitio público.
        </p>
      )}
    </div>
  );
}

// ==================================================
// src/components/admin/people/PersonFormFields/LocationFields.tsx
// ==================================================
// src/components/admin/people/PersonFormFields/LocationFields.tsx

import { useState, useEffect, useCallback, useRef } from 'react';
import { PersonFormData } from '@/lib/people/peopleTypes';
import { MapPin, Search, X, Loader2 } from 'lucide-react';
import debounce from 'lodash/debounce';

interface LocationFieldsProps {
  formData: PersonFormData;
  updateField: <K extends keyof PersonFormData>(field: K, value: PersonFormData[K]) => void;
}

interface Location {
  id: number;
  name: string;
  slug: string;
  parentId?: number;
  path?: string;
  parent?: {
    name: string;
    parent?: {
      name: string;
    };
  };
}

// Componente de Autocompletado reutilizable
function LocationAutocomplete({ 
  value, 
  onChange, 
  placeholder,
  disabled = false,
  label
}: {
  value: number | null;
  onChange: (locationId: number | null, locationName: string) => void;
  placeholder: string;
  disabled?: boolean;
  label: string;
}) {
  const [isOpen, setIsOpen] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');
  const [displayValue, setDisplayValue] = useState('');
  const [locations, setLocations] = useState<Location[]>([]);
  const [loading, setLoading] = useState(false);
  const dropdownRef = useRef<HTMLDivElement>(null);
  const inputRef = useRef<HTMLInputElement>(null);

  // Cargar el valor inicial si existe
  useEffect(() => {
    if (value) {
      fetchLocationById(value);
    }
  }, [value]);

  // Obtener ubicación por ID
  const fetchLocationById = async (locationId: number) => {
    try {
      const response = await fetch(`/api/locations/${locationId}`);
      if (response.ok) {
        const location = await response.json();
        // Usar el path completo que ya viene del API
        const formatted = location.path || formatLocationDisplay(location);
        setDisplayValue(formatted);
        setSearchTerm(formatted);
      }
    } catch (error) {
      console.error('Error fetching location:', error);
    }
  };

  // Cerrar dropdown al hacer clic fuera
  useEffect(() => {
    function handleClickOutside(event: MouseEvent) {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {
        setIsOpen(false);
      }
    }

    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  // Buscar ubicaciones
  const searchLocations = useCallback(
    debounce(async (query: string) => {
      if (!query || query.length < 2) {
        setLocations([]);
        return;
      }

      setLoading(true);
      try {
        const response = await fetch(`/api/locations/search?q=${encodeURIComponent(query)}`);
        if (response.ok) {
          const data = await response.json();
          setLocations(data);
        }
      } catch (error) {
        console.error('Error searching locations:', error);
      } finally {
        setLoading(false);
      }
    }, 300),
    []
  );

  // Formatear la ubicación para mostrar (con jerarquía)
  const formatLocationDisplay = (location: Location): string => {
    const parts = [location.name];
    
    // Si tiene path, usarlo directamente
    if ('path' in location && location.path) {
      return location.path;
    }
    
    // Si no, construir la jerarquía
    if (location.parent) {
      parts.push(location.parent.name);
      if (location.parent.parent) {
        parts.push(location.parent.parent.name);
      }
    }
    
    return parts.join(', ');
  };

  // Manejar cambio en el input
  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value;
    setSearchTerm(value);
    setDisplayValue(value);
    
    if (value.length >= 2) {
      setIsOpen(true);
      searchLocations(value);
    } else {
      setIsOpen(false);
      setLocations([]);
    }
  };

  // Seleccionar una ubicación
  const handleSelectLocation = (location: Location) => {
    const formatted = formatLocationDisplay(location);
    console.log('Selected location:', { location, formatted });
    setSearchTerm(formatted);
    setDisplayValue(formatted);
    onChange(location.id, formatted);
    setIsOpen(false);
    setLocations([]);
  };

  // Limpiar campo
  const handleClear = () => {
    setSearchTerm('');
    setDisplayValue('');
    onChange(null, '');
    setLocations([]);
    inputRef.current?.focus();
  };

  return (
    <div>
      <label htmlFor={label} className="block text-sm font-medium text-gray-700 mb-1">
        <span className="flex items-center gap-2">
          <MapPin className="w-4 h-4" />
          {label}
        </span>
      </label>
      <div className="relative" ref={dropdownRef}>
        <div className="relative">
          <input
            ref={inputRef}
            type="text"
            id={label}
            value={searchTerm}
            onChange={handleInputChange}
            onFocus={() => searchTerm.length >= 2 && setIsOpen(true)}
            placeholder={placeholder}
            disabled={disabled}
            className="w-full pl-10 pr-10 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900 disabled:bg-gray-50 disabled:text-gray-500"
            autoComplete="off"
          />
          <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
            <Search className="h-4 w-4 text-gray-400" />
          </div>
          {searchTerm && !disabled && (
            <button
              type="button"
              onClick={handleClear}
              className="absolute inset-y-0 right-0 pr-3 flex items-center"
            >
              <X className="h-4 w-4 text-gray-400 hover:text-gray-600" />
            </button>
          )}
        </div>

        {/* Dropdown de resultados */}
        {isOpen && !disabled && (
          <div className="absolute z-50 mt-1 w-full bg-white rounded-lg shadow-lg border border-gray-200 max-h-60 overflow-auto">
            {loading ? (
              <div className="px-4 py-3 text-center">
                <Loader2 className="h-4 w-4 animate-spin inline-block text-gray-500" />
                <span className="ml-2 text-sm text-gray-500">Buscando...</span>
              </div>
            ) : locations.length > 0 ? (
              <ul className="py-1">
                {locations.map((location) => (
                  <li key={location.id}>
                    <button
                      type="button"
                      onClick={() => handleSelectLocation(location)}
                      className="w-full px-4 py-2 text-left hover:bg-gray-100 focus:bg-gray-100 focus:outline-none transition-colors"
                    >
                      <div className="flex items-center">
                        <MapPin className="h-4 w-4 text-gray-400 mr-2 flex-shrink-0" />
                        <div>
                          <div className="text-sm font-medium text-gray-900">
                            {location.name}
                          </div>
                          {(location.parent?.name || location.parent?.parent?.name) && (
                            <div className="text-xs text-gray-500">
                              {[location.parent?.name, location.parent?.parent?.name]
                                .filter(Boolean)
                                .join(', ')}
                            </div>
                          )}
                        </div>
                      </div>
                    </button>
                  </li>
                ))}
              </ul>
            ) : searchTerm.length >= 2 ? (
              <div className="px-4 py-3 text-sm text-gray-500 text-center">
                No se encontraron ubicaciones
              </div>
            ) : null}
          </div>
        )}
      </div>
    </div>
  );
}

export function LocationFields({ formData, updateField }: LocationFieldsProps) {
  const handleBirthLocationChange = (locationId: number | null, locationName: string) => {
    console.log('Birth location change:', { locationId, locationName });
    // Actualizar tanto el ID como el texto
    updateField('birthLocationId', locationId);
    updateField('birthLocation', locationName);
  };

  const handleDeathLocationChange = (locationId: number | null, locationName: string) => {
    console.log('Death location change:', { locationId, locationName });
    // Actualizar tanto el ID como el texto
    updateField('deathLocationId', locationId);
    updateField('deathLocation', locationName);
  };

  return (
    <div className="space-y-6">
      {/* Lugar de Nacimiento */}
      <LocationAutocomplete
        value={formData.birthLocationId || null}
        onChange={handleBirthLocationChange}
        placeholder="Buscar ciudad, provincia o país"
        label="Lugar de Nacimiento"
      />

      {/* Lugar de Fallecimiento */}
      <LocationAutocomplete
        value={formData.deathLocationId || null}
        onChange={handleDeathLocationChange}
        placeholder="Buscar ciudad, provincia o país"
        disabled={false}  // Cambiar a false para permitir edición siempre
        label="Lugar de Fallecimiento"
      />
    </div>
  );
}

// ==================================================
// src/components/admin/ScreeningVenueSelector.tsx
// ==================================================
// src/components/admin/ScreeningVenueSelector.tsx - VERSIÓN SIMPLIFICADA
'use client'

import { useState, useEffect } from 'react'
import { X, Search, Building, Globe, Tv, Film } from 'lucide-react'

interface ScreeningVenue {
    id: number
    name: string
    type: string
    city?: string
    isActive: boolean
}

interface ScreeningVenueSelectorProps {
    selectedVenueIds: number[]  // Solo IDs
    onChange: (venueIds: number[]) => void
    releaseDate?: string  // Fecha de estreno de la película
}

const venueTypeIcons = {
    CINEMA: Building,
    STREAMING: Globe,
    TV_CHANNEL: Tv,
    OTHER: Film
}

const venueTypeLabels = {
    CINEMA: 'Cine',
    STREAMING: 'Streaming',
    TV_CHANNEL: 'Canal de TV',
    OTHER: 'Otro'
}

export default function ScreeningVenueSelector({
    selectedVenueIds,
    onChange,
    releaseDate
}: ScreeningVenueSelectorProps) {
    const [venues, setVenues] = useState<ScreeningVenue[]>([])
    const [filteredVenues, setFilteredVenues] = useState<ScreeningVenue[]>([])
    const [searchTerm, setSearchTerm] = useState('')
    const [showDropdown, setShowDropdown] = useState(false)
    const [loading, setLoading] = useState(false)

    // Cargar todas las pantallas activas
    useEffect(() => {
        fetchVenues()
    }, [])

    const fetchVenues = async () => {
        try {
            setLoading(true)
            const response = await fetch('/api/screening-venues?isActive=true&limit=100')
            const data = await response.json()
            setVenues(data.venues || [])
            setFilteredVenues(data.venues || [])
        } catch (error) {
            console.error('Error loading screening venues:', error)
            setVenues([])
            setFilteredVenues([])
        } finally {
            setLoading(false)
        }
    }

    // Filtrar pantallas según búsqueda
    useEffect(() => {
        if (searchTerm) {
            const filtered = venues.filter(venue =>
                venue.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                venueTypeLabels[venue.type as keyof typeof venueTypeLabels]?.toLowerCase().includes(searchTerm.toLowerCase())
            )
            setFilteredVenues(filtered)
        } else {
            setFilteredVenues(venues)
        }
    }, [searchTerm, venues])

    // Agregar pantalla
    const addVenue = (venueId: number) => {
        if (!selectedVenueIds.includes(venueId)) {
            onChange([...selectedVenueIds, venueId])
        }
        setSearchTerm('')
        setShowDropdown(false)
    }

    // Eliminar pantalla
    const removeVenue = (venueId: number) => {
        onChange(selectedVenueIds.filter(id => id !== venueId))
    }

    // Obtener venue por ID
    const getVenueById = (id: number) => venues.find(v => v.id === id)

    // Agrupar pantallas por tipo
    const groupedVenues = filteredVenues.reduce((groups, venue) => {
        const type = venue.type || 'OTHER'
        if (!groups[type]) groups[type] = []
        groups[type].push(venue)
        return groups
    }, {} as Record<string, ScreeningVenue[]>)

    return (
        <div className="space-y-3">
            {/* Pantallas seleccionadas */}
            {selectedVenueIds.length > 0 && (
                <div className="flex flex-wrap gap-2">
                    {selectedVenueIds.map(venueId => {
                        const venue = getVenueById(venueId)
                        if (!venue) return null

                        const Icon = venueTypeIcons[venue.type as keyof typeof venueTypeIcons] || Film

                        return (
                            <span
                                key={venueId}
                                className="inline-flex items-center gap-1 px-3 py-1 rounded-full text-sm bg-blue-100 text-blue-800"
                            >
                                <Icon className="w-3 h-3" />
                                {venue.name}
                                {venue.city && (
                                    <span className="text-xs opacity-75">({venue.city})</span>
                                )}
                                <button
                                    type="button"
                                    onClick={() => removeVenue(venueId)}
                                    className="ml-1 hover:text-blue-600"
                                >
                                    <X className="w-3 h-3" />
                                </button>
                            </span>
                        )
                    })}
                </div>
            )}

            {/* Buscador */}
            <div className="relative">
                <div className="relative">
                    <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
                    <input
                        type="text"
                        placeholder="Buscar pantalla de estreno..."
                        value={searchTerm}
                        onChange={(e) => setSearchTerm(e.target.value)}
                        onFocus={() => setShowDropdown(true)}
                        className="w-full pl-9 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                    />
                </div>

                {/* Dropdown */}
                {showDropdown && (
                    <div className="absolute z-10 w-full mt-1 bg-white border border-gray-200 rounded-lg shadow-lg max-h-60 overflow-y-auto">
                        {loading ? (
                            <div className="p-4 text-center text-gray-500">Cargando...</div>
                        ) : Object.entries(groupedVenues).length === 0 ? (
                            <div className="p-4 text-center text-gray-500">
                                {searchTerm ? 'No se encontraron pantallas' : 'No hay pantallas disponibles'}
                            </div>
                        ) : (
                            Object.entries(groupedVenues).map(([type, venuesInType]) => (
                                <div key={type}>
                                    <div className="px-3 py-2 text-xs font-semibold text-gray-500 bg-gray-50">
                                        {venueTypeLabels[type as keyof typeof venueTypeLabels]}
                                    </div>
                                    {venuesInType.map((venue) => {
                                        const Icon = venueTypeIcons[venue.type as keyof typeof venueTypeIcons] || Film
                                        const isSelected = selectedVenueIds.includes(venue.id)

                                        return (
                                            <button
                                                key={venue.id}
                                                type="button"
                                                onClick={() => !isSelected && addVenue(venue.id)}
                                                disabled={isSelected}
                                                className={`w-full text-left px-3 py-2 hover:bg-gray-50 flex items-center gap-2 ${isSelected ? 'opacity-50 cursor-not-allowed bg-gray-50' : ''
                                                    }`}
                                            >
                                                <Icon className="w-4 h-4 text-gray-400" />
                                                <span className="text-sm text-gray-900">{venue.name}</span>
                                                {venue.city && (
                                                    <span className="text-xs text-gray-500">- {venue.city}</span>
                                                )}
                                                {isSelected && (
                                                    <span className="ml-auto text-xs text-gray-500">Ya agregada</span>
                                                )}
                                            </button>
                                        )
                                    })}
                                </div>
                            ))
                        )}
                    </div>
                )}
            </div>

            {/* Click fuera para cerrar */}
            {showDropdown && (
                <div
                    className="fixed inset-0 z-0"
                    onClick={() => setShowDropdown(false)}
                />
            )}
        </div>
    )
}

// ==================================================
// src/components/admin/ThemeSelector.tsx
// ==================================================
// src/components/admin/ThemeSelector.tsx
'use client'

import { useState, useRef, useEffect } from 'react'
import { X, Search, Tag } from 'lucide-react'

interface Theme {
  id: number
  name: string
  slug: string
  movieCount?: number
}

interface ThemeSelectorProps {
  availableThemes: Theme[]
  selectedThemes: number[]
  onChange: (themes: number[]) => void
  placeholder?: string
}

export function ThemeSelector({
  availableThemes,
  selectedThemes,
  onChange,
  placeholder = "Buscar theme..."
}: ThemeSelectorProps) {
  const [isOpen, setIsOpen] = useState(false)
  const [searchTerm, setSearchTerm] = useState('')
  const dropdownRef = useRef<HTMLDivElement>(null)

  // Cerrar dropdown al hacer clic fuera
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {
        setIsOpen(false)
      }
    }

    document.addEventListener('mousedown', handleClickOutside)
    return () => document.removeEventListener('mousedown', handleClickOutside)
  }, [])

  const filteredThemes = availableThemes.filter(theme =>
    theme.name.toLowerCase().includes(searchTerm.toLowerCase())
  )

  const selectedThemeObjects = availableThemes.filter(theme => 
    selectedThemes.includes(theme.id)
  )

  const toggleTheme = (themeId: number) => {
    if (selectedThemes.includes(themeId)) {
      onChange(selectedThemes.filter(id => id !== themeId))
    } else {
      onChange([...selectedThemes, themeId])
    }
  }

  const removeTheme = (themeId: number) => {
    onChange(selectedThemes.filter(id => id !== themeId))
  }

  return (
    <div className="relative" ref={dropdownRef}>
      {/* Themes seleccionados */}
      {selectedThemeObjects.length > 0 && (
        <div className="flex flex-wrap gap-2 mb-2">
          {selectedThemeObjects.map(theme => (
            <span
              key={theme.id}
              className="inline-flex items-center gap-1 px-3 py-1 bg-blue-100 text-blue-800 rounded-full text-sm"
            >
              <Tag className="w-3 h-3" />
              {theme.name}
              <button
                type="button"
                onClick={() => removeTheme(theme.id)}
                className="ml-1 hover:text-blue-900"
              >
                <X className="w-3 h-3" />
              </button>
            </span>
          ))}
        </div>
      )}
      
      <p className="text-sm text-gray-500 mb-2">
        {selectedThemes.length} seleccionado{selectedThemes.length !== 1 ? 's' : ''}
      </p>

      {/* Input de búsqueda */}
      <div className="relative">
        <input
          type="text"
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          onFocus={() => setIsOpen(true)}
          placeholder={placeholder}
          className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent pr-10"
        />
        <Search className="absolute right-3 top-2.5 w-5 h-5 text-gray-400 pointer-events-none" />
      </div>

      {/* Dropdown */}
      {isOpen && (
        <div className="absolute z-10 w-full mt-1 bg-white border border-gray-300 rounded-lg shadow-lg max-h-60 overflow-y-auto">
          {filteredThemes.length === 0 ? (
            <p className="p-3 text-sm text-gray-500">No se encontraron themes</p>
          ) : (
            filteredThemes.map(theme => (
              <button
                key={theme.id}
                type="button"
                onClick={() => toggleTheme(theme.id)}
                className={`w-full px-3 py-2 text-left hover:bg-gray-50 flex items-center justify-between ${
                  selectedThemes.includes(theme.id) ? 'bg-blue-50' : ''
                }`}
              >
                <span className="flex items-center gap-2">
                  <Tag className="w-4 h-4 text-gray-400" />
                  {theme.name}
                  {theme.movieCount !== undefined && theme.movieCount > 0 && (
                    <span className="text-xs text-gray-500">({theme.movieCount})</span>
                  )}
                </span>
                {selectedThemes.includes(theme.id) && (
                  <span className="text-blue-600">✓</span>
                )}
              </button>
            ))
          )}
        </div>
      )}
    </div>
  )
}

// ==================================================
// src/components/layout/Footer.tsx
// ==================================================
// src/app/components/layout/Footer.tsx
import Link from 'next/link'
import { Film, Github, Twitter, Mail } from 'lucide-react'

export default function Footer() {
  const currentYear = new Date().getFullYear()

  const footerLinks = {
    explore: [
      { href: '/peliculas', label: 'Todas las Películas' },
      { href: '/personas', label: 'Directores y Actores' },
      { href: '/generos', label: 'Explorar por Género' },
      { href: '/anos', label: 'Películas por Año' },
    ],
    about: [
      { href: '/sobre-nosotros', label: 'Sobre CineNacional' },
      { href: '/contacto', label: 'Contacto' },
      { href: '/api', label: 'API para Desarrolladores' },
      { href: '/colaborar', label: 'Cómo Colaborar' },
    ],
    legal: [
      { href: '/terminos', label: 'Términos de Uso' },
      { href: '/privacidad', label: 'Política de Privacidad' },
      { href: '/copyright', label: 'Derechos de Autor' },
    ],
  }

  return (
    <footer className="bg-zinc-900 border-t border-zinc-800 mt-auto">
      <div className="container mx-auto px-4 py-12">
        <div className="grid grid-cols-1 md:grid-cols-4 gap-8">
          {/* Brand Section */}
          <div className="col-span-1">
            <Link href="/" className="flex items-center space-x-2 text-white mb-4">
              <Film className="w-8 h-8" />
              <span className="font-bold text-xl">CineNacional</span>
            </Link>
            <p className="text-gray-400 text-sm mb-4">
              La base de datos más completa del cine argentino. 
              Preservando nuestra historia cinematográfica.
            </p>
            <div className="flex space-x-4">
              <a href="https://github.com" className="text-gray-400 hover:text-white transition-colors">
                <Github className="w-5 h-5" />
              </a>
              <a href="https://twitter.com" className="text-gray-400 hover:text-white transition-colors">
                <Twitter className="w-5 h-5" />
              </a>
              <a href="mailto:info@cinenacional.com" className="text-gray-400 hover:text-white transition-colors">
                <Mail className="w-5 h-5" />
              </a>
            </div>
          </div>

          {/* Explore Links */}
          <div>
            <h3 className="text-white font-semibold mb-4">Explorar</h3>
            <ul className="space-y-2">
              {footerLinks.explore.map((link) => (
                <li key={link.href}>
                  <Link href={link.href} className="text-gray-400 hover:text-white transition-colors text-sm">
                    {link.label}
                  </Link>
                </li>
              ))}
            </ul>
          </div>

          {/* About Links */}
          <div>
            <h3 className="text-white font-semibold mb-4">Información</h3>
            <ul className="space-y-2">
              {footerLinks.about.map((link) => (
                <li key={link.href}>
                  <Link href={link.href} className="text-gray-400 hover:text-white transition-colors text-sm">
                    {link.label}
                  </Link>
                </li>
              ))}
            </ul>
          </div>

          {/* Legal Links */}
          <div>
            <h3 className="text-white font-semibold mb-4">Legal</h3>
            <ul className="space-y-2">
              {footerLinks.legal.map((link) => (
                <li key={link.href}>
                  <Link href={link.href} className="text-gray-400 hover:text-white transition-colors text-sm">
                    {link.label}
                  </Link>
                </li>
              ))}
            </ul>
          </div>
        </div>

        {/* Bottom Bar */}
        <div className="border-t border-zinc-800 mt-8 pt-8 text-center">
          <p className="text-gray-400 text-sm">
            © {currentYear} CineNacional. Todos los derechos reservados.
          </p>
          <p className="text-gray-500 text-xs mt-2">
            Hecho con ❤️ para el cine argentino
          </p>
        </div>
      </div>
    </footer>
  )
}

// ==================================================
// src/components/layout/Header.tsx
// ==================================================
// src/components/layout/Header.tsx
'use client'

import Link from 'next/link'
import { useState } from 'react'
import { Search, Menu, X, Film } from 'lucide-react'
import { useRouter } from 'next/navigation'

export default function Header() {
  const [isMenuOpen, setIsMenuOpen] = useState(false)
  const [searchQuery, setSearchQuery] = useState('')
  const router = useRouter()

  const handleSearch = (e: React.FormEvent) => {
    e.preventDefault()
    if (searchQuery.trim()) {
      router.push(`/buscar?q=${encodeURIComponent(searchQuery)}`)
      setSearchQuery('')
    }
  }

  const navItems = [
    { href: '/peliculas', label: 'Películas' },
    { href: '/personas', label: 'Personas' },
    { href: '/generos', label: 'Géneros' },
    { href: '/anos', label: 'Por Año' },
    { href: '/premios', label: 'Premios' },
  ]

  return (
    <header className="bg-zinc-900 border-b border-zinc-800 sticky top-0 z-50">
      <div className="container mx-auto px-4">
        <div className="flex items-center justify-between h-16">
          {/* Logo */}
          <Link href="/" className="flex items-center space-x-2 text-white hover:text-red-500 transition-colors">
            <Film className="w-8 h-8" />
            <span className="font-bold text-xl hidden sm:block">CineNacional</span>
          </Link>

          {/* Desktop Navigation */}
          <nav className="hidden md:flex items-center space-x-6">
            {navItems.map((item) => (
              <Link
                key={item.href}
                href={item.href}
                className="text-gray-300 hover:text-white transition-colors"
              >
                {item.label}
              </Link>
            ))}
          </nav>

          {/* Search Bar */}
          <form onSubmit={handleSearch} className="hidden md:flex items-center">
            <div className="relative">
              <input
                type="text"
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                placeholder="Buscar películas, personas..."
                className="bg-zinc-800 text-white px-4 py-2 pr-10 rounded-lg w-64 focus:outline-none focus:ring-2 focus:ring-red-500"
              />
              <button
                type="submit"
                className="absolute right-2 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-white"
              >
                <Search className="w-5 h-5" />
              </button>
            </div>
          </form>

          {/* Mobile Menu Button */}
          <button
            onClick={() => setIsMenuOpen(!isMenuOpen)}
            className="md:hidden text-white"
          >
            {isMenuOpen ? <X className="w-6 h-6" /> : <Menu className="w-6 h-6" />}
          </button>
        </div>

        {/* Mobile Menu */}
        {isMenuOpen && (
          <div className="md:hidden py-4 border-t border-zinc-800">
            <form onSubmit={handleSearch} className="mb-4">
              <div className="relative">
                <input
                  type="text"
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  placeholder="Buscar..."
                  className="bg-zinc-800 text-white px-4 py-2 pr-10 rounded-lg w-full focus:outline-none focus:ring-2 focus:ring-red-500"
                />
                <button
                  type="submit"
                  className="absolute right-2 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-white"
                >
                  <Search className="w-5 h-5" />
                </button>
              </div>
            </form>
            <nav className="flex flex-col space-y-2">
              {navItems.map((item) => (
                <Link
                  key={item.href}
                  href={item.href}
                  onClick={() => setIsMenuOpen(false)}
                  className="text-gray-300 hover:text-white transition-colors py-2"
                >
                  {item.label}
                </Link>
              ))}
            </nav>
          </div>
        )}
      </div>
    </header>
  )
}

// ==================================================
// src/components/movies/CastSection.tsx
// ==================================================
'use client';

import { useState } from 'react';

interface CastMember {
  name: string;
  character: string;
  image?: string;
}

interface CastSectionProps {
  mainCast: CastMember[];
  fullCast?: CastMember[];
}

export function CastSection({ mainCast, fullCast = [] }: CastSectionProps) {
  const [showFullCast, setShowFullCast] = useState(false);

  return (
    <div className="mb-8">
      <h3 className="text-lg font-medium mb-4 text-cine-accent">Reparto Principal</h3>
      
      {/* Main Cast */}
      <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
        {mainCast.map((actor, index) => (
          <div key={index} className="text-center">
            <div className="w-20 h-20 rounded-full person-placeholder mx-auto mb-2">
              {actor.image ? (
                <img 
                  src={actor.image} 
                  alt={actor.name}
                  className="w-full h-full object-cover rounded-full"
                />
              ) : (
                <svg className="w-8 h-8 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="1.5" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"/>
                </svg>
              )}
            </div>
            <p className="font-medium text-white">{actor.name}</p>
            <p className="text-sm text-gray-400">{actor.character}</p>
          </div>
        ))}
      </div>
      
      {/* Full Cast (if provided) */}
      {fullCast.length > 0 && (
        <>
          {showFullCast && (
            <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-5 gap-4 mt-4 animate-fade-in">
              {fullCast.map((actor, index) => (
                <div key={index} className="text-center">
                  <div className="w-16 h-16 rounded-full person-placeholder mx-auto mb-2">
                    {actor.image ? (
                      <img 
                        src={actor.image} 
                        alt={actor.name}
                        className="w-full h-full object-cover rounded-full"
                      />
                    ) : (
                      <svg className="w-6 h-6 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="1.5" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"/>
                      </svg>
                    )}
                  </div>
                  <p className="font-medium text-white text-sm">{actor.name}</p>
                  <p className="text-xs text-gray-400">{actor.character}</p>
                </div>
              ))}
            </div>
          )}
          
          <div className="mt-6">
            <button 
              onClick={() => setShowFullCast(!showFullCast)}
              className="text-cine-accent hover:text-blue-300 font-medium transition-colors flex items-center space-x-2"
            >
              <span>{showFullCast ? 'Ocultar reparto completo' : 'Ver reparto completo'}</span>
              <svg 
                className={`w-4 h-4 transition-transform duration-200 ${showFullCast ? 'rotate-180' : ''}`} 
                fill="none" stroke="currentColor" viewBox="0 0 24 24"
              >
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M19 9l-7 7-7-7"></path>
              </svg>
            </button>
          </div>
        </>
      )}
    </div>
  );
}

// ==================================================
// src/components/movies/CloudinaryImage.tsx
// ==================================================
// src/components/movies/CloudinaryImage.tsx
'use client'

import { CldImage } from 'next-cloudinary'
import { useState } from 'react'

interface CloudinaryImageProps {
  src: string
  alt: string
  width: number
  height: number
  priority?: boolean
  className?: string
}

export function CloudinaryImage({
  src,
  alt,
  width,
  height,
  priority = false,
  className
}: CloudinaryImageProps) {
  const [isLoading, setIsLoading] = useState(true)
  const [error, setError] = useState(false)

  // Si no hay src, mostrar placeholder
  if (!src) {
    return (
      <div className={`bg-gray-200 flex items-center justify-center ${className}`}>
        <span className="text-gray-400">Sin imagen</span>
      </div>
    )
  }

  // Si hay error, mostrar placeholder
  if (error) {
    return (
      <div className={`bg-gray-200 flex items-center justify-center ${className}`}>
        <span className="text-gray-400">Error al cargar imagen</span>
      </div>
    )
  }

  // Para imágenes que no son de Cloudinary, usar img normal
  if (!src.includes('cloudinary')) {
    return (
      <img
        src={src}
        alt={alt}
        width={width}
        height={height}
        className={className}
        loading={priority ? 'eager' : 'lazy'}
        onError={() => setError(true)}
      />
    )
  }

  // Extraer public_id de la URL de Cloudinary
  const publicId = src.split('/upload/')[1]?.split('.')[0] || src

  return (
    <div className="relative">
      {isLoading && (
        <div className={`absolute inset-0 bg-gray-200 animate-pulse ${className}`} />
      )}
      <CldImage
        width={width}
        height={height}
        src={publicId}
        alt={alt}
        loading={priority ? 'eager' : 'lazy'}
        className={className}
        crop="fill"
        gravity="auto"
        format="auto"
        quality="auto"
        onLoad={() => setIsLoading(false)}
        onError={() => setError(true)}
      />
    </div>
  )
}

// ==================================================
// src/components/movies/CrewSection.tsx
// ==================================================
'use client';

import { useState } from 'react';

interface CrewMember {
  name: string;
  role: string;
}

interface CrewDepartment {
  [department: string]: CrewMember[];
}

interface CrewSectionProps {
  basicCrew: CrewDepartment;
  fullCrew?: CrewDepartment;
}

export function CrewSection({ basicCrew, fullCrew }: CrewSectionProps) {
  const [showFullCrew, setShowFullCrew] = useState(false);

  const renderCrewMember = (member: CrewMember, index: number, showRole: boolean = false) => {
    if (showRole) {
      return (
        <div key={index} className="flex justify-between">
          <span className="text-white">{member.name}</span>
          <span className="text-gray-400 text-xs">{member.role}</span>
        </div>
      );
    }
    return <p key={index} className="text-white">{member.name}</p>;
  };

  const renderDepartment = (title: string, members: CrewMember[], showRoles: boolean = false) => (
    <div>
      <h4 className="text-gray-400 font-medium mb-2">{title}</h4>
      <div className="ml-4 space-y-1">
        {members.map((member, index) => renderCrewMember(member, index, showRoles))}
      </div>
    </div>
  );

  return (
    <div>
      <h3 className="text-lg font-medium mb-4 text-cine-accent">Equipo Técnico</h3>
      
      {!showFullCrew ? (
        <div className="grid grid-cols-1 md:grid-cols-2 gap-8 text-sm">
          <div className="space-y-4">
            {Object.entries(basicCrew).slice(0, Math.ceil(Object.keys(basicCrew).length / 2)).map(([dept, members]) => (
              <div key={dept}>
                {renderDepartment(dept, members)}
              </div>
            ))}
          </div>
          <div className="space-y-4">
            {Object.entries(basicCrew).slice(Math.ceil(Object.keys(basicCrew).length / 2)).map(([dept, members]) => (
              <div key={dept}>
                {renderDepartment(dept, members)}
              </div>
            ))}
          </div>
        </div>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 gap-8 text-sm animate-fade-in">
          <div className="space-y-4">
            {fullCrew && Object.entries(fullCrew).slice(0, Math.ceil(Object.keys(fullCrew).length / 2)).map(([dept, members]) => (
              <div key={dept}>
                {renderDepartment(dept, members, true)}
              </div>
            ))}
          </div>
          <div className="space-y-4">
            {fullCrew && Object.entries(fullCrew).slice(Math.ceil(Object.keys(fullCrew).length / 2)).map(([dept, members]) => (
              <div key={dept}>
                {renderDepartment(dept, members, true)}
              </div>
            ))}
          </div>
        </div>
      )}
      
      {fullCrew && Object.keys(fullCrew).length > 0 && (
        <div className="mt-6">
          <button 
            onClick={() => setShowFullCrew(!showFullCrew)}
            className="text-cine-accent hover:text-blue-300 font-medium transition-colors flex items-center space-x-2"
          >
            <span>{showFullCrew ? 'Ocultar equipo técnico completo' : 'Ver equipo técnico completo'}</span>
            <svg 
              className={`w-4 h-4 transition-transform duration-200 ${showFullCrew ? 'rotate-180' : ''}`} 
              fill="none" stroke="currentColor" viewBox="0 0 24 24"
            >
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M19 9l-7 7-7-7"></path>
            </svg>
          </button>
        </div>
      )}
    </div>
  );
}

// ==================================================
// src/components/movies/ImageGallery.tsx
// ==================================================
'use client';

import { useState, useEffect } from 'react';

interface ImageGalleryProps {
  images: string[];
  movieTitle: string;
}

export function ImageGallery({ images, movieTitle }: ImageGalleryProps) {
  const [currentSlide, setCurrentSlide] = useState(0);
  const [lightboxImage, setLightboxImage] = useState<{ src: string, alt: string, index: number } | null>(null);

  // Slider functions
  const nextSlide = () => {
    const totalSlides = images.length;
    const visibleSlides = 3;
    setCurrentSlide(prev => {
      const next = prev + 1;
      return next > Math.max(0, totalSlides - visibleSlides) ? 0 : next;
    });
  };

  const prevSlide = () => {
    const totalSlides = images.length;
    const visibleSlides = 3;
    setCurrentSlide(prev => {
      const next = prev - 1;
      return next < 0 ? Math.max(0, totalSlides - visibleSlides) : next;
    });
  };

  const openLightbox = (src: string, alt: string, index: number) => {
    setLightboxImage({ src, alt, index });
    document.body.style.overflow = 'hidden';
  };

  const closeLightbox = () => {
    setLightboxImage(null);
    document.body.style.overflow = 'auto';
  };

  // Navegación en el lightbox
  const navigateLightbox = (direction: 'prev' | 'next') => {
    if (!lightboxImage || images.length === 0) return;

    let newIndex: number;
    if (direction === 'next') {
      newIndex = (lightboxImage.index + 1) % images.length;
    } else {
      newIndex = lightboxImage.index === 0 ? images.length - 1 : lightboxImage.index - 1;
    }

    setLightboxImage({
      src: images[newIndex],
      alt: `Imagen ${newIndex + 1} - ${movieTitle}`,
      index: newIndex
    });
  };

  // Cerrar lightbox con Escape y navegar con flechas
  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      if (!lightboxImage) return;

      switch (e.key) {
        case 'Escape':
          closeLightbox();
          break;
        case 'ArrowLeft':
          e.preventDefault();
          navigateLightbox('prev');
          break;
        case 'ArrowRight':
          e.preventDefault();
          navigateLightbox('next');
          break;
      }
    };

    document.addEventListener('keydown', handleKeyDown);
    return () => document.removeEventListener('keydown', handleKeyDown);
  }, [lightboxImage, images]);

  return (
    <>
      <div className="relative">
        <div className="overflow-hidden">
          <div
            className="flex transition-transform duration-500 ease-in-out"
            style={{ transform: `translateX(-${currentSlide * (100 / 3)}%)` }}
          >
            {images.length > 0 ? (
              images.map((imageSrc, index) => (
                <div key={index} className="flex-shrink-0 w-1/3 px-2">
                  <div
                    className="group cursor-pointer relative overflow-hidden rounded-lg aspect-video bg-cine-gray"
                    onClick={() => openLightbox(imageSrc, `Imagen ${index + 1} - ${movieTitle}`, index)}
                  >
                    <img
                      src={imageSrc}
                      alt={`Imagen ${index + 1} - ${movieTitle}`}
                      className="w-full h-full object-cover transition-transform duration-300 group-hover:scale-110"
                      loading="lazy"
                      onError={(e) => {
                        (e.target as HTMLImageElement).src = 'https://images.unsplash.com/photo-1518998053901-5348d3961a04?w=800&fit=crop&auto=format';
                      }}
                    />
                    <div className="absolute inset-0 bg-black/0 group-hover:bg-black/20 transition-colors duration-300"></div>
                    <div className="absolute bottom-0 left-0 right-0 p-4 bg-gradient-to-t from-black/80 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300">
                      <p className="text-white text-sm font-medium">Imagen {index + 1}</p>
                    </div>
                  </div>
                </div>
              ))
            ) : (
              <div className="flex-shrink-0 w-1/3 px-2">
                <div className="group cursor-pointer relative overflow-hidden rounded-lg aspect-video bg-cine-gray">
                  <div className="w-full h-full flex items-center justify-center">
                    <div className="text-center">
                      <svg className="w-8 h-8 text-cine-accent mx-auto mb-2 animate-spin" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                      </svg>
                      <p className="text-sm text-gray-400">Cargando imágenes...</p>
                    </div>
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>

        {/* Navigation arrows */}
        {images.length > 3 && (
          <>
            <button
              onClick={prevSlide}
              className="absolute left-0 top-1/2 -translate-y-1/2 -translate-x-4 bg-cine-gray/90 hover:bg-cine-accent text-white p-3 rounded-full transition-colors duration-300 backdrop-blur-sm"
            >
              <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 19l-7-7 7-7"></path>
              </svg>
            </button>
            <button
              onClick={nextSlide}
              className="absolute right-0 top-1/2 -translate-y-1/2 translate-x-4 bg-cine-gray/90 hover:bg-cine-accent text-white p-3 rounded-full transition-colors duration-300 backdrop-blur-sm"
            >
              <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 5l7 7-7 7"></path>
              </svg>
            </button>
          </>
        )}
      </div>

      {/* Lightbox Modal */}
      {lightboxImage && (
        <div
          className="fixed inset-0 bg-black/90 flex items-center justify-center z-50 opacity-0 invisible transition-all duration-300 animate-fade-in"
          style={{ opacity: 1, visibility: 'visible' }}
          onClick={(e) => e.target === e.currentTarget && closeLightbox()}
        >
          <div className="relative max-w-4xl max-h-[90vh] w-full px-4 flex items-center justify-center">
            {/* Flecha izquierda */}
            <button
              onClick={(e) => {
                e.stopPropagation();
                navigateLightbox('prev');
              }}
              className="absolute left-4 md:left-8 bg-black/50 hover:bg-cine-accent text-white p-3 rounded-full transition-all duration-300 z-10 hover:scale-110"
              aria-label="Imagen anterior"
            >
              <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 19l-7-7 7-7"></path>
              </svg>
            </button>

            {/* Contenedor de imagen */}
            <div className="relative max-w-full max-h-[90vh] transform scale-80 transition-transform duration-300"
              style={{ transform: 'scale(1)' }}>
              <button
                onClick={closeLightbox}
                className="absolute -top-10 right-0 bg-black/50 hover:bg-cine-accent text-white text-2xl w-10 h-10 rounded-full flex items-center justify-center transition-colors duration-300"
              >
                ×
              </button>
              <img
                src={lightboxImage.src}
                alt={lightboxImage.alt}
                className="max-w-full max-h-[80vh] object-contain rounded-lg shadow-2xl"
              />
              <div className="absolute -bottom-12 left-0 right-0 text-center">
                <p className="text-white text-base font-medium">{lightboxImage.alt}</p>
                <p className="text-gray-400 text-sm mt-1">{lightboxImage.index + 1} de {images.length}</p>
              </div>
            </div>

            {/* Flecha derecha */}
            <button
              onClick={(e) => {
                e.stopPropagation();
                navigateLightbox('next');
              }}
              className="absolute right-4 md:right-8 bg-black/50 hover:bg-cine-accent text-white p-3 rounded-full transition-all duration-300 z-10 hover:scale-110"
              aria-label="Imagen siguiente"
            >
              <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 5l7 7-7 7"></path>
              </svg>
            </button>
          </div>
        </div>
      )}
    </>
  );
}

// ==================================================
// src/components/movies/MovieHero.tsx
// ==================================================
'use client';

import { useEffect } from 'react';

interface MovieHeroProps {
  title: string;
  year: number;
  duration: number;
  genres: string[];
  rating: number;
  gallery: string[];
}

export function MovieHero({ title, year, duration, genres, rating, gallery }: MovieHeroProps) {
  // Ajustar gradientes al tamaño real de la imagen
  useEffect(() => {
    const adjustGradients = () => {
      const img = document.querySelector('.hero-image') as HTMLImageElement;
      const container = document.querySelector('.hero-image-wrapper') as HTMLElement;
      const gradientsContainer = document.querySelector('.hero-gradients-container') as HTMLElement;
      
      if (img && container && gradientsContainer && img.complete) {
        const containerWidth = container.offsetWidth;
        const containerHeight = container.offsetHeight;
        const imgAspectRatio = img.naturalWidth / img.naturalHeight;
        const containerAspectRatio = containerWidth / containerHeight;
        
        let displayWidth, displayHeight;
        
        if (imgAspectRatio > containerAspectRatio) {
          // Imagen más ancha - se ajusta por ancho
          displayWidth = containerWidth;
          displayHeight = containerWidth / imgAspectRatio;
        } else {
          // Imagen más alta - se ajusta por altura
          displayHeight = containerHeight;
          displayWidth = containerHeight * imgAspectRatio;
        }
        
        // Centrar y ajustar el contenedor de gradientes
        gradientsContainer.style.width = `${displayWidth}px`;
        gradientsContainer.style.height = `${displayHeight}px`;
        gradientsContainer.style.left = `${(containerWidth - displayWidth) / 2}px`;
        gradientsContainer.style.top = `${(containerHeight - displayHeight) / 2}px`;
      }
    };

    // Ajustar cuando la imagen cambie
    const img = document.querySelector('.hero-image') as HTMLImageElement;
    if (img) {
      img.addEventListener('load', adjustGradients);
      // También ajustar al cambiar el tamaño de la ventana
      window.addEventListener('resize', adjustGradients);
      
      // Ajustar inmediatamente si la imagen ya está cargada
      if (img.complete) {
        adjustGradients();
      }
    }

    return () => {
      if (img) {
        img.removeEventListener('load', adjustGradients);
      }
      window.removeEventListener('resize', adjustGradients);
    };
  }, [gallery]);

  // Cambiar fondo cada 8 segundos
  useEffect(() => {
    if (gallery.length > 0) {
      const interval = setInterval(() => {
        const randomIndex = Math.floor(Math.random() * gallery.length);
        const heroElement = document.querySelector('.hero-image');
        if (heroElement) {
          (heroElement as HTMLImageElement).src = gallery[randomIndex];
        }
      }, 8000);
      return () => clearInterval(interval);
    }
  }, [gallery]);

  // Función para formatear géneros
  const formatGenres = (genres: string[]) => {
    return genres.join(', ');
  };

  return (
    <div className="relative hero-background-container -mt-16 pt-16">
      {/* Wrapper de imagen con gradientes */}
      <div className="hero-image-wrapper">
        {gallery.length > 0 && (
          <>
            <img 
              src={gallery[0]}
              alt={title}
              className="hero-image"
            />
            {/* Contenedor de gradientes que se ajusta a la imagen */}
            <div className="hero-gradients-container">
              <div className="hero-gradient-left"></div>
              <div className="hero-gradient-right"></div>
              <div className="hero-gradient-top"></div>
              <div className="hero-gradient-bottom-inner"></div>
            </div>
          </>
        )}
      </div>
      
      {/* Gradientes globales del contenedor */}
      <div className="hero-gradient-bottom"></div>
      <div className="hero-vignette"></div>
      
      {/* Contenido */}
      <div className="hero-content">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 pb-8 w-full">
          <h1 className="serif-heading text-5xl md:text-6xl lg:text-7xl text-white leading-tight drop-shadow-2xl">
            {title}
          </h1>
          <div className="flex flex-wrap items-center gap-4 text-gray-200 mt-4">
            <span className="bg-cine-accent/90 px-3 py-1 rounded-full text-sm font-medium text-white backdrop-blur-sm">
              {year}
            </span>
            <span className="drop-shadow-lg">{duration} min</span>
            <span className="drop-shadow-lg">{formatGenres(genres)}</span>
            <div className="flex items-center space-x-1">
              <svg className="w-5 h-5 text-yellow-400 fill-current drop-shadow-lg" viewBox="0 0 20 20">
                <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"/>
              </svg>
              <span className="text-yellow-400 font-bold drop-shadow-lg">{rating}</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

// ==================================================
// src/components/movies/MovieInfo.tsx
// ==================================================
'use client';

interface Director {
  name: string;
  image?: string;
}

interface MovieInfoProps {
  synopsis: string;
  director: Director;
  trailerUrl?: string;
  onTrailerClick?: () => void;
  onShareClick?: () => void;
}

export function MovieInfo({ 
  synopsis, 
  director, 
  trailerUrl, 
  onTrailerClick,
  onShareClick 
}: MovieInfoProps) {
  return (
    <div className="space-y-6">
      {/* Synopsis */}
      <div>
        <p className="serif-body text-lg text-gray-300 leading-relaxed">
          {synopsis}
        </p>
      </div>

      {/* Director */}
      <div className="grid grid-cols-1 gap-6">
        <div>
          <h3 className="text-lg font-medium mb-3 text-cine-accent">Dirección</h3>
          <div className="flex items-center space-x-3">
            <div className="w-12 h-12 rounded-full person-placeholder">
              {director.image ? (
                <img 
                  src={director.image} 
                  alt={director.name}
                  className="w-full h-full object-cover rounded-full"
                />
              ) : (
                <svg className="w-6 h-6 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="1.5" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                </svg>
              )}
            </div>
            <div>
              <p className="font-medium text-white">{director.name}</p>
            </div>
          </div>
        </div>
      </div>

      {/* Actions */}
      <div className="flex flex-wrap gap-4">
        {trailerUrl && (
          <button 
            onClick={onTrailerClick}
            className="bg-cine-accent hover:bg-blue-600 px-6 py-3 rounded-lg font-medium transition-colors flex items-center space-x-2 text-white"
          >
            <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z" />
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
            <span>Ver Trailer</span>
          </button>
        )}
        <button 
          onClick={onShareClick}
          className="border border-gray-600 hover:border-cine-accent px-6 py-3 rounded-lg font-medium transition-colors text-white"
        >
          Compartir
        </button>
      </div>
    </div>
  );
}

// ==================================================
// src/components/movies/MoviePoster.tsx
// ==================================================
'use client';

interface MoviePosterProps {
  imageUrl?: string;
  title: string;
}

export function MoviePoster({ imageUrl, title }: MoviePosterProps) {
  return (
    <div className="aspect-[2/3] rounded-lg overflow-hidden poster-shadow">
      {imageUrl ? (
        <img 
          src={imageUrl} 
          alt={`Poster de ${title}`}
          className="w-full h-full object-cover"
        />
      ) : (
        <div className="movie-placeholder w-full h-full">
          <svg className="w-16 h-16 text-cine-accent mb-4 opacity-60" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="1.5" d="M15.75 10.5l4.72-4.72a.75.75 0 011.28.53v11.38a.75.75 0 01-1.28.53l-4.72-4.72M4.5 18.75h9a2.25 2.25 0 002.25-2.25v-9a2.25 2.25 0 00-2.25-2.25h-9A2.25 2.25 0 002.25 7.5v9a2.25 2.25 0 002.25 2.25z" />
          </svg>
          <p className="text-sm text-gray-400">Afiche no disponible</p>
        </div>
      )}
    </div>
  );
}

// ==================================================
// src/components/movies/MovieSidebar.tsx
// ==================================================
'use client';

interface MovieSidebarProps {
  year: number;
  duration: number;
  country: string;
  rating: string;
  format?: string;
  genres: string[];
  themes: string[];
}

export function MovieSidebar({
  year,
  duration,
  country,
  rating,
  format = "Color | Sonora",
  genres,
  themes
}: MovieSidebarProps) {
  return (
    <div className="glass-effect rounded-lg p-6 space-y-6">
      {/* Technical Information */}
      <div>
        <h3 className="text-lg font-medium mb-4 text-cine-accent">Información</h3>
        <div className="space-y-3 text-sm">
          <div className="flex items-start">
            <span className="text-gray-400 w-32 flex-shrink-0">Año:</span>
            <span className="ml-2 text-white">{year}</span>
          </div>
          <div className="flex items-start">
            <span className="text-gray-400 w-32 flex-shrink-0">Duración:</span>
            <span className="ml-2 text-white">{duration} min</span>
          </div>
          <div className="flex items-start">
            <span className="text-gray-400 w-32 flex-shrink-0">País coproductor:</span>
            <span className="ml-2 text-white">{country}</span>
          </div>
          <div className="flex items-start">
            <span className="text-gray-400 w-32 flex-shrink-0">Calificación:</span>
            <span className="ml-2 text-white">{rating}</span>
          </div>
          <div className="flex justify-end">
            <span className="text-white">{format}</span>
          </div>
        </div>
      </div>

      {/* Genres */}
      <div>
        <h3 className="text-lg font-medium mb-4 text-cine-accent">Géneros</h3>
        <div className="flex flex-wrap gap-2">
          {genres.map((genre, index) => (
            <span 
              key={index} 
              className="bg-cine-gray px-3 py-1 rounded-full text-sm text-white"
            >
              {genre}
            </span>
          ))}
        </div>
      </div>

      {/* Themes */}
      <div>
        <h3 className="text-lg font-medium mb-4 text-cine-accent">Temas</h3>
        <div className="flex flex-wrap gap-2">
          {themes.map((theme, index) => (
            <span 
              key={index} 
              className="bg-cine-gray px-3 py-1 rounded-full text-sm text-white"
            >
              {theme}
            </span>
          ))}
        </div>
      </div>
    </div>
  );
}

// ==================================================
// src/components/movies/SimilarMovies.tsx
// ==================================================
'use client';

import Link from 'next/link';

interface Movie {
  id?: string;
  slug?: string;
  title: string;
  year: string | number;
  posterUrl?: string;
}

interface SimilarMoviesProps {
  movies: Movie[];
}

export function SimilarMovies({ movies }: SimilarMoviesProps) {
  return (
    <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12 border-t border-gray-800">
      <h2 className="serif-heading text-2xl text-white mb-6">Películas Similares</h2>
      <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-4">
        {movies.map((movie, index) => {
          const movieLink = movie.slug || movie.id || '#';
          
          return (
            <Link 
              key={movie.id || index} 
              href={`/peliculas/${movieLink}`}
              className="group cursor-pointer block"
            >
              <div className="aspect-[2/3] rounded-lg overflow-hidden mb-2 transform group-hover:scale-105 transition-transform">
                {movie.posterUrl ? (
                  <img 
                    src={movie.posterUrl}
                    alt={`Poster de ${movie.title}`}
                    className="w-full h-full object-cover"
                    loading="lazy"
                  />
                ) : (
                  <div className="placeholder-small w-full h-full">
                    <svg className="w-8 h-8 text-gray-500 mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="1.5" d="M15.75 10.5l4.72-4.72a.75.75 0 011.28.53v11.38a.75.75 0 01-1.28.53l-4.72-4.72M4.5 18.75h9a2.25 2.25 0 002.25-2.25v-9a2.25 2.25 0 00-2.25-2.25h-9A2.25 2.25 0 002.25 7.5v9a2.25 2.25 0 002.25 2.25z" />
                    </svg>
                    <p className="text-xs text-gray-400 text-center">Sin imagen</p>
                  </div>
                )}
              </div>
              <p className="text-sm font-medium text-white group-hover:text-cine-accent transition-colors">
                {movie.title}
              </p>
              <p className="text-xs text-gray-400">{movie.year}</p>
            </Link>
          );
        })}
      </div>
    </div>
  );
}

// ==================================================
// src/components/movies/TrailerSection.tsx
// ==================================================
// src/app/components/TrailerSection.tsx

interface TrailerSectionProps {
  trailerUrl?: string;
  movieTitle: string;
  variant?: 'default' | 'minimal' | 'card' | 'compact' | 'fullwidth';
}

export function TrailerSection({ trailerUrl, movieTitle, variant = 'fullwidth' }: TrailerSectionProps) {
  if (!trailerUrl) return null;

  // Extraer el ID del video de YouTube de la URL
  const getYouTubeId = (url: string) => {
    const regExp = /^.*(youtu.be\/|v\/|u\/\w\/|embed\/|watch\?v=|&v=)([^#&?]*).*/;
    const match = url.match(regExp);
    return match && match[2].length === 11 ? match[2] : null;
  };

  const videoId = getYouTubeId(trailerUrl);

  if (!videoId) return null;

  // Nueva variante fullwidth - ocupa todo el ancho sin el cuadro informativo
  if (variant === 'fullwidth') {
    return (
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12 border-t border-gray-800">
        <h2 className="serif-heading text-2xl text-white mb-6">Trailer</h2>
        <div className="relative w-full aspect-video rounded-lg overflow-hidden bg-cine-gray shadow-2xl">
          <iframe
            className="absolute top-0 left-0 w-full h-full"
            src={`https://www.youtube.com/embed/${videoId}?modestbranding=1&rel=0`}
            title={`Trailer de ${movieTitle}`}
            frameBorder="0"
            allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
            allowFullScreen
          />
        </div>
      </div>
    );
  }

  // Variante compacta (original con el cuadro lateral)
  if (variant === 'compact') {
    return (
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12 border-t border-gray-800">
        <h2 className="serif-heading text-2xl text-white mb-6">Trailer</h2>
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          <div className="lg:col-span-2">
            <div className="relative w-full aspect-video rounded-lg overflow-hidden bg-cine-gray shadow-2xl">
              <iframe
                className="absolute top-0 left-0 w-full h-full"
                src={`https://www.youtube.com/embed/${videoId}?modestbranding=1&rel=0`}
                title={`Trailer de ${movieTitle}`}
                frameBorder="0"
                allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
                allowFullScreen
              />
            </div>
          </div>
          <div className="lg:col-span-1">
            <div className="glass-effect rounded-lg p-6">
              <h3 className="text-lg font-medium mb-3 text-cine-accent">Sobre el trailer</h3>
              <p className="text-sm text-gray-300 mb-4">
                Mira el trailer oficial de {movieTitle} y descubre por qué se convirtió en un fenómeno del cine argentino.
              </p>
              <div className="flex flex-wrap gap-2">
                <span className="bg-cine-gray px-3 py-1 rounded-full text-xs text-white">Trailer Oficial</span>
                <span className="bg-cine-gray px-3 py-1 rounded-full text-xs text-white">HD</span>
                <span className="bg-cine-gray px-3 py-1 rounded-full text-xs text-white">Subtitulado</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  }

  // Variante por defecto con fondo
  if (variant === 'default') {
    return (
      <div className="bg-black/5 dark:bg-white/5 rounded-lg p-6 mt-8">
        <h2 className="text-2xl font-bold text-gray-900 dark:text-white mb-4">
          Trailer
        </h2>
        <div className="relative w-full aspect-video rounded-lg overflow-hidden shadow-lg">
          <iframe
            className="absolute top-0 left-0 w-full h-full"
            src={`https://www.youtube.com/embed/${videoId}`}
            title={`Trailer de ${movieTitle}`}
            frameBorder="0"
            allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
            allowFullScreen
          />
        </div>
      </div>
    );
  }

  // Variante minimalista
  if (variant === 'minimal') {
    return (
      <div className="mt-8">
        <h2 className="text-2xl font-bold text-white mb-4">Trailer</h2>
        <div className="relative w-full aspect-video rounded-lg overflow-hidden shadow-2xl">
          <iframe
            className="absolute top-0 left-0 w-full h-full"
            src={`https://www.youtube.com/embed/${videoId}?modestbranding=1&rel=0`}
            title={`Trailer de ${movieTitle}`}
            frameBorder="0"
            allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
            allowFullScreen
          />
        </div>
      </div>
    );
  }

  // Variante tipo tarjeta con thumbnail personalizable
  if (variant === 'card') {
    return (
      <div className="mt-8">
        <h2 className="text-2xl font-bold text-white mb-4">Trailer</h2>
        <div className="bg-gradient-to-r from-purple-500/20 to-pink-500/20 backdrop-blur-md rounded-xl p-1">
          <div className="bg-black/40 backdrop-blur-xl rounded-lg p-4">
            <div className="relative w-full aspect-video rounded-lg overflow-hidden">
              <iframe
                className="absolute top-0 left-0 w-full h-full"
                src={`https://www.youtube.com/embed/${videoId}?modestbranding=1&rel=0`}
                title={`Trailer de ${movieTitle}`}
                frameBorder="0"
                allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
                allowFullScreen
              />
            </div>
            <p className="text-sm text-gray-300 mt-3 text-center">
              Ver trailer oficial de {movieTitle}
            </p>
          </div>
        </div>
      </div>
    );
  }

  return null;
}

// ==================================================
// src/hooks/useDebounce.ts
// ==================================================
// src/hooks/useDebounce.ts

import { useState, useEffect } from 'react';

/**
 * Hook que retrasa la actualización de un valor hasta que haya pasado
 * un tiempo determinado sin cambios
 * 
 * @param value - El valor a retrasar
 * @param delay - El tiempo de retraso en milisegundos
 * @returns El valor retrasado
 * 
 * @example
 * const [searchTerm, setSearchTerm] = useState('');
 * const debouncedSearchTerm = useDebounce(searchTerm, 300);
 * 
 * // debouncedSearchTerm se actualizará 300ms después de que 
 * // el usuario deje de escribir
 */
export function useDebounce<T>(value: T, delay: number): T {
  const [debouncedValue, setDebouncedValue] = useState<T>(value);

  useEffect(() => {
    // Crear un timeout para actualizar el valor después del delay
    const handler = setTimeout(() => {
      setDebouncedValue(value);
    }, delay);

    // Limpiar el timeout si el value cambia antes del delay
    // Esto "cancela" la actualización anterior y empieza una nueva
    return () => {
      clearTimeout(handler);
    };
  }, [value, delay]);

  return debouncedValue;
}

// ==================================================
// src/hooks/useMovieForm.ts
// ==================================================
// src/hooks/useMovieForm.ts
import { useState, useEffect, useCallback } from 'react'
import { useForm } from 'react-hook-form'
import { zodResolver } from '@hookform/resolvers/zod'
import { toast } from 'react-hot-toast'
import {
    movieFormSchema,
    MovieFormData,
    Movie,
    PartialReleaseDate,
    PartialFilmingDate
} from '@/lib/movies/movieTypes'
import {
    calcularTipoDuracion,
    prepareMovieData
} from '@/lib/movies/movieUtils'
import { moviesService } from '@/services'
import type {
    UseFormRegister,
    UseFormHandleSubmit,
    UseFormWatch,
    UseFormSetValue,
    UseFormReset
} from 'react-hook-form'

interface UseMovieFormProps {
    editingMovie: Movie | null
    onSuccess: () => void
}

interface UseMovieFormReturn {
    onSubmit: (data: MovieFormData) => Promise<void>

    // Estados
    activeTab: string
    setActiveTab: (tab: string) => void
    isPartialDate: boolean
    setIsPartialDate: (value: boolean) => void
    partialReleaseDate: PartialReleaseDate
    setPartialReleaseDate: (value: PartialReleaseDate) => void
    tipoDuracionDisabled: boolean
    movieFormInitialData: any
    alternativeTitles: any[]
    setAlternativeTitles: (titles: any[]) => void
    movieLinks: any[]

    // Estados de fechas de rodaje
    isPartialFilmingStartDate: boolean
    setIsPartialFilmingStartDate: (value: boolean) => void
    partialFilmingStartDate: PartialFilmingDate
    setPartialFilmingStartDate: (value: PartialFilmingDate) => void
    isPartialFilmingEndDate: boolean
    setIsPartialFilmingEndDate: (value: boolean) => void
    partialFilmingEndDate: PartialFilmingDate
    setPartialFilmingEndDate: (value: PartialFilmingDate) => void

    // Metadata
    availableRatings: any[]
    availableColorTypes: any[]

    // Callbacks
    handleGenresChange: (genres: number[]) => void
    handleLinksChange: (links: any[]) => void
    handleCastChange: (cast: any[]) => void
    handleCrewChange: (crew: any[]) => void
    handleCountriesChange: (countries: number[]) => void
    handleProductionCompaniesChange: (companies: number[]) => void
    handleDistributionCompaniesChange: (companies: number[]) => void
    handleThemesChange: (themes: number[]) => void
    handleScreeningVenuesChange: (venues: number[]) => void

    // Funciones
    loadMovieData: (movie: Movie) => Promise<void>
    resetForNewMovie: () => void

    // Form methods
    register: UseFormRegister<MovieFormData>
    handleSubmit: UseFormHandleSubmit<MovieFormData>
    watch: UseFormWatch<MovieFormData>
    setValue: UseFormSetValue<MovieFormData>
    reset: UseFormReset<MovieFormData>
    formState: any
    control: any
    getValues: any
    trigger: any
    clearErrors: any
    setError: any
    setFocus: any
    getFieldState: any
    resetField: any
    unregister: any
}

export function useMovieForm({ editingMovie, onSuccess }: UseMovieFormProps): UseMovieFormReturn {
    // Estados del formulario
    const [activeTab, setActiveTab] = useState('basic')
    const [isPartialDate, setIsPartialDate] = useState(false)
    const [partialReleaseDate, setPartialReleaseDate] = useState<PartialReleaseDate>({
        year: null,
        month: null,
        day: null
    })
    const [tipoDuracionDisabled, setTipoDuracionDisabled] = useState(false)
    const [movieFormInitialData, setMovieFormInitialData] = useState<any>(null)

    // Estados para fechas de rodaje
    const [isPartialFilmingStartDate, setIsPartialFilmingStartDate] = useState(false)
    const [partialFilmingStartDate, setPartialFilmingStartDate] = useState<PartialFilmingDate>({
        year: null,
        month: null,
        day: null
    })

    const [isPartialFilmingEndDate, setIsPartialFilmingEndDate] = useState(false)
    const [partialFilmingEndDate, setPartialFilmingEndDate] = useState<PartialFilmingDate>({
        year: null,
        month: null,
        day: null
    })

    // Estados de metadata
    const [availableRatings, setAvailableRatings] = useState<any[]>([])
    const [availableColorTypes, setAvailableColorTypes] = useState<any[]>([])

    // Estados de relaciones
    const [movieRelations, setMovieRelations] = useState<{
        genres: number[];
        cast: any[];
        crew: any[];
        countries: number[];
        productionCompanies: number[];
        distributionCompanies: number[];
        themes: number[];
        screeningVenues: number[];
    }>({
        genres: [],
        cast: [],
        crew: [],
        countries: [],
        productionCompanies: [],
        distributionCompanies: [],
        themes: [],
        screeningVenues: []
    })

    // Estados adicionales
    const [alternativeTitles, setAlternativeTitles] = useState<any[]>([])
    const [movieLinks, setMovieLinks] = useState<any[]>([])

    // React Hook Form
    const form = useForm<MovieFormData>({
        resolver: zodResolver(movieFormSchema),
        defaultValues: {
            stage: 'COMPLETA'
        }
    })

    const { watch, setValue, reset } = form

    // Cargar metadata (ratings y color types)
    useEffect(() => {
        const loadMetadata = async () => {
            try {
                const [ratingsRes, colorTypesRes] = await Promise.all([
                    fetch('/api/calificaciones'),
                    fetch('/api/color-types')
                ])

                if (ratingsRes.ok) {
                    const ratings = await ratingsRes.json()
                    setAvailableRatings(ratings)
                }

                if (colorTypesRes.ok) {
                    const colorTypes = await colorTypesRes.json()
                    setAvailableColorTypes(colorTypes)
                }
            } catch (error) {
                console.error('Error loading metadata:', error)
            }
        }

        loadMetadata()
    }, [])

    // Efecto para observar cambios en duración
    useEffect(() => {
        const subscription = watch((value, { name, type }) => {
            if ((name === 'duration' || name === 'durationSeconds') && type === 'change') {
                const minutos = value.duration
                const segundos = value.durationSeconds
                const hayDuracion = (minutos && minutos > 0) || (segundos && segundos > 0)

                if (hayDuracion) {
                    const tipoCalculado = calcularTipoDuracion(minutos, segundos)
                    const tipoActual = value.tipoDuracion

                    if (tipoCalculado !== tipoActual) {
                        setValue('tipoDuracion', tipoCalculado, { shouldValidate: false })
                    }
                    setTipoDuracionDisabled(true)
                } else {
                    setTipoDuracionDisabled(false)
                }
            }
        })

        return () => subscription.unsubscribe()
    }, [watch, setValue])

    // Callbacks para actualizar relaciones
    const handleGenresChange = useCallback((genres: number[]) => {
        setMovieRelations(prev => ({ ...prev, genres }))
    }, [])

    const handleLinksChange = useCallback((links: any[]) => {
        setMovieLinks(links)
    }, [])

    const handleScreeningVenuesChange = useCallback((venueIds: number[]) => {
        setMovieRelations(prev => ({ ...prev, screeningVenues: venueIds }))
    }, [])

    const handleCastChange = useCallback((cast: any[]) => {
        setMovieRelations(prev => ({ ...prev, cast }))
    }, [])

    const handleCrewChange = useCallback((crew: any[]) => {
        setMovieRelations(prev => ({ ...prev, crew }))
    }, [])

    const handleCountriesChange = useCallback((countries: number[]) => {
        setMovieRelations(prev => ({ ...prev, countries }))
    }, [])

    const handleProductionCompaniesChange = useCallback((companies: number[]) => {
        setMovieRelations(prev => ({ ...prev, productionCompanies: companies }))
    }, [])

    const handleThemesChange = useCallback((themes: number[]) => {
        setMovieRelations(prev => ({ ...prev, themes }))
    }, [])

    const handleDistributionCompaniesChange = useCallback((companies: number[]) => {
        setMovieRelations(prev => ({ ...prev, distributionCompanies: companies }))
    }, [])

    // Función para cargar datos de película existente
    const loadMovieData = useCallback(async (movie: Movie) => {
        try {
            const fullMovie = await moviesService.getById(movie.id)

            // Configurar tipo de duración
            const minutos = fullMovie.duration
            const segundos = fullMovie.durationSeconds
            const hayDuracion = (minutos && minutos > 0) || (segundos && segundos > 0)

            if (hayDuracion) {
                const tipoCalculado = calcularTipoDuracion(minutos, segundos)
                setValue('tipoDuracion', tipoCalculado)
                setTipoDuracionDisabled(true)
            } else {
                setValue('tipoDuracion', fullMovie.tipoDuracion || '')
                setTipoDuracionDisabled(false)
            }

            // Configurar títulos alternativos
            if (fullMovie.alternativeTitles) {
                setAlternativeTitles(fullMovie.alternativeTitles)
            }

            // Llenar el formulario
            Object.keys(fullMovie).forEach((key) => {
                if (key === 'metaKeywords' && Array.isArray(fullMovie[key])) {
                    setValue(key as any, fullMovie[key].join(', '))
                } else if (key === 'releaseDate' && fullMovie[key]) {
                    setValue(key as any, new Date(fullMovie[key]).toISOString().split('T')[0])
                    setIsPartialDate(false)
                } else if (key === 'durationSeconds') {
                    setValue(key as any, fullMovie[key] || 0)
                } else if (key === 'colorType' && fullMovie[key]) {
                    setValue('colorTypeId' as any, fullMovie[key].id)
                } else {
                    setValue(key as any, fullMovie[key])
                }
            })

            // Manejar fecha parcial de estreno
            if (fullMovie.releaseYear && !fullMovie.releaseDate) {
                setIsPartialDate(true)
                setPartialReleaseDate({
                    year: fullMovie.releaseYear,
                    month: fullMovie.releaseMonth || null,
                    day: null
                })

                if (fullMovie.releaseDay) {
                    setIsPartialDate(false)
                    const dateStr = `${fullMovie.releaseYear}-${String(fullMovie.releaseMonth || 1).padStart(2, '0')}-${String(fullMovie.releaseDay || 1).padStart(2, '0')}`
                    setValue('releaseDate', dateStr)
                }
            } else if (!fullMovie.releaseYear && !fullMovie.releaseDate) {
                setIsPartialDate(false)
                setPartialReleaseDate({ year: null, month: null, day: null })
            }

            // Manejar fecha parcial de inicio de rodaje (IGUAL que releaseDate)
            if (fullMovie.filmingStartYear) {
                setIsPartialFilmingStartDate(true)
                setPartialFilmingStartDate({
                    year: fullMovie.filmingStartYear,
                    month: fullMovie.filmingStartMonth || null,
                    day: null
                })

                if (fullMovie.filmingStartDay) {
                    setIsPartialFilmingStartDate(false)
                    const dateStr = `${fullMovie.filmingStartYear}-${String(fullMovie.filmingStartMonth || 1).padStart(2, '0')}-${String(fullMovie.filmingStartDay || 1).padStart(2, '0')}`
                    setValue('filmingStartDate', dateStr)
                }
            } else {
                setIsPartialFilmingStartDate(false)
                setPartialFilmingStartDate({ year: null, month: null, day: null })
            }

            // Manejar fecha parcial de fin de rodaje (IGUAL que releaseDate)
            if (fullMovie.filmingEndYear) {
                setIsPartialFilmingEndDate(true)
                setPartialFilmingEndDate({
                    year: fullMovie.filmingEndYear,
                    month: fullMovie.filmingEndMonth || null,
                    day: null
                })

                if (fullMovie.filmingEndDay) {
                    setIsPartialFilmingEndDate(false)
                    const dateStr = `${fullMovie.filmingEndYear}-${String(fullMovie.filmingEndMonth || 1).padStart(2, '0')}-${String(fullMovie.filmingEndDay || 1).padStart(2, '0')}`
                    setValue('filmingEndDate', dateStr)
                }
            } else {
                setIsPartialFilmingEndDate(false)
                setPartialFilmingEndDate({ year: null, month: null, day: null })
            }

            // Configurar valores por defecto
            if (!fullMovie.stage) {
                setValue('stage', 'COMPLETA')
            }
            setValue('dataCompleteness', fullMovie.dataCompleteness || 'BASIC_PRESS_KIT')

            if (fullMovie.ratingId) {
                setValue('ratingId', fullMovie.ratingId)
            }

            // Configurar datos iniciales y relaciones
            setMovieFormInitialData({
                genres: fullMovie.genres || [],
                cast: fullMovie.cast || [],
                crew: fullMovie.crew || [],
                countries: fullMovie.movieCountries || [],
                productionCompanies: fullMovie.productionCompanies || [],
                distributionCompanies: fullMovie.distributionCompanies || [],
                themes: fullMovie.themes || [],
                screeningVenues: fullMovie.screenings?.map((s: any) => s.venueId) || [] // AGREGAR ESTA LÍNEA
            })

            if (fullMovie.links) {
                setMovieLinks(fullMovie.links)
            }

            // Configurar relaciones
            setMovieRelations({
                genres: fullMovie.genres?.map((g: any) => g.genreId) || [],
                cast: fullMovie.cast?.map((c: any) => ({
                    personId: c.personId,
                    characterName: c.characterName,
                    billingOrder: c.billingOrder,
                    isPrincipal: c.isPrincipal
                })) || [],
                crew: fullMovie.crew?.map((c: any) => ({
                    personId: c.personId,
                    role: c.role,
                    department: c.department,
                    billingOrder: c.billingOrder
                })) || [],
                countries: fullMovie.movieCountries?.map((c: any) => c.countryId) || [],
                productionCompanies: fullMovie.productionCompanies?.map((c: any) => c.companyId) || [],
                distributionCompanies: fullMovie.distributionCompanies?.map((c: any) => c.companyId) || [],
                themes: fullMovie.themes?.map((t: any) => t.themeId) || [],
                screeningVenues: fullMovie.screenings?.map((s: any) => s.venueId) || [] // AGREGAR ESTA LÍNEA
            })

        } catch (error) {
            console.error('Error completo en loadMovieData:', error)
            console.error('Stack trace:', error instanceof Error ? error.stack : 'No stack')
            toast.error('Error al cargar los datos de la película')
            throw error
        }
    }, [setValue])

    // Función submit
    const onSubmit = async (data: MovieFormData) => {
        try {
            // Preparar los datos correctamente
            const preparedData = prepareMovieData(data)

            // Procesar fecha de estreno según el tipo
            let releaseDateData = {}
            if (isPartialDate) {
                // Fecha parcial - enviar campos separados
                releaseDateData = {
                    releaseYear: partialReleaseDate.year,
                    releaseMonth: partialReleaseDate.month,
                    releaseDay: null
                }
            } else if (data.releaseDate) {
                // Fecha completa - convertir a campos separados
                const [year, month, day] = data.releaseDate.split('-').map(Number)
                releaseDateData = {
                    releaseYear: year,
                    releaseMonth: month,
                    releaseDay: day
                }
            } else {
                // Sin fecha
                releaseDateData = {
                    releaseYear: null,
                    releaseMonth: null,
                    releaseDay: null
                }
            }

            // Procesar fechas de rodaje
            let filmingStartDateData = {}
            if (isPartialFilmingStartDate && partialFilmingStartDate.year) {
                // Fecha parcial de inicio
                filmingStartDateData = {
                    filmingStartYear: partialFilmingStartDate.year,
                    filmingStartMonth: partialFilmingStartDate.month,
                    filmingStartDay: null
                }
            } else if (data.filmingStartDate) {
                // Fecha completa de inicio
                const [year, month, day] = data.filmingStartDate.split('-').map(Number)
                filmingStartDateData = {
                    filmingStartYear: year,
                    filmingStartMonth: month,
                    filmingStartDay: day
                }
            } else {
                // Sin fecha de inicio
                filmingStartDateData = {
                    filmingStartYear: null,
                    filmingStartMonth: null,
                    filmingStartDay: null
                }
            }

            let filmingEndDateData = {}
            if (isPartialFilmingEndDate && partialFilmingEndDate.year) {
                // Fecha parcial de fin
                filmingEndDateData = {
                    filmingEndYear: partialFilmingEndDate.year,
                    filmingEndMonth: partialFilmingEndDate.month,
                    filmingEndDay: null
                }
            } else if (data.filmingEndDate) {
                // Fecha completa de fin
                const [year, month, day] = data.filmingEndDate.split('-').map(Number)
                filmingEndDateData = {
                    filmingEndYear: year,
                    filmingEndMonth: month,
                    filmingEndDay: day
                }
            } else {
                // Sin fecha de fin
                filmingEndDateData = {
                    filmingEndYear: null,
                    filmingEndMonth: null,
                    filmingEndDay: null
                }
            }

            // IMPORTANTE: Eliminar campos de fecha del objeto preparado
            delete preparedData.releaseDate;
            delete preparedData.filmingStartDate;
            delete preparedData.filmingEndDate;

            const movieData = {
                ...preparedData,
                ...releaseDateData,
                ...filmingStartDateData,
                ...filmingEndDateData,
                stage: data.stage || 'COMPLETA',
                ratingId: preparedData.ratingId === '' || preparedData.ratingId === undefined ? null : preparedData.ratingId,
                metaKeywords: preparedData.metaKeywords
                    ? Array.isArray(preparedData.metaKeywords)
                        ? preparedData.metaKeywords
                        : preparedData.metaKeywords.split(',').map((k: string) => k.trim()).filter((k: string) => k)
                    : [],
                ...movieRelations,
                screeningVenues: movieRelations.screeningVenues.map((venueId, index) => ({
                    venueId,
                    screeningDate: data.releaseDate || new Date().toISOString().split('T')[0],
                    isPremiere: index === 0, // La primera es premiere
                    isExclusive: movieRelations.screeningVenues.length === 1 // Exclusiva si es la única
                })),
                alternativeTitles,
                links: movieLinks
            }

            // Asegurarse de nuevo de que no se envíen campos de fecha incorrectos
            delete movieData.releaseDate;
            delete movieData.filmingStartDate;
            delete movieData.filmingEndDate;

            // Usar el servicio para crear o actualizar
            if (editingMovie) {
                await moviesService.update(editingMovie.id, movieData)
                toast.success('Película actualizada')
            } else {
                await moviesService.create(movieData)
                toast.success('Película creada')
            }

            // Limpiar y ejecutar callback de éxito
            reset()
            onSuccess()

        } catch (error) {
            console.error('❌ Error in onSubmit:', error)
            toast.error(error instanceof Error ? error.message : 'Error al guardar')
        }
    }

    // Reset para nueva película
    const resetForNewMovie = useCallback(() => {
        reset({
            stage: 'COMPLETA',
            dataCompleteness: 'BASIC_PRESS_KIT',
        })
        setIsPartialDate(false)
        setPartialReleaseDate({ year: null, month: null, day: null })
        setIsPartialFilmingStartDate(false)
        setPartialFilmingStartDate({ year: null, month: null, day: null })
        setIsPartialFilmingEndDate(false)
        setPartialFilmingEndDate({ year: null, month: null, day: null })
        setMovieRelations({
            genres: [],
            cast: [],
            crew: [],
            countries: [],
            productionCompanies: [],
            distributionCompanies: [],
            themes: [],
            screeningVenues: []
        })
        setMovieLinks([])
        setAlternativeTitles([])
        setTipoDuracionDisabled(false)
        setActiveTab('basic')
        setMovieFormInitialData(null)
    }, [reset])

    return {

        onSubmit,

        // Estados
        activeTab,
        setActiveTab,
        isPartialDate,
        setIsPartialDate,
        partialReleaseDate,
        setPartialReleaseDate,
        tipoDuracionDisabled,
        movieFormInitialData,
        alternativeTitles,
        setAlternativeTitles,
        movieLinks,

        // Estados de fechas de rodaje
        isPartialFilmingStartDate,
        setIsPartialFilmingStartDate,
        partialFilmingStartDate,
        setPartialFilmingStartDate,
        isPartialFilmingEndDate,
        setIsPartialFilmingEndDate,
        partialFilmingEndDate,
        setPartialFilmingEndDate,

        // Metadata
        availableRatings,
        availableColorTypes,

        // Callbacks
        handleGenresChange,
        handleLinksChange,
        handleCastChange,
        handleCrewChange,
        handleCountriesChange,
        handleProductionCompaniesChange,
        handleDistributionCompaniesChange,
        handleThemesChange,
        handleScreeningVenuesChange,

        // Funciones
        loadMovieData,
        resetForNewMovie,
        // Form methods explícitos (sin spread)
        register: form.register,
        handleSubmit: form.handleSubmit,
        watch: form.watch,
        setValue: form.setValue,
        reset: form.reset,
        formState: form.formState,
        control: form.control,
        getValues: form.getValues,
        trigger: form.trigger,
        clearErrors: form.clearErrors,
        setError: form.setError,
        setFocus: form.setFocus,
        getFieldState: form.getFieldState,
        resetField: form.resetField,
        unregister: form.unregister
    } as const
}

// ==================================================
// src/hooks/usePeople.ts
// ==================================================
// src/hooks/usePeople.ts

import { useState, useEffect, useCallback } from 'react';
import { useDebounce } from '@/hooks/useDebounce';
import { peopleService } from '@/services/people.service';
import { 
  PersonWithRelations,
  PersonFilters,
  PaginatedPeopleResponse 
} from '@/lib/people/peopleTypes';
import { PEOPLE_PAGINATION } from '@/lib/people/peopleConstants';
import { toast } from 'react-hot-toast';

interface UsePeopleOptions {
  autoLoad?: boolean;
  initialFilters?: PersonFilters;
}

export function usePeople(options: UsePeopleOptions = {}) {
  const { autoLoad = true, initialFilters = {} } = options;
  
  // Estado
  const [people, setPeople] = useState<PersonWithRelations[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<Error | null>(null);
  const [totalCount, setTotalCount] = useState(0);
  const [totalPages, setTotalPages] = useState(0);
  const [hasMore, setHasMore] = useState(false);
  
  // Filtros
  const [filters, setFilters] = useState<PersonFilters>({
    page: PEOPLE_PAGINATION.DEFAULT_PAGE,
    limit: PEOPLE_PAGINATION.DEFAULT_LIMIT,
    ...initialFilters,
  });
  
  // Debounce para búsqueda
  const debouncedSearch = useDebounce(filters.search || '', 300);

  // Cargar personas
  const loadPeople = useCallback(async () => {
    try {
      setLoading(true);
      setError(null);
      
      const response = await peopleService.getAll({
        ...filters,
        search: debouncedSearch,
      });
      
      setPeople(response.data);
      setTotalCount(response.totalCount);
      setTotalPages(response.totalPages);
      setHasMore(response.hasMore);
    } catch (err) {
      console.error('Error loading people:', err);
      setError(err as Error);
      toast.error('No se pudieron cargar las personas');
    } finally {
      setLoading(false);
    }
  }, [filters, debouncedSearch]);

  // Efecto para cargar personas
  useEffect(() => {
    if (autoLoad) {
      loadPeople();
    }
  }, [loadPeople, autoLoad]);

  // Actualizar un filtro específico
  const updateFilter = useCallback(<K extends keyof PersonFilters>(
    key: K,
    value: PersonFilters[K]
  ) => {
    setFilters(prev => ({
      ...prev,
      [key]: value,
      // Resetear a página 1 cuando cambian otros filtros
      ...(key !== 'page' && { page: 1 }),
    }));
  }, []);

  // Actualizar múltiples filtros
  const updateFilters = useCallback((newFilters: Partial<PersonFilters>) => {
    setFilters(prev => ({
      ...prev,
      ...newFilters,
      // Resetear a página 1 si no se está cambiando la página
      ...(!newFilters.page && { page: 1 }),
    }));
  }, []);

  // Resetear filtros
  const resetFilters = useCallback(() => {
    setFilters({
      page: PEOPLE_PAGINATION.DEFAULT_PAGE,
      limit: PEOPLE_PAGINATION.DEFAULT_LIMIT,
    });
  }, []);

  // Cambiar página
  const goToPage = useCallback((page: number) => {
    updateFilter('page', page);
  }, [updateFilter]);

  // Eliminar persona
  const deletePerson = useCallback(async (id: number) => {
    try {
      await peopleService.delete(id);
      
      toast.success('Persona eliminada correctamente');
      
      // Recargar lista después de eliminar
      await loadPeople();
    } catch (err) {
      console.error('Error deleting person:', err);
      
      const errorMessage = err instanceof Error 
        ? err.message 
        : 'Error al eliminar persona';
      
      toast.error(errorMessage);
      
      throw err;
    }
  }, [loadPeople]);

  // Exportar a CSV
  const exportToCSV = useCallback(async () => {
    try {
      const blob = await peopleService.exportToCSV(filters);
      
      // Crear enlace de descarga
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `personas-${new Date().toISOString().split('T')[0]}.csv`;
      document.body.appendChild(a);
      a.click();
      window.URL.revokeObjectURL(url);
      document.body.removeChild(a);
      
      toast.success('Archivo CSV descargado correctamente');
    } catch (err) {
      console.error('Error exporting to CSV:', err);
      toast.error('No se pudo exportar a CSV');
    }
  }, [filters]);

  return {
    // Datos
    people,
    totalCount,
    totalPages,
    hasMore,
    currentPage: filters.page || 1,
    pageSize: filters.limit || PEOPLE_PAGINATION.DEFAULT_LIMIT,
    
    // Estado
    loading,
    error,
    filters,
    
    // Acciones
    loadPeople,
    updateFilter,
    updateFilters,
    resetFilters,
    goToPage,
    deletePerson,
    exportToCSV,
    
    // Navegación
    goToNextPage: () => goToPage((filters.page || 1) + 1),
    goToPreviousPage: () => goToPage(Math.max(1, (filters.page || 1) - 1)),
    canGoNext: hasMore,
    canGoPrevious: (filters.page || 1) > 1,
  };
}

// Hook para búsqueda simple (autocomplete)
export function usePeopleSearch() {
  const [query, setQuery] = useState('');
  const [results, setResults] = useState<Array<{ id: number; name: string; slug?: string }>>([]);
  const [loading, setLoading] = useState(false);
  
  const debouncedQuery = useDebounce(query, 300);
  
  useEffect(() => {
    const searchPeople = async () => {
      if (debouncedQuery.length < 2) {
        setResults([]);
        return;
      }
      
      try {
        setLoading(true);
        const data = await peopleService.search(debouncedQuery);
        setResults(data);
      } catch (error) {
        console.error('Error searching people:', error);
        setResults([]);
      } finally {
        setLoading(false);
      }
    };
    
    searchPeople();
  }, [debouncedQuery]);
  
  return {
    query,
    setQuery,
    results,
    loading,
    clearResults: () => setResults([]),
  };
}

// Hook para una persona individual
export function usePerson(id: number | string | null) {
  const [person, setPerson] = useState<PersonWithRelations | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<Error | null>(null);

  useEffect(() => {
    const fetchPerson = async () => {
      if (!id || id === 'new') {
        setPerson(null);
        return;
      }

      try {
        setLoading(true);
        setError(null);
        const personId = typeof id === 'string' ? parseInt(id) : id;
        const data = await peopleService.getById(personId);
        setPerson(data);
      } catch (err) {
        console.error('Error loading person:', err);
        setError(err as Error);
      } finally {
        setLoading(false);
      }
    };

    fetchPerson();
  }, [id]);

  const reload = useCallback(async () => {
    if (!id || id === 'new') return;
    
    try {
      setLoading(true);
      const personId = typeof id === 'string' ? parseInt(id) : id;
      const data = await peopleService.getById(personId);
      setPerson(data);
    } catch (err) {
      setError(err as Error);
    } finally {
      setLoading(false);
    }
  }, [id]);

  return { person, loading, error, reload };
}

// ==================================================
// src/hooks/usePeopleForm.ts
// ==================================================
// src/hooks/usePeopleForm.ts

import { useState, useCallback, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { peopleService } from '@/services/people.service';
import {
    PersonFormData,
    PersonWithRelations,
    PersonLink
} from '@/lib/people/peopleTypes';
import {
    DEFAULT_PERSON_FORM_VALUES,
    PERSON_ERROR_MESSAGES,
    PERSON_SUCCESS_MESSAGES
} from '@/lib/people/peopleConstants';
import {
    formatPersonDataForForm,
    validatePersonForm,
    addNewPersonLink,
    updatePersonLink,
    removePersonLink
} from '@/lib/people/peopleUtils';
import { toast } from 'react-hot-toast';

interface UsePeopleFormProps {
    personId?: number;
    onSuccess?: (person: PersonWithRelations) => void;
}

export function usePeopleForm({ personId, onSuccess }: UsePeopleFormProps = {}) {
    const router = useRouter();
    const [loading, setLoading] = useState(false);
    const [saving, setSaving] = useState(false);
    const [formData, setFormData] = useState<PersonFormData>(DEFAULT_PERSON_FORM_VALUES);
    const [errors, setErrors] = useState<string[]>([]);
    const [isDirty, setIsDirty] = useState(false);

    // Cargar datos de la persona si es edición
    useEffect(() => {
        if (personId) {
            loadPerson();
        }
    }, [personId]);

    // Cargar persona existente
    const loadPerson = async () => {
        if (!personId) return;

        try {
            setLoading(true);
            const person = await peopleService.getById(personId);

            const formattedData = formatPersonDataForForm(person);
            // Si la persona tiene links, cargarlos también
            if (person.links) {
                formattedData.links = person.links;
            }

            setFormData(formattedData);
        } catch (error) {
            console.error('Error loading person:', error);
            toast.error('No se pudo cargar la información de la persona');
        } finally {
            setLoading(false);
        }
    };

    // Actualizar campo del formulario
    const updateField = useCallback(<K extends keyof PersonFormData>(
        field: K,
        value: PersonFormData[K]
    ) => {
        setFormData(prev => ({ ...prev, [field]: value }));
        setIsDirty(true);
        setErrors([]); // Limpiar errores al modificar
    }, []);

    // Actualizar múltiples campos
    const updateFields = useCallback((updates: Partial<PersonFormData>) => {
        setFormData(prev => ({ ...prev, ...updates }));
        setIsDirty(true);
        setErrors([]);
    }, []);

    // Manejo de links
    const addLink = useCallback(() => {
        setFormData(prev => ({
            ...prev,
            links: addNewPersonLink(prev.links)
        }));
        setIsDirty(true);
    }, []);

    const updateLink = useCallback((index: number, updates: Partial<PersonLink>) => {
        setFormData(prev => ({
            ...prev,
            links: updatePersonLink(prev.links, index, updates)
        }));
        setIsDirty(true);
    }, []);

    const removeLink = useCallback((index: number) => {
        setFormData(prev => ({
            ...prev,
            links: removePersonLink(prev.links, index)
        }));
        setIsDirty(true);
    }, []);

    // Validar formulario
    const validate = useCallback((): boolean => {
        const validationErrors = validatePersonForm(formData);
        setErrors(validationErrors);
        return validationErrors.length === 0;
    }, [formData]);

    // Guardar persona
    const save = useCallback(async () => {
        console.log('FormData before save:', formData); // <-- Agregar esta línea
        console.log('Birth Location ID:', formData.birthLocationId);
        console.log('Death Location ID:', formData.deathLocationId);
        if (!validate()) {
            toast.error('Por favor corrige los errores en el formulario');
            return false;
        }

        try {
            setSaving(true);
            let savedPerson: PersonWithRelations;

            if (personId) {
                savedPerson = await peopleService.update(personId, formData);
                toast.success(PERSON_SUCCESS_MESSAGES.UPDATED);
            } else {
                savedPerson = await peopleService.create(formData);
                toast.success(PERSON_SUCCESS_MESSAGES.CREATED);
            }

            setIsDirty(false);

            if (onSuccess) {
                onSuccess(savedPerson);
            } else {
                router.push('/admin/people');
            }

            return true;
        } catch (error) {
            console.error('Error saving person:', error);

            const errorMessage = error instanceof Error
                ? error.message
                : personId ? PERSON_ERROR_MESSAGES.UPDATE_ERROR : PERSON_ERROR_MESSAGES.CREATE_ERROR;

            toast.error(errorMessage);

            return false;
        } finally {
            setSaving(false);
        }
    }, [formData, personId, validate, router, onSuccess]);

    // Resetear formulario
    const reset = useCallback(() => {
        setFormData(DEFAULT_PERSON_FORM_VALUES);
        setErrors([]);
        setIsDirty(false);
    }, []);

    // Cancelar y volver
    const cancel = useCallback(() => {
        if (isDirty) {
            const confirmed = window.confirm('¿Estás seguro? Se perderán los cambios no guardados.');
            if (!confirmed) return;
        }
        router.push('/admin/people');
    }, [isDirty, router]);

    return {
        // Estado
        formData,
        loading,
        saving,
        errors,
        isDirty,
        isEdit: !!personId,

        // Acciones
        updateField,
        updateFields,
        addLink,
        updateLink,
        removeLink,
        save,
        reset,
        cancel,
        reload: loadPerson,
    };
}

// ==================================================
// src/lib/movies/movieConstants.ts
// ==================================================
// src/lib/movies/movieConstants.ts

export { MONTHS } from '@/lib/shared/dateUtils';

export const MOVIE_STAGES = [
  { value: 'COMPLETA', label: 'Completa', description: 'Película terminada y estrenada' },
  { value: 'EN_DESARROLLO', label: 'En desarrollo', description: 'En etapa de desarrollo del proyecto' },
  { value: 'EN_POSTPRODUCCION', label: 'En postproducción', description: 'En proceso de edición y postproducción' },
  { value: 'EN_PREPRODUCCION', label: 'En preproducción', description: 'En preparación para el rodaje' },
  { value: 'EN_RODAJE', label: 'En rodaje', description: 'Actualmente filmando' },
  { value: 'INCONCLUSA', label: 'Inconclusa', description: 'Proyecto abandonado o sin terminar' },
  { value: 'INEDITA', label: 'Inédita', description: 'Completa pero sin estrenar' }
] as const

export const TIPOS_DURACION = [
  { value: 'largometraje', label: 'Largometraje' },
  { value: 'mediometraje', label: 'Mediometraje' },
  { value: 'cortometraje', label: 'Cortometraje' }
] as const

export const DATA_COMPLETENESS_LEVELS = [
  { value: 'BASIC_PRESS_KIT', label: 'Gacetilla básica', icon: '📄' },
  { value: 'FULL_PRESS_KIT', label: 'Gacetilla completa', icon: '📋' },
  { value: 'MAIN_CAST', label: 'Intérpretes principales', icon: '👥' },
  { value: 'MAIN_CREW', label: 'Técnicos principales', icon: '🔧' },
  { value: 'FULL_CAST', label: 'Todos los intérpretes', icon: '🎭' },
  { value: 'FULL_CREW', label: 'Todos los técnicos', icon: '🎬' }
] as const

export const SOUND_TYPES = [
  { value: 'Sonora', label: 'Sonora' },
  { value: 'Muda', label: 'Muda' },
  { value: 'n/d', label: 'No disponible' }
] as const

// Duraciones en minutos
export const DURATION_THRESHOLDS = {
  LARGOMETRAJE: 60,
  MEDIOMETRAJE: 30
} as const

// Colores para los badges
export const STAGE_COLORS = {
  COMPLETA: 'bg-green-100 text-green-800',
  EN_DESARROLLO: 'bg-blue-100 text-blue-800',
  EN_POSTPRODUCCION: 'bg-purple-100 text-purple-800',
  EN_PREPRODUCCION: 'bg-yellow-100 text-yellow-800',
  EN_RODAJE: 'bg-orange-100 text-orange-800',
  INCONCLUSA: 'bg-red-100 text-red-800',
  INEDITA: 'bg-gray-100 text-gray-800'
} as const

export const COMPLETENESS_COLORS = {
  BASIC_PRESS_KIT: 'bg-red-100 text-red-800',
  FULL_PRESS_KIT: 'bg-orange-100 text-orange-800',
  MAIN_CAST: 'bg-yellow-100 text-yellow-800',
  MAIN_CREW: 'bg-green-100 text-green-800',
  FULL_CAST: 'bg-green-100 text-green-800',
  FULL_CREW: 'bg-blue-100 text-blue-800'
} as const

// ==================================================
// src/lib/movies/movieTypes.ts
// ==================================================
// src/lib/movies/movieTypes.ts

import { PartialDate } from '@/lib/shared/dateUtils'

// Usar el tipo compartido de PartialDate en lugar de tipos propios
export type PartialReleaseDate = PartialDate
export type PartialFilmingDate = PartialDate


import { z } from 'zod'

// Schema del formulario
export const movieFormSchema = z.object({
  // Campos requeridos
  title: z.string().min(1, 'El título es requerido'),

  // Todos los demás campos como strings opcionales o any
  originalTitle: z.any().optional(),
  synopsis: z.any().optional(),
  notes: z.string().optional(),
  tagline: z.any().optional(),
  imdbId: z.any().optional(),
  aspectRatio: z.any().optional(),
  colorType: z.any().optional(),
  soundType: z.any().optional(),
  filmFormat: z.any().optional(),
  certificateNumber: z.any().optional(),
  tipoDuracion: z.any().optional(),

  // Campos numéricos
  year: z.any().optional(),
  duration: z.any().optional(),
  durationSeconds: z.any().optional(),
  rating: z.any().optional(),
  colorTypeId: z.any().optional(),
  ratingId: z.union([z.number(), z.null()]).optional(),

  // Campos de fecha
  releaseDate: z.any().optional(),
  filmingStartDate: z.any().optional(),
  filmingEndDate: z.any().optional(),
  countries: z.array(z.string()).optional(),
  is_coproduction: z.boolean().optional(),
  production_type: z.string().optional(),

  isPartialReleaseDate: z.boolean().optional(),
  partialReleaseDate: z.object({
    year: z.number().nullable(),
    month: z.number().nullable(),
    day: z.number().nullable()
  }).optional(),

  isPartialFilmingStartDate: z.boolean().optional(),
  partialFilmingStartDate: z.object({
    year: z.number().nullable(),
    month: z.number().nullable(),
    day: z.number().nullable()
  }).optional(),

  isPartialFilmingEndDate: z.boolean().optional(),
  partialFilmingEndDate: z.object({
    year: z.number().nullable(),
    month: z.number().nullable(),
    day: z.number().nullable()
  }).optional(),

  // URLs
  posterUrl: z.any().optional(),
  posterPublicId: z.any().optional(),
  backdropUrl: z.any().optional(),
  backdropPublicId: z.any().optional(),
  trailerUrl: z.any().optional(),

  // Enums
  dataCompleteness: z.enum([
    'BASIC_PRESS_KIT',
    'FULL_PRESS_KIT',
    'MAIN_CAST',
    'MAIN_CREW',
    'FULL_CAST',
    'FULL_CREW'
  ]).optional(),
  stage: z.enum([
    'COMPLETA',
    'EN_DESARROLLO',
    'EN_POSTPRODUCCION',
    'EN_PREPRODUCCION',
    'EN_RODAJE',
    'INCONCLUSA',
    'INEDITA'
  ]).optional(),
  metaDescription: z.string().optional(),
  metaKeywords: z.union([
    z.string(),
    z.array(z.string())
  ]).optional(),
  genres: z.array(z.number()).optional(),
  cast: z.array(z.object({
    personId: z.number(),
    characterName: z.string().optional(),
    billingOrder: z.number().optional(),
    isPrincipal: z.boolean().optional()
  })).optional(),
  crew: z.array(z.object({
    personId: z.number(),
    role: z.string(),
    department: z.string().optional(),
    billingOrder: z.number().optional()
  })).optional(),
  productionCompanies: z.array(z.number()).optional(),
  distributionCompanies: z.array(z.number()).optional(),
  themes: z.array(z.number()).optional(),
  movieCountries: z.array(z.number()).optional(),
  links: z.array(z.object({
    type: z.string(),
    url: z.string(),
    title: z.string().optional(),
    isActive: z.boolean().optional()
  })).optional(),
  screeningVenues: z.array(z.union([
    z.number(),
    z.object({
      venueId: z.number(),
      screeningDate: z.string().optional(),
      isPremiere: z.boolean().optional(),
      isExclusive: z.boolean().optional()
    })
  ])).optional(),
  alternativeTitles: z.array(z.object({
    title: z.string(),
    description: z.string().optional()
  })).optional()
})

export type MovieFormData = z.infer<typeof movieFormSchema>

// Interfaces
export interface Movie {
  id: number
  slug: string
  title: string
  originalTitle?: string
  year: number
  releaseDate?: string
  duration?: number
  rating?: number
  posterUrl?: string
  status: string
  stage?: string

  // Fechas de rodaje
  filmingStartDate: string;
  filmingEndDate: string;
  dataCompleteness?: string
  genres: Array<{ id: number; name: string }>
  directors: Array<{ id: number; name: string }>
  mainCast: Array<{
    person: { id: number; name: string }
    character?: string
  }>
  country: string
}

export interface MovieRelations {
  genres: number[]
  cast: any[]
  crew: any[]
  countries: number[]
  productionCompanies: number[]
  distributionCompanies: number[]
  themes: number[]
}

export interface MovieLink {
  id?: number
  type: string
  url: string
  description?: string
}

export interface AlternativeTitle {
  id?: number
  title: string
  type?: string
  language?: string
}

export interface Rating {
  id: number
  name: string
  abbreviation?: string
  description?: string
}

export interface ColorType {
  id: number
  name: string
}

// Tipos de constantes
export type MovieStage =
  | 'COMPLETA'
  | 'EN_DESARROLLO'
  | 'EN_POSTPRODUCCION'
  | 'EN_PREPRODUCCION'
  | 'EN_RODAJE'
  | 'INCONCLUSA'
  | 'INEDITA'

export type DataCompleteness =
  | 'BASIC_PRESS_KIT'
  | 'FULL_PRESS_KIT'
  | 'MAIN_CAST'
  | 'MAIN_CREW'
  | 'FULL_CAST'
  | 'FULL_CREW'

export type DurationType = 'largometraje' | 'mediometraje' | 'cortometraje'

// ==================================================
// src/lib/movies/movieUtils.ts
// ==================================================
// src/lib/movies/movieUtils.ts

import { DURATION_THRESHOLDS, MOVIE_STAGES, COMPLETENESS_COLORS, STAGE_COLORS, DATA_COMPLETENESS_LEVELS } from './movieConstants'
import type { MovieFormData } from './movieTypes'

/**
 * Calcula el tipo de duración basado en minutos y segundos
 */
export const calcularTipoDuracion = (
  minutos: number | null | undefined, 
  segundos: number | null | undefined = 0
): string => {
  // Convertir todo a minutos totales
  const minutosReales = minutos || 0
  const segundosReales = segundos || 0
  const duracionTotalMinutos = minutosReales + (segundosReales / 60)

  // Si no hay duración total, retornar vacío
  if (duracionTotalMinutos === 0) return ''

  if (duracionTotalMinutos >= DURATION_THRESHOLDS.LARGOMETRAJE) return 'largometraje'
  if (duracionTotalMinutos >= DURATION_THRESHOLDS.MEDIOMETRAJE) return 'mediometraje'
  return 'cortometraje'
}

/**
 * Limpia y prepara los datos del formulario para enviar al backend
 */
export const prepareMovieData = (data: MovieFormData) => {
  const prepared: any = {}

  Object.entries(data).forEach(([key, value]) => {
    // Si es string vacío, null o undefined, lo dejamos como undefined
    if (value === '' || value === null || value === undefined) {
      prepared[key] = undefined
    }
    // Si es un campo numérico y tiene valor
    else if (['year', 'duration', 'durationSeconds', 'rating', 'colorTypeId', 'ratingId'].includes(key) && value !== '') {
      const num = Number(value)
      prepared[key] = isNaN(num) ? undefined : num
    }
    // Si es URL y tiene valor, validamos que sea URL válida
    else if (['posterUrl', 'backdropUrl', 'trailerUrl'].includes(key) && value !== '') {
      try {
        new URL(value as string)
        prepared[key] = value
      } catch {
        prepared[key] = undefined
      }
    }
    // Para el resto de campos
    else {
      prepared[key] = value
    }
  })

  // Valores por defecto
  prepared.dataCompleteness = prepared.dataCompleteness || 'BASIC_PRESS_KIT'

  return prepared
}

/**
 * Obtiene el label de completitud de datos
 */
export const getCompletenessLabel = (completeness: string): string => {
  const level = DATA_COMPLETENESS_LEVELS.find(l => l.value === completeness)
  return level ? level.label : completeness
}

/**
 * Obtiene el color CSS para el nivel de completitud
 */
export const getCompletenessColor = (completeness: string): string => {
  return COMPLETENESS_COLORS[completeness as keyof typeof COMPLETENESS_COLORS] || 'bg-gray-100 text-gray-800'
}

/**
 * Obtiene el color CSS para la etapa de la película
 */
export const getStageColor = (stage?: string): string => {
  if (!stage) return 'bg-gray-100 text-gray-800'
  return STAGE_COLORS[stage as keyof typeof STAGE_COLORS] || 'bg-gray-100 text-gray-800'
}

/**
 * Obtiene el nombre de la etapa
 */
export const getStageName = (stage?: string): string => {
  if (!stage) return '-'
  const stageInfo = MOVIE_STAGES.find(s => s.value === stage)
  return stageInfo ? stageInfo.label : stage
}

/**
 * Obtiene un mensaje de error legible
 */
export const getErrorMessage = (error: any): string => {
  if (!error) return ''
  if (typeof error === 'string') return error
  if (error?.message) return error.message
  return 'Este campo tiene un error'
}

/**
 * Formatea keywords para enviar al backend
 */
export const formatKeywords = (keywords: string): string[] => {
  if (!keywords) return []
  return keywords.split(',').map(k => k.trim()).filter(Boolean)
}

/**
 * Construye los datos de fecha de estreno según el tipo (parcial o completa)
 */
export const buildReleaseDateData = (
  isPartialDate: boolean,
  releaseDate?: string,
  partialReleaseDate?: { year: number | null; month: number | null }
) => {
  if (isPartialDate && partialReleaseDate) {
    // Fecha parcial - enviar campos separados
    return {
      releaseYear: partialReleaseDate.year,
      releaseMonth: partialReleaseDate.month,
      releaseDay: null
    }
  } else if (releaseDate) {
    // Fecha completa - convertir a campos separados
    const [year, month, day] = releaseDate.split('-').map(Number)
    return {
      releaseYear: year,
      releaseMonth: month,
      releaseDay: day
    }
  } else {
    // Sin fecha
    return {
      releaseYear: null,
      releaseMonth: null,
      releaseDay: null
    }
  }
}

/**
 * Determina si el campo de tipo de duración debe estar deshabilitado
 */
export const shouldDisableDurationType = (
  minutos: number | undefined | null,
  segundos: number | undefined | null
): boolean => {
  return (minutos && minutos > 0) || (segundos && segundos > 0) ? true : false
}

// ==================================================
// src/lib/people/peopleConstants.ts
// ==================================================
// src/lib/people/peopleConstants.ts

import { Gender, PersonLinkType, PersonFormData } from './peopleTypes';

// Opciones de género
export const GENDER_OPTIONS = [
  { value: 'MALE' as Gender, label: 'Masculino' },
  { value: 'FEMALE' as Gender, label: 'Femenino' },
  { value: 'OTHER' as Gender, label: 'Otro' },
] as const;

// Tipos de links con sus etiquetas
export const PERSON_LINK_TYPES: Record<PersonLinkType, string> = {
  IMDB: 'IMDb',
  TMDB: 'TMDb',
  CINENACIONAL: 'CineNacional',
  WIKIPEDIA: 'Wikipedia',
  OFFICIAL_WEBSITE: 'Sitio Web Oficial',
  PORTFOLIO: 'Portfolio',
  BLOG: 'Blog',
  INSTAGRAM: 'Instagram',
  TWITTER: 'Twitter',
  FACEBOOK: 'Facebook',
  YOUTUBE: 'YouTube',
  TIKTOK: 'TikTok',
  LINKEDIN: 'LinkedIn',
  VIMEO: 'Vimeo',
  LETTERBOXD: 'Letterboxd',
  SPOTIFY: 'Spotify',
  PODCAST: 'Podcast',
  INTERVIEW: 'Entrevista',
  ARTICLE: 'Artículo',
  OTHER: 'Otro',
} as const;

// Array de opciones para selects
export const PERSON_LINK_TYPE_OPTIONS = Object.entries(PERSON_LINK_TYPES).map(
  ([value, label]) => ({ value, label })
);

// Categorías de links para organización en UI
export const LINK_CATEGORIES = {
  databases: {
    label: 'Bases de datos',
    types: ['IMDB', 'TMDB', 'CINENACIONAL'] as PersonLinkType[],
  },
  encyclopedias: {
    label: 'Enciclopedias',
    types: ['WIKIPEDIA'] as PersonLinkType[],
  },
  websites: {
    label: 'Sitios web',
    types: ['OFFICIAL_WEBSITE', 'PORTFOLIO', 'BLOG'] as PersonLinkType[],
  },
  social: {
    label: 'Redes sociales',
    types: ['INSTAGRAM', 'TWITTER', 'FACEBOOK', 'YOUTUBE', 'TIKTOK', 'LINKEDIN'] as PersonLinkType[],
  },
  content: {
    label: 'Plataformas de contenido',
    types: ['VIMEO', 'LETTERBOXD', 'SPOTIFY', 'PODCAST'] as PersonLinkType[],
  },
  other: {
    label: 'Otros',
    types: ['INTERVIEW', 'ARTICLE', 'OTHER'] as PersonLinkType[],
  },
} as const;

// Valores por defecto para formularios
export const DEFAULT_PERSON_FORM_VALUES: PersonFormData = {
  firstName: '',
  lastName: '',
  realName: '',
  birthDate: '',
  deathDate: '',
  birthLocationId: null,    // <-- Agregar
  deathLocationId: null,    // <-- Agregar
  birthLocation: '',        // <-- Agregar
  deathLocation: '',        // <-- Agregar
  biography: '',
  photoUrl: '',
  gender: '',
  hideAge: false,
  isActive: true,
  links: [],
  nationalities: []
};

// Valores por defecto para un nuevo link
export const DEFAULT_PERSON_LINK = {
  type: 'OTHER' as PersonLinkType,
  url: '',
  title: '',
  displayOrder: 0,
  isVerified: false,
  isActive: true,
} as const;

// Configuración de paginación
export const PEOPLE_PAGINATION = {
  DEFAULT_PAGE: 1,
  DEFAULT_LIMIT: 20,
  LIMITS: [10, 20, 50, 100],
} as const;

// Mensajes de error comunes
export const PERSON_ERROR_MESSAGES = {
  FETCH_ERROR: 'Error al cargar las personas',
  CREATE_ERROR: 'Error al crear la persona',
  UPDATE_ERROR: 'Error al actualizar la persona',
  DELETE_ERROR: 'Error al eliminar la persona',
  DELETE_WITH_MOVIES: 'No se puede eliminar esta persona porque está asociada a películas',
  REQUIRED_NAME: 'Debe ingresar al menos el nombre o el apellido',
  INVALID_DATES: 'La fecha de fallecimiento debe ser posterior a la fecha de nacimiento',
  DUPLICATE_SLUG: 'Ya existe una persona con ese nombre',
} as const;

// Mensajes de éxito
export const PERSON_SUCCESS_MESSAGES = {
  CREATED: 'Persona creada exitosamente',
  UPDATED: 'Persona actualizada exitosamente',
  DELETED: 'Persona eliminada exitosamente',
} as const;

// Constante para los meses (igual que en movies)
export const MONTHS = [
  { value: 1, label: 'Enero' },
  { value: 2, label: 'Febrero' },
  { value: 3, label: 'Marzo' },
  { value: 4, label: 'Abril' },
  { value: 5, label: 'Mayo' },
  { value: 6, label: 'Junio' },
  { value: 7, label: 'Julio' },
  { value: 8, label: 'Agosto' },
  { value: 9, label: 'Septiembre' },
  { value: 10, label: 'Octubre' },
  { value: 11, label: 'Noviembre' },
  { value: 12, label: 'Diciembre' }
];

// ==================================================
// src/lib/people/peopleTypes.ts
// ==================================================
// src/lib/people/peopleTypes.ts

import { PartialDate } from '@/lib/shared/dateUtils';

// Tipos base de la base de datos
export interface Person {
  id: number;
  slug: string;
  firstName?: string | null;
  lastName?: string | null;
  realName?: string | null;
  birthDate?: string | null;
  deathDate?: string | null;
  birthYear?: number | null;
  birthMonth?: number | null;
  birthDay?: number | null;
  deathYear?: number | null;
  deathMonth?: number | null;
  deathDay?: number | null;
  birthLocationId?: number | null;
  deathLocationId?: number | null;
  biography?: string | null;
  photoUrl?: string | null;
  gender?: Gender | null;
  hideAge: boolean;
  hasLinks: boolean;
  isActive: boolean;
  createdAt: string;
  updatedAt: string;
}

// Tipo de género
export type Gender = 'MALE' | 'FEMALE' | 'OTHER';

// Tipo para links de persona
export interface PersonLink {
  id?: number;
  personId?: number;
  type: PersonLinkType;
  url: string;
  title?: string | null;
  displayOrder: number;
  isVerified: boolean;
  isActive: boolean;
  lastChecked?: string | null;
  createdAt?: string;
  updatedAt?: string;
}

// Tipos de links disponibles
export type PersonLinkType = 
  | 'IMDB'
  | 'TMDB'
  | 'CINENACIONAL'
  | 'WIKIPEDIA'
  | 'OFFICIAL_WEBSITE'
  | 'PORTFOLIO'
  | 'BLOG'
  | 'INSTAGRAM'
  | 'TWITTER'
  | 'FACEBOOK'
  | 'YOUTUBE'
  | 'TIKTOK'
  | 'LINKEDIN'
  | 'VIMEO'
  | 'LETTERBOXD'
  | 'SPOTIFY'
  | 'PODCAST'
  | 'INTERVIEW'
  | 'ARTICLE'
  | 'OTHER';

// Tipo para ubicación
export interface Location {
  id: number;
  name: string;
  slug?: string | null;
  type: string;
  parentId?: number | null;
  countryId: number;
  latitude?: number | null;
  longitude?: number | null;
  createdAt: string;
  updatedAt: string;
}

// Tipo extendido con relaciones
export interface PersonWithRelations extends Person {
  links?: PersonLink[];
  birthLocation?: Location | null;
  deathLocation?: Location | null;
  _count?: {
    links: number;
    castRoles: number;
    crewRoles: number;
    awards: number;
  };
}

// Tipo para el formulario
export interface PersonFormData {
  firstName: string;
  lastName: string;
  realName?: string;
  // Fechas completas para el input type="date"
  birthDate: string;
  deathDate: string;
  
  // Fechas parciales
  partialBirthDate?: PartialDate;
  partialDeathDate?: PartialDate;
  
  // Flags para indicar si usar fecha parcial
  isPartialBirthDate?: boolean;
  isPartialDeathDate?: boolean;
  birthLocationId?: number | null;  // <-- Agregar este campo
  deathLocationId?: number | null;  // <-- Agregar este campo
  birthLocation?: string;            // <-- Mantener para compatibilidad/display
  deathLocation?: string;            // <-- Mantener para compatibilidad/display
  biography?: string;
  photoUrl?: string;
  gender?: string;
  hideAge?: boolean;
  isActive?: boolean;
  links: PersonLink[];
  nationalities?: number[];
}

// Tipo para filtros de búsqueda
export interface PersonFilters {
  search?: string;
  gender?: Gender | '';
  hasLinks?: boolean | '';
  isActive?: boolean | '';
  page?: number;
  limit?: number;
}

// Tipo para respuesta paginada
export interface PaginatedPeopleResponse {
  data: PersonWithRelations[];
  totalCount: number;
  page: number;
  totalPages: number;
  hasMore: boolean;
}

// ==================================================
// src/lib/people/peopleUtils.ts
// ==================================================
// src/lib/people/peopleUtils.ts

import { Person, PersonWithRelations, PersonFormData, PersonLink, Gender } from './peopleTypes';
import { DEFAULT_PERSON_FORM_VALUES, DEFAULT_PERSON_LINK } from './peopleConstants';
import { PartialDate, partialFieldsToDate } from '@/lib/shared/dateUtils';

/**
 * Genera un slug único para una persona basado en nombre y apellido
 */
export function generatePersonSlug(firstName?: string, lastName?: string): string {
    const parts = [firstName, lastName].filter(Boolean);
    if (parts.length === 0) return '';

    return parts
        .join(' ')
        .toLowerCase()
        .normalize('NFD')
        .replace(/[\u0300-\u036f]/g, '') // Remover diacríticos
        .replace(/[^\w\s-]/g, '') // Remover caracteres especiales
        .trim()
        .replace(/\s+/g, '-') // Reemplazar espacios con guiones
        .replace(/-+/g, '-') // Reemplazar múltiples guiones con uno
        .replace(/^-+|-+$/g, ''); // Remover guiones al inicio y final
}

/**
 * Formatea el nombre completo de una persona
 */
export function formatPersonName(person: Partial<Person>): string {
    const parts = [person.firstName, person.lastName].filter(Boolean);
    return parts.join(' ') || 'Sin nombre';
}

/**
 * Formatea el género para mostrar
 */
export function formatGender(gender?: Gender | null): string {
    if (!gender) return '-';

    const genderMap: Record<Gender, string> = {
        MALE: 'Masculino',
        FEMALE: 'Femenino',
        OTHER: 'Otro',
    };

    return genderMap[gender] || '-';
}

/**
 * Convierte los datos del formulario para enviar a la API
 * NOTA: Esta función ya no se usa, se usa formatPersonDataForAPI en people.service.ts
 */
export function formatPersonFormDataForAPI(data: PersonFormData) {
    return {
        firstName: data.firstName || null,
        lastName: data.lastName || null,
        realName: data.realName || null,
        birthDate: data.birthDate || null,
        deathDate: data.deathDate || null,
        birthLocationId: data.birthLocationId || null,
        deathLocationId: data.deathLocationId || null,
        biography: data.biography || null,
        photoUrl: data.photoUrl || null,
        gender: data.gender || null,
        hideAge: data.hideAge,
        isActive: data.isActive,
        links: data.links.map((link, index) => ({
            ...link,
            displayOrder: index,
            title: link.title || null,
        })),
    };
}

// Función auxiliar para formatear el path de la ubicación
function formatLocationPath(location: any): string {
    // Si la ubicación ya tiene un path, usarlo
    if (location.path) return location.path;

    // Si no, construir el path con la información disponible
    const parts = [location.name];
    if (location.parent) {
        parts.push(location.parent.name);
        if (location.parent.parent) {
            parts.push(location.parent.parent.name);
        }
    }
    return parts.join(', ');
}

/**
 * Convierte los datos de la API al formato del formulario
 * Maneja tanto fechas completas como parciales
 */
export function formatPersonDataForForm(person?: PersonWithRelations | null): PersonFormData {
    if (!person) return DEFAULT_PERSON_FORM_VALUES;

    const formData: PersonFormData = {
        firstName: person.firstName || '',
        lastName: person.lastName || '',
        realName: person.realName || '',
        birthDate: '',
        deathDate: '',
        birthLocationId: person.birthLocationId || null,
        deathLocationId: person.deathLocationId || null,
        birthLocation: person.birthLocation ? formatLocationPath(person.birthLocation) : '',
        deathLocation: person.deathLocation ? formatLocationPath(person.deathLocation) : '',
        biography: person.biography || '',
        photoUrl: person.photoUrl || '',
        gender: person.gender || '',
        hideAge: person.hideAge || false,
        isActive: person.isActive ?? true,
        links: person.links || [], // Cargar los links directamente si vienen
    };

    // Procesar fecha de nacimiento
    if ('birthYear' in person && person.birthYear) {
        const birthPartial: PartialDate = {
            year: person.birthYear,
            month: person.birthMonth ?? null,  // Usar ?? para convertir undefined a null
            day: person.birthDay ?? null       // Usar ?? para convertir undefined a null
        };

        // Si la fecha está completa (año, mes y día), convertirla a formato ISO
        if (person.birthYear && person.birthMonth && person.birthDay) {
            const isoDate = partialFieldsToDate(birthPartial);
            if (isoDate) {
                formData.birthDate = isoDate;
                formData.isPartialBirthDate = false;
            }
        } else {
            // Es una fecha parcial
            formData.partialBirthDate = birthPartial;
            formData.isPartialBirthDate = true;
            formData.birthDate = '';
        }
    } else if (person.birthDate) {
        // Fallback para formato antiguo con birthDate como string
        formData.birthDate = person.birthDate.split('T')[0];
        formData.isPartialBirthDate = false;
    }

    // Procesar fecha de fallecimiento
    if ('deathYear' in person && person.deathYear) {
        const deathPartial: PartialDate = {
            year: person.deathYear,
            month: person.deathMonth ?? null,  // Usar ?? para convertir undefined a null
            day: person.deathDay ?? null       // Usar ?? para convertir undefined a null
        };

        // Si la fecha está completa (año, mes y día), convertirla a formato ISO
        if (person.deathYear && person.deathMonth && person.deathDay) {
            const isoDate = partialFieldsToDate(deathPartial);
            if (isoDate) {
                formData.deathDate = isoDate;
                formData.isPartialDeathDate = false;
            }
        } else {
            // Es una fecha parcial
            formData.partialDeathDate = deathPartial;
            formData.isPartialDeathDate = true;
            formData.deathDate = '';
        }
    } else if (person.deathDate) {
        // Fallback para formato antiguo con deathDate como string
        formData.deathDate = person.deathDate.split('T')[0];
        formData.isPartialDeathDate = false;
    }

    return formData;
}

/**
 * Valida los datos del formulario de persona
 */
export function validatePersonForm(data: PersonFormData): string[] {
    const errors: string[] = [];

    // Validar que tenga al menos nombre o apellido
    if (!data.firstName && !data.lastName) {
        errors.push('Debe ingresar al menos el nombre o el apellido');
    }

    // Validar fechas si ambas son completas
    if (data.birthDate && data.deathDate) {
        const birthDate = new Date(data.birthDate);
        const deathDate = new Date(data.deathDate);

        if (deathDate < birthDate) {
            errors.push('La fecha de fallecimiento debe ser posterior a la fecha de nacimiento');
        }
    }

    // Validar fechas parciales
    if (data.isPartialBirthDate && data.partialBirthDate &&
        data.isPartialDeathDate && data.partialDeathDate) {
        const birthYear = data.partialBirthDate.year;
        const deathYear = data.partialDeathDate.year;

        if (birthYear && deathYear && deathYear < birthYear) {
            errors.push('El año de fallecimiento debe ser posterior al año de nacimiento');
        }
    }

    // Validar links
    data.links.forEach((link, index) => {
        if (!link.url) {
            errors.push(`El link #${index + 1} debe tener una URL`);
        } else if (!isValidUrl(link.url)) {
            errors.push(`La URL del link #${index + 1} no es válida`);
        }
    });

    return errors;
}

/**
 * Valida si una cadena es una URL válida
 */
export function isValidUrl(url: string): boolean {
    try {
        new URL(url);
        return true;
    } catch {
        return false;
    }
}

/**
 * Ordena los links por displayOrder
 */
export function sortPersonLinks(links: PersonLink[]): PersonLink[] {
    return [...links].sort((a, b) => a.displayOrder - b.displayOrder);
}

/**
 * Agrega un nuevo link con valores por defecto
 */
export function addNewPersonLink(currentLinks: PersonLink[]): PersonLink[] {
    return [
        ...currentLinks,
        {
            ...DEFAULT_PERSON_LINK,
            displayOrder: currentLinks.length,
        },
    ];
}

/**
 * Actualiza un link específico
 */
export function updatePersonLink(
    links: PersonLink[],
    index: number,
    updates: Partial<PersonLink>
): PersonLink[] {
    const newLinks = [...links];
    newLinks[index] = { ...newLinks[index], ...updates };
    return newLinks;
}

/**
 * Elimina un link y reordena los displayOrder
 */
export function removePersonLink(links: PersonLink[], index: number): PersonLink[] {
    return links
        .filter((_, i) => i !== index)
        .map((link, i) => ({ ...link, displayOrder: i }));
}

/**
 * Genera el texto para mostrar la edad o fecha de nacimiento
 * Actualizada para manejar fechas parciales
 */
export function formatBirthInfo(person: any): string {
    // Si hay campos de fecha parcial
    if ('birthYear' in person && person.birthYear) {
        if (person.hideAge) return 'Fecha oculta';

        let dateStr = '';
        if (person.birthDay && person.birthMonth) {
            // Fecha completa
            const date = new Date(person.birthYear, person.birthMonth - 1, person.birthDay);
            dateStr = date.toLocaleDateString('es-AR', {
                day: '2-digit',
                month: '2-digit',
                year: 'numeric',
            });

            // Calcular edad si no hay fecha de muerte
            if (!person.deathYear) {
                const age = calculateAge(date);
                return `${dateStr} (${age} años)`;
            }
        } else if (person.birthMonth) {
            // Solo año y mes
            const months = ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio',
                'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'];
            dateStr = `${months[person.birthMonth - 1]} ${person.birthYear}`;
        } else {
            // Solo año
            dateStr = String(person.birthYear);
        }

        return dateStr;
    }

    // Fallback al formato antiguo
    if (!person.birthDate) return '-';
    if (person.hideAge) return 'Fecha oculta';

    const birthDate = new Date(person.birthDate);
    const formattedDate = birthDate.toLocaleDateString('es-AR', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric',
    });

    if (!person.deathDate) {
        const age = calculateAge(birthDate);
        return `${formattedDate} (${age} años)`;
    }

    return formattedDate;
}

/**
 * Calcula la edad a partir de una fecha de nacimiento
 */
export function calculateAge(birthDate: Date, deathDate?: Date): number {
    const endDate = deathDate || new Date();
    let age = endDate.getFullYear() - birthDate.getFullYear();
    const monthDiff = endDate.getMonth() - birthDate.getMonth();

    if (monthDiff < 0 || (monthDiff === 0 && endDate.getDate() < birthDate.getDate())) {
        age--;
    }

    return age;
}

/**
 * Genera un resumen de la persona para mostrar en listas
 * Actualizada para manejar fechas parciales
 */
export function getPersonSummary(person: any): string {
    const parts = [];

    // Manejar fecha de nacimiento
    if ('birthYear' in person && person.birthYear && !person.hideAge) {
        parts.push(`n. ${person.birthYear}`);
    } else if (person.birthDate && !person.hideAge) {
        const year = new Date(person.birthDate).getFullYear();
        parts.push(`n. ${year}`);
    }

    // Manejar fecha de fallecimiento
    if ('deathYear' in person && person.deathYear) {
        parts.push(`f. ${person.deathYear}`);
    } else if (person.deathDate) {
        const year = new Date(person.deathDate).getFullYear();
        parts.push(`f. ${year}`);
    }

    return parts.join(' - ');
}

// ==================================================
// src/lib/prisma.ts
// ==================================================
import { PrismaClient } from '@prisma/client'

const globalForPrisma = global as unknown as { prisma: PrismaClient }

export const prisma =
  globalForPrisma.prisma ||
  new PrismaClient({
    log: process.env.NODE_ENV === 'development' ? ['query', 'error', 'warn'] : ['error'],
  })

if (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma

// ==================================================
// src/lib/schemas.ts
// ==================================================
// src/lib/schemas.ts
import { z } from 'zod'

export const movieSchema = z.object({
  // Información básica
  title: z.string().min(1, 'El título es requerido'),
  originalTitle: z.string().optional(),
  year: z.number().optional(),

  // Fechas como campos separados Y fechas completas para el formulario
  releaseDate: z.string().optional(),
  releaseYear: z.number().nullable().optional(),
  releaseMonth: z.number().nullable().optional(),
  releaseDay: z.number().nullable().optional(),

  filmingStartDate: z.string().optional(),
  filmingStartYear: z.number().nullable().optional(),
  filmingStartMonth: z.number().nullable().optional(),
  filmingStartDay: z.number().nullable().optional(),

  filmingEndDate: z.string().optional(),
  filmingEndYear: z.number().nullable().optional(),
  filmingEndMonth: z.number().nullable().optional(),
  filmingEndDay: z.number().nullable().optional(),

  // Duración
  duration: z.number().optional(),
  durationSeconds: z.number().optional(),
  tipoDuracion: z.string().optional(),

  // Contenido
  synopsis: z.string().optional(),
  notes: z.string().optional(),
  tagline: z.string().optional(),

  // Media
  posterUrl: z.string().optional(),
  posterPublicId: z.string().optional(),
  backdropUrl: z.string().optional(),
  backdropPublicId: z.string().optional(),
  trailerUrl: z.string().optional(),

  // IDs externos
  imdbId: z.string().optional(),

  // Información técnica
  aspectRatio: z.string().optional(),
  colorTypeId: z.number().optional(),
  soundType: z.string().optional(),
  filmFormat: z.string().optional(),

  // Clasificación
  ratingId: z.union([
    z.number().positive(),  // Solo números positivos
    z.null(),               // O null
    z.literal(0).transform(() => null)  // Transforma 0 a null
  ]).optional(),
  certificateNumber: z.string().optional(),

  // Estado
  stage: z.enum([
    'COMPLETA',
    'EN_DESARROLLO',
    'EN_POSTPRODUCCION',
    'EN_PREPRODUCCION',
    'EN_RODAJE',
    'INCONCLUSA',
    'INEDITA'
  ]).optional(),
  dataCompleteness: z.enum([
    'BASIC_PRESS_KIT',
    'FULL_PRESS_KIT',
    'MAIN_CAST',
    'MAIN_CREW',
    'FULL_CAST',
    'FULL_CREW'
  ]).optional(),

  // País y coproducción
  countries: z.array(z.number()).optional(),
  is_coproduction: z.boolean().optional(),
  production_type: z.string().optional(),

  // Relaciones (arrays de IDs)
  genres: z.array(z.number()).optional(),
  cast: z.array(z.any()).optional(),
  crew: z.array(z.any()).optional(),
  productionCompanies: z.array(z.number()).optional(),
  distributionCompanies: z.array(z.number()).optional(),
  themes: z.array(z.number()).optional(),
  alternativeTitles: z.array(z.any()).optional(),
  links: z.array(z.any()).optional(),
  screeningVenues: z.array(z.object({
  venueId: z.number(),
  screeningDate: z.string().optional().nullable(),
  isPremiere: z.boolean().optional(),
  isExclusive: z.boolean().optional()
})).optional()
})

export type MovieFormData = z.infer<typeof movieSchema>

// ==================================================
// src/lib/shared/dateUtils.ts
// ==================================================
// src/lib/shared/dateUtils.ts

/**
 * Tipo compartido para fechas parciales
 */
export interface PartialDate {
  year: number | null;
  month: number | null;
  day: number | null;
}

/**
 * Meses en español para los selectores
 */
export const MONTHS = [
  { value: 1, label: 'Enero' },
  { value: 2, label: 'Febrero' },
  { value: 3, label: 'Marzo' },
  { value: 4, label: 'Abril' },
  { value: 5, label: 'Mayo' },
  { value: 6, label: 'Junio' },
  { value: 7, label: 'Julio' },
  { value: 8, label: 'Agosto' },
  { value: 9, label: 'Septiembre' },
  { value: 10, label: 'Octubre' },
  { value: 11, label: 'Noviembre' },
  { value: 12, label: 'Diciembre' }
];

/**
 * Convierte una fecha completa (string ISO) a campos parciales
 * IMPORTANTE: Maneja correctamente las zonas horarias para evitar el problema del día anterior
 */
export function dateToPartialFields(dateString: string | null | undefined): PartialDate {
  if (!dateString) {
    return { year: null, month: null, day: null };
  }
  
  // Si el string viene en formato ISO (YYYY-MM-DD), parsearlo directamente
  // sin crear un objeto Date para evitar problemas de timezone
  if (dateString.match(/^\d{4}-\d{2}-\d{2}/)) {
    const [yearStr, monthStr, dayStr] = dateString.split('-');
    return {
      year: parseInt(yearStr, 10),
      month: parseInt(monthStr, 10),
      day: parseInt(dayStr, 10)
    };
  }
  
  // Si viene con tiempo (formato ISO completo con T), usar Date pero ajustar
  const date = new Date(dateString);
  
  // Si la fecha incluye 'T', ya está en formato ISO completo
  if (dateString.includes('T')) {
    return {
      year: date.getFullYear(),
      month: date.getMonth() + 1,
      day: date.getDate()
    };
  }
  
  // Para otros formatos, intentar parsear con Date
  // pero usar getUTC* para evitar ajustes de timezone
  return {
    year: date.getFullYear(),
    month: date.getMonth() + 1,
    day: date.getDate()
  };
}

/**
 * Convierte campos parciales a una fecha completa si es posible
 * Retorna en formato YYYY-MM-DD sin información de hora para evitar problemas de timezone
 */
export function partialFieldsToDate(partial: PartialDate): string | null {
  if (!partial.year || !partial.month || !partial.day) {
    return null;
  }
  
  // Formato ISO: YYYY-MM-DD
  const year = partial.year.toString().padStart(4, '0');
  const month = partial.month.toString().padStart(2, '0');
  const day = partial.day.toString().padStart(2, '0');
  
  return `${year}-${month}-${day}`;
}

/**
 * Formatea una fecha parcial para mostrar
 * @param partial - La fecha parcial
 * @param options - Opciones de formato
 */
export function formatPartialDate(
  partial: PartialDate,
  options: {
    monthFormat?: 'short' | 'long';
    includeDay?: boolean;
    fallback?: string;
  } = {}
): string {
  const {
    monthFormat = 'long',
    includeDay = true,
    fallback = 'Fecha desconocida'
  } = options;

  if (!partial.year) {
    return fallback;
  }
  
  const monthNames = {
    short: [
      'Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun',
      'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic'
    ],
    long: [
      'enero', 'febrero', 'marzo', 'abril', 'mayo', 'junio',
      'julio', 'agosto', 'septiembre', 'octubre', 'noviembre', 'diciembre'
    ]
  };
  
  // Solo año
  if (!partial.month) {
    return partial.year.toString();
  }
  
  const monthName = monthNames[monthFormat][partial.month - 1];
  
  // Año y mes
  if (!partial.day || !includeDay) {
    return monthFormat === 'long' 
      ? `${monthName.charAt(0).toUpperCase() + monthName.slice(1)} de ${partial.year}`
      : `${monthName} ${partial.year}`;
  }
  
  // Fecha completa
  return monthFormat === 'long'
    ? `${partial.day} de ${monthName} de ${partial.year}`
    : `${partial.day} ${monthName} ${partial.year}`;
}

/**
 * Calcula la edad o años transcurridos entre dos fechas parciales
 * @param startDate - Fecha de inicio (nacimiento, estreno, etc.)
 * @param endDate - Fecha de fin (muerte, fecha actual, etc.). Si no se proporciona, usa la fecha actual
 */
export function calculateYearsBetween(
  startDate: PartialDate,
  endDate?: PartialDate
): number | null {
  if (!startDate.year) {
    return null;
  }
  
  const currentDate = new Date();
  const referenceYear = endDate?.year || currentDate.getFullYear();
  const referenceMonth = endDate?.month || (currentDate.getMonth() + 1);
  const referenceDay = endDate?.day || currentDate.getDate();
  
  let years = referenceYear - startDate.year;
  
  // Ajustar si no ha llegado el aniversario
  if (startDate.month && referenceMonth) {
    if (referenceMonth < startDate.month) {
      years--;
    } else if (referenceMonth === startDate.month && startDate.day && referenceDay) {
      if (referenceDay < startDate.day) {
        years--;
      }
    }
  }
  
  return years;
}

/**
 * Valida que una fecha parcial sea válida
 * @param partial - La fecha parcial a validar
 * @param options - Opciones de validación
 */
export function validatePartialDate(
  partial: PartialDate,
  options: {
    minYear?: number;
    maxYear?: number;
    allowFuture?: boolean;
    fieldName?: string;
  } = {}
): string | null {
  const {
    minYear = 1800,
    maxYear = new Date().getFullYear() + 1,
    allowFuture = false,
    fieldName = 'fecha'
  } = options;
  
  // Si no hay año, es válido (fecha vacía)
  if (!partial.year) {
    if (partial.month || partial.day) {
      return `Si ingresa mes o día, debe ingresar también el año`;
    }
    return null;
  }
  
  // Validar año
  const currentYear = new Date().getFullYear();
  const effectiveMaxYear = allowFuture ? maxYear : Math.min(maxYear, currentYear);
  
  if (partial.year < minYear || partial.year > effectiveMaxYear) {
    return `El año de ${fieldName} debe estar entre ${minYear} y ${effectiveMaxYear}`;
  }
  
  // Si hay mes, validarlo
  if (partial.month) {
    if (partial.month < 1 || partial.month > 12) {
      return `El mes debe estar entre 1 y 12`;
    }
    
    // Si hay día, validarlo según el mes
    if (partial.day) {
      const daysInMonth = new Date(partial.year, partial.month, 0).getDate();
      if (partial.day < 1 || partial.day > daysInMonth) {
        return `El día debe estar entre 1 y ${daysInMonth} para el mes seleccionado`;
      }
    }
  } else if (partial.day) {
    return `Si ingresa día, debe ingresar también el mes`;
  }
  
  return null;
}

/**
 * Compara dos fechas parciales
 * @returns -1 si date1 < date2, 0 si son iguales, 1 si date1 > date2, null si no se pueden comparar
 */
export function comparePartialDates(date1: PartialDate, date2: PartialDate): number | null {
  // Si alguna no tiene año, no se pueden comparar
  if (!date1.year || !date2.year) {
    return null;
  }
  
  // Comparar años
  if (date1.year !== date2.year) {
    return date1.year < date2.year ? -1 : 1;
  }
  
  // Si ambas tienen mes, comparar
  if (date1.month && date2.month) {
    if (date1.month !== date2.month) {
      return date1.month < date2.month ? -1 : 1;
    }
    
    // Si ambas tienen día, comparar
    if (date1.day && date2.day) {
      if (date1.day !== date2.day) {
        return date1.day < date2.day ? -1 : 1;
      }
      return 0; // Son iguales
    }
  }
  
  // Si una tiene más precisión que la otra, considerarlas iguales en el nivel comparable
  return 0;
}

/**
 * Valida un rango de fechas parciales
 */
export function validateDateRange(
  startDate: PartialDate,
  endDate: PartialDate,
  startFieldName: string = 'inicio',
  endFieldName: string = 'fin'
): string | null {
  // Primero validar cada fecha individualmente
  const startError = validatePartialDate(startDate, { fieldName: startFieldName });
  if (startError) return startError;
  
  const endError = validatePartialDate(endDate, { fieldName: endFieldName });
  if (endError) return endError;
  
  // Si ambas tienen año, verificar que el rango sea válido
  if (startDate.year && endDate.year) {
    const comparison = comparePartialDates(startDate, endDate);
    if (comparison === 1) {
      return `La fecha de ${startFieldName} no puede ser posterior a la fecha de ${endFieldName}`;
    }
  }
  
  return null;
}

/**
 * Crea una fecha parcial desde valores de formulario
 */
export function createPartialDate(
  year: string | number | null | undefined,
  month: string | number | null | undefined,
  day: string | number | null | undefined
): PartialDate {
  return {
    year: year ? (typeof year === 'string' ? parseInt(year) : year) : null,
    month: month ? (typeof month === 'string' ? parseInt(month) : month) : null,
    day: day ? (typeof day === 'string' ? parseInt(day) : day) : null
  };
}

/**
 * Verifica si una fecha parcial está completa
 */
export function isCompleteDate(partial: PartialDate): boolean {
  return !!(partial.year && partial.month && partial.day);
}

/**
 * Verifica si una fecha parcial está vacía
 */
export function isEmptyDate(partial: PartialDate): boolean {
  return !partial.year && !partial.month && !partial.day;
}

// ==================================================
// src/lib/utils/slugs.ts
// ==================================================
// src/lib/utils/schemas.ts

import { PrismaClient } from '@prisma/client'

/**
 * Genera un slug a partir de un texto
 */
export function generateSlug(text: string): string {
  return text
    .toLowerCase()
    .normalize('NFD')
    .replace(/[\u0300-\u036f]/g, '') // Elimina acentos
    .replace(/[^a-z0-9]+/g, '-') // Reemplaza caracteres especiales por guiones
    .replace(/^-+|-+$/g, '') // Elimina guiones al inicio y final
    .replace(/-+/g, '-') // Reemplaza múltiples guiones por uno solo
}

/**
 * Genera un slug único verificando contra la base de datos
 */
export async function generateUniqueSlug(
  text: string,
  model: 'location' | 'movie' | 'person' | 'genre' | 'productionCompany' | 'distributionCompany',
  prisma: PrismaClient,
  excludeId?: number
): Promise<string> {
  const baseSlug = generateSlug(text)
  let slug = baseSlug
  let counter = 1

  while (true) {
    let exists = false

    switch (model) {
      case 'location':
        const locationQuery: any = { slug }
        if (excludeId) locationQuery.NOT = { id: excludeId }
        exists = await prisma.location.findFirst({ where: locationQuery }) !== null
        break
      case 'movie':
        const movieQuery: any = { slug }
        if (excludeId) movieQuery.NOT = { id: excludeId }
        exists = await prisma.movie.findFirst({ where: movieQuery }) !== null
        break
      case 'person':
        const personQuery: any = { slug }
        if (excludeId) personQuery.NOT = { id: excludeId }
        exists = await prisma.person.findFirst({ where: personQuery }) !== null
        break
      case 'genre':
        const genreQuery: any = { slug }
        if (excludeId) genreQuery.NOT = { id: excludeId }
        exists = await prisma.genre.findFirst({ where: genreQuery }) !== null
        break
      case 'productionCompany':
        const prodQuery: any = { slug }
        if (excludeId) prodQuery.NOT = { id: excludeId }
        exists = await prisma.productionCompany.findFirst({ where: prodQuery }) !== null
        break
      case 'distributionCompany':
        const distQuery: any = { slug }
        if (excludeId) distQuery.NOT = { id: excludeId }
        exists = await prisma.distributionCompany.findFirst({ where: distQuery }) !== null
        break
    }

    if (!exists) {
      return slug
    }

    // Si existe, agregar un número al final
    slug = `${baseSlug}-${counter}`
    counter++
  }
}

// ==================================================
// src/lib/utils.ts
// ==================================================
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

export function createSlug(text: string): string {
  return text
    .toLowerCase()
    .normalize('NFD')
    .replace(/[\u0300-\u036f]/g, '') // Eliminar acentos
    .replace(/[^a-z0-9]+/g, '-') // Reemplazar caracteres especiales con guiones
    .replace(/^-+|-+$/g, '') // Eliminar guiones al inicio y final
    .replace(/-+/g, '-') // Reemplazar múltiples guiones con uno solo
}

export function formatDate(date: Date | string | null): string {
  if (!date) return ''
  const d = new Date(date)
  return d.toLocaleDateString('es-AR', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  })
}

export function formatDuration(minutes: number | null): string {
  if (!minutes) return ''
  const hours = Math.floor(minutes / 60)
  const mins = minutes % 60
  return `${hours}h ${mins}min`
}

// ==================================================
// src/services/api-client.ts
// ==================================================
// src/services/api-client.ts

interface RequestOptions extends RequestInit {
  params?: Record<string, string>
}

class ApiClient {
  private baseUrl: string

  constructor(baseUrl: string = '') {
    this.baseUrl = baseUrl
  }

  private async handleResponse<T>(response: Response): Promise<T> {
    if (!response.ok) {
      let errorMessage = `Error: ${response.status} ${response.statusText}`
      
      try {
        const errorData = await response.json()
        errorMessage = errorData.error || errorData.message || errorMessage
      } catch {
        // Si no se puede parsear el error, usar el mensaje por defecto
      }
      
      throw new Error(errorMessage)
    }

    // Si la respuesta es 204 No Content, retornar null
    if (response.status === 204) {
      return null as T
    }

    return response.json()
  }

  private buildUrl(endpoint: string, params?: Record<string, string>): string {
    const url = new URL(`${this.baseUrl}${endpoint}`, window.location.origin)
    
    if (params) {
      Object.entries(params).forEach(([key, value]) => {
        if (value !== '' && value !== undefined && value !== null) {
          url.searchParams.append(key, value)
        }
      })
    }
    
    return url.toString()
  }

  async get<T>(endpoint: string, options?: RequestOptions): Promise<T> {
    const { params, ...fetchOptions } = options || {}
    const url = this.buildUrl(endpoint, params)
    
    const response = await fetch(url, {
      ...fetchOptions,
      method: 'GET'
    })
    
    return this.handleResponse<T>(response)
  }

  async post<T>(endpoint: string, data?: any, options?: RequestOptions): Promise<T> {
    const { params, ...fetchOptions } = options || {}
    const url = this.buildUrl(endpoint, params)
    
    const response = await fetch(url, {
      ...fetchOptions,
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        ...fetchOptions.headers
      },
      body: data ? JSON.stringify(data) : undefined
    })
    
    return this.handleResponse<T>(response)
  }

  async put<T>(endpoint: string, data?: any, options?: RequestOptions): Promise<T> {
    const { params, ...fetchOptions } = options || {}
    const url = this.buildUrl(endpoint, params)
    
    const response = await fetch(url, {
      ...fetchOptions,
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
        ...fetchOptions.headers
      },
      body: data ? JSON.stringify(data) : undefined
    })
    
    return this.handleResponse<T>(response)
  }

  async patch<T>(endpoint: string, data?: any, options?: RequestOptions): Promise<T> {
    const { params, ...fetchOptions } = options || {}
    const url = this.buildUrl(endpoint, params)
    
    const response = await fetch(url, {
      ...fetchOptions,
      method: 'PATCH',
      headers: {
        'Content-Type': 'application/json',
        ...fetchOptions.headers
      },
      body: data ? JSON.stringify(data) : undefined
    })
    
    return this.handleResponse<T>(response)
  }

  async delete<T = void>(endpoint: string, options?: RequestOptions): Promise<T> {
    const { params, ...fetchOptions } = options || {}
    const url = this.buildUrl(endpoint, params)
    
    const response = await fetch(url, {
      ...fetchOptions,
      method: 'DELETE'
    })
    
    return this.handleResponse<T>(response)
  }
}

// Instancia por defecto para usar en toda la aplicación
export const apiClient = new ApiClient('/api')

// Exportar la clase por si se necesita crear instancias personalizadas
export default ApiClient

// ==================================================
// src/services/index.ts
// ==================================================
// src/services/index.ts

export { apiClient } from './api-client'
export { moviesService } from './movies.service'
export { metadataService } from './metadata.service'
export { peopleService } from './people.service'

// Re-exportar tipos útiles
export type { default as ApiClient } from './api-client'

// ==================================================
// src/services/metadata.service.ts
// ==================================================
// src/services/metadata.service.ts

interface Rating {
  id: number
  name: string
  abbreviation?: string
  description?: string
}

interface ColorType {
  id: number
  name: string
}

interface Genre {
  id: number
  name: string
  slug: string
}

interface Country {
  id: number
  name: string
  code: string
}

interface Company {
  id: number
  name: string
  type: 'PRODUCTION' | 'DISTRIBUTION'
}

interface Theme {
  id: number
  name: string
  slug: string
}

export const metadataService = {
  /**
   * Obtiene las calificaciones disponibles
   */
  async getRatings(): Promise<Rating[]> {
    try {
      const response = await fetch('/api/calificaciones')
      if (!response.ok) throw new Error('Error loading ratings')
      return response.json()
    } catch (error) {
      console.error('Error loading ratings:', error)
      return []
    }
  },

  /**
   * Obtiene los tipos de color disponibles
   */
  async getColorTypes(): Promise<ColorType[]> {
    try {
      const response = await fetch('/api/color-types')
      if (!response.ok) throw new Error('Error loading color types')
      return response.json()
    } catch (error) {
      console.error('Error loading color types:', error)
      return []
    }
  },

  /**
   * Obtiene todos los géneros
   */
  async getGenres(): Promise<Genre[]> {
    try {
      const response = await fetch('/api/genres')
      if (!response.ok) throw new Error('Error loading genres')
      return response.json()
    } catch (error) {
      console.error('Error loading genres:', error)
      return []
    }
  },

  /**
   * Obtiene todos los países
   */
  async getCountries(): Promise<Country[]> {
    try {
      const response = await fetch('/api/countries')
      if (!response.ok) throw new Error('Error loading countries')
      return response.json()
    } catch (error) {
      console.error('Error loading countries:', error)
      return []
    }
  },

   /**
   * Obtiene las productoras
   */
  async getProductionCompanies(): Promise<Company[]> {
    try {
      const response = await fetch('/api/companies/production')
      if (!response.ok) throw new Error('Error loading production companies')
      return response.json()
    } catch (error) {
      console.error('Error loading production companies:', error)
      return []
    }
  },

  /**
   * Obtiene las distribuidoras
   */
  async getDistributionCompanies(): Promise<Company[]> {
    try {
      const response = await fetch('/api/companies/distribution')
      if (!response.ok) throw new Error('Error loading distribution companies')
      return response.json()
    } catch (error) {
      console.error('Error loading distribution companies:', error)
      return []
    }
  },

  /**
   * Obtiene los temas/keywords
   */
  async getThemes(): Promise<Theme[]> {
    try {
      const response = await fetch('/api/themes')
      if (!response.ok) throw new Error('Error loading themes')
      return response.json()
    } catch (error) {
      console.error('Error loading themes:', error)
      return []
    }
  },

  /**
   * Carga todos los metadatos necesarios para el formulario
   */
  async loadAllFormMetadata() {
    try {
      const [
        genres,
        countries,
        prodCompanies,
        distCompanies,
        themes,
        ratings,
        colorTypes
      ] = await Promise.all([
        this.getGenres(),
        this.getCountries(),
        this.getProductionCompanies(),
        this.getDistributionCompanies(),
        this.getThemes(),
        this.getRatings(),
        this.getColorTypes()
      ])

      return {
        genres: Array.isArray(genres) ? genres : [],
        countries: Array.isArray(countries) ? countries : [],
        productionCompanies: Array.isArray(prodCompanies) ? prodCompanies : [],
        distributionCompanies: Array.isArray(distCompanies) ? distCompanies : [],
        themes: Array.isArray(themes) ? themes : [],
        ratings: Array.isArray(ratings) ? ratings : [],
        colorTypes: Array.isArray(colorTypes) ? colorTypes : []
      }
    } catch (error) {
      console.error('Error loading form metadata:', error)
      // Retornar objetos vacíos en caso de error
      return {
        genres: [],
        countries: [],
        productionCompanies: [],
        distributionCompanies: [],
        themes: [],
        ratings: [],
        colorTypes: []
      }
    }
  }
}

// ==================================================
// src/services/movies.service.ts
// ==================================================
// src/services/movies.service.ts
import { MovieFilters } from '@/components/admin/movies/MoviesFilters'
import { MovieFormData } from '@/lib/movies/movieTypes'
import { dateToPartialFields, partialFieldsToDate, PartialDate } from '@/lib/shared/dateUtils'

interface MoviesResponse {
  movies: any[]
  pagination: {
    totalPages: number
    currentPage: number
    totalItems: number
  }
}

/**
 * Formatea los datos del formulario de película para enviar a la API
 * Convierte las fechas completas o parciales al formato esperado por el backend
 */
function formatMovieDataForAPI(data: MovieFormData): any {
  const apiData: any = {
    title: data.title,
    year: data.year,
    duration: data.duration,
    durationSeconds: data.durationSeconds,
    tipoDuracion: data.tipoDuracion,
    synopsis: data.synopsis,
    notes: data.notes,
    tagline: data.tagline,
    posterUrl: data.posterUrl,
    trailerUrl: data.trailerUrl,
    imdbId: data.imdbId,
    stage: data.stage,
    colorTypeId: data.colorTypeId,
    soundType: data.soundType,
    ratingId: data.ratingId,
    countries: data.countries,
    is_coproduction: data.is_coproduction,
    production_type: data.production_type,
    dataCompleteness: data.dataCompleteness,
    metaDescription: data.metaDescription,
    metaKeywords: data.metaKeywords,
    genres: data.genres,
    cast: data.cast,
    crew: data.crew,
    productionCompanies: data.productionCompanies,
    distributionCompanies: data.distributionCompanies,
    themes: data.themes,
    movieCountries: data.movieCountries,
    links: data.links,
    screeningVenues: data.screeningVenues
  }

  // Procesar fecha de estreno
  if (data.isPartialReleaseDate && data.partialReleaseDate) {
    // Fecha parcial de estreno
    apiData.releaseYear = data.partialReleaseDate.year
    apiData.releaseMonth = data.partialReleaseDate.month
    apiData.releaseDay = data.partialReleaseDate.day
  } else if (data.releaseDate) {
    // Fecha completa de estreno - convertir a campos parciales
    const partial = dateToPartialFields(data.releaseDate)
    apiData.releaseYear = partial.year
    apiData.releaseMonth = partial.month
    apiData.releaseDay = partial.day
  } else {
    // Sin fecha de estreno
    apiData.releaseYear = null
    apiData.releaseMonth = null
    apiData.releaseDay = null
  }

  // Procesar fecha de inicio de rodaje
  if (data.isPartialFilmingStartDate && data.partialFilmingStartDate) {
    // Fecha parcial de inicio de rodaje
    apiData.filmingStartYear = data.partialFilmingStartDate.year
    apiData.filmingStartMonth = data.partialFilmingStartDate.month
    apiData.filmingStartDay = data.partialFilmingStartDate.day
  } else if (data.filmingStartDate) {
    // Fecha completa de inicio de rodaje - convertir a campos parciales
    const partial = dateToPartialFields(data.filmingStartDate)
    apiData.filmingStartYear = partial.year
    apiData.filmingStartMonth = partial.month
    apiData.filmingStartDay = partial.day
  } else {
    // Sin fecha de inicio de rodaje
    apiData.filmingStartYear = null
    apiData.filmingStartMonth = null
    apiData.filmingStartDay = null
  }

  // Procesar fecha de fin de rodaje
  if (data.isPartialFilmingEndDate && data.partialFilmingEndDate) {
    // Fecha parcial de fin de rodaje
    apiData.filmingEndYear = data.partialFilmingEndDate.year
    apiData.filmingEndMonth = data.partialFilmingEndDate.month
    apiData.filmingEndDay = data.partialFilmingEndDate.day
  } else if (data.filmingEndDate) {
    // Fecha completa de fin de rodaje - convertir a campos parciales
    const partial = dateToPartialFields(data.filmingEndDate)
    apiData.filmingEndYear = partial.year
    apiData.filmingEndMonth = partial.month
    apiData.filmingEndDay = partial.day
  } else {
    // Sin fecha de fin de rodaje
    apiData.filmingEndYear = null
    apiData.filmingEndMonth = null
    apiData.filmingEndDay = null
  }

  return apiData
}

/**
 * Convierte los datos de la API al formato del formulario
 */
function formatMovieFromAPI(movie: any): MovieFormData {
  const formData: MovieFormData = {
    title: movie.title || '',
    year: movie.year || null,
    releaseDate: '',
    duration: movie.duration || null,
    durationSeconds: movie.durationSeconds || null,
    tipoDuracion: movie.tipoDuracion || '',
    synopsis: movie.synopsis || '',
    notes: movie.notes || '',
    tagline: movie.tagline || '',
    posterUrl: movie.posterUrl || '',
    trailerUrl: movie.trailerUrl || '',
    imdbId: movie.imdbId || '',
    stage: movie.stage || 'COMPLETA',
    filmingStartDate: '',
    filmingEndDate: '',
    colorTypeId: movie.colorTypeId || null,
    soundType: movie.soundType || '',
    ratingId: movie.ratingId || null,
    countries: movie.countries || ['Argentina'],
    is_coproduction: movie.is_coproduction || false,
    production_type: movie.production_type || 'national',
    dataCompleteness: movie.dataCompleteness || 'BASIC_PRESS_KIT',
    metaDescription: movie.metaDescription || '',
    metaKeywords: movie.metaKeywords || [],
    genres: movie.genres || [],
    cast: movie.cast || [],
    crew: movie.crew || [],
    productionCompanies: movie.productionCompanies || [],
    distributionCompanies: movie.distributionCompanies || [],
    themes: movie.themes || [],
    movieCountries: movie.movieCountries || [],
    links: movie.links || [],
    screeningVenues: movie.screeningVenues || []
  }

  // Procesar fecha de estreno
  if (movie.releaseYear) {
    const releasePartial: PartialDate = {
      year: movie.releaseYear,
      month: movie.releaseMonth,
      day: movie.releaseDay
    }

    // Si la fecha está completa, convertirla a formato ISO
    if (movie.releaseYear && movie.releaseMonth && movie.releaseDay) {
      formData.releaseDate = partialFieldsToDate(releasePartial) || ''
      formData.isPartialReleaseDate = false
    } else {
      // Fecha parcial
      formData.partialReleaseDate = releasePartial
      formData.isPartialReleaseDate = true
      formData.releaseDate = ''
    }
  }

  // Procesar fecha de inicio de rodaje
  if (movie.filmingStartYear) {
    const filmingStartPartial: PartialDate = {
      year: movie.filmingStartYear,
      month: movie.filmingStartMonth,
      day: movie.filmingStartDay
    }

    // Si la fecha está completa, convertirla a formato ISO
    if (movie.filmingStartYear && movie.filmingStartMonth && movie.filmingStartDay) {
      formData.filmingStartDate = partialFieldsToDate(filmingStartPartial) || ''
      formData.isPartialFilmingStartDate = false
    } else {
      // Fecha parcial
      formData.partialFilmingStartDate = filmingStartPartial
      formData.isPartialFilmingStartDate = true
      formData.filmingStartDate = ''
    }
  }

  // Procesar fecha de fin de rodaje
  if (movie.filmingEndYear) {
    const filmingEndPartial: PartialDate = {
      year: movie.filmingEndYear,
      month: movie.filmingEndMonth,
      day: movie.filmingEndDay
    }

    // Si la fecha está completa, convertirla a formato ISO
    if (movie.filmingEndYear && movie.filmingEndMonth && movie.filmingEndDay) {
      formData.filmingEndDate = partialFieldsToDate(filmingEndPartial) || ''
      formData.isPartialFilmingEndDate = false
    } else {
      // Fecha parcial
      formData.partialFilmingEndDate = filmingEndPartial
      formData.isPartialFilmingEndDate = true
      formData.filmingEndDate = ''
    }
  }

  return formData
}

export const moviesService = {
  /**
   * Obtiene la lista de películas con filtros y paginación
   */
  async getAll(filters: MovieFilters): Promise<MoviesResponse> {
    const params = new URLSearchParams({
      page: filters.currentPage.toString(),
      limit: '20',
      search: filters.searchTerm,
      year: filters.selectedYear,
      sortBy: 'createdAt',
      sortOrder: 'desc'
    })

    const response = await fetch(`/api/movies?${params}`)

    if (!response.ok) {
      throw new Error('Error al cargar las películas')
    }

    const data = await response.json()

    // Las películas ya vienen con los campos de fecha parcial desde la API
    return {
      movies: data.movies || [],
      pagination: data.pagination || { totalPages: 1, currentPage: 1, totalItems: 0 }
    }
  },

  /**
   * Obtiene una película por ID con todas sus relaciones
   */
  async getById(id: number): Promise<any> {
    const response = await fetch(`/api/movies/${id}`)

    if (!response.ok) {
      throw new Error('Error al cargar los datos de la película')
    }

    const movie = await response.json()

    // Devolver la película tal cual, con los campos de fecha parcial
    return movie
  },

  /**
   * Obtiene una película por ID en formato de formulario para edición
   */
  async getByIdForEdit(id: number): Promise<MovieFormData> {
    const response = await fetch(`/api/movies/${id}`)

    if (!response.ok) {
      throw new Error('Error al cargar los datos de la película')
    }

    const movie = await response.json()
    return formatMovieFromAPI(movie)
  },

  /**
   * Crea una nueva película
   */
  async create(data: MovieFormData): Promise<any> {
    // Mismo tratamiento que update
    let formattedData = data;

    if (!('releaseYear' in data) && !('filmingStartYear' in data)) {
      formattedData = formatMovieDataForAPI(data);
    }

    const response = await fetch('/api/movies', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(formattedData)
    })

    if (!response.ok) {
      let errorMessage = 'Error al crear la película'
      try {
        const error = await response.json()
        errorMessage = error.error || error.message || errorMessage
      } catch (e) {
        console.error('Error parsing response:', e)
      }
      throw new Error(errorMessage)
    }

    return response.json()
  },

  /**
   * Actualiza una película existente
   */
  async update(id: number, data: MovieFormData): Promise<any> {
    // NO volver a formatear si los datos ya vienen con campos de fecha separados
    let formattedData = data;

    // Solo formatear si vienen campos de fecha completos (releaseDate, etc.)
    // Si ya vienen releaseYear, releaseMonth, etc., no hacer nada
    if (!('releaseYear' in data) && !('filmingStartYear' in data)) {
      // Solo formatear si es necesario
      formattedData = formatMovieDataForAPI(data);
    }

    const response = await fetch(`/api/movies/${id}`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(formattedData)
    })

    if (!response.ok) {
      let errorMessage = 'Error al actualizar la película'
      try {
        const error = await response.json()
        errorMessage = error.error || error.message || errorMessage
      } catch (e) {
        console.error('Error completo:', e)
        console.error('Error parsing response:', e)
      }
      throw new Error(errorMessage)
    }

    return response.json()
  },

  /**
   * Elimina una película
   */
  async delete(id: number): Promise<void> {
    const response = await fetch(`/api/movies/${id}`, {
      method: 'DELETE'
    })

    if (!response.ok) {
      throw new Error('Error al eliminar la película')
    }
  },

  /**
   * Busca películas por término de búsqueda (autocomplete)
   */
  async search(term: string, limit: number = 10): Promise<any[]> {
    const params = new URLSearchParams({
      search: term,
      limit: limit.toString()
    })

    const response = await fetch(`/api/movies/search?${params}`)

    if (!response.ok) {
      throw new Error('Error al buscar películas')
    }

    return response.json()
  },

  /**
   * Verifica si un slug está disponible
   */
  async checkSlugAvailability(slug: string, excludeId?: number): Promise<boolean> {
    const params = new URLSearchParams({ slug })
    if (excludeId) params.append('excludeId', String(excludeId))

    const response = await fetch(`/api/movies/check-slug?${params}`)

    if (!response.ok) {
      throw new Error('Error al verificar disponibilidad del slug')
    }

    const { available } = await response.json()
    return available
  },

  /**
   * Obtiene estadísticas de películas
   */
  async getStats(): Promise<{
    total: number
    byYear: Record<string, number>
    byStage: Record<string, number>
    byDataCompleteness: Record<string, number>
  }> {
    const response = await fetch('/api/movies/stats')

    if (!response.ok) {
      throw new Error('Error al obtener estadísticas')
    }

    return response.json()
  },

  /**
   * Exporta películas a CSV
   */
  async exportToCSV(filters: MovieFilters): Promise<Blob> {
    const params = new URLSearchParams({
      search: filters.searchTerm,
      year: filters.selectedYear
    })

    const response = await fetch(`/api/movies/export?${params}`)

    if (!response.ok) {
      throw new Error('Error al exportar películas')
    }

    return response.blob()
  }
}

// ==================================================
// src/services/people.service.ts
// ==================================================
// src/services/people.service.ts

import { apiClient } from './api-client';
import {
  Person,
  PersonWithRelations,
  PersonFormData,
  PersonFilters,
  PaginatedPeopleResponse
} from '@/lib/people/peopleTypes';
import { formatPersonFormDataForAPI } from '@/lib/people/peopleUtils';
import { dateToPartialFields, partialFieldsToDate } from '@/lib/shared/dateUtils';

interface PersonSearchResult {
  id: number;
  name: string;
  slug?: string;
}

/**
 * Formatea los datos del formulario para enviar a la API
 * Convierte las fechas completas o parciales al formato esperado por el backend
 */
function formatPersonDataForAPI(data: PersonFormData): any {
  const apiData: any = {
    firstName: data.firstName || null,
    lastName: data.lastName || null,
    realName: data.realName || null,
    gender: data.gender || null,
    hideAge: data.hideAge,
    isActive: data.isActive,
    birthLocationId: data.birthLocationId,
    deathLocationId: data.deathLocationId,
    biography: data.biography || null,
    photoUrl: data.photoUrl || null
  };

  // Procesar fecha de nacimiento
  if (data.isPartialBirthDate && data.partialBirthDate) {
    // Fecha parcial de nacimiento
    apiData.birthYear = data.partialBirthDate.year;
    apiData.birthMonth = data.partialBirthDate.month;
    apiData.birthDay = data.partialBirthDate.day;
  } else if (data.birthDate) {
    // Fecha completa de nacimiento - convertir a campos parciales
    const partial = dateToPartialFields(data.birthDate);
    apiData.birthYear = partial.year;
    apiData.birthMonth = partial.month;
    apiData.birthDay = partial.day;
  } else {
    // Sin fecha de nacimiento
    apiData.birthYear = null;
    apiData.birthMonth = null;
    apiData.birthDay = null;
  }

  // Procesar fecha de fallecimiento
  if (data.isPartialDeathDate && data.partialDeathDate) {
    // Fecha parcial de fallecimiento
    apiData.deathYear = data.partialDeathDate.year;
    apiData.deathMonth = data.partialDeathDate.month;
    apiData.deathDay = data.partialDeathDate.day;
  } else if (data.deathDate) {
    // Fecha completa de fallecimiento - convertir a campos parciales
    const partial = dateToPartialFields(data.deathDate);
    apiData.deathYear = partial.year;
    apiData.deathMonth = partial.month;
    apiData.deathDay = partial.day;
  } else {
    // Sin fecha de fallecimiento
    apiData.deathYear = null;
    apiData.deathMonth = null;
    apiData.deathDay = null;
  }

  return apiData;
}

/**
 * Convierte los datos de la API al formato del formulario
 */
function formatPersonFromAPI(person: any): PersonFormData {
  const formData: PersonFormData = {
    firstName: person.firstName || '',
    lastName: person.lastName || '',
    realName: person.realName || '',
    birthDate: '',
    deathDate: '',
    gender: person.gender || '',
    hideAge: person.hideAge || false,
    isActive: person.isActive !== false, // Default true
    birthLocationId: person.birthLocationId || null,
    deathLocationId: person.deathLocationId || null,
    biography: person.biography || '',
    photoUrl: person.photoUrl || ''
  };

  // Procesar fecha de nacimiento
  if (person.birthYear) {
    const birthPartial = {
      year: person.birthYear,
      month: person.birthMonth,
      day: person.birthDay
    };

    // Si la fecha está completa, convertirla a formato ISO
    if (person.birthYear && person.birthMonth && person.birthDay) {
      formData.birthDate = partialFieldsToDate(birthPartial) || '';
      formData.isPartialBirthDate = false;
    } else {
      // Fecha parcial
      formData.partialBirthDate = birthPartial;
      formData.isPartialBirthDate = true;
      formData.birthDate = '';
    }
  }

  // Procesar fecha de fallecimiento
  if (person.deathYear) {
    const deathPartial = {
      year: person.deathYear,
      month: person.deathMonth,
      day: person.deathDay
    };

    // Si la fecha está completa, convertirla a formato ISO
    if (person.deathYear && person.deathMonth && person.deathDay) {
      formData.deathDate = partialFieldsToDate(deathPartial) || '';
      formData.isPartialDeathDate = false;
    } else {
      // Fecha parcial
      formData.partialDeathDate = deathPartial;
      formData.isPartialDeathDate = true;
      formData.deathDate = '';
    }
  }

  return formData;
}

export const peopleService = {
  /**
   * Obtiene una lista paginada de personas con filtros
   */
  async getAll(filters: PersonFilters = {}): Promise<PaginatedPeopleResponse> {
    const params = new URLSearchParams();

    if (filters.search) params.append('search', filters.search);
    if (filters.gender) params.append('gender', filters.gender);
    if (filters.hasLinks !== undefined && filters.hasLinks !== '') {
      params.append('hasLinks', String(filters.hasLinks));
    }
    if (filters.isActive !== undefined && filters.isActive !== '') {
      params.append('isActive', String(filters.isActive));
    }
    if (filters.page) params.append('page', String(filters.page));
    if (filters.limit) params.append('limit', String(filters.limit));

    const response = await apiClient.get<PaginatedPeopleResponse>(`/people?${params}`);
    
    // Convertir las fechas de cada persona si es necesario
    if (response.data && Array.isArray(response.data)) {
      response.data = response.data.map((person: any) => ({
        ...person,
        // Mantener la estructura original pero asegurar que las fechas parciales estén disponibles
        birthYear: person.birthYear,
        birthMonth: person.birthMonth,
        birthDay: person.birthDay,
        deathYear: person.deathYear,
        deathMonth: person.deathMonth,
        deathDay: person.deathDay
      }));
    }

    return response;
  },

  /**
   * Busca personas por nombre (para autocomplete)
   */
  async search(query: string, limit: number = 10): Promise<PersonSearchResult[]> {
    if (query.length < 2) return [];

    try {
      return await apiClient.get<PersonSearchResult[]>(
        `/people?search=${encodeURIComponent(query)}&limit=${limit}`
      );
    } catch (error) {
      console.error('Error searching people:', error);
      return [];
    }
  },

  /**
   * Obtiene una persona por ID con todas sus relaciones
   */
  async getById(id: number): Promise<PersonWithRelations> {
    const person = await apiClient.get<PersonWithRelations>(`/people/${id}`);
    
    // Si necesitas devolver el formato de formulario, usa formatPersonFromAPI
    // De lo contrario, devuelve la persona tal cual con los campos de fecha parcial
    return person;
  },

  /**
   * Obtiene una persona por ID en formato de formulario
   */
  async getByIdForEdit(id: number): Promise<PersonFormData> {
    const person = await apiClient.get<any>(`/people/${id}`);
    return formatPersonFromAPI(person);
  },

  /**
   * Crea una nueva persona
   */
  async create(data: PersonFormData): Promise<PersonWithRelations> {
    // Usar la nueva función que maneja fechas parciales
    const formattedData = formatPersonDataForAPI(data);
    console.log('Formatted data for API:', formattedData); // <-- Log para debugging

    return apiClient.post<PersonWithRelations>('/people', formattedData);
  },

  /**
   * Crea una persona rápida (solo con nombre)
   */
  async createQuick(name: string): Promise<Person> {
    // Separar el nombre en firstName y lastName si es posible
    const nameParts = name.trim().split(' ');
    const quickData = {
      firstName: nameParts[0] || null,
      lastName: nameParts.slice(1).join(' ') || null,
      isActive: true
    };

    return apiClient.post<Person>('/people', quickData);
  },

  /**
   * Actualiza una persona
   */
  async update(id: number, data: PersonFormData): Promise<PersonWithRelations> {
    // Usar la nueva función que maneja fechas parciales
    const formattedData = formatPersonDataForAPI(data);
    console.log('Formatted data for API update:', formattedData); // <-- Log para debugging

    return apiClient.put<PersonWithRelations>(`/people/${id}`, formattedData);
  },

  /**
   * Elimina una persona
   */
  async delete(id: number): Promise<void> {
    await apiClient.delete(`/people/${id}`);
  },

  /**
   * Verifica si un slug está disponible
   */
  async checkSlugAvailability(slug: string, excludeId?: number): Promise<boolean> {
    const params = new URLSearchParams({ slug });
    if (excludeId) params.append('excludeId', String(excludeId));

    const { available } = await apiClient.get<{ available: boolean }>(
      `/people/check-slug?${params}`
    );
    return available;
  },

  /**
   * Obtiene estadísticas de personas
   */
  async getStats(): Promise<{
    total: number;
    active: number;
    withLinks: number;
    byGender: Record<string, number>;
  }> {
    return apiClient.get('/people/stats');
  },

  /**
   * Exporta personas a CSV
   */
  async exportToCSV(filters: PersonFilters = {}): Promise<Blob> {
    const params = new URLSearchParams();

    if (filters.search) params.append('search', filters.search);
    if (filters.gender) params.append('gender', filters.gender);
    if (filters.hasLinks !== undefined) {
      params.append('hasLinks', String(filters.hasLinks));
    }
    if (filters.isActive !== undefined) {
      params.append('isActive', String(filters.isActive));
    }

    // Usamos fetch directamente para manejar el blob
    const response = await fetch(`/api/people/export?${params}`);

    if (!response.ok) {
      throw new Error('Error al exportar personas');
    }

    return response.blob();
  }
};