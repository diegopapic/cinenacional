generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Movie {
  id                    Int                        @id @default(autoincrement())
  slug                  String                     @unique @db.VarChar(255)
  title                 String                     @db.VarChar(255)
  year                  Int?
  releaseYear           Int?                       @map("release_year")
  releaseMonth          Int?                       @map("release_month") @db.SmallInt
  releaseDay            Int?                       @map("release_day") @db.SmallInt
  duration              Int?
  durationSeconds       Int?                       @map("duration_seconds")
  tipoDuracion          String?                    @map("tipo_duracion") @db.VarChar(20)
  synopsis              String?
  notes                 String?
  tagline               String?                    @db.VarChar(500)
  posterUrl             String?                    @map("poster_url") @db.VarChar(500)
  posterPublicId        String?                    @map("poster_public_id") @db.VarChar(500)
  trailerUrl            String?                    @map("trailer_url") @db.VarChar(500)
  imdbId                String?                    @map("imdb_id") @db.VarChar(20)
  stage                 MovieStage                 @default(COMPLETA)
  colorTypeId           Int?                       @map("color_type_id")
  soundType             String?                    @map("sound_type") @db.VarChar(50)
  ratingId              Int?                       @map("rating_id")
  countries             String[]                   @default(["Argentina"])
  is_coproduction       Boolean                    @default(false)
  production_type       String                     @default("national")
  filmingStartYear      Int?                       @map("filming_start_year")
  filmingStartMonth     Int?                       @map("filming_start_month") @db.SmallInt
  filmingStartDay       Int?                       @map("filming_start_day") @db.SmallInt
  filmingEndYear        Int?                       @map("filming_end_year")
  filmingEndMonth       Int?                       @map("filming_end_month") @db.SmallInt
  filmingEndDay         Int?                       @map("filming_end_day") @db.SmallInt
  createdAt             DateTime                   @default(now()) @map("created_at")
  updatedAt             DateTime                   @updatedAt @map("updated_at")
  dataCompleteness      DataCompleteness           @default(BASIC_PRESS_KIT) @map("data_completeness")
  metaDescription       String?                    @map("meta_description")
  metaKeywords          String[]                   @map("meta_keywords")
  alternativeTitles     MovieAlternativeTitle[]
  awards                MovieAward[]
  cast                  MovieCast[]
  movieCountries        MovieCountry[]
  crew                  MovieCrew[]
  distributionCompanies MovieDistributionCompany[]
  genres                MovieGenre[]
  images                MovieImage[]
  links                 MovieLink[]
  productionCompanies   MovieProductionCompany[]
  screenings            MovieScreening[]
  themes                MovieTheme[]
  videos                MovieVideo[]
  colorType             ColorType?                 @relation(fields: [colorTypeId], references: [id])
  rating                Rating?                    @relation(fields: [ratingId], references: [id])
  userRatings           UserRating[]
  watchedBy             UserWatched[]
  watchlists            UserWatchlist[]

  @@index([slug])
  @@index([title])
  @@index([year])
  @@index([tipoDuracion])
  @@index([ratingId])
  @@index([filmingStartYear])
  @@index([filmingStartYear, filmingStartMonth])
  @@index([is_coproduction])
  @@index([production_type])
  @@index([colorTypeId])
  @@index([stage])
  @@index([releaseYear])
  @@index([releaseYear, releaseMonth])
  @@map("movies")
}

model ScreeningVenue {
  id          Int              @id @default(autoincrement())
  slug        String           @unique @db.VarChar(255)
  name        String           @db.VarChar(255)
  type        VenueType
  description String?
  logoUrl     String?          @map("logo_url") @db.VarChar(500)
  website     String?          @db.VarChar(500)
  address     String?          @db.VarChar(500)
  city        String?          @db.VarChar(100)
  province    String?          @db.VarChar(100)
  country     String?          @default("Argentina") @db.VarChar(100)
  latitude    Decimal?         @db.Decimal(10, 8)
  longitude   Decimal?         @db.Decimal(11, 8)
  isActive    Boolean          @default(true) @map("is_active")
  createdAt   DateTime         @default(now()) @map("created_at")
  updatedAt   DateTime         @updatedAt @map("updated_at")
  screenings  MovieScreening[]

  @@index([name])
  @@index([type])
  @@index([isActive])
  @@map("screening_venues")
}

model MovieScreening {
  id            Int            @id @default(autoincrement())
  movieId       Int            @map("movie_id")
  venueId       Int            @map("venue_id")
  screeningDate DateTime?      @map("screening_date") @db.Date
  endDate       DateTime?      @map("end_date") @db.Date
  isPremiere    Boolean        @default(false) @map("is_premiere")
  isExclusive   Boolean        @default(false) @map("is_exclusive")
  notes         String?
  createdAt     DateTime       @default(now()) @map("created_at")
  movie         Movie          @relation(fields: [movieId], references: [id], onDelete: Cascade)
  venue         ScreeningVenue @relation(fields: [venueId], references: [id], onDelete: Cascade)

  @@unique([movieId, venueId, screeningDate])
  @@index([movieId])
  @@index([venueId])
  @@index([screeningDate])
  @@map("movie_screenings")
}

model MovieAlternativeTitle {
  id          Int      @id @default(autoincrement())
  movieId     Int      @map("movie_id")
  title       String   @db.VarChar(255)
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  movie       Movie    @relation(fields: [movieId], references: [id], onDelete: Cascade)

  @@index([movieId])
  @@index([title])
  @@map("movie_alternative_titles")
}

model MovieLink {
  id        Int      @id @default(autoincrement())
  movieId   Int      @map("movie_id")
  type      LinkType
  url       String
  title     String?  @db.VarChar(255)
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  movie     Movie    @relation(fields: [movieId], references: [id], onDelete: Cascade)

  @@index([movieId])
  @@index([type])
  @@map("movie_links")
}

model Person {
  id              Int                 @id @default(autoincrement())
  slug            String              @unique @db.VarChar(255)
  firstName       String?             @map("first_name") @db.VarChar(255)
  lastName        String?             @map("last_name") @db.VarChar(255)
  realName        String?             @map("real_name") @db.VarChar(255)
  birthYear       Int?                @map("birth_year")
  birthMonth      Int?                @map("birth_month") @db.SmallInt
  birthDay        Int?                @map("birth_day") @db.SmallInt
  deathYear       Int?                @map("death_year")
  deathMonth      Int?                @map("death_month") @db.SmallInt
  deathDay        Int?                @map("death_day") @db.SmallInt
  birthLocationId Int?                @map("birth_location_id")
  deathLocationId Int?                @map("death_location_id")
  biography       String?
  photoUrl        String?             @map("photo_url") @db.VarChar(500)
  gender          Gender?
  hideAge         Boolean             @default(false) @map("hide_age")
  hasLinks        Boolean             @default(false) @map("has_links")
  isActive        Boolean             @default(true) @map("is_active")
  createdAt       DateTime            @default(now()) @map("created_at")
  updatedAt       DateTime            @updatedAt @map("updated_at")
  awards          MovieAward[]
  castRoles       MovieCast[]
  crewRoles       MovieCrew[]
  birthLocation   Location?           @relation("BirthLocation", fields: [birthLocationId], references: [id])
  deathLocation   Location?           @relation("DeathLocation", fields: [deathLocationId], references: [id])
  links           PersonLink[]
  nationalities   PersonNationality[]

  @@index([slug])
  @@index([firstName])
  @@index([lastName])
  @@index([birthLocationId])
  @@index([deathLocationId])
  @@index([isActive])
  @@index([birthYear])
  @@index([birthYear, birthMonth])
  @@index([deathYear])
  @@index([deathYear, deathMonth])
  @@map("people")
}

model PersonNationality {
  personId   Int      @map("person_id")
  locationId Int      @map("location_id")
  isPrimary  Boolean  @default(false) @map("is_primary")
  location   Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
  person     Person   @relation(fields: [personId], references: [id], onDelete: Cascade)

  @@id([personId, locationId])
  @@map("person_nationalities")
}

model PersonLink {
  id           Int            @id @default(autoincrement())
  personId     Int            @map("person_id")
  type         PersonLinkType
  url          String         @db.VarChar(500)
  title        String?        @db.VarChar(255)
  displayOrder Int            @default(0) @map("display_order")
  isVerified   Boolean        @default(false) @map("is_verified")
  isActive     Boolean        @default(true) @map("is_active")
  lastChecked  DateTime?      @map("last_checked")
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  person       Person         @relation(fields: [personId], references: [id], onDelete: Cascade)

  @@index([personId])
  @@index([type])
  @@index([isActive])
  @@map("person_links")
}

model Genre {
  id          Int          @id @default(autoincrement())
  slug        String       @unique @db.VarChar(100)
  name        String       @db.VarChar(100)
  description String?
  createdAt   DateTime     @default(now()) @map("created_at")
  movies      MovieGenre[]

  @@map("genres")
}

model ProductionCompany {
  id          Int                      @id @default(autoincrement())
  slug        String                   @unique @db.VarChar(255)
  name        String                   @db.VarChar(255)
  description String?
  foundedYear Int?                     @map("founded_year")
  logoUrl     String?                  @map("logo_url") @db.VarChar(500)
  website     String?                  @db.VarChar(500)
  country     String?                  @db.VarChar(100)
  createdAt   DateTime                 @default(now()) @map("created_at")
  updatedAt   DateTime                 @updatedAt @map("updated_at")
  movies      MovieProductionCompany[]

  @@map("production_companies")
}

model DistributionCompany {
  id          Int                        @id @default(autoincrement())
  slug        String                     @unique @db.VarChar(255)
  name        String                     @db.VarChar(255)
  description String?
  logoUrl     String?                    @map("logo_url") @db.VarChar(500)
  website     String?                    @db.VarChar(500)
  country     String?                    @db.VarChar(100)
  createdAt   DateTime                   @default(now()) @map("created_at")
  updatedAt   DateTime                   @updatedAt @map("updated_at")
  movies      MovieDistributionCompany[]

  @@map("distribution_companies")
}

model MovieCast {
  id            Int      @id @default(autoincrement())
  movieId       Int      @map("movie_id")
  personId      Int      @map("person_id")
  characterName String?  @map("character_name") @db.VarChar(255)
  billingOrder  Int?     @map("billing_order")
  isPrincipal   Boolean  @default(false) @map("is_principal")
  notes         String?
  createdAt     DateTime @default(now()) @map("created_at")
  movie         Movie    @relation(fields: [movieId], references: [id], onDelete: Cascade)
  person        Person   @relation(fields: [personId], references: [id], onDelete: Cascade)

  @@unique([movieId, personId, characterName])
  @@index([movieId])
  @@index([personId])
  @@map("movie_cast")
}

model MovieCrew {
  id           Int      @id @default(autoincrement())
  movieId      Int      @map("movie_id")
  personId     Int      @map("person_id")
  roleId       Int      @map("role_id")
  billingOrder Int?     @map("billing_order")
  notes        String?
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  movie        Movie    @relation(fields: [movieId], references: [id], onDelete: Cascade)
  person       Person   @relation(fields: [personId], references: [id], onDelete: Cascade)
  role         Role     @relation(fields: [roleId], references: [id])

  @@unique([movieId, personId, roleId])
  @@index([movieId])
  @@index([personId])
  @@index([roleId])
  @@map("movie_crew")
}

model MovieGenre {
  movieId   Int     @map("movie_id")
  genreId   Int     @map("genre_id")
  isPrimary Boolean @default(false) @map("is_primary")
  genre     Genre   @relation(fields: [genreId], references: [id], onDelete: Cascade)
  movie     Movie   @relation(fields: [movieId], references: [id], onDelete: Cascade)

  @@id([movieId, genreId])
  @@map("movie_genres")
}

model MovieProductionCompany {
  movieId   Int               @map("movie_id")
  companyId Int               @map("company_id")
  isPrimary Boolean           @default(false) @map("is_primary")
  company   ProductionCompany @relation(fields: [companyId], references: [id], onDelete: Cascade)
  movie     Movie             @relation(fields: [movieId], references: [id], onDelete: Cascade)

  @@id([movieId, companyId])
  @@map("movie_production_companies")
}

model MovieDistributionCompany {
  movieId   Int                 @map("movie_id")
  companyId Int                 @map("company_id")
  territory String              @default("Argentina") @db.VarChar(100)
  company   DistributionCompany @relation(fields: [companyId], references: [id], onDelete: Cascade)
  movie     Movie               @relation(fields: [movieId], references: [id], onDelete: Cascade)

  @@id([movieId, companyId, territory])
  @@map("movie_distribution_companies")
}

model ColorType {
  id            Int           @id @default(autoincrement())
  name          String        @db.VarChar(50)
  slug          String        @unique @db.VarChar(50)
  category      ColorCategory
  technicalName String?       @map("technical_name") @db.VarChar(50)
  displayOrder  Int           @default(0) @map("display_order")
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  movies        Movie[]

  @@index([category])
  @@index([slug])
  @@map("color_types")
}

model Location {
  id                  Int                 @id @default(autoincrement())
  name                String              @db.VarChar(255)
  slug                String              @unique @db.VarChar(255)
  parentId            Int?                @map("parent_id")
  latitude            Decimal?            @db.Decimal(10, 8)
  longitude           Decimal?            @db.Decimal(11, 8)
  createdAt           DateTime            @default(now()) @map("created_at")
  updatedAt           DateTime            @updatedAt @map("updated_at")
  gentilicio          String?             @db.VarChar(255)
  parent              Location?           @relation("LocationHierarchy", fields: [parentId], references: [id], onDelete: Restrict)
  children            Location[]          @relation("LocationHierarchy")
  peopleBornHere      Person[]            @relation("BirthLocation")
  peopleDiedHere      Person[]            @relation("DeathLocation")
  personNationalities PersonNationality[]

  @@index([parentId])
  @@index([name])
  @@index([slug])
  @@map("locations")
}

model MovieImage {
  id           Int       @id @default(autoincrement())
  movieId      Int       @map("movie_id")
  url          String    @db.VarChar(500)
  type         ImageType
  width        Int?
  height       Int?
  caption      String?
  photographer String?   @db.VarChar(255)
  displayOrder Int       @default(0) @map("display_order")
  isPrimary    Boolean   @default(false) @map("is_primary")
  createdAt    DateTime  @default(now()) @map("created_at")
  movie        Movie     @relation(fields: [movieId], references: [id], onDelete: Cascade)

  @@map("movie_images")
}

model MovieVideo {
  id        Int       @id @default(autoincrement())
  movieId   Int       @map("movie_id")
  url       String    @db.VarChar(500)
  platform  String?   @db.VarChar(50)
  videoKey  String?   @map("video_key") @db.VarChar(100)
  type      VideoType
  title     String?   @db.VarChar(255)
  duration  Int?
  language  String    @default("es") @db.VarChar(10)
  isPrimary Boolean   @default(false) @map("is_primary")
  createdAt DateTime  @default(now()) @map("created_at")
  movie     Movie     @relation(fields: [movieId], references: [id], onDelete: Cascade)

  @@map("movie_videos")
}

model Award {
  id           Int          @id @default(autoincrement())
  name         String       @db.VarChar(255)
  organization String?      @db.VarChar(255)
  country      String?      @db.VarChar(100)
  description  String?
  logoUrl      String?      @map("logo_url") @db.VarChar(500)
  createdAt    DateTime     @default(now()) @map("created_at")
  movieAwards  MovieAward[]

  @@map("awards")
}

model MovieAward {
  id                Int         @id @default(autoincrement())
  movieId           Int         @map("movie_id")
  awardId           Int         @map("award_id")
  category          String      @db.VarChar(255)
  year              Int
  result            AwardResult
  recipientPersonId Int?        @map("recipient_person_id")
  notes             String?
  createdAt         DateTime    @default(now()) @map("created_at")
  award             Award       @relation(fields: [awardId], references: [id], onDelete: Cascade)
  movie             Movie       @relation(fields: [movieId], references: [id], onDelete: Cascade)
  recipient         Person?     @relation(fields: [recipientPersonId], references: [id])

  @@map("movie_awards")
}

model Theme {
  id          Int          @id @default(autoincrement())
  slug        String       @unique @db.VarChar(100)
  name        String       @db.VarChar(100)
  description String?
  usageCount  Int          @default(0) @map("usage_count")
  createdAt   DateTime     @default(now()) @map("created_at")
  movies      MovieTheme[]

  @@index([slug])
  @@index([name])
  @@map("themes")
}

model Role {
  id          Int         @id @default(autoincrement())
  name        String      @db.VarChar(100)
  slug        String      @unique @db.VarChar(100)
  department  Department
  description String?
  isMainRole  Boolean     @default(false) @map("is_main_role")
  isActive    Boolean     @default(true) @map("is_active")
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  crewRoles   MovieCrew[]

  @@unique([name, department])
  @@index([department])
  @@index([isActive])
  @@index([isMainRole])
  @@map("roles")
}

model Rating {
  id           Int      @id @default(autoincrement())
  slug         String   @unique @db.VarChar(100)
  name         String   @unique @db.VarChar(255)
  abbreviation String?  @db.VarChar(10)
  description  String?
  order        Int      @default(0)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  movies       Movie[]

  @@index([slug])
  @@index([order])
  @@map("ratings")
}

model MovieTheme {
  movieId   Int   @map("movie_id")
  themeId   Int   @map("theme_id")
  relevance Int   @default(1)
  movie     Movie @relation(fields: [movieId], references: [id], onDelete: Cascade)
  theme     Theme @relation(fields: [themeId], references: [id], onDelete: Cascade)

  @@id([movieId, themeId])
  @@map("movie_themes")
}

model Country {
  id        Int            @id @default(autoincrement())
  code      String         @unique @db.VarChar(2)
  name      String         @db.VarChar(100)
  createdAt DateTime       @default(now()) @map("created_at")
  movies    MovieCountry[]

  @@map("countries")
}

model MovieCountry {
  movieId   Int     @map("movie_id")
  countryId Int     @map("country_id")
  isPrimary Boolean @default(false) @map("is_primary")
  country   Country @relation(fields: [countryId], references: [id], onDelete: Cascade)
  movie     Movie   @relation(fields: [movieId], references: [id], onDelete: Cascade)

  @@id([movieId, countryId])
  @@map("movie_countries")
}

model Language {
  id        Int      @id @default(autoincrement())
  code      String   @unique @db.VarChar(10)
  name      String   @db.VarChar(100)
  createdAt DateTime @default(now()) @map("created_at")

  @@map("languages")
}

model User {
  id           Int             @id @default(autoincrement())
  email        String          @unique @db.VarChar(255)
  username     String          @unique @db.VarChar(100)
  passwordHash String          @map("password_hash") @db.VarChar(255)
  displayName  String?         @map("display_name") @db.VarChar(255)
  avatarUrl    String?         @map("avatar_url") @db.VarChar(500)
  bio          String?
  isActive     Boolean         @default(true) @map("is_active")
  isAdmin      Boolean         @default(false) @map("is_admin")
  createdAt    DateTime        @default(now()) @map("created_at")
  updatedAt    DateTime        @updatedAt @map("updated_at")
  ratings      UserRating[]
  watched      UserWatched[]
  watchlist    UserWatchlist[]

  @@map("users")
}

model UserRating {
  userId     Int      @map("user_id")
  movieId    Int      @map("movie_id")
  rating     Decimal  @db.Decimal(3, 1)
  reviewText String?  @map("review_text")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  movie      Movie    @relation(fields: [movieId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, movieId])
  @@map("user_ratings")
}

model UserWatchlist {
  userId  Int      @map("user_id")
  movieId Int      @map("movie_id")
  addedAt DateTime @default(now()) @map("added_at")
  movie   Movie    @relation(fields: [movieId], references: [id], onDelete: Cascade)
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, movieId])
  @@map("user_watchlist")
}

model UserWatched {
  userId    Int      @map("user_id")
  movieId   Int      @map("movie_id")
  watchedAt DateTime @default(now()) @map("watched_at")
  movie     Movie    @relation(fields: [movieId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, movieId])
  @@map("user_watched")
}

enum ImageType {
  POSTER
  BACKDROP
  STILL
  BEHIND_SCENES

  @@map("image_type")
}

enum Department {
  DIRECCION
  PRODUCCION
  GUION
  FOTOGRAFIA
  ARTE
  MONTAJE
  SONIDO
  MUSICA
  VESTUARIO
  MAQUILLAJE
  EFECTOS
  ANIMACION
  OTROS
}

enum Gender {
  MALE
  FEMALE
  OTHER

  @@map("gender")
}

enum PersonLinkType {
  IMDB
  TMDB
  CINENACIONAL
  WIKIPEDIA
  OFFICIAL_WEBSITE
  PORTFOLIO
  BLOG
  INSTAGRAM
  TWITTER
  FACEBOOK
  YOUTUBE
  TIKTOK
  LINKEDIN
  VIMEO
  LETTERBOXD
  SPOTIFY
  PODCAST
  INTERVIEW
  ARTICLE
  OTHER

  @@map("person_link_type")
}

enum VenueType {
  CINEMA
  STREAMING
  TV_CHANNEL
  OTHER

  @@map("venue_type")
}

enum VideoType {
  TRAILER
  TEASER
  BEHIND_SCENES
  INTERVIEW
  CLIP

  @@map("video_type")
}

enum AwardResult {
  WON
  NOMINATED

  @@map("award_result")
}

enum DataCompleteness {
  BASIC_PRESS_KIT
  FULL_PRESS_KIT
  MAIN_CAST
  MAIN_CREW
  FULL_CAST
  FULL_CREW

  @@map("data_completeness")
}

enum LinkType {
  INSTAGRAM
  TWITTER
  FACEBOOK
  TIKTOK
  YOUTUBE
  WEBSITE

  @@map("link_type")
}

enum ColorCategory {
  COLOR
  BLACK_AND_WHITE
  MIXED
  UNKNOWN

  @@map("color_category")
}

enum MovieStage {
  COMPLETA
  EN_DESARROLLO
  EN_POSTPRODUCCION
  EN_PREPRODUCCION
  EN_RODAJE
  INCONCLUSA
  INEDITA

  @@map("movie_stage")
}
