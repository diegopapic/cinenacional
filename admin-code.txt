// Archivos del admin - 2025-08-15T05:09:41.392Z
// ==================



// ==================================================
// pgsql/pgAdmin 4/web/pgadmin/static/js/components/PgTree/FileTreeItem/index.tsx
// ==================================================
/////////////////////////////////////////////////////////////
//
// pgAdmin 4 - PostgreSQL Tools
//
// Copyright (C) 2013 - 2025, The pgAdmin Development Team
// This software is released under the PostgreSQL Licence
//
//////////////////////////////////////////////////////////////

import cn from 'classnames';
import * as React from 'react';
import { ClasslistComposite } from 'aspen-decorations';
import { Directory, FileEntry, IItemRendererProps, ItemType, RenamePromptHandle, FileType, FileOrDir} from 'react-aspen';
import {IFileTreeXTriggerEvents, FileTreeXEvent } from '../types';
import { Notificar } from 'notificar';
import _ from 'lodash';
import DoubleClickHandler from './DoubleClickHandler';
interface IItemRendererXProps {
    /**
     * In this implementation, decoration are null when item is `PromptHandle`
     *
     * If you would like decorations for `PromptHandle`s, then get them using `DecorationManager#getDecorations(<target>)`.
     * Where `<target>` can be either `NewFilePromptHandle.parent` or `RenamePromptHandle.target` depending on type of `PromptHandle`
     *
     * To determine the type of `PromptHandle`, use `IItemRendererProps.itemType`
     */
    decorations: ClasslistComposite
    onClick: (ev: React.MouseEvent, item: FileEntry | Directory, type: ItemType) => void
    onContextMenu: (ev: React.MouseEvent, item: FileEntry | Directory) => void
    onMouseEnter: (ev: React.MouseEvent, item: FileEntry | Directory) => void
    onMouseLeave: (ev: React.MouseEvent, item: FileEntry | Directory) => void
    onItemHovered: (ev: React.MouseEvent, item: FileEntry | Directory, type: ItemType) => void
    events: Notificar<FileTreeXEvent>
}

// DO NOT EXTEND FROM PureComponent!!! You might miss critical changes made deep within `item` prop
// as far as efficiency is concerned, `react-aspen` works hard to ensure unnecessary updates are ignored
export class FileTreeItem extends React.Component<IItemRendererXProps & IItemRendererProps> {
  public static getBoundingClientRectForItem(item: FileEntry | Directory): DOMRect {
    const divRef = FileTreeItem.itemIdToRefMap.get(item.id);
    if (divRef) {
      return divRef.getBoundingClientRect();
    }
    return null;
  }

  // ensure this syncs up with what goes in CSS, (em, px, % etc.) and what ultimately renders on the page
  public static readonly renderHeight: number = 24;
  private static readonly itemIdToRefMap: Map<number, HTMLDivElement> = new Map();
  private static readonly refToItemIdMap: Map<number, HTMLDivElement> = new Map();
  private readonly fileTreeEvent: IFileTreeXTriggerEvents;

  constructor(props) {
    super(props);
    // used to apply decoration changes, you're welcome to use setState or other mechanisms as you see fit
    this.forceUpdate = this.forceUpdate.bind(this);
  }

  public render() {
    const { item, itemType, decorations } = this.props;
    const isRenamePrompt = itemType === ItemType.RenamePrompt;
    const isNewPrompt = itemType === ItemType.NewDirectoryPrompt || itemType === ItemType.NewFilePrompt;
    const isDirExpanded = itemType === ItemType.Directory
      ? (item as Directory).expanded
      : itemType === ItemType.RenamePrompt && (item as RenamePromptHandle).target.type === FileType.Directory
        ? ((item as RenamePromptHandle).target as Directory).expanded
        : false;

    const fileOrDir =
            (itemType === ItemType.File ||
                itemType === ItemType.NewFilePrompt ||
                (itemType === ItemType.RenamePrompt && (item as RenamePromptHandle).target.constructor === FileEntry))
              ? 'file'
              : 'directory';

    if (this.props.item.parent?.parent && this.props.item.parent?.path) {
      this.props.item.resolvedPathCache = this.props.item.parent.path + '/' + this.props.item._metadata.data.id;
    }

    const itemChildren = item.children && item.children.length > 0 && item._metadata.data._type.indexOf('coll-') !== -1 ? '(' + item.children.length + ')' : '';
    const extraClasses = item._metadata.data.extraClasses ? item._metadata.data.extraClasses.join(' ') : '';

    const tags = item._metadata.data?.tags ?? [];

    return (
      <DoubleClickHandler onDoubleClick={this.handleDoubleClick} onSingleClick={this.handleClick}>
        <div
          className={cn('file-entry', {
            renaming: isRenamePrompt,
            prompt: isRenamePrompt || isNewPrompt,
            new: isNewPrompt,
          }, fileOrDir, decorations ? decorations.classlist : null, `depth-${item.depth}`, extraClasses)}
          data-depth={item.depth}
          onContextMenu={this.handleContextMenu}
          onDragStart={this.handleDragStartItem}
          onMouseEnter={this.handleMouseEnter}
          onMouseLeave={this.handleMouseLeave}
          onKeyDown={()=>{/* taken care by parent */}}
          // required for rendering context menus when opened through context menu button on keyboard
          ref={this.handleDivRef}
          draggable={true}>

          {!isNewPrompt && fileOrDir === 'directory' ?
            <i className={cn('directory-toggle', isDirExpanded ? 'open' : '')} />
            : null
          }

          <span className='file-label'>{
            item._metadata?.data?.icon ?
              <i className={cn('file-icon', item._metadata?.data?.icon ? item._metadata.data.icon : fileOrDir)} /> : null
          }
          <span className='file-name'>
            { _.unescape(this.props.item.getMetadata('data')._label)}
          </span>
          <span className='children-count'>{itemChildren}</span>
          {tags.map((tag)=>(
            <div key={tag.text} className='file-tag' style={{'--tag-color': tag.color} as React.CSSProperties}>
              {tag.text}
            </div>
          ))}
          </span>
        </div>
      </DoubleClickHandler>
    );
  }

  public componentDidMount() {
    this.events = this.props.events;
    this.props.item.resolvedPathCache = this.props.item.parent.path + '/' + this.props.item._metadata.data.id;
    if (this.props.decorations) {
      this.props.decorations.addChangeListener(this.forceUpdate);
    }
    this.setFileLoaded(this.props.item);
  }

  private readonly setFileLoaded = async (FileOrDir): Promise<void> => {
    this.props.changeDirectoryCount(FileOrDir.parent);
    if(FileOrDir._loaded !== true) {
      this.events.dispatch(FileTreeXEvent.onTreeEvents, window.event, 'added', FileOrDir);
    }
    FileOrDir._loaded = true;
  };

  public componentWillUnmount() {
    if (this.props.decorations) {
      this.props.decorations.removeChangeListener(this.forceUpdate);
    }
  }

  public componentDidUpdate(prevProps: IItemRendererXProps) {
    if (prevProps.decorations) {
      prevProps.decorations.removeChangeListener(this.forceUpdate);
    }
    if (this.props.decorations) {
      this.props.decorations.addChangeListener(this.forceUpdate);
    }
  }

  private readonly handleDivRef = (r: HTMLDivElement) => {
    if (r === null) {
      FileTreeItem.itemIdToRefMap.delete(this.props.item.id);
    } else {
      FileTreeItem.itemIdToRefMap.set(this.props.item.id, r);
      FileTreeItem.refToItemIdMap.set(r, this.props.item);
    }
  };

  private readonly handleContextMenu = (ev: React.MouseEvent) => {
    const { item, itemType, onContextMenu } = this.props;
    if (itemType === ItemType.File || itemType === ItemType.Directory) {
      onContextMenu(ev, item as FileOrDir);
    }
  };

  private readonly handleClick = (ev: React.MouseEvent) => {
    const { item, itemType, onClick } = this.props;
    if (itemType === ItemType.File || itemType === ItemType.Directory) {
      onClick(ev, item as FileEntry, itemType);
    }
  };

  private readonly handleDoubleClick = (ev: React.MouseEvent) => {
    const { item, itemType, onDoubleClick } = this.props;
    if (itemType === ItemType.File || itemType === ItemType.Directory) {
      onDoubleClick(ev, item as FileEntry, itemType);
    }
  };

  private readonly handleMouseEnter = (ev: React.MouseEvent) => {
    const { item, itemType, onMouseEnter } = this.props;
    if (itemType === ItemType.File || itemType === ItemType.Directory) {
      onMouseEnter?.(ev, item as FileEntry);
    }
  };

  private readonly handleMouseLeave = (ev: React.MouseEvent) => {
    const { item, itemType, onMouseLeave } = this.props;
    if (itemType === ItemType.File || itemType === ItemType.Directory) {
      onMouseLeave?.(ev, item as FileEntry);
    }
  };

  private readonly handleDragStartItem = (e: React.DragEvent) => {
    const { item, itemType, events } = this.props;
    if (itemType === ItemType.File || itemType === ItemType.Directory) {
      const ref = FileTreeItem.itemIdToRefMap.get(item.id);
      if (ref) {
        events.dispatch(FileTreeXEvent.onTreeEvents, e, 'dragstart', item);
      }
    }
  };
}


// ==================================================
// pgsql/pgAdmin 4/web/pgadmin/static/js/components/PgTree/FileTreeX/index.tsx
// ==================================================
/////////////////////////////////////////////////////////////
//
// pgAdmin 4 - PostgreSQL Tools
//
// Copyright (C) 2013 - 2025, The pgAdmin Development Team
// This software is released under the PostgreSQL Licence
//
//////////////////////////////////////////////////////////////
import * as React from 'react';
import {
  FileTree,
  Directory,
  FileEntry,
  ItemType,
  IFileTreeHandle,
  WatchEvent,
  FileType,
  IItemRendererProps,
  FileOrDir
} from 'react-aspen';
import { Decoration, TargetMatchMode } from 'aspen-decorations';
import { FileTreeItem } from '../FileTreeItem';
import { Notificar, DisposablesComposite } from 'notificar';
import { IFileTreeXHandle, IFileTreeXProps, FileTreeXEvent, IFileTreeXTriggerEvents } from '../types';
import { KeyboardHotkeys } from '../services/keyboardHotkeys';
import { TreeModelX } from '../TreeModelX';
import AutoSizer from 'react-virtualized-auto-sizer';

export class FileTreeX extends React.Component<IFileTreeXProps> {
  private fileTreeHandle: IFileTreeXHandle;
  private readonly activeFileDec: Decoration;
  private readonly pseudoActiveFileDec: Decoration;
  private activeFile: FileOrDir;
  private pseudoActiveFile: FileOrDir;
  private readonly wrapperRef: React.RefObject<HTMLDivElement> = React.createRef();
  private readonly events: Notificar<FileTreeXEvent>;
  private readonly disposables: DisposablesComposite;
  private keyboardHotkeys: KeyboardHotkeys;
  private fileTreeEvent: IFileTreeXTriggerEvents;
  private readonly hoverTimeoutId: React.RefObject<number|null> = React.createRef<number|null>();
  private readonly hoverDispatchId: React.RefObject<number|null> = React.createRef<number|null>();
  constructor(props: IFileTreeXProps) {
    super(props);
    this.events = new Notificar();
    this.disposables = new DisposablesComposite();
    this.activeFileDec = new Decoration('active');
    this.pseudoActiveFileDec = new Decoration('pseudo-active');
  }

  render() {
    const { height, model, disableCache } = this.props;
    const { decorations } = model;

    return <div
      onKeyDown={this.handleKeyDown}
      className='file-tree'
      onBlur={this.handleBlur}
      onClick={this.handleClick}
      onScroll={this.props.onScroll}
      ref={this.wrapperRef}
      style={{
        height: height || 'calc(100vh - 60px)',
        width: '100%',
        display: 'flex',
        flexDirection: 'column',
        flex: 1
      }}
      tabIndex={-1}>
      <AutoSizer onResize={this.onResize}>
        {({ width, height }) => (
          <FileTree
            height={height}
            width={width}
            model={model}
            itemHeight={FileTreeItem.renderHeight}
            onReady={this.handleTreeReady}
            disableCache={disableCache || false}
          >
            {(props: IItemRendererProps) => <FileTreeItem
              item={props.item}
              itemType={props.itemType}
              decorations={decorations.getDecorations(props.item as FileEntry|Directory)}
              onClick={this.handleItemClicked}
              onDoubleClick={this.handleItemDoubleClicked}
              onContextMenu={this.handleItemCtxMenu}
              onMouseEnter={this.onItemMouseEnter}
              onMouseLeave={this.onItemMouseLeave}
              changeDirectoryCount={this.changeDirectoryCount}
              events={this.events}/>}
          </FileTree>
        )}
      </AutoSizer>
    </div>;
  }

  public componentDidMount() {
    for(const child of this.props.model.root.children) {
      this.events.dispatch(FileTreeXEvent.onTreeEvents, window.event, 'loaded', child);
    }
  }

  componentWillUnmount() {
    const { model } = this.props;
    model.decorations.removeDecoration(this.activeFileDec);
    model.decorations.removeDecoration(this.pseudoActiveFileDec);
    this.disposables.dispose();
  }

  private readonly handleTreeEvent = () => {
    this.fileTreeEvent = this.props.onEvent;
  };

  private readonly handleTreeReady = (handle: IFileTreeHandle) => {
    const { onReady, model } = this.props;
    const scrollDiv = this.wrapperRef.current?.querySelector('div')?.querySelector('div');
    if(this.props.onScroll) {
      scrollDiv?.addEventListener('scroll', (ev: any)=>this.props.onScroll?.(ev));
    }

    this.fileTreeHandle = {
      ...handle,
      getModel: () => this.props.model,
      getActiveFile: () => this.activeFile,
      setActiveFile: this.setActiveFile,
      getPseudoActiveFile: () => this.pseudoActiveFile,
      setPseudoActiveFile: this.setPseudoActiveFile,
      toggleDirectory: this.toggleDirectory,
      closeDir: this.closeDir,
      newFile: async (dirOrPath: Directory | string) => this.supervisePrompt(await handle.promptNewFile(dirOrPath as string)),
      newFolder: async (dirOrPath: Directory | string) => this.supervisePrompt(await handle.promptNewDirectory(dirOrPath as string)),
      onBlur: (callback) => this.events.add(FileTreeXEvent.OnBlur, callback),
      hasDirectFocus: () => this.wrapperRef.current === document.activeElement,
      first: this.first,
      parent: this.parent,
      hasParent: this.hasParent,
      isOpen: this.isOpen,
      isClosed: this.isClosed,
      itemData: this.itemData,
      children: this.children,
      getItemFromDOM: this.getItemFromDOM,
      getDOMFromItem: this.getDOMFromItem,
      onTreeEvents: (callback) => this.events.add(FileTreeXEvent.onTreeEvents, callback),
      addIcon: this.addIcon,
      addCssClass: this.addCssClass,
      create: this.create,
      remove: this.remove,
      update: this.update,
      refresh: this.refresh,
      setLabel: this.setLabel,
      unload: this.unload,
      deSelectActiveFile: this.deSelectActiveFile,
      resize: this.resize,
      showLoader: this.showLoader,
      hideLoader: this.hideLoader,
    };

    model.decorations.addDecoration(this.activeFileDec);
    model.decorations.addDecoration(this.pseudoActiveFileDec);

    this.disposables.add(this.fileTreeHandle.onDidChangeModel((prevModel: TreeModelX, newModel: TreeModelX) => {
      this.setActiveFile(null);
      this.setPseudoActiveFile(null);
      prevModel.decorations.removeDecoration(this.activeFileDec);
      prevModel.decorations.removeDecoration(this.pseudoActiveFileDec);
      newModel.decorations.addDecoration(this.activeFileDec);
      newModel.decorations.addDecoration(this.pseudoActiveFileDec);
    }));

    this.disposables.add(this.fileTreeHandle.onBlur(() => {
      this.setPseudoActiveFile(null);
    }));

    this.keyboardHotkeys = new KeyboardHotkeys(this.fileTreeHandle, this.events);

    if (typeof onReady === 'function') {
      onReady(this.fileTreeHandle);
    }
  };

  private readonly onItemMouseEnter = (ev: React.MouseEvent, item: FileEntry | Directory) => {
    clearTimeout(this.hoverDispatchId.current??undefined);
    (this.hoverDispatchId as any).current = setTimeout(()=>{
      clearTimeout(this.hoverTimeoutId.current??undefined);
      this.events.dispatch(FileTreeXEvent.onTreeEvents, ev, 'hovered', item);
    }, 500);
  };

  private readonly onItemMouseLeave = (ev: React.MouseEvent) => {
    clearTimeout(this.hoverTimeoutId.current??undefined);
    clearTimeout(this.hoverDispatchId.current??undefined);
    (this.hoverTimeoutId as any).current = setTimeout(()=>{
      this.events.dispatch(FileTreeXEvent.onTreeEvents, ev, 'hovered', null);
    }, 100);
  };

  private readonly setActiveFile = async (fileOrDirOrPath: FileOrDir | string, ensureVisible, align): Promise<void> => {
    const fileH = typeof fileOrDirOrPath === 'string'
      ? await this.fileTreeHandle.getFileHandle(fileOrDirOrPath)
      : fileOrDirOrPath;

    if (fileH === this.props.model.root) { return; }
    if (this.activeFile !== fileH) {
      if (this.activeFile) {
        this.activeFileDec.removeTarget(this.activeFile);
      }
      if (fileH) {
        this.activeFileDec.addTarget(fileH as Directory, TargetMatchMode.Self);
      }
      this.activeFile = fileH;
      this.events.dispatch(FileTreeXEvent.onTreeEvents, window.event, 'selected', fileH);

      if (fileH && ensureVisible === true) {
        const alignTree = align ?? 'auto';
        await this.fileTreeHandle.ensureVisible(fileH, alignTree);
      }
    }
  };

  private readonly ensureVisible = async (fileOrDirOrPath: FileOrDir | string): Promise<void> => {
    const fileH = typeof fileOrDirOrPath === 'string'
      ? await this.fileTreeHandle.getFileHandle(fileOrDirOrPath)
      : fileOrDirOrPath;

    if (fileH) {
      await this.fileTreeHandle.ensureVisible(fileH);
    }
  };

  private readonly deSelectActiveFile = async (fileOrDirOrPath: FileOrDir | string): Promise<void> => {
    const fileH = typeof fileOrDirOrPath === 'string'
      ? await this.fileTreeHandle.getFileHandle(fileOrDirOrPath)
      : fileOrDirOrPath;

    if (fileH === this.props.model.root) { return; }
    if (this.activeFile === fileH) {
      this.activeFileDec.removeTarget(this.activeFile);
      this.activeFile = null;
    }

    this.events.dispatch(FileTreeXEvent.onTreeEvents, window.event, 'deselected', fileH);
  };

  private readonly setPseudoActiveFile = async (fileOrDirOrPath: FileOrDir | string): Promise<void> => {
    const fileH = typeof fileOrDirOrPath === 'string'
      ? await this.fileTreeHandle.getFileHandle(fileOrDirOrPath)
      : fileOrDirOrPath;

    if (fileH === this.props.model.root) { return; }
    if (this.pseudoActiveFile !== fileH) {
      if (this.pseudoActiveFile) {
        this.pseudoActiveFileDec.removeTarget(this.pseudoActiveFile);
      }
      if (fileH) {
        this.pseudoActiveFileDec.addTarget(fileH as Directory, TargetMatchMode.Self);
      }
      this.pseudoActiveFile = fileH;
    }
    if (fileH) {
      await this.fileTreeHandle.ensureVisible(fileH);
    }
    this.events.dispatch(FileTreeXEvent.onTreeEvents, window.event, 'selected', fileH);
  };

  private readonly create = async (parentDir, itemData): Promise<void> => {
    if (parentDir == undefined || parentDir == null) {
      parentDir = this.props.model.root;
    }
    const {create, model } = this.props;
    const isOpen = parentDir.isExpanded;
    let maybeFile = undefined;

    if (isOpen && (parentDir._children == null || parentDir._children.length == 0)) {
      await this.fileTreeHandle.closeDirectory(parentDir as Directory);
    }
    if (!parentDir.isExpanded && (parentDir._children == null || parentDir._children.length == 0)) {
      await this.fileTreeHandle.openDirectory(parentDir as Directory);
    } else {
      await this.fileTreeHandle.openDirectory(parentDir as Directory);
      maybeFile = await create(parentDir.path, itemData);
      if (maybeFile?.type && maybeFile?.name) {
        model.root.inotify({
          type: WatchEvent.Added,
          directory: parentDir.path,
          file: maybeFile,
        });
      }
    }
    this.changeDirectoryCount(parentDir);
    const newItem = parentDir._children.find((c) => c._metadata.data.id === itemData.id);
    newItem.resolvedPathCache = newItem.parent.path + '/' + newItem._metadata.data.id;
    return newItem;
  };

  private readonly update = async (item, itemData): Promise<void> => {
    item._metadata.data = itemData;
    await this.props.update(item.path, itemData);
    this.events.dispatch(FileTreeXEvent.onTreeEvents, window.event, 'updated', item);
  };

  private readonly refresh = async (item): Promise<void> => {
    const isOpen = item.isExpanded;
    if (item.children && item.children.length > 0) {
      for(const entry of item.children) {
        await this.remove(entry).then(() => {/*intentional*/}, () => {console.warn('Error removing item');});
      }
    }
    if (isOpen) {
      const ref = FileTreeItem.itemIdToRefMap.get(item.id);

      if (ref) {
        this.showLoader(ref);
      }

      await this.fileTreeHandle.closeDirectory(item as Directory);
      await this.fileTreeHandle.openDirectory(item as Directory);
      await this.changeResolvePath(item as Directory);
      this.changeDirectoryCount(item);

      if (ref) {
        this.hideLoader(ref);
      }
    }
  };

  private readonly unload = async (item): Promise<void> => {
    const isOpen = item.isExpanded;
    if (item.children && item.children.length > 0) {
      for(const entry of item.children) {
        await this.remove(entry).then(() => {/*intentional*/}, error => {console.warn(error);});
      }
    }
    if (isOpen) {
      await this.fileTreeHandle.closeDirectory(item as Directory);
      this.changeDirectoryCount(item);
    }
  };

  private readonly remove = async (item): Promise<void> => {
    const {remove, model } = this.props;
    const path = item.path;
    await remove(path, false);
    const dirName = model.root.pathfx.dirname(path);
    const fileName = model.root.pathfx.basename(path);
    const parent = item.parent;
    if (dirName === parent.path) {
      const item_1 = parent._children.find((c) => c._metadata && c._metadata.data.id === fileName);
      if (item_1) {
        parent.unlinkItem(item_1);
        if (parent._children.length == 0) { parent._children = null; }
        this.changeDirectoryCount(parent);
        this.events.dispatch(FileTreeXEvent.onTreeEvents, window.event, 'removed', item);
      }
      else {
        console.warn('Item not found');
      }
    }
  };

  private readonly first = async (fileOrDirOrPath: FileOrDir | string) => {
    const fileH = typeof fileOrDirOrPath === 'string'
      ? await this.fileTreeHandle.getFileHandle(fileOrDirOrPath)
      : fileOrDirOrPath;

    if (fileH === undefined || fileH === null) { return this.props.model.root.children[0]; }

    if (fileH.branchSize > 0) {
      return fileH.children[0];
    }
    return null;
  };

  private readonly parent = async (fileOrDirOrPath: FileOrDir | string) => {
    const fileH = typeof fileOrDirOrPath === 'string'
      ? await this.fileTreeHandle.getFileHandle(fileOrDirOrPath)
      : fileOrDirOrPath;

    if (fileH === FileType.Directory || fileH === FileType.File) {
      return fileH.parent;
    }

    return null;
  };


  private readonly hasParent = async (fileOrDirOrPath: FileOrDir | string) => {
    const fileH = typeof fileOrDirOrPath === 'string'
      ? await this.fileTreeHandle.getFileHandle(fileOrDirOrPath)
      : fileOrDirOrPath;

    if (fileH === FileType.Directory || fileH === FileType.File) {
      return fileH.parent;
    }

    return false;
  };

  private readonly children = async (fileOrDirOrPath: FileOrDir | string) => {
    const fileH = typeof fileOrDirOrPath === 'string'
      ? await this.fileTreeHandle.getFileHandle(fileOrDirOrPath)
      : fileOrDirOrPath;

    if (fileH === FileType.Directory) {
      return fileH.children;
    }

    return null;
  };


  private readonly isOpen = async (fileOrDirOrPath: FileOrDir | string) => {
    const fileH = typeof fileOrDirOrPath === 'string'
      ? await this.fileTreeHandle.getFileHandle(fileOrDirOrPath)
      : fileOrDirOrPath;

    if (fileH === FileType.Directory) {
      return fileH.isExpanded;
    }

    return false;
  };

  private readonly isClosed = async (fileOrDirOrPath: FileOrDir | string) => {
    const fileH = typeof fileOrDirOrPath === 'string'
      ? await this.fileTreeHandle.getFileHandle(fileOrDirOrPath)
      : fileOrDirOrPath;

    if (fileH === FileType.Directory || fileH === FileType.File) {
      return !fileH.isExpanded;
    }

    return false;
  };

  private readonly itemData = async (fileOrDirOrPath: FileOrDir | string) => {
    const fileH = typeof fileOrDirOrPath === 'string'
      ? await this.fileTreeHandle.getFileHandle(fileOrDirOrPath)
      : fileOrDirOrPath;

    if (fileH === FileType.Directory || fileH === FileType.File) {
      return fileH._metadata.data;
    }

    return null;
  };

  private readonly setLabel = async(pathOrDir: string | Directory, label: string): Promise<void> => {
    const dir = typeof pathOrDir === 'string'
      ? await this.fileTreeHandle.getFileHandle(pathOrDir)
      : pathOrDir;

    const ref = FileTreeItem.itemIdToRefMap.get(dir.id);
    if (ref) {
      ref.style.background = 'none';
      const label$ = ref.querySelector('span.file-name') as HTMLDivElement;

      if (label$) {
        if (typeof(label) == 'object' && label.label) {
          label = label.label;
        }
        label$.innerHTML = label;
      }

    }

  };

  private readonly changeDirectoryCount = async(pathOrDir: string | Directory): Promise<void> => {
    const dir = typeof pathOrDir === 'string'
      ? await this.fileTreeHandle.getFileHandle(pathOrDir)
      : pathOrDir;

    if (dir.type === FileType.Directory && dir._metadata.data && dir._metadata.data.is_collection === true) {
      const ref = FileTreeItem.itemIdToRefMap.get(dir.id);
      if (ref) {
        ref.style.background = 'none';
        const label$ = ref.querySelector('span.children-count') as HTMLDivElement;
        if(dir.children && dir.children.length > 0) {
          label$.innerHTML = '(' + dir.children.length + ')';
        } else {
          label$.innerHTML = '';
        }
      }
    }

  };

  private readonly closeDir = async (pathOrDir: string | Directory) => {
    const dir = typeof pathOrDir === 'string'
      ? await this.fileTreeHandle.getFileHandle(pathOrDir)
      : pathOrDir;

    if (dir.type === FileType.Directory) {
      if ((dir as Directory).expanded) {
        this.fileTreeHandle.closeDirectory(dir as Directory);
        this.events.dispatch(FileTreeXEvent.onTreeEvents, window.event, 'closed', dir);

      }
    }
  };

  private readonly toggleDirectory = async (pathOrDir: string | Directory) => {
    const dir = typeof pathOrDir === 'string'
      ? await this.fileTreeHandle.getFileHandle(pathOrDir)
      : pathOrDir;

    if (dir.type === FileType.Directory) {
      if ((dir as Directory).expanded) {
        this.fileTreeHandle.closeDirectory(dir as Directory);
        this.events.dispatch(FileTreeXEvent.onTreeEvents, window.event, 'closed', dir);

      } else {
        const ref = FileTreeItem.itemIdToRefMap.get(dir.id);
        if (ref) {
          this.showLoader(ref);
        }

        await this.events.dispatch(FileTreeXEvent.onTreeEvents, window.event, 'beforeopen', dir);
        await this.fileTreeHandle.openDirectory(dir as Directory);
        await this.changeResolvePath(dir as Directory);

        if (ref) {
          this.hideLoader(ref);
        }

        this.events.dispatch(FileTreeXEvent.onTreeEvents, window.event, 'opened', dir);
      }
    }
  };

  private readonly addIcon = async (pathOrDir: string | Directory, icon) => {
    const dir = typeof pathOrDir === 'string'
      ? await this.fileTreeHandle.getFileHandle(pathOrDir)
      : pathOrDir;

    const ref = FileTreeItem.itemIdToRefMap.get(dir.id);
    if (ref) {
      const label$ = ref.querySelector('.file-label i') as HTMLDivElement;
      label$.className = icon.icon;
    }

  };

  private readonly addCssClass = async (pathOrDir: string | Directory, cssClass) => {
    const dir = typeof pathOrDir === 'string'
      ? await this.fileTreeHandle.getFileHandle(pathOrDir)
      : pathOrDir;

    const ref = FileTreeItem.itemIdToRefMap.get(dir.id);
    if (ref) {
      ref.classList.add(cssClass);
      if (!dir._metadata.data.extraClasses)
        dir._metadata.data.extraClasses = [];

      dir._metadata.data.extraClasses.push(cssClass);
    }

  };

  private readonly showLoader = (ref: HTMLDivElement) => {
    // get label ref and add loading class
    ref.style.background = 'none';
    const label$ = ref.querySelector('i.directory-toggle') as HTMLDivElement;
    if (label$)  label$.classList.add('loading');
  };

  private readonly hideLoader = (ref: HTMLDivElement) => {
    // remove loading class.
    ref.style.background = 'none';
    const label$ = ref.querySelector('i.directory-toggle') as HTMLDivElement;
    if (label$) label$.classList.remove('loading');
  };

  private readonly handleBlur = () => {
    this.events.dispatch(FileTreeXEvent.OnBlur);
  };

  private readonly handleItemClicked = async (ev: React.MouseEvent, item: FileOrDir, type: ItemType) => {
    if (type === ItemType.Directory && ev.target.className.includes('directory-toggle')) {
      await this.toggleDirectory(item as Directory);
    }
    await this.setActiveFile(item as FileEntry);

  };

  private readonly handleItemDoubleClicked = async (ev: React.MouseEvent, item: FileOrDir) => {
    await this.toggleDirectory(item as Directory);
    await this.setActiveFile(item as FileEntry);

  };

  private readonly getItemFromDOM = (clientReact) => {
    return FileTreeItem.refToItemIdMap.get(clientReact);
  };

  private readonly getDOMFromItem = (item: FileOrDir) => {
    return FileTreeItem.itemIdToRefMap.get(item.id);
  };

  private readonly handleClick = (ev: React.MouseEvent) => {
    // clicked in "blank space"
    if (ev.currentTarget === ev.target) {
      this.setPseudoActiveFile(null);
    }
  };

  private readonly handleItemCtxMenu = (ev: React.MouseEvent, item: FileOrDir) => {
    return this.props.onContextMenu?.(ev, item);
  };

  private readonly handleKeyDown = (ev: React.KeyboardEvent) => {
    return this.keyboardHotkeys.handleKeyDown(ev);
  };

  private readonly onResize = () => {
    if (this.wrapperRef.current != null) {
      this.resize();
    }
  };

  private readonly resize = (scrollX, scrollY) => {
    const scrollXPos = scrollX || 0;
    const scrollYPos = scrollY || this.props.model.state.scrollOffset;
    const div = this.wrapperRef.current.querySelector('div').querySelector('div') as HTMLDivElement;
    if (div) {
      div.scroll(scrollXPos, scrollYPos);
    }

  };

  private readonly changeResolvePath = async (item: FileOrDir): Promise<void> => {
    // Change the path as per pgAdmin requirement: Item Id wise
    if (item.type === FileType.File) {
      item.resolvedPathCache = item.parent.path + '/' + item._metadata.data.id;
    }
    if (item.type === FileType.Directory && item.children && item.children.length > 0) {
      for(const entry of item.children) {
        entry.resolvedPathCache = entry.parent.path + '/' + entry._metadata.data.id;
      }
    }
  };
}

export { IFileTreeXHandle, IFileTreeXProps };


// ==================================================
// pgsql/pgAdmin 4/web/pgadmin/static/js/components/PgTree/index.ts
// ==================================================
export { FileTreeX } from './FileTreeX';
export { TreeModelX } from './TreeModelX';
export { IFileTreeXHandle, IFileTreeXProps, FileTreeXEvent, IFileTreeXTriggerEvents } from './types';


// ==================================================
// pgsql/pgAdmin 4/web/pgadmin/static/js/components/PgTree/services/keyboardHotkeys.ts
// ==================================================
import { Notificar } from 'notificar';
import { FileEntry, Directory, FileType } from 'react-aspen';
import { FileTreeXEvent, IFileTreeXHandle } from '../types';

export class KeyboardHotkeys {
  private readonly hotkeyActions = {
    'ArrowUp': () => this.jumpToPrevItem(),
    'ArrowDown': () => this.jumpToNextItem(),
    'ArrowRight': () => this.expandOrJumpToFirstChild(),
    'ArrowLeft': () => this.collapseOrJumpToFirstParent(),
    'Space': () => this.toggleDirectoryExpand(),
    'Enter': () => this.selectFileOrToggleDirState(),
    'Home': () => this.jumpToFirstItem(),
    'End': () => this.jumpToLastItem(),
    'Escape': () => this.resetSteppedOrSelectedItem(),
    'Ctrl+KeyC': () => this.copyEntry(),
  };

  constructor(private readonly fileTreeX: IFileTreeXHandle, private readonly events: Notificar<FileTreeXEvent>) { }

  public handleKeyDown = (ev: React.KeyboardEvent) => {
    if (!this.fileTreeX.hasDirectFocus()) {
      return false;
    }
    let { code } = ev.nativeEvent;

    if((ev.nativeEvent.ctrlKey || ev.nativeEvent.metaKey) && ev.nativeEvent.key !== 'Control') {
      code = `Ctrl+${code}`;
    }
    if (code in this.hotkeyActions) {
      ev.preventDefault();
      this.hotkeyActions[code]();
      return true;
    }
  };

  private readonly jumpToFirstItem = (): void => {
    const { root } = this.fileTreeX.getModel();
    this.fileTreeX.setActiveFile(root.getFileEntryAtIndex(0), true);
  };

  private readonly jumpToLastItem = (): void => {
    const { root } = this.fileTreeX.getModel();
    this.fileTreeX.setActiveFile(root.getFileEntryAtIndex(root.branchSize - 1), true);
  };

  private readonly jumpToNextItem = (): void => {
    const { root } = this.fileTreeX.getModel();
    let currentPseudoActive = this.fileTreeX.getActiveFile();
    if (!currentPseudoActive) {
      const selectedFile = this.fileTreeX.getActiveFile();
      if (selectedFile) {
        currentPseudoActive = selectedFile;
      } else {
        return this.jumpToFirstItem();
      }
    }
    const idx = root.getIndexAtFileEntry(currentPseudoActive);
    if (idx + 1 > root.branchSize) {
      return this.jumpToFirstItem();
    } else if (idx > -1) {
      this.fileTreeX.setActiveFile(root.getFileEntryAtIndex(idx + 1), true);
    }
  };

  private readonly jumpToPrevItem = (): void => {
    const { root } = this.fileTreeX.getModel();
    let currentPseudoActive = this.fileTreeX.getActiveFile();
    if (!currentPseudoActive) {
      const selectedFile = this.fileTreeX.getActiveFile();
      if (selectedFile) {
        currentPseudoActive = selectedFile;
      } else {
        return this.jumpToLastItem();
      }
    }
    const idx = root.getIndexAtFileEntry(currentPseudoActive);
    if (idx - 1 < 0) {
      return this.jumpToLastItem();
    } else if (idx > -1) {
      this.fileTreeX.setActiveFile(root.getFileEntryAtIndex(idx - 1), true);
    }
  };

  private expandOrJumpToFirstChild(): void {
    const currentPseudoActive = this.fileTreeX.getActiveFile();
    if (currentPseudoActive && currentPseudoActive.type === FileType.Directory) {
      if ((currentPseudoActive as Directory).expanded) {
        return this.jumpToNextItem();
      } else {
        this.fileTreeX.openDirectory(currentPseudoActive as Directory);
      }
    }
  }

  private collapseOrJumpToFirstParent(): void {
    const currentPseudoActive = this.fileTreeX.getActiveFile();
    if (currentPseudoActive) {
      if (currentPseudoActive.type === FileType.Directory && (currentPseudoActive as Directory).expanded) {
        return this.fileTreeX.closeDirectory(currentPseudoActive as Directory);
      }
      this.fileTreeX.setActiveFile(currentPseudoActive.parent, true);
    }
  }

  private readonly selectFileOrToggleDirState = (): void => {
    const currentPseudoActive = this.fileTreeX.getActiveFile();
    if (!currentPseudoActive) { return; }
    if (currentPseudoActive.type === FileType.Directory) {
      this.fileTreeX.toggleDirectory(currentPseudoActive as Directory);
    } else if (currentPseudoActive.type === FileType.File) {
      this.fileTreeX.setActiveFile(currentPseudoActive as FileEntry, true);
    }
  };

  private readonly toggleDirectoryExpand = (): void => {
    const currentPseudoActive = this.fileTreeX.getActiveFile();
    if (!currentPseudoActive) { return; }
    if (currentPseudoActive.type === FileType.Directory) {
      this.fileTreeX.toggleDirectory(currentPseudoActive as Directory);
    }
  };

  private readonly resetSteppedOrSelectedItem = (): void => {
    const currentPseudoActive = this.fileTreeX.getActiveFile();
    if (currentPseudoActive) {
      return this.resetSteppedItem();
    }
    this.fileTreeX.setActiveFile(null);
  };

  private readonly resetSteppedItem = () => {
    this.fileTreeX.setActiveFile(null);
  };

  private readonly copyEntry = () => {
    const currentPseudoActive = this.fileTreeX.getActiveFile();
    this.events.dispatch(FileTreeXEvent.onTreeEvents, null, 'copied', currentPseudoActive);
  };
}


// ==================================================
// pgsql/pgAdmin 4/web/pgadmin/static/js/components/PgTree/TreeModelX/index.ts
// ==================================================
import { TreeModel, IBasicFileSystemHost, Root } from 'react-aspen';
import { DecorationsManager } from 'aspen-decorations';

export class TreeModelX extends TreeModel {
  public readonly decorations: DecorationsManager;
  constructor(host: IBasicFileSystemHost, mountPath: string) {
    super(host, mountPath);
    this.decorations = new DecorationsManager(this.root as Root);
  }
}


// ==================================================
// pgsql/pgAdmin 4/web/pgadmin/static/js/components/PgTree/types.ts
// ==================================================
import { IFileTreeHandle, FileEntry, Directory, FileType, IFileEntryItem, IItemRenderer, FileOrDir } from 'react-aspen';
import { IDisposable } from 'notificar';
import { TreeModelX } from './TreeModelX';
import React from 'react';


export interface IFileTreeXTriggerEvents {
    onEvent(event: string, path: string): boolean | Promise<boolean>
}

export interface IItemRendererX extends IItemRenderer {
    getBoundingClientRectForItem(item: FileEntry | Directory): DOMRect
}

// Here imagination is your limit! IFileTreeHandle has core low-level features you can build on top of as your application needs
export interface IFileTreeXHandle extends IFileTreeHandle {
    getActiveFile(): FileEntry | Directory
    setActiveFile(path: string)
    setActiveFile(file: FileEntry)
    setActiveFile(dir: Directory)

    getPseudoActiveFile(): FileEntry | Directory
    setPseudoActiveFile(path: string)
    setPseudoActiveFile(file: FileEntry)
    setPseudoActiveFile(dir: Directory)

    rename(path: string)
    rename(file: FileEntry)
    rename(dir: Directory)

    newFile(dirpath: string)
    newFile(dir: Directory)
    newFolder(dirpath: string)
    newFolder(dir: Directory)
    toggleDirectory(path: string)
    toggleDirectory(dir: Directory)

    first(file: FileEntry): FileEntry | Directory
    first(dir: Directory): FileEntry | Directory
    first(): FileEntry | Directory

    parent(file: FileEntry): Directory
    parent(dir: Directory): Directory

    hasParent(file: FileEntry): boolean
    hasParent(dir: Directory): boolean

    isOpen(file: FileEntry): boolean
    isOpen(dir: Directory): boolean

    isClosed(file: FileEntry): boolean
    isClosed(dir: Directory): boolean

    itemData(file: FileEntry): array
    itemData(dir: Directory): array

    children(file: FileEntry): array
    children(dir: Directory): array

    getModel(): TreeModelX
    /**
     * If document.activeElement === filetree wrapper element
     */
    hasDirectFocus(): boolean

    // events
    onBlur(callback: () => void): IDisposable
}

export interface IFileTreeXProps {
    height: number
    width: number
    model: TreeModelX

    /**
     * Same as unix's `mv` command as in `mv [SOURCE] [DEST]`
     */
    mv: (oldPath: string, newPath: string) => boolean | Promise<boolean>

    /**
     * Amalgam of unix's `mkdir` and `touch` command
     */
    create: (path: string, type: FileType) => IFileEntryItem | Promise<IFileEntryItem>
    onReady?: (handle: IFileTreeXHandle) => void
    onEvent?: (event: IFileTreeXTriggerEvents) => void
    onContextMenu?: (ev: React.MouseEvent, item?: FileOrDir) => void
    onScroll?: (ev: React.UIEvent<HTMLDivElement>) => void
}

export enum FileTreeXEvent {
    OnBlur,
    onTreeEvents,
}


// ==================================================
// pgsql/pgAdmin 4/web/pgadmin/static/js/tree/preference_nodes.ts
// ==================================================
/////////////////////////////////////////////////////////////
//
// pgAdmin 4 - PostgreSQL Tools
//
// Copyright (C) 2013 - 2025, The pgAdmin Development Team
// This software is released under the PostgreSQL Licence
//
//////////////////////////////////////////////////////////////

import * as BrowserFS from 'browserfs';
import pgAdmin from 'sources/pgadmin';
import _ from 'lodash';
import { FileType } from 'react-aspen';
import { findInTree } from './tree';

export class ManagePreferenceTreeNodes {
  constructor(data) {
    this.tree = {};
    this.tempTree = new TreeNode(undefined, {});
    this.treeData = data || [];
  }

  public init = (_root: string) => new Promise((res) => {
    const node = { parent: null, children: [], data: null };
    this.tree = {};
    this.tree[_root] = { name: 'root', type: FileType.Directory, metadata: node };
    res();
  });

  public updateNode = (_path, _data) => new Promise((res) => {
    const item = this.findNode(_path);
    if (item) {
      item.name = _data.label;
      item.metadata.data = _data;
    }
    res(true);
  });

  public removeNode = async (_path) => {
    const item = this.findNode(_path);

    if (item?.parentNode) {
      item.children = [];
      item.parentNode.children.splice(item.parentNode.children.indexOf(item), 1);
    }
    return true;
  };

  findNode(path) {
    if (path === null || path === undefined || path.length === 0 || path == '/preferences') {
      return this.tempTree;
    }

    return findInTree(this.tempTree, path);
  }

  public addNode = (_parent: string, _path: string, _data: []) => new Promise((res) => {
    _data.type = _data.inode ? FileType.Directory : FileType.File;
    _data._label = _data.label;
    _data.label = _.escape(_data.label);

    _data.is_collection = isCollectionNode(_data._type);
    const nodeData = { parent: _parent, children: _data?.children ? _data.children : [], data: _data };

    const tmpParentNode = this.findNode(_parent);
    const treeNode = new TreeNode(_data.id, _data, {}, tmpParentNode, nodeData, _data.type);

    if (tmpParentNode !== null && tmpParentNode !== undefined) tmpParentNode.children.push(treeNode);

    res(treeNode);
  });

  public readNode = (_path: string) => new Promise<string[]>((res, rej) => {
    const temp_tree_path = _path,
      node = this.findNode(_path);
    node.children = [];

    if (node && node.children.length > 0) {
      if (!node.type === FileType.File) {
        rej(new Error('It\'s a leaf node'));
      }
      else if (node?.children.length != 0) {
        res(node.children);
      }
    }

    const self = this;

    async function loadData() {
      const Path = BrowserFS.BFSRequire('path');
      const fill = async (tree) => {
        for (const idx in tree) {
          const _node = tree[idx];
          const _pathl = Path.join(_path, _node.id);
          await self.addNode(temp_tree_path, _pathl, _node);
        }
      };

      if (node && !_.isUndefined(node.id)) {
        const _data = self.treeData.find((el) => el.id == node.id);
        const subNodes = [];

        _data.childrenNodes.forEach(element => {
          subNodes.push(element);
        });

        await fill(subNodes);
      } else {
        await fill(self.treeData);
      }

      self.returnChildrens(node, res);
    }
    loadData();
  });

  public returnChildrens = (node: any, res: any)  =>{
    if (node?.children.length > 0) return res(node.children);
    else return res(null);
  };
}



export class TreeNode {
  constructor(id, data, domNode, parent, metadata, type) {
    this.id = id;
    this.data = data;
    this.setParent(parent);
    this.children = [];
    this.domNode = domNode;
    this.metadata = metadata;
    this.name = metadata ? metadata.data.label : '';
    this.type = type || undefined;
  }

  hasParent() {
    return this.parentNode !== null && this.parentNode !== undefined;
  }

  parent() {
    return this.parentNode;
  }

  setParent(parent) {
    this.parentNode = parent;
    this.path = this.id;
    if (this.id)
      if (parent !== null && parent !== undefined && parent.path !== undefined) {
        this.path = parent.path + '/' + this.id;
      } else {
        this.path = '/preferences/' + this.id;
      }
  }

  getData() {
    if (this.data === undefined) {
      return undefined;
    } else if (this.data === null) {
      return null;
    }
    return {...this.data};
  }

  getHtmlIdentifier() {
    return this.domNode;
  }

  /*
   * Find the ancestor with matches this condition
   */
  ancestorNode(condition) {
    let node;

    while (this.hasParent()) {
      node = this.parent();
      if (condition(node)) {
        return node;
      }
    }

    return null;
  }

  /**
   * Given a condition returns true if the current node
   * or any of the parent nodes condition result is true
   */
  anyFamilyMember(condition) {
    if (condition(this)) {
      return true;
    }

    return this.ancestorNode(condition) !== null;
  }
  anyParent(condition) {
    return this.ancestorNode(condition) !== null;
  }

  reload(tree) {
    return new Promise((resolve) => {
      this.unload(tree)
        .then(() => {
          tree.setInode(this.domNode);
          tree.deselect(this.domNode);
          setTimeout(() => {
            tree.selectNode(this.domNode);
          }, 0);
          resolve();
        });
    });
  }

  unload(tree) {
    return new Promise((resolve, reject) => {
      this.children = [];
      tree.unload(this.domNode)
        .then(
          () => {
            resolve(true);
          },
          () => {
            reject(new Error());
          });
    });
  }


  open(tree, suppressNoDom) {
    return new Promise((resolve, reject) => {
      if (suppressNoDom && (this.domNode == null || typeof (this.domNode) === 'undefined')) {
        resolve(true);
      } else if (tree.isOpen(this.domNode)) {
        resolve(true);
      } else {
        tree.open(this.domNode).then(() => resolve(true), () => reject(new Error(true)));
      }
    });
  }

}

export function isCollectionNode(node) {
  if (pgAdmin.Browser.Nodes && node in pgAdmin.Browser.Nodes) {
    if (pgAdmin.Browser.Nodes[node].is_collection !== undefined) return pgAdmin.Browser.Nodes[node].is_collection;
    else return false;
  }
  return false;
}


// ==================================================
// pgsql/pgAdmin 4/web/pgadmin/static/js/tree/tree_nodes.ts
// ==================================================
/////////////////////////////////////////////////////////////
//
// pgAdmin 4 - PostgreSQL Tools
//
// Copyright (C) 2013 - 2025, The pgAdmin Development Team
// This software is released under the PostgreSQL Licence
//
//////////////////////////////////////////////////////////////

import * as BrowserFS from 'browserfs';
import url_for from 'sources/url_for';
import pgAdmin from 'sources/pgadmin';
import _ from 'lodash';
import { FileType } from 'react-aspen';
import { findInTree } from './tree';
import gettext from 'sources/gettext';

import { unix } from 'path-fx';
import getApiInstance, { parseApiError } from '../api_instance';

export class ManageTreeNodes {
  constructor() {
    this.tree = {};
    this.tempTree = new TreeNode(undefined, {});
  }

  public init = (_root: string) => new Promise((res) => {
    const node = {parent: null, children: [], data: null};
    this.tree = {};
    this.tree[_root] = {name: 'root', type: FileType.Directory, metadata: node};
    res();
  });

  public updateNode = (_path, _data)  => new Promise((res) => {
    const item = this.findNode(_path);
    if (item) {
      item.data = {...item.data, ..._data};
      item.name = _data.label;
      item.metadata.data = _data;
    }
    res(true);
  });

  public removeNode = async (_path)  => {
    const item = this.findNode(_path);

    if (item?.parentNode) {
      item.children = [];
      item.parentNode.children.splice(item.parentNode.children.indexOf(item), 1);
    }
    return true;
  };

  findNode(path) {
    if (path === null || path === undefined || path.length === 0 || path == '/browser') {
      return this.tempTree;
    }
    return findInTree(this.tempTree, path);
  }

  public addNode = (_parent: string, _path: string, _data: []) => new Promise((res) => {
    _data.type = _data.inode ? FileType.Directory : FileType.File;
    _data._label = _data.label;
    _data.label = _.escape(_data.label);

    _data.is_collection = isCollectionNode(_data._type);
    const nodeData = {parent: _parent, children: [], data: _data};

    const tmpParentNode = this.findNode(_parent);
    const treeNode = new TreeNode(_data.id, _data, {}, tmpParentNode, nodeData, _data.type);

    if (tmpParentNode !== null && tmpParentNode !== undefined) tmpParentNode.children.push(treeNode);

    res(treeNode);
  });

  public readNode = async (_path: string) => {
    let temp_tree_path = _path;
    const node = this.findNode(_path);
    const base_url = pgAdmin.Browser.URL;
    const api = getApiInstance();

    if (node && node.children.length > 0) {
      if (node.type !== FileType.File) {
        console.error(node, 'It\'s a leaf node');
        return [];
      }
      else if (node.children.length != 0) {
        return node.children;
      }
    }

    const self = this;
    let url = '';
    if (_path == '/browser') {
      url = url_for('browser.nodes');
    } else {
      const _parent_url = self.generate_url(_path);
      if (node.metadata.data._pid == null ) {
        url = node.metadata.data._type + '/children/' + node.metadata.data._id;
      }
      else if (node.metadata.data._type.includes('coll-')) {
        const _type = node.metadata.data._type.replace('coll-', '');
        url = _type + '/nodes/' + _parent_url + '/';
      }
      else {
        url = node.metadata.data._type + '/children/' + _parent_url + '/' + node.metadata.data._id;
      }

      url = base_url + url;

      temp_tree_path = node.path;

      if (node.metadata.data._type == 'server' && !node.metadata.data.connected) {
        url = null;
      }
    }

    let treeData = [];
    if (url) {
      try {
        const res = await api.get(url);
        treeData = res.data.data;
      } catch (error) {
        /* react-aspen does not handle reject case */
        console.error(error);
        pgAdmin.Browser.notifier.error(parseApiError(error)||'Node Load Error...');
        return [];
      }
    }

    const Path = BrowserFS.BFSRequire('path');
    for (const idx in treeData) {
      const _node: any = treeData[idx];
      const _pathl = Path.join(_path, _node.id);
      await self.addNode(temp_tree_path, _pathl, _node);
    }
    if (node.children.length > 0) return node.children;
    else {
      if (node.data && node.data._type == 'server' && node.data.connected) {
        pgAdmin.Browser.notifier.info(gettext('Server children are not available.'
        +' Please check these nodes are not hidden through the preferences setting `Browser > Nodes`.'), null);
      }
      return [];
    }
  };

  public generate_url = (path: string) => {
    let _path = path;
    const _parent_path = [];
    let _partitions = [];
    while(_path != '/') {
      const node = this.findNode(_path);
      const _parent = unix.dirname(_path);
      if(node.parentNode && node.parentNode.path == _parent) {
        if (node.parentNode.metadata.data !== null && !node.parentNode.metadata.data._type.includes('coll-'))
          if(node.parentNode.metadata.data._type.includes('partition')) {
            _partitions.push(node.parentNode.metadata.data._id);
          } else {
            _parent_path.push(node.parentNode.metadata.data._id);
          }
      }
      _path = _parent;
    }
    _partitions = _partitions.reverse();
    // Replace the table with the last partition as in reality partition node is not child of the table
    if(_partitions.length > 0) _parent_path[0]  = _partitions[_partitions.length-1];

    _parent_path.reverse();
    return _parent_path.join('/');
  };
}



export class TreeNode {
  constructor(id, data, domNode, parent, metadata, type) {
    this.id = id;
    this.data = data;
    this.setParent(parent);
    this.children = [];
    this.domNode = domNode;
    this.metadata = metadata;
    this.name = metadata ? metadata.data.label : '';
    this.type = type || undefined;
  }

  hasParent() {
    return this.parentNode !== null && this.parentNode !== undefined;
  }

  parent() {
    return this.parentNode;
  }

  setParent(parent) {
    this.parentNode = parent;
    this.path = this.id;
    if (this.id)
      if (parent !== null && parent !== undefined && parent.path !== undefined) {
        this.path = parent.path + '/' + this.id;
      } else {
        this.path =  '/browser/' + this.id;
      }
  }

  getData() {
    if (this.data === undefined) {
      return undefined;
    } else if (this.data === null) {
      return null;
    }
    return {...this.data};
  }

  getHtmlIdentifier() {
    return this.domNode;
  }

  /*
   * Find the ancestor with matches this condition
   */
  ancestorNode(condition) {
    let node = this;

    while (node.hasParent()) {
      node = node.parent();
      if (condition(node)) {
        return node;
      }
    }

    return null;
  }

  /**
   * Given a condition returns true if the current node
   * or any of the parent nodes condition result is true
   */
  anyFamilyMember(condition) {
    if(condition(this)) {
      return true;
    }

    return this.ancestorNode(condition) !== null;
  }
  anyParent(condition) {
    return this.ancestorNode(condition) !== null;
  }

  reload(tree) {
    return new Promise((resolve)=>{
      this.unload(tree)
        .then(()=>{
          tree.setInode(this.domNode);
          tree.deselect(this.domNode);
          setTimeout(() => {
            tree.selectNode(this.domNode);
          }, 0);
          resolve();
        });
    });
  }

  unload(tree) {
    return new Promise((resolve, reject)=>{
      this.children = [];
      tree.unload(this.domNode)
        .then(
          ()=>{
            resolve(true);
          },
          ()=>{
            reject(new Error());
          });
    });
  }


  open(tree, suppressNoDom) {
    return new Promise((resolve, reject)=>{
      if(suppressNoDom && (this.domNode == null || typeof(this.domNode) === 'undefined')) {
        resolve(true);
      } else if(tree.isOpen(this.domNode)) {
        resolve(true);
      } else {
        tree.open(this.domNode).then(() => resolve(true), () => reject(new Error(true)));
      }
    });
  }

}

export function isCollectionNode(node) {
  if (pgAdmin.Browser.Nodes && node in pgAdmin.Browser.Nodes) {
    if (pgAdmin.Browser.Nodes[node].is_collection !== undefined) return pgAdmin.Browser.Nodes[node].is_collection;
    else return false;
  }
  return false;
}


// ==================================================
// src/app/admin/calificaciones/page.tsx
// ==================================================
'use client'

import { useState, useEffect } from 'react'
import {
  Plus,
  Search,
  Edit,
  Trash2,
  Shield,
  X,
  Save,
  Loader2
} from 'lucide-react'
import { toast } from 'react-hot-toast'

interface Calificacion {
  id: number
  slug: string
  name: string
  abbreviation?: string | null
  description?: string | null
  createdAt: string
  _count?: {
    movies: number
  }
}

export default function AdminCalificacionesPage() {
  const [calificaciones, setCalificaciones] = useState<Calificacion[]>([])
  const [loading, setLoading] = useState(true)
  const [searchTerm, setSearchTerm] = useState('')
  const [showModal, setShowModal] = useState(false)
  const [editingCalif, setEditingCalif] = useState<Calificacion | null>(null)
  const [deletingCalifId, setDeletingCalifId] = useState<number | null>(null)
  const [isSubmitting, setIsSubmitting] = useState(false)

  // Estado del formulario
  const [formData, setFormData] = useState({
    name: '',
    abbreviation: '',
    description: ''
  })
  const [formErrors, setFormErrors] = useState({
    name: '',
    abbreviation: ''
  })

  // Cargar calificaciones
  const fetchCalif = async () => {
    try {
      setLoading(true)
      const response = await fetch('/api/calificaciones')
      
      if (!response.ok) {
        throw new Error('Error al cargar las calificaciones')
      }
      
      const data = await response.json()
      setCalificaciones(Array.isArray(data) ? data : [])
    } catch (error) {
      toast.error('Error al cargar las calificaciones')
      setCalificaciones([])
    } finally {
      setLoading(false)
    }
  }

  useEffect(() => {
    fetchCalif()
  }, [])

  // Filtrar calificaciones
  const filteredCalif = calificaciones.filter(calificacion =>
    calificacion.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
    (calificacion.abbreviation && calificacion.abbreviation.toLowerCase().includes(searchTerm.toLowerCase())) ||
    (calificacion.description && calificacion.description.toLowerCase().includes(searchTerm.toLowerCase()))
  )

  // Validar formulario
  const validateForm = () => {
    const errors = { name: '', abbreviation: '' }
    
    if (!formData.name.trim()) {
      errors.name = 'El nombre es requerido'
    } else if (formData.name.length > 100) {
      errors.name = 'El nombre no puede exceder 100 caracteres'
    }
    
    if (formData.abbreviation && formData.abbreviation.length > 10) {
      errors.abbreviation = 'La abreviatura no puede exceder 10 caracteres'
    }
    
    setFormErrors(errors)
    return !errors.name && !errors.abbreviation
  }

  // Crear o actualizar calificación
  const handleSubmit = async () => {
    if (!validateForm()) return

    try {
      setIsSubmitting(true)
      const url = editingCalif
        ? `/api/calificaciones/${editingCalif.id}`
        : '/api/calificaciones'
      
      const method = editingCalif ? 'PUT' : 'POST'
      
      const response = await fetch(url, {
        method,
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          name: formData.name.trim(),
          abbreviation: formData.abbreviation.trim() || undefined,
          description: formData.description.trim() || undefined
        })
      })

      if (!response.ok) {
        let errorMessage = 'Error al guardar la calificación'
        try {
          const error = await response.json()
          errorMessage = error.error || error.message || errorMessage
        } catch (e) {}
        throw new Error(errorMessage)
      }

      toast.success(editingCalif ? 'Calificación actualizada' : 'Calificación creada')
      setShowModal(false)
      resetForm()
      fetchCalif()
    } catch (error) {
      toast.error(error instanceof Error ? error.message : 'Error al guardar')
    } finally {
      setIsSubmitting(false)
    }
  }

  // Resetear formulario
  const resetForm = () => {
    setFormData({ name: '', abbreviation: '', description: '' })
    setFormErrors({ name: '', abbreviation: '' })
    setEditingCalif(null)
  }

  // Editar calificación
  const handleEdit = (calificacion: Calificacion) => {
    setEditingCalif(calificacion)
    setFormData({
      name: calificacion.name,
      abbreviation: calificacion.abbreviation || '',
      description: calificacion.description || ''
    })
    setShowModal(true)
  }

  // Eliminar calificación
  const handleDelete = async (id: number) => {
    if (!confirm('¿Estás seguro de eliminar esta calificación? Esta acción no se puede deshacer.')) return

    try {
      setDeletingCalifId(id)
      const response = await fetch(`/api/calificaciones/${id}`, {
        method: 'DELETE'
      })

      if (!response.ok) {
        throw new Error('Error al eliminar')
      }

      toast.success('Calificación eliminada')
      fetchCalif()
    } catch (error) {
      toast.error('Error al eliminar la calificación')
    } finally {
      setDeletingCalifId(null)
    }
  }

  // Abrir modal para nueva calificación
  const handleNewCalif = () => {
    resetForm()
    setShowModal(true)
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white shadow">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="py-6">
            <h1 className="text-3xl font-bold text-gray-900">
              Administración de Calificaciones
            </h1>
          </div>
        </div>
      </div>

      {/* Contenido principal */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Filtros y acciones */}
        <div className="bg-white rounded-lg shadow p-6 mb-6">
          <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
            {/* Búsqueda */}
            <div className="relative flex-1 max-w-md">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
              <input
                type="text"
                placeholder="Buscar calificaciones..."
                className="pl-10 pr-4 py-2 w-full border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
              />
            </div>

            {/* Botón nueva calificación */}
            <button
              onClick={handleNewCalif}
              className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors flex items-center gap-2"
            >
              <Plus className="w-5 h-5" />
              Nueva Calificación
            </button>
          </div>
        </div>

        {/* Lista de calificaciones */}
        <div className="bg-white rounded-lg shadow overflow-hidden">
          {loading ? (
            <div className="flex items-center justify-center h-64">
              <Loader2 className="w-8 h-8 text-blue-600 animate-spin" />
            </div>
          ) : filteredCalif.length === 0 ? (
            <div className="text-center py-12">
              <Shield className="w-12 h-12 text-gray-400 mx-auto mb-4" />
              <p className="text-gray-500">No se encontraron calificaciones</p>
            </div>
          ) : (
            <div className="overflow-x-auto">
              <table className="min-w-full divide-y divide-gray-200">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Calificación
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Abreviatura
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Descripción
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Slug
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Películas
                    </th>
                    <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Acciones
                    </th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {filteredCalif.map((calificacion) => (
                    <tr key={calificacion.id} className="hover:bg-gray-50">
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm font-medium text-gray-900">
                          {calificacion.name}
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm font-medium text-gray-700">
                          {calificacion.abbreviation ? (
                            <span className="bg-blue-100 text-blue-800 px-2 py-1 rounded-md">
                              {calificacion.abbreviation}
                            </span>
                          ) : (
                            <span className="text-gray-400">-</span>
                          )}
                        </div>
                      </td>
                      <td className="px-6 py-4">
                        <div className="text-sm text-gray-500 max-w-xs truncate">
                          {calificacion.description || '-'}
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm text-gray-400">
                          {calificacion.slug}
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        {calificacion._count?.movies || 0}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                        <div className="flex items-center justify-end gap-2">
                          <button
                            onClick={() => handleEdit(calificacion)}
                            className="text-blue-600 hover:text-blue-900 transition-colors"
                            title="Editar"
                          >
                            <Edit className="w-4 h-4" />
                          </button>
                          <button
                            onClick={() => handleDelete(calificacion.id)}
                            disabled={deletingCalifId === calificacion.id}
                            className="text-red-600 hover:text-red-900 transition-colors disabled:opacity-50"
                            title="Eliminar"
                          >
                            {deletingCalifId === calificacion.id ? (
                              <Loader2 className="w-4 h-4 animate-spin" />
                            ) : (
                              <Trash2 className="w-4 h-4" />
                            )}
                          </button>
                        </div>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          )}
        </div>
      </div>

      {/* Modal de creación/edición */}
      {showModal && (
        <div className="fixed inset-0 bg-gray-500 bg-opacity-75 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg max-w-md w-full">
            <div className="bg-gray-50 px-6 py-4 border-b border-gray-200">
              <div className="flex items-center justify-between">
                <h2 className="text-xl font-semibold text-gray-900">
                  {editingCalif ? 'Editar Calificación' : 'Nueva Calificación'}
                </h2>
                <button
                  onClick={() => {
                    setShowModal(false)
                    resetForm()
                  }}
                  className="text-gray-400 hover:text-gray-500"
                >
                  <X className="w-6 h-6" />
                </button>
              </div>
            </div>

            <div className="p-6">
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Nombre de la Calificación *
                  </label>
                  <input
                    type="text"
                    value={formData.name}
                    onChange={(e) => {
                      setFormData({ ...formData, name: e.target.value })
                      if (formErrors.name) {
                        setFormErrors({ ...formErrors, name: '' })
                      }
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                    placeholder="Ej: Apta para todo público"
                  />
                  {formErrors.name && (
                    <p className="mt-1 text-sm text-red-600">{formErrors.name}</p>
                  )}
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Abreviatura
                  </label>
                  <input
                    type="text"
                    value={formData.abbreviation}
                    onChange={(e) => {
                      setFormData({ ...formData, abbreviation: e.target.value })
                      if (formErrors.abbreviation) {
                        setFormErrors({ ...formErrors, abbreviation: '' })
                      }
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                    placeholder="Ej: ATP"
                    maxLength={10}
                  />
                  {formErrors.abbreviation && (
                    <p className="mt-1 text-sm text-red-600">{formErrors.abbreviation}</p>
                  )}
                  <p className="mt-1 text-xs text-gray-500">
                    Máximo 10 caracteres. Se mostrará como etiqueta en las listas.
                  </p>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Descripción
                  </label>
                  <textarea
                    value={formData.description}
                    onChange={(e) => setFormData({ ...formData, description: e.target.value })}
                    rows={3}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                    placeholder="Breve descripción de la calificación (opcional)"
                  />
                </div>
              </div>

              {/* Botones de acción */}
              <div className="mt-6 flex items-center justify-end gap-3">
                <button
                  type="button"
                  onClick={() => {
                    setShowModal(false)
                    resetForm()
                  }}
                  className="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors"
                >
                  Cancelar
                </button>
                <button
                  type="button"
                  onClick={handleSubmit}
                  disabled={isSubmitting}
                  className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-2"
                >
                  {isSubmitting ? (
                    <>
                      <Loader2 className="w-4 h-4 animate-spin" />
                      Guardando...
                    </>
                  ) : (
                    <>
                      <Save className="w-4 h-4" />
                      {editingCalif ? 'Actualizar' : 'Crear'} Calificación
                    </>
                  )}
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}

// ==================================================
// src/app/admin/countries/page.tsx
// ==================================================
// src/app/admin/countries/page.tsx
'use client'

import { useState, useEffect } from 'react'
import {
  Plus,
  Search,
  Edit,
  Trash2,
  Globe,
  X,
  Save,
  Loader2
} from 'lucide-react'
import { toast } from 'react-hot-toast'

interface Country {
  id: number
  code: string
  name: string
  createdAt: string
  _count?: {
    movies: number
  }
}

export default function AdminCountriesPage() {
  const [countries, setCountries] = useState<Country[]>([])
  const [loading, setLoading] = useState(true)
  const [searchTerm, setSearchTerm] = useState('')
  const [showModal, setShowModal] = useState(false)
  const [editingCountry, setEditingCountry] = useState<Country | null>(null)
  const [deletingCountryId, setDeletingCountryId] = useState<number | null>(null)
  const [isSubmitting, setIsSubmitting] = useState(false)

  // Estado del formulario
  const [formData, setFormData] = useState({
    code: '',
    name: ''
  })
  const [formErrors, setFormErrors] = useState({
    code: '',
    name: ''
  })

  // Cargar países
  const fetchCountries = async () => {
    try {
      setLoading(true)
      const response = await fetch('/api/countries')
      
      if (!response.ok) {
        throw new Error('Error al cargar los países')
      }
      
      const data = await response.json()
      setCountries(Array.isArray(data) ? data : [])
    } catch (error) {
      toast.error('Error al cargar los países')
      setCountries([])
    } finally {
      setLoading(false)
    }
  }

  useEffect(() => {
    fetchCountries()
  }, [])

  // Filtrar países
  const filteredCountries = countries.filter(country =>
    country.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
    country.code.toLowerCase().includes(searchTerm.toLowerCase())
  )

  // Validar formulario
  const validateForm = () => {
    const errors = { code: '', name: '' }
    let isValid = true
    
    if (!formData.code.trim()) {
      errors.code = 'El código es requerido'
      isValid = false
    } else if (formData.code.length !== 2) {
      errors.code = 'El código debe tener exactamente 2 caracteres'
      isValid = false
    } else if (!/^[A-Z]{2}$/.test(formData.code)) {
      errors.code = 'El código debe contener solo letras mayúsculas'
      isValid = false
    }
    
    if (!formData.name.trim()) {
      errors.name = 'El nombre es requerido'
      isValid = false
    } else if (formData.name.length > 100) {
      errors.name = 'El nombre no puede exceder 100 caracteres'
      isValid = false
    }
    
    setFormErrors(errors)
    return isValid
  }

  // Crear o actualizar país
  const handleSubmit = async () => {
    if (!validateForm()) return

    try {
      setIsSubmitting(true)
      const url = editingCountry
        ? `/api/countries/${editingCountry.id}`
        : '/api/countries'
      
      const method = editingCountry ? 'PUT' : 'POST'
      
      const response = await fetch(url, {
        method,
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          code: formData.code.trim().toUpperCase(),
          name: formData.name.trim()
        })
      })

      if (!response.ok) {
        let errorMessage = 'Error al guardar el país'
        try {
          const error = await response.json()
          errorMessage = error.error || error.message || errorMessage
        } catch (e) {}
        throw new Error(errorMessage)
      }

      toast.success(editingCountry ? 'País actualizado' : 'País creado')
      setShowModal(false)
      resetForm()
      fetchCountries()
    } catch (error) {
      toast.error(error instanceof Error ? error.message : 'Error al guardar')
    } finally {
      setIsSubmitting(false)
    }
  }

  // Resetear formulario
  const resetForm = () => {
    setFormData({ code: '', name: '' })
    setFormErrors({ code: '', name: '' })
    setEditingCountry(null)
  }

  // Editar país
  const handleEdit = (country: Country) => {
    setEditingCountry(country)
    setFormData({
      code: country.code,
      name: country.name
    })
    setShowModal(true)
  }

  // Eliminar país
  const handleDelete = async (id: number) => {
    if (!confirm('¿Estás seguro de eliminar este país? Esta acción no se puede deshacer.')) return

    try {
      setDeletingCountryId(id)
      const response = await fetch(`/api/countries/${id}`, {
        method: 'DELETE'
      })

      if (!response.ok) {
        let errorMessage = 'Error al eliminar el país'
        try {
          const error = await response.json()
          errorMessage = error.error || error.message || errorMessage
        } catch (e) {}
        throw new Error(errorMessage)
      }

      toast.success('País eliminado')
      fetchCountries()
    } catch (error) {
      toast.error(error instanceof Error ? error.message : 'Error al eliminar el país')
    } finally {
      setDeletingCountryId(null)
    }
  }

  // Abrir modal para nuevo país
  const handleNewCountry = () => {
    resetForm()
    setShowModal(true)
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white shadow">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="py-6">
            <h1 className="text-3xl font-bold text-gray-900">
              Administración de Países
            </h1>
          </div>
        </div>
      </div>

      {/* Contenido principal */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Filtros y acciones */}
        <div className="bg-white rounded-lg shadow p-6 mb-6">
          <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
            {/* Búsqueda */}
            <div className="relative flex-1 max-w-md">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
              <input
                type="text"
                placeholder="Buscar países..."
                className="pl-10 pr-4 py-2 w-full border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
              />
            </div>

            {/* Botón nuevo país */}
            <button
              onClick={handleNewCountry}
              className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors flex items-center gap-2"
            >
              <Plus className="w-5 h-5" />
              Nuevo País
            </button>
          </div>
        </div>

        {/* Lista de países */}
        <div className="bg-white rounded-lg shadow overflow-hidden">
          {loading ? (
            <div className="flex items-center justify-center h-64">
              <Loader2 className="w-8 h-8 text-blue-600 animate-spin" />
            </div>
          ) : filteredCountries.length === 0 ? (
            <div className="text-center py-12">
              <Globe className="w-12 h-12 text-gray-400 mx-auto mb-4" />
              <p className="text-gray-500">No se encontraron países</p>
            </div>
          ) : (
            <div className="overflow-x-auto">
              <table className="min-w-full divide-y divide-gray-200">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Código
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      País
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Películas
                    </th>
                    <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Acciones
                    </th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {filteredCountries.map((country) => (
                    <tr key={country.id} className="hover:bg-gray-50">
                      <td className="px-6 py-4 whitespace-nowrap">
                        <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                          {country.code}
                        </span>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm font-medium text-gray-900">
                          {country.name}
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        {country._count?.movies || 0}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                        <div className="flex items-center justify-end gap-2">
                          <button
                            onClick={() => handleEdit(country)}
                            className="text-blue-600 hover:text-blue-900 transition-colors"
                            title="Editar"
                          >
                            <Edit className="w-4 h-4" />
                          </button>
                          <button
                            onClick={() => handleDelete(country.id)}
                            disabled={deletingCountryId === country.id}
                            className="text-red-600 hover:text-red-900 transition-colors disabled:opacity-50"
                            title="Eliminar"
                          >
                            {deletingCountryId === country.id ? (
                              <Loader2 className="w-4 h-4 animate-spin" />
                            ) : (
                              <Trash2 className="w-4 h-4" />
                            )}
                          </button>
                        </div>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          )}
        </div>
      </div>

      {/* Modal de creación/edición */}
      {showModal && (
        <div className="fixed inset-0 bg-gray-500 bg-opacity-75 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg max-w-md w-full">
            <div className="bg-gray-50 px-6 py-4 border-b border-gray-200">
              <div className="flex items-center justify-between">
                <h2 className="text-xl font-semibold text-gray-900">
                  {editingCountry ? 'Editar País' : 'Nuevo País'}
                </h2>
                <button
                  onClick={() => {
                    setShowModal(false)
                    resetForm()
                  }}
                  className="text-gray-400 hover:text-gray-500"
                >
                  <X className="w-6 h-6" />
                </button>
              </div>
            </div>

            <div className="p-6">
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Código ISO *
                  </label>
                  <input
                    type="text"
                    value={formData.code}
                    onChange={(e) => {
                      const value = e.target.value.toUpperCase().slice(0, 2)
                      setFormData({ ...formData, code: value })
                      if (formErrors.code) {
                        setFormErrors({ ...formErrors, code: '' })
                      }
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                    placeholder="Ej: AR, BR, US"
                    maxLength={2}
                  />
                  {formErrors.code && (
                    <p className="mt-1 text-sm text-red-600">{formErrors.code}</p>
                  )}
                  <p className="mt-1 text-xs text-gray-500">
                    Código ISO 3166-1 alpha-2 (2 letras mayúsculas)
                  </p>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Nombre del País *
                  </label>
                  <input
                    type="text"
                    value={formData.name}
                    onChange={(e) => {
                      setFormData({ ...formData, name: e.target.value })
                      if (formErrors.name) {
                        setFormErrors({ ...formErrors, name: '' })
                      }
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                    placeholder="Ej: Argentina, Brasil, Estados Unidos"
                  />
                  {formErrors.name && (
                    <p className="mt-1 text-sm text-red-600">{formErrors.name}</p>
                  )}
                </div>
              </div>

              {/* Botones de acción */}
              <div className="mt-6 flex items-center justify-end gap-3">
                <button
                  type="button"
                  onClick={() => {
                    setShowModal(false)
                    resetForm()
                  }}
                  className="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors"
                >
                  Cancelar
                </button>
                <button
                  type="button"
                  onClick={handleSubmit}
                  disabled={isSubmitting}
                  className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-2"
                >
                  {isSubmitting ? (
                    <>
                      <Loader2 className="w-4 h-4 animate-spin" />
                      Guardando...
                    </>
                  ) : (
                    <>
                      <Save className="w-4 h-4" />
                      {editingCountry ? 'Actualizar' : 'Crear'} País
                    </>
                  )}
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}

// ==================================================
// src/app/admin/genres/page.tsx
// ==================================================
// src/app/admin/genres/page.tsx
'use client'

import { useState, useEffect } from 'react'
import {
  Plus,
  Search,
  Edit,
  Trash2,
  Hash,
  X,
  Save,
  Loader2
} from 'lucide-react'
import { toast } from 'react-hot-toast'

interface Genre {
  id: number
  slug: string
  name: string
  description?: string | null
  createdAt: string
  _count?: {
    movies: number
  }
}

export default function AdminGenresPage() {
  const [genres, setGenres] = useState<Genre[]>([])
  const [loading, setLoading] = useState(true)
  const [searchTerm, setSearchTerm] = useState('')
  const [showModal, setShowModal] = useState(false)
  const [editingGenre, setEditingGenre] = useState<Genre | null>(null)
  const [deletingGenreId, setDeletingGenreId] = useState<number | null>(null)
  const [isSubmitting, setIsSubmitting] = useState(false)

  // Estado del formulario
  const [formData, setFormData] = useState({
    name: '',
    description: ''
  })
  const [formErrors, setFormErrors] = useState({
    name: ''
  })

  // Cargar géneros
  const fetchGenres = async () => {
    try {
      setLoading(true)
      const response = await fetch('/api/genres')
      
      if (!response.ok) {
        throw new Error('Error al cargar los géneros')
      }
      
      const data = await response.json()
      setGenres(Array.isArray(data) ? data : [])
    } catch (error) {
      toast.error('Error al cargar los géneros')
      setGenres([])
    } finally {
      setLoading(false)
    }
  }

  useEffect(() => {
    fetchGenres()
  }, [])

  // Filtrar géneros
  const filteredGenres = genres.filter(genre =>
    genre.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
    (genre.description && genre.description.toLowerCase().includes(searchTerm.toLowerCase()))
  )

  // Validar formulario
  const validateForm = () => {
    const errors = { name: '' }
    
    if (!formData.name.trim()) {
      errors.name = 'El nombre es requerido'
    } else if (formData.name.length > 100) {
      errors.name = 'El nombre no puede exceder 100 caracteres'
    }
    
    setFormErrors(errors)
    return !errors.name
  }

  // Crear o actualizar género
  const handleSubmit = async () => {
    if (!validateForm()) return

    try {
      setIsSubmitting(true)
      const url = editingGenre
        ? `/api/genres/${editingGenre.id}`
        : '/api/genres'
      
      const method = editingGenre ? 'PUT' : 'POST'
      
      const response = await fetch(url, {
        method,
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          name: formData.name.trim(),
          description: formData.description.trim() || undefined
        })
      })

      if (!response.ok) {
        let errorMessage = 'Error al guardar el género'
        try {
          const error = await response.json()
          errorMessage = error.error || error.message || errorMessage
        } catch (e) {}
        throw new Error(errorMessage)
      }

      toast.success(editingGenre ? 'Género actualizado' : 'Género creado')
      setShowModal(false)
      resetForm()
      fetchGenres()
    } catch (error) {
      toast.error(error instanceof Error ? error.message : 'Error al guardar')
    } finally {
      setIsSubmitting(false)
    }
  }

  // Resetear formulario
  const resetForm = () => {
    setFormData({ name: '', description: '' })
    setFormErrors({ name: '' })
    setEditingGenre(null)
  }

  // Editar género
  const handleEdit = (genre: Genre) => {
    setEditingGenre(genre)
    setFormData({
      name: genre.name,
      description: genre.description || ''
    })
    setShowModal(true)
  }

  // Eliminar género
  const handleDelete = async (id: number) => {
    if (!confirm('¿Estás seguro de eliminar este género? Esta acción no se puede deshacer.')) return

    try {
      setDeletingGenreId(id)
      const response = await fetch(`/api/genres/${id}`, {
        method: 'DELETE'
      })

      if (!response.ok) {
        throw new Error('Error al eliminar')
      }

      toast.success('Género eliminado')
      fetchGenres()
    } catch (error) {
      toast.error('Error al eliminar el género')
    } finally {
      setDeletingGenreId(null)
    }
  }

  // Abrir modal para nuevo género
  const handleNewGenre = () => {
    resetForm()
    setShowModal(true)
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white shadow">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="py-6">
            <h1 className="text-3xl font-bold text-gray-900">
              Administración de Géneros
            </h1>
          </div>
        </div>
      </div>

      {/* Contenido principal */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Filtros y acciones */}
        <div className="bg-white rounded-lg shadow p-6 mb-6">
          <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
            {/* Búsqueda */}
            <div className="relative flex-1 max-w-md">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
              <input
                type="text"
                placeholder="Buscar géneros..."
                className="pl-10 pr-4 py-2 w-full border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
              />
            </div>

            {/* Botón nuevo género */}
            <button
              onClick={handleNewGenre}
              className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors flex items-center gap-2"
            >
              <Plus className="w-5 h-5" />
              Nuevo Género
            </button>
          </div>
        </div>

        {/* Lista de géneros */}
        <div className="bg-white rounded-lg shadow overflow-hidden">
          {loading ? (
            <div className="flex items-center justify-center h-64">
              <Loader2 className="w-8 h-8 text-blue-600 animate-spin" />
            </div>
          ) : filteredGenres.length === 0 ? (
            <div className="text-center py-12">
              <Hash className="w-12 h-12 text-gray-400 mx-auto mb-4" />
              <p className="text-gray-500">No se encontraron géneros</p>
            </div>
          ) : (
            <div className="overflow-x-auto">
              <table className="min-w-full divide-y divide-gray-200">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Género
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Descripción
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Slug
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Películas
                    </th>
                    <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Acciones
                    </th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {filteredGenres.map((genre) => (
                    <tr key={genre.id} className="hover:bg-gray-50">
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm font-medium text-gray-900">
                          {genre.name}
                        </div>
                      </td>
                      <td className="px-6 py-4">
                        <div className="text-sm text-gray-500 max-w-xs truncate">
                          {genre.description || '-'}
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm text-gray-400">
                          {genre.slug}
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        {genre._count?.movies || 0}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                        <div className="flex items-center justify-end gap-2">
                          <button
                            onClick={() => handleEdit(genre)}
                            className="text-blue-600 hover:text-blue-900 transition-colors"
                            title="Editar"
                          >
                            <Edit className="w-4 h-4" />
                          </button>
                          <button
                            onClick={() => handleDelete(genre.id)}
                            disabled={deletingGenreId === genre.id}
                            className="text-red-600 hover:text-red-900 transition-colors disabled:opacity-50"
                            title="Eliminar"
                          >
                            {deletingGenreId === genre.id ? (
                              <Loader2 className="w-4 h-4 animate-spin" />
                            ) : (
                              <Trash2 className="w-4 h-4" />
                            )}
                          </button>
                        </div>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          )}
        </div>
      </div>

      {/* Modal de creación/edición */}
      {showModal && (
        <div className="fixed inset-0 bg-gray-500 bg-opacity-75 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg max-w-md w-full">
            <div className="bg-gray-50 px-6 py-4 border-b border-gray-200">
              <div className="flex items-center justify-between">
                <h2 className="text-xl font-semibold text-gray-900">
                  {editingGenre ? 'Editar Género' : 'Nuevo Género'}
                </h2>
                <button
                  onClick={() => {
                    setShowModal(false)
                    resetForm()
                  }}
                  className="text-gray-400 hover:text-gray-500"
                >
                  <X className="w-6 h-6" />
                </button>
              </div>
            </div>

            <div className="p-6">
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Nombre del Género *
                  </label>
                  <input
                    type="text"
                    value={formData.name}
                    onChange={(e) => {
                      setFormData({ ...formData, name: e.target.value })
                      if (formErrors.name) {
                        setFormErrors({ ...formErrors, name: '' })
                      }
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                    placeholder="Ej: Drama, Comedia, Thriller"
                  />
                  {formErrors.name && (
                    <p className="mt-1 text-sm text-red-600">{formErrors.name}</p>
                  )}
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Descripción
                  </label>
                  <textarea
                    value={formData.description}
                    onChange={(e) => setFormData({ ...formData, description: e.target.value })}
                    rows={3}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                    placeholder="Breve descripción del género (opcional)"
                  />
                </div>
              </div>

              {/* Botones de acción */}
              <div className="mt-6 flex items-center justify-end gap-3">
                <button
                  type="button"
                  onClick={() => {
                    setShowModal(false)
                    resetForm()
                  }}
                  className="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors"
                >
                  Cancelar
                </button>
                <button
                  type="button"
                  onClick={handleSubmit}
                  disabled={isSubmitting}
                  className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-2"
                >
                  {isSubmitting ? (
                    <>
                      <Loader2 className="w-4 h-4 animate-spin" />
                      Guardando...
                    </>
                  ) : (
                    <>
                      <Save className="w-4 h-4" />
                      {editingGenre ? 'Actualizar' : 'Crear'} Género
                    </>
                  )}
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}

// ==================================================
// src/app/admin/layout.tsx
// ==================================================
// src/app/admin/layout.tsx
'use client'

import Link from 'next/link'
import { 
  Film, 
  Users, 
  Building2, 
  Award, 
  Globe, 
  Tv,
  Home,
  Menu,
  X,
  Tag,
  Hash
} from 'lucide-react'
import { ReactNode, useState } from 'react'

interface AdminLayoutProps {
  children: ReactNode
}

export default function AdminLayout({ children }: AdminLayoutProps) {
  const [sidebarOpen, setSidebarOpen] = useState(false)

  const navigation = [
    { name: 'Dashboard', href: '/admin', icon: Home },
    { name: 'Películas', href: '/admin/movies', icon: Film },
    { name: 'Personas', href: '/admin/people', icon: Users },
    { name: 'Géneros', href: '/admin/genres', icon: Hash },
    { name: 'Productoras', href: '/admin/companies/production', icon: Building2 },
    { name: 'Distribuidoras', href: '/admin/companies/distribution', icon: Building2 },
    { name: 'Pantallas de Estreno', href: '/admin/screening-venues', icon: Tv },
    { name: 'Premios', href: '/admin/awards', icon: Award },
    { name: 'Lugares', href: '/admin/locations', icon: Globe },
    { name: 'Temas', href: '/admin/themes', icon: Tag },
    { name: 'Calificaciones', href: '/admin/calificaciones', icon: Tag }
  ]

  return (
    <div className="min-h-screen bg-gray-100" data-admin="true">
      {/* Sidebar móvil */}
      <div className={`fixed inset-0 z-40 md:hidden ${sidebarOpen ? '' : 'hidden'}`}>
        <div className="fixed inset-0 bg-gray-600 bg-opacity-75" onClick={() => setSidebarOpen(false)} />
        <nav className="fixed top-0 left-0 bottom-0 flex flex-col w-64 bg-white">
          <div className="flex items-center justify-between h-16 px-4 border-b border-gray-200">
            <h2 className="text-xl font-semibold text-gray-900">CineNacional Admin</h2>
            <button
              onClick={() => setSidebarOpen(false)}
              className="text-gray-500 hover:text-gray-700"
            >
              <X className="w-6 h-6" />
            </button>
          </div>
          <div className="flex-1 px-4 py-4 space-y-1">
            {navigation.map((item) => (
              <Link
                key={item.name}
                href={item.href}
                className="flex items-center px-3 py-2 text-sm font-medium rounded-lg hover:bg-gray-100 text-gray-700"
              >
                <item.icon className="w-5 h-5 mr-3 text-gray-600" />
                {item.name}
              </Link>
            ))}
          </div>
        </nav>
      </div>

      {/* Sidebar desktop */}
      <div className="hidden md:flex md:w-64 md:flex-col md:fixed md:inset-y-0">
        <nav className="flex-1 flex flex-col bg-white border-r border-gray-200">
          <div className="flex items-center h-16 px-4 border-b border-gray-200">
            <h2 className="text-xl font-semibold text-gray-900">CineNacional Admin</h2>
          </div>
          <div className="flex-1 px-4 py-4 space-y-1">
            {navigation.map((item) => (
              <Link
                key={item.name}
                href={item.href}
                className="flex items-center px-3 py-2 text-sm font-medium rounded-lg hover:bg-gray-100 text-gray-700"
              >
                <item.icon className="w-5 h-5 mr-3 text-gray-600" />
                {item.name}
              </Link>
            ))}
          </div>
          <div className="p-4 border-t border-gray-200">
            <Link
              href="/"
              className="flex items-center px-3 py-2 text-sm font-medium rounded-lg hover:bg-gray-100 text-gray-700"
            >
              Volver al sitio
            </Link>
          </div>
        </nav>
      </div>

      {/* Contenido principal */}
      <div className="md:pl-64">
        {/* Header móvil */}
        <div className="sticky top-0 z-10 md:hidden bg-white shadow">
          <div className="px-4 py-3">
            <button
              onClick={() => setSidebarOpen(true)}
              className="text-gray-500 hover:text-gray-700"
            >
              <Menu className="w-6 h-6" />
            </button>
          </div>
        </div>

        {/* Contenido */}
        <main className="text-gray-900">{children}</main>
      </div>
    </div>
  )
}

// ==================================================
// src/app/admin/locations/new/page.tsx
// ==================================================
// src/app/admin/locations/new/page.tsx

import { Suspense } from 'react'
import LocationForm from '@/components/admin/locations/LocationForm'
import Link from 'next/link'
import { ArrowLeft } from 'lucide-react'

export const metadata = {
  title: 'Nuevo Lugar - Admin',
  description: 'Crear nuevo lugar'
}

export default function NewLocationPage() {
  return (
    <div className="container mx-auto px-4 py-8 max-w-2xl">
      <div className="mb-8">
        <Link
          href="/admin/locations"
          className="inline-flex items-center gap-2 text-gray-600 hover:text-gray-900 mb-4"
        >
          <ArrowLeft className="w-4 h-4" />
          Volver a lugares
        </Link>
        
        <h1 className="text-3xl font-bold text-gray-900">Nuevo Lugar</h1>
        <p className="mt-2 text-gray-600">
          Agrega un nuevo país, provincia, estado o ciudad
        </p>
      </div>

      <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
        <Suspense fallback={<div>Cargando formulario...</div>}>
          <LocationForm />
        </Suspense>
      </div>
    </div>
  )
}

// ==================================================
// src/app/admin/locations/page.tsx
// ==================================================
// src/app/admin/locations/page.tsx

import Link from 'next/link'
import { Plus } from 'lucide-react'
import LocationTree from '@/components/admin/locations/LocationTree'

export const metadata = {
  title: 'Lugares - Admin',
  description: 'Administración de lugares'
}

// Revalidar cada 0 segundos (sin caché)
export const revalidate = 0

export default function LocationsAdminPage() {
  return (
    <div className="container mx-auto px-4 py-8">
      <div className="flex justify-between items-center mb-8">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">Lugares</h1>
          <p className="mt-2 text-gray-600">
            Gestiona la estructura jerárquica de países, provincias, estados y ciudades
          </p>
        </div>
        
        <Link
          href="/admin/locations/new"
          className="flex items-center gap-2 px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition-colors"
        >
          <Plus className="w-5 h-5" />
          Nuevo Lugar
        </Link>
      </div>

      <LocationTree />
    </div>
  )
}

// ==================================================
// src/app/admin/locations/[id]/edit/page.tsx
// ==================================================
// src/app/admin/locations/[id]/edit/page.tsx

import { notFound } from 'next/navigation'
import LocationForm from '@/components/admin/locations/LocationForm'
import Link from 'next/link'
import { ArrowLeft } from 'lucide-react'
import { prisma } from '@/lib/prisma'

export const metadata = {
  title: 'Editar Lugar - Admin',
  description: 'Editar lugar existente'
}

interface EditLocationPageProps {
  params: {
    id: string
  }
}

async function getLocation(id: number) {
  const location = await prisma.location.findUnique({
    where: { id },
    include: {
      parent: true
    }
  })
  
  return location
}

export default async function EditLocationPage({ params }: EditLocationPageProps) {
  const id = parseInt(params.id)
  
  if (isNaN(id)) {
    notFound()
  }
  
  const location = await getLocation(id)
  
  if (!location) {
    notFound()
  }

  // Convertir Decimal a string y simplificar el objeto para el formulario
  const locationData = {
    id: location.id,
    name: location.name,
    slug: location.slug,
    parentId: location.parentId,
    parent: location.parent ? {
      id: location.parent.id,
      name: location.parent.name
    } : undefined,
    latitude: location.latitude?.toString() || null,
    longitude: location.longitude?.toString() || null
  }

  return (
    <div className="container mx-auto px-4 py-8 max-w-2xl">
      <div className="mb-8">
        <Link
          href="/admin/locations"
          className="inline-flex items-center gap-2 text-gray-600 hover:text-gray-900 mb-4"
        >
          <ArrowLeft className="w-4 h-4" />
          Volver a lugares
        </Link>
        
        <h1 className="text-3xl font-bold text-gray-900">Editar Lugar</h1>
        <p className="mt-2 text-gray-600">
          Modifica la información de {location.name}
        </p>
      </div>

      <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
        <LocationForm location={locationData} />
      </div>
    </div>
  )
}

// ==================================================
// src/app/admin/movies/page.tsx
// ==================================================
// src/app/admin/movies/page.tsx
'use client'

import { useState, useEffect } from 'react'
import { toast } from 'react-hot-toast'
import MoviesFilters, { type MovieFilters } from '@/components/admin/movies/MoviesFilters'
import MoviesPagination from '@/components/admin/movies/MoviesPagination'
import MoviesTable from '@/components/admin/movies/MoviesTable'
import MovieModal from '@/components/admin/movies/MovieModal'
import { moviesService } from '@/services'
import { type Movie } from '@/lib/movies/movieTypes'
import { useMovieForm } from '@/hooks/useMovieForm'

export default function AdminMoviesPage() {
  const [movies, setMovies] = useState<Movie[]>([])
  const [loading, setLoading] = useState(true)
  const [totalPages, setTotalPages] = useState(1)
  const [showModal, setShowModal] = useState(false)
  const [editingMovie, setEditingMovie] = useState<Movie | null>(null)

  // Estados de filtros
  const [filters, setFilters] = useState<MovieFilters>({
    searchTerm: '',
    selectedStage: '',
    selectedYear: '',
    currentPage: 1
  })

  // Usar el custom hook
  const movieForm = useMovieForm({
    editingMovie,
    onSuccess: () => {
      setShowModal(false)
      setEditingMovie(null)
      fetchMovies()
    }
  })

  
  const handleFiltersChange = (newFilters: Partial<MovieFilters>) => {
    setFilters(prev => ({ ...prev, ...newFilters }))
  }

  // Cargar películas
  const fetchMovies = async () => {
    try {
      setLoading(true)
      const { movies, pagination } = await moviesService.getAll(filters)
      setMovies(movies)
      setTotalPages(pagination.totalPages)
    } catch (error) {
      toast.error('Error al cargar las películas')
      setMovies([])
      setTotalPages(1)
    } finally {
      setLoading(false)
    }
  }

  useEffect(() => {
    fetchMovies()
  }, [filters])

  // Editar película
  const handleEdit = async (movie: Movie) => {
    try {
      setEditingMovie(movie)
      await movieForm.loadMovieData(movie)
      setShowModal(true)
    } catch (error) {
      console.error('Error in handleEdit:', error)
      toast.error('Error al cargar los datos de la película')
    }
  }

  // Eliminar película
  const handleDelete = async (id: number) => {
    await moviesService.delete(id)
    fetchMovies()
  }

  // Abrir modal para nueva película
  const handleNewMovie = () => {
    setEditingMovie(null)
    movieForm.resetForNewMovie()
    setShowModal(true)
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white shadow">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="py-6">
            <h1 className="text-3xl font-bold text-gray-900">
              Administración de Películas
            </h1>
          </div>
        </div>
      </div>

      {/* Contenido principal */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Filtros y acciones */}
        <MoviesFilters
          filters={filters}
          onFiltersChange={handleFiltersChange}
          onNewMovie={handleNewMovie}
        />

        {/* Lista de películas */}
        <MoviesTable
          movies={movies}
          loading={loading}
          onEdit={handleEdit}
          onDelete={handleDelete}
        />

        {/* Paginación */}
        {totalPages > 1 && (
          <MoviesPagination
            currentPage={filters.currentPage}
            totalPages={totalPages}
            onPageChange={(page) => handleFiltersChange({ currentPage: page })}
          />
        )}

        {/* Modal con todas las props del hook */}
        <MovieModal
          isOpen={showModal}
          onClose={() => {
            setShowModal(false)
            setEditingMovie(null)
          }}
          editingMovie={editingMovie}
          onSubmit={movieForm.onSubmit}
          isSubmitting={movieForm.formState.isSubmitting}

          // Props del formulario
          register={movieForm.register}
          handleSubmit={movieForm.handleSubmit}
          watch={movieForm.watch}
          setValue={movieForm.setValue}
          reset={movieForm.reset}
          errors={movieForm.formState.errors}

          // Estados
          activeTab={movieForm.activeTab}
          setActiveTab={movieForm.setActiveTab}
          isPartialDate={movieForm.isPartialDate}
          setIsPartialDate={movieForm.setIsPartialDate}
          partialReleaseDate={movieForm.partialReleaseDate}
          setPartialReleaseDate={movieForm.setPartialReleaseDate}
          tipoDuracionDisabled={movieForm.tipoDuracionDisabled}

          handleScreeningVenuesChange={movieForm.handleScreeningVenuesChange}


          // Estados para fechas de rodaje
          isPartialFilmingStartDate={movieForm.isPartialFilmingStartDate}
          setIsPartialFilmingStartDate={movieForm.setIsPartialFilmingStartDate}
          partialFilmingStartDate={movieForm.partialFilmingStartDate}
          setPartialFilmingStartDate={movieForm.setPartialFilmingStartDate}
          isPartialFilmingEndDate={movieForm.isPartialFilmingEndDate}
          setIsPartialFilmingEndDate={movieForm.setIsPartialFilmingEndDate}
          partialFilmingEndDate={movieForm.partialFilmingEndDate}
          setPartialFilmingEndDate={movieForm.setPartialFilmingEndDate}

          // Metadata - ahora viene del hook
          availableRatings={movieForm.availableRatings}
          availableColorTypes={movieForm.availableColorTypes}

          // Relaciones
          movieFormInitialData={movieForm.movieFormInitialData}
          alternativeTitles={movieForm.alternativeTitles}
          setAlternativeTitles={movieForm.setAlternativeTitles}
          movieLinks={movieForm.movieLinks}

          // Callbacks
          handleGenresChange={movieForm.handleGenresChange}
          handleCastChange={movieForm.handleCastChange}
          handleCrewChange={movieForm.handleCrewChange}
          handleCountriesChange={movieForm.handleCountriesChange}
          handleProductionCompaniesChange={movieForm.handleProductionCompaniesChange}
          handleDistributionCompaniesChange={movieForm.handleDistributionCompaniesChange}
          handleThemesChange={movieForm.handleThemesChange}
          handleLinksChange={movieForm.handleLinksChange}
        />
      </div>
    </div>
  )
}

// ==================================================
// src/app/admin/people/new/page.tsx
// ==================================================
// src/app/admin/people/new/page.tsx

import { Metadata } from 'next';
import Link from 'next/link';
import { PersonForm } from '@/components/admin/people/PersonForm';
import { ArrowLeft, UserPlus } from 'lucide-react';

export const metadata: Metadata = {
  title: 'Nueva Persona | Admin',
  description: 'Crear nueva persona en el sistema',
};

export default function NewPersonPage() {
  return (
    <div className="min-h-screen bg-gray-50">
      <div className="container mx-auto py-6 px-4 sm:px-6 lg:px-8 max-w-5xl">
        {/* Header */}
        <div className="mb-6">
          <Link 
            href="/admin/people"
            className="inline-flex items-center gap-2 text-gray-600 hover:text-gray-900 transition-colors mb-4"
          >
            <ArrowLeft className="w-4 h-4" />
            Volver al listado
          </Link>
          
          <div className="flex items-center gap-3">
            <UserPlus className="h-8 w-8 text-gray-700" />
            <div>
              <h1 className="text-3xl font-bold text-gray-900">Nueva Persona</h1>
              <p className="text-gray-600 mt-1">
                Complete los datos para agregar una nueva persona al sistema
              </p>
            </div>
          </div>
        </div>

        {/* Formulario */}
        <PersonForm />
      </div>
    </div>
  );
}

// ==================================================
// src/app/admin/people/page.tsx
// ==================================================
// src/app/admin/people/page.tsx

import { Suspense } from 'react';
import { Metadata } from 'next';
import { PeopleTable } from '@/components/admin/people/PeopleTable';
import Link from 'next/link';
import { Plus, Users, Loader2 } from 'lucide-react';

export const metadata: Metadata = {
  title: 'Gestión de Personas | Admin',
  description: 'Administración de personas del cine argentino',
};

export default function PeoplePage() {
  return (
    <div className="min-h-screen bg-gray-50">
      <div className="container mx-auto py-6 px-4 sm:px-6 lg:px-8">
        {/* Header */}
        <div className="mb-8">
          <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between">
            <div>
              <h1 className="text-3xl font-bold text-gray-900 flex items-center gap-3">
                <Users className="h-8 w-8 text-gray-700" />
                Gestión de Personas
              </h1>
              <p className="mt-2 text-gray-600">
                Administra el registro de actores, directores y personal técnico del cine argentino
              </p>
            </div>
            
            <div className="mt-4 sm:mt-0">
              <Link 
                href="/admin/people/new"
                className="inline-flex items-center gap-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
              >
                <Plus className="w-5 h-5" />
                Nueva Persona
              </Link>
            </div>
          </div>
        </div>

        {/* Stats Cards (opcional - comentado por ahora) */}
        {/* 
        <div className="grid gap-4 md:grid-cols-3 mb-8">
          <div className="bg-white rounded-lg shadow p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600">Total Personas</p>
                <p className="text-2xl font-bold text-gray-900">-</p>
              </div>
              <Users className="h-8 w-8 text-gray-400" />
            </div>
          </div>
          
          <div className="bg-white rounded-lg shadow p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600">Actores</p>
                <p className="text-2xl font-bold text-gray-900">-</p>
              </div>
              <Users className="h-8 w-8 text-gray-400" />
            </div>
          </div>
          
          <div className="bg-white rounded-lg shadow p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600">Directores</p>
                <p className="text-2xl font-bold text-gray-900">-</p>
              </div>
              <Users className="h-8 w-8 text-gray-400" />
            </div>
          </div>
        </div>
        */}
        
        {/* Tabla */}
        <Suspense fallback={
          <div className="bg-white rounded-lg shadow overflow-hidden">
            <div className="flex items-center justify-center h-64">
              <Loader2 className="w-8 h-8 text-blue-600 animate-spin" />
            </div>
          </div>
        }>
          <PeopleTable />
        </Suspense>
      </div>
    </div>
  );
}

// ==================================================
// src/app/admin/people/[id]/edit/page.tsx
// ==================================================
// src/app/admin/people/[id]/edit/page.tsx

'use client';

import { useEffect, useState } from 'react';
import Link from 'next/link';
import { useRouter, useParams } from 'next/navigation';
import { PersonForm } from '@/components/admin/people/PersonForm';
import { ArrowLeft, Edit, Loader2, AlertCircle } from 'lucide-react';
import { usePerson } from '@/hooks/usePeople';

export default function EditPersonPage() {
  const router = useRouter();
  const params = useParams();
  const id = params.id as string;
  const { person, loading, error } = usePerson(id);

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50">
        <div className="container mx-auto py-6 px-4 sm:px-6 lg:px-8 max-w-5xl">
          <div className="flex items-center justify-center py-12">
            <Loader2 className="h-8 w-8 animate-spin text-gray-400" />
          </div>
        </div>
      </div>
    );
  }

  if (error || !person) {
    return (
      <div className="min-h-screen bg-gray-50">
        <div className="container mx-auto py-6 px-4 sm:px-6 lg:px-8 max-w-5xl">
          <div className="bg-red-50 border border-red-200 rounded-lg p-4 mb-4">
            <div className="flex">
              <AlertCircle className="h-5 w-5 text-red-400" />
              <div className="ml-3">
                <h3 className="text-sm font-medium text-red-800">
                  {error?.message || 'No se pudo cargar la información de la persona'}
                </h3>
              </div>
            </div>
          </div>
          <Link 
            href="/admin/people"
            className="inline-flex items-center gap-2 px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors"
          >
            <ArrowLeft className="w-4 h-4" />
            Volver al listado
          </Link>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="container mx-auto py-6 px-4 sm:px-6 lg:px-8 max-w-5xl">
        {/* Header */}
        <div className="mb-6">
          <Link 
            href="/admin/people"
            className="inline-flex items-center gap-2 text-gray-600 hover:text-gray-900 transition-colors mb-4"
          >
            <ArrowLeft className="w-4 h-4" />
            Volver al listado
          </Link>
          
          <div className="flex items-center gap-3">
            <Edit className="h-8 w-8 text-gray-700" />
            <div>
              <h1 className="text-3xl font-bold text-gray-900">
                Editar Persona
              </h1>
              <p className="text-gray-600 mt-1">
                Modificando: {person.firstName} {person.lastName}
              </p>
            </div>
          </div>
        </div>

        {/* Formulario */}
        <PersonForm 
          personId={parseInt(id)} 
          initialData={person}
          onSuccess={() => router.push('/admin/people')}
        />
      </div>
    </div>
  );
}

// ==================================================
// src/app/admin/people/[id]/page.tsx
// ==================================================
// src/app/admin/people/[id]/page.tsx

'use client';

import { useParams } from 'next/navigation';
import Link from 'next/link';
import Image from 'next/image';
import { 
  ArrowLeft, 
  Edit, 
  ExternalLink, 
  Calendar,
  MapPin,
  Film,
  Award,
  Loader2,
  AlertCircle,
  User
} from 'lucide-react';
import { usePerson } from '@/hooks/usePeople';
import { formatPersonName, formatGender, formatBirthInfo } from '@/lib/people/peopleUtils';
import { PERSON_LINK_TYPES } from '@/lib/people/peopleConstants';

export default function PersonDetailPage() {
  const params = useParams();
  const id = params.id as string;
  const { person, loading, error } = usePerson(id);

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50">
        <div className="container mx-auto py-6 px-4 sm:px-6 lg:px-8 max-w-6xl">
          <div className="flex items-center justify-center py-12">
            <Loader2 className="h-8 w-8 animate-spin text-gray-400" />
          </div>
        </div>
      </div>
    );
  }

  if (error || !person) {
    return (
      <div className="min-h-screen bg-gray-50">
        <div className="container mx-auto py-6 px-4 sm:px-6 lg:px-8 max-w-6xl">
          <div className="bg-red-50 border border-red-200 rounded-lg p-4 mb-4">
            <div className="flex">
              <AlertCircle className="h-5 w-5 text-red-400" />
              <div className="ml-3">
                <h3 className="text-sm font-medium text-red-800">
                  {error?.message || 'No se pudo cargar la información de la persona'}
                </h3>
              </div>
            </div>
          </div>
          <Link 
            href="/admin/people"
            className="inline-flex items-center gap-2 px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors"
          >
            <ArrowLeft className="w-4 h-4" />
            Volver al listado
          </Link>
        </div>
      </div>
    );
  }

  const fullName = formatPersonName(person);

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="container mx-auto py-6 px-4 sm:px-6 lg:px-8 max-w-6xl">
        {/* Header */}
        <div className="mb-6 flex items-center justify-between">
          <Link 
            href="/admin/people"
            className="inline-flex items-center gap-2 text-gray-600 hover:text-gray-900 transition-colors"
          >
            <ArrowLeft className="w-4 h-4" />
            Volver al listado
          </Link>
          
          <Link 
            href={`/admin/people/${id}/edit`}
            className="inline-flex items-center gap-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
          >
            <Edit className="w-4 h-4" />
            Editar
          </Link>
        </div>

        {/* Info principal */}
        <div className="grid gap-6 md:grid-cols-3">
          {/* Columna izquierda - Foto y datos básicos */}
          <div className="space-y-6">
            <div className="bg-white rounded-lg shadow p-6">
              <div className="space-y-4">
                {/* Foto */}
                <div className="relative aspect-[3/4] w-full overflow-hidden rounded-lg bg-gray-100">
                  {person.photoUrl ? (
                    <Image
                      src={person.photoUrl}
                      alt={fullName}
                      fill
                      className="object-cover"
                      sizes="(max-width: 768px) 100vw, 33vw"
                    />
                  ) : (
                    <div className="flex h-full items-center justify-center">
                      <User className="h-16 w-16 text-gray-400" />
                    </div>
                  )}
                </div>

                {/* Nombre y estado */}
                <div className="text-center">
                  <h1 className="text-2xl font-bold text-gray-900">{fullName}</h1>
                  {person.realName && (
                    <p className="text-sm text-gray-500 mt-1">
                      {person.realName}
                    </p>
                  )}
                  <div className="mt-3">
                    <span className={`inline-flex items-center px-3 py-1 rounded-full text-xs font-medium ${
                      person.isActive 
                        ? 'bg-green-100 text-green-800' 
                        : 'bg-gray-100 text-gray-800'
                    }`}>
                      {person.isActive ? 'Activo' : 'Inactivo'}
                    </span>
                  </div>
                </div>

                {/* Datos básicos */}
                <div className="space-y-3 text-sm">
                  {person.gender && (
                    <div className="flex items-center gap-2">
                      <User className="h-4 w-4 text-gray-400" />
                      <span className="text-gray-700">{formatGender(person.gender)}</span>
                    </div>
                  )}
                  
                  {person.birthDate && (
                    <div className="flex items-center gap-2">
                      <Calendar className="h-4 w-4 text-gray-400" />
                      <span className="text-gray-700">{formatBirthInfo(person)}</span>
                    </div>
                  )}
                  
                  {person.birthLocation && (
                    <div className="flex items-center gap-2">
                      <MapPin className="h-4 w-4 text-gray-400" />
                      <span className="text-gray-700">Nacido en {person.birthLocation.name}</span>
                    </div>
                  )}
                  
                  {person.deathDate && (
                    <>
                      <div className="flex items-center gap-2">
                        <Calendar className="h-4 w-4 text-gray-400" />
                        <span className="text-gray-700">
                          Fallecido el {new Date(person.deathDate).toLocaleDateString('es-AR')}
                        </span>
                      </div>
                      {person.deathLocation && (
                        <div className="flex items-center gap-2">
                          <MapPin className="h-4 w-4 text-gray-400" />
                          <span className="text-gray-700">en {person.deathLocation.name}</span>
                        </div>
                      )}
                    </>
                  )}
                </div>

                {/* Estadísticas */}
                <div className="grid grid-cols-2 gap-4 pt-4 border-t">
                  <div className="text-center">
                    <p className="text-2xl font-bold text-gray-900">
                      {(person._count?.castRoles || 0) + (person._count?.crewRoles || 0)}
                    </p>
                    <p className="text-xs text-gray-500">Películas</p>
                  </div>
                  <div className="text-center">
                    <p className="text-2xl font-bold text-gray-900">{person._count?.awards || 0}</p>
                    <p className="text-xs text-gray-500">Premios</p>
                  </div>
                </div>
              </div>
            </div>

            {/* Enlaces */}
            {person.links && person.links.length > 0 && (
              <div className="bg-white rounded-lg shadow p-6">
                <h3 className="text-lg font-medium text-gray-900 mb-4">Enlaces</h3>
                <div className="space-y-2">
                  {person.links
                    .filter(link => link.isActive)
                    .map((link) => (
                      <a
                        key={link.id}
                        href={link.url}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="flex items-center gap-2 text-sm text-blue-600 hover:text-blue-800 transition-colors"
                      >
                        <ExternalLink className="h-3 w-3" />
                        {link.title || PERSON_LINK_TYPES[link.type] || link.type}
                        {link.isVerified && (
                          <span className="ml-auto px-2 py-0.5 text-xs bg-green-100 text-green-800 rounded-full">
                            Verificado
                          </span>
                        )}
                      </a>
                    ))}
                </div>
              </div>
            )}
          </div>

          {/* Columna derecha - Contenido principal */}
          <div className="md:col-span-2 space-y-6">
            {/* Biografía */}
            <div className="bg-white rounded-lg shadow p-6">
              <h3 className="text-lg font-medium text-gray-900 mb-4">Biografía</h3>
              {person.biography ? (
                <div className="prose prose-sm max-w-none">
                  {person.biography.split('\n').map((paragraph, index) => (
                    <p key={index} className="mb-4 text-gray-700">{paragraph}</p>
                  ))}
                </div>
              ) : (
                <p className="text-gray-500">
                  No hay biografía disponible
                </p>
              )}
            </div>

            {/* Filmografía */}
            <div className="bg-white rounded-lg shadow p-6">
              <h3 className="text-lg font-medium text-gray-900 mb-4 flex items-center gap-2">
                <Film className="h-5 w-5" />
                Filmografía
              </h3>
              <div className="space-y-4">
                {person._count?.castRoles && person._count.castRoles > 0 && (
                  <div>
                    <h4 className="font-medium text-gray-900 mb-2">Como Actor/Actriz</h4>
                    <p className="text-gray-600">
                      {person._count.castRoles} películas
                    </p>
                  </div>
                )}
                
                {person._count?.crewRoles && person._count.crewRoles > 0 && (
                  <div>
                    <h4 className="font-medium text-gray-900 mb-2">Como Equipo Técnico</h4>
                    <p className="text-gray-600">
                      {person._count.crewRoles} películas
                    </p>
                  </div>
                )}
                
                {(!person._count?.castRoles && !person._count?.crewRoles) && (
                  <p className="text-gray-500">
                    No hay películas asociadas
                  </p>
                )}
              </div>
            </div>

            {/* Premios */}
            <div className="bg-white rounded-lg shadow p-6">
              <h3 className="text-lg font-medium text-gray-900 mb-4 flex items-center gap-2">
                <Award className="h-5 w-5" />
                Premios y Reconocimientos
              </h3>
              {person._count?.awards && person._count.awards > 0 ? (
                <p className="text-gray-600">
                  {person._count.awards} premios registrados
                </p>
              ) : (
                <p className="text-gray-500">
                  No hay premios registrados
                </p>
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

// ==================================================
// src/app/admin/screening-venues/page.tsx
// ==================================================
// src/app/admin/screening-venues/page.tsx
'use client'

import { useState, useEffect } from 'react'
import {
  Plus,
  Search,
  Edit,
  Trash2,
  Film,
  Tv,
  Globe,
  MapPin,
  X,
  Save,
  Loader2,
  Building,
  ExternalLink
} from 'lucide-react'

interface ScreeningVenue {
  id: number
  slug: string
  name: string
  type: string
  description?: string
  logoUrl?: string
  website?: string
  address?: string
  city?: string
  province?: string
  country?: string
  isActive: boolean
  _count: {
    screenings: number
  }
}

const venueTypeLabels = {
  CINEMA: 'Cine',
  STREAMING: 'Streaming',
  TV_CHANNEL: 'Canal de TV',
  OTHER: 'Otro'
}

const venueTypeIcons = {
  CINEMA: Building,
  STREAMING: Globe,
  TV_CHANNEL: Tv,
  OTHER: Film
}

export default function AdminScreeningVenuesPage() {
  const [venues, setVenues] = useState<ScreeningVenue[]>([])
  const [loading, setLoading] = useState(true)
  const [searchTerm, setSearchTerm] = useState('')
  const [filterType, setFilterType] = useState('')
  const [filterActive, setFilterActive] = useState('')
  const [currentPage, setCurrentPage] = useState(1)
  const [totalPages, setTotalPages] = useState(1)
  const [showModal, setShowModal] = useState(false)
  const [editingVenue, setEditingVenue] = useState<ScreeningVenue | null>(null)
  const [deletingVenueId, setDeletingVenueId] = useState<number | null>(null)
  const [isSubmitting, setIsSubmitting] = useState(false)

  // Form state
  const [formData, setFormData] = useState({
    name: '',
    type: 'CINEMA',
    description: '',
    logoUrl: '',
    website: '',
    address: '',
    city: '',
    province: '',
    country: 'Argentina',
    latitude: '',
    longitude: '',
    isActive: true
  })

  const [formErrors, setFormErrors] = useState<Record<string, string>>({})

  // Toast state
  const [toast, setToast] = useState<{ message: string; type: 'success' | 'error' } | null>(null)

  const showToast = (message: string, type: 'success' | 'error') => {
    setToast({ message, type })
    setTimeout(() => setToast(null), 3000)
  }

  // Cargar pantallas
  const fetchVenues = async () => {
    try {
      setLoading(true)
      const params = new URLSearchParams({
        page: currentPage.toString(),
        limit: '20',
        search: searchTerm,
        type: filterType,
        isActive: filterActive
      })

      const response = await fetch(`/api/screening-venues?${params}`)

      if (!response.ok) {
        throw new Error('Error al cargar las pantallas de estreno')
      }

      const data = await response.json()
      setVenues(data.venues || [])
      setTotalPages(data.pagination?.totalPages || 1)
    } catch (error) {
      showToast('Error al cargar las pantallas de estreno', 'error')
      setVenues([])
      setTotalPages(1)
    } finally {
      setLoading(false)
    }
  }

  useEffect(() => {
    fetchVenues()
  }, [currentPage, searchTerm, filterType, filterActive])

  // Validar formulario
  const validateForm = () => {
    const errors: Record<string, string> = {}
    
    if (!formData.name.trim()) {
      errors.name = 'El nombre es requerido'
    }
    
    if (!formData.type) {
      errors.type = 'El tipo es requerido'
    }
    
    if (formData.logoUrl && !isValidUrl(formData.logoUrl)) {
      errors.logoUrl = 'URL inválida'
    }
    
    if (formData.website && !isValidUrl(formData.website)) {
      errors.website = 'URL inválida'
    }
    
    setFormErrors(errors)
    return Object.keys(errors).length === 0
  }

  const isValidUrl = (url: string) => {
    try {
      new URL(url)
      return true
    } catch {
      return false
    }
  }

  // Crear o actualizar pantalla
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    
    if (!validateForm()) return
    
    setIsSubmitting(true)
    
    try {
      const processedData = {
        ...formData,
        latitude: formData.latitude ? parseFloat(formData.latitude) : undefined,
        longitude: formData.longitude ? parseFloat(formData.longitude) : undefined,
        logoUrl: formData.logoUrl || undefined,
        website: formData.website || undefined
      }

      const url = editingVenue
        ? `/api/screening-venues/${editingVenue.id}`
        : '/api/screening-venues'

      const method = editingVenue ? 'PUT' : 'POST'
      const response = await fetch(url, {
        method,
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(processedData)
      })

      if (!response.ok) {
        const error = await response.json()
        throw new Error(error.error || 'Error al guardar')
      }

      showToast(editingVenue ? 'Pantalla actualizada' : 'Pantalla creada', 'success')
      setShowModal(false)
      resetForm()
      setEditingVenue(null)
      fetchVenues()
    } catch (error) {
      showToast(error instanceof Error ? error.message : 'Error al guardar', 'error')
    } finally {
      setIsSubmitting(false)
    }
  }

  // Reset form
  const resetForm = () => {
    setFormData({
      name: '',
      type: 'CINEMA',
      description: '',
      logoUrl: '',
      website: '',
      address: '',
      city: '',
      province: '',
      country: 'Argentina',
      latitude: '',
      longitude: '',
      isActive: true
    })
    setFormErrors({})
  }

  // Editar pantalla
  const handleEdit = (venue: ScreeningVenue) => {
    setEditingVenue(venue)
    
    setFormData({
      name: venue.name,
      type: venue.type,
      description: venue.description || '',
      logoUrl: venue.logoUrl || '',
      website: venue.website || '',
      address: venue.address || '',
      city: venue.city || '',
      province: venue.province || '',
      country: venue.country || 'Argentina',
      latitude: '',
      longitude: '',
      isActive: venue.isActive
    })
    
    setShowModal(true)
  }

  // Eliminar pantalla
  const handleDelete = async (id: number) => {
    if (!confirm('¿Estás seguro de eliminar esta pantalla de estreno?')) return

    try {
      setDeletingVenueId(id)
      const response = await fetch(`/api/screening-venues/${id}`, {
        method: 'DELETE'
      })

      if (!response.ok) {
        const error = await response.json()
        throw new Error(error.error || 'Error al eliminar')
      }

      showToast('Pantalla eliminada', 'success')
      fetchVenues()
    } catch (error) {
      showToast(error instanceof Error ? error.message : 'Error al eliminar', 'error')
    } finally {
      setDeletingVenueId(null)
    }
  }

  // Abrir modal para nueva pantalla
  const handleNewVenue = () => {
    setEditingVenue(null)
    resetForm()
    setShowModal(true)
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Toast Notification */}
      {toast && (
        <div className={`fixed top-4 right-4 z-50 px-4 py-2 rounded-lg text-white ${
          toast.type === 'success' ? 'bg-green-500' : 'bg-red-500'
        }`}>
          {toast.message}
        </div>
      )}

      {/* Header */}
      <div className="bg-white shadow">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="py-6">
            <h1 className="text-3xl font-bold text-gray-900">
              Administración de Pantallas de Estreno
            </h1>
          </div>
        </div>
      </div>

      {/* Contenido principal */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Filtros y acciones */}
        <div className="bg-white rounded-lg shadow p-6 mb-6">
          <div className="grid grid-cols-1 md:grid-cols-5 gap-4">
            {/* Búsqueda */}
            <div className="relative md:col-span-2">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
              <input
                type="text"
                placeholder="Buscar pantallas..."
                className="pl-10 pr-4 py-2 w-full border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
              />
            </div>

            {/* Filtro por tipo */}
            <select
              className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
              value={filterType}
              onChange={(e) => setFilterType(e.target.value)}
            >
              <option value="">Todos los tipos</option>
              <option value="CINEMA">Cines</option>
              <option value="STREAMING">Streaming</option>
              <option value="TV_CHANNEL">Canales de TV</option>
              <option value="OTHER">Otros</option>
            </select>

            {/* Filtro por estado */}
            <select
              className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
              value={filterActive}
              onChange={(e) => setFilterActive(e.target.value)}
            >
              <option value="">Todos los estados</option>
              <option value="true">Activas</option>
              <option value="false">Inactivas</option>
            </select>

            {/* Botón nueva pantalla */}
            <button
              onClick={handleNewVenue}
              className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors flex items-center justify-center gap-2"
            >
              <Plus className="w-5 h-5" />
              Nueva Pantalla
            </button>
          </div>
        </div>

        {/* Lista de pantallas */}
        <div className="bg-white rounded-lg shadow overflow-hidden">
          {loading ? (
            <div className="flex items-center justify-center h-64">
              <Loader2 className="w-8 h-8 text-blue-600 animate-spin" />
            </div>
          ) : venues.length === 0 ? (
            <div className="text-center py-12">
              <Film className="w-12 h-12 text-gray-400 mx-auto mb-4" />
              <p className="text-gray-500">No se encontraron pantallas de estreno</p>
            </div>
          ) : (
            <div className="overflow-x-auto">
              <table className="min-w-full divide-y divide-gray-200">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Pantalla
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Tipo
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Ubicación
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Películas
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Estado
                    </th>
                    <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Acciones
                    </th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {venues.map((venue) => {
                    const Icon = venueTypeIcons[venue.type as keyof typeof venueTypeIcons] || Film
                    return (
                      <tr key={venue.id} className="hover:bg-gray-50">
                        <td className="px-6 py-4 whitespace-nowrap">
                          <div className="flex items-center">
                            <div className="flex-shrink-0 h-10 w-10">
                              {venue.logoUrl ? (
                                <img
                                  className="h-10 w-10 rounded-lg object-contain"
                                  src={venue.logoUrl}
                                  alt={venue.name}
                                />
                              ) : (
                                <div className="h-10 w-10 rounded-lg bg-gray-200 flex items-center justify-center">
                                  <Icon className="w-5 h-5 text-gray-400" />
                                </div>
                              )}
                            </div>
                            <div className="ml-4">
                              <div className="text-sm font-medium text-gray-900">
                                {venue.name}
                              </div>
                              {venue.website && (
                                <a
                                  href={venue.website}
                                  target="_blank"
                                  rel="noopener noreferrer"
                                  className="text-sm text-blue-600 hover:text-blue-800 flex items-center gap-1"
                                >
                                  <ExternalLink className="w-3 h-3" />
                                  Sitio web
                                </a>
                              )}
                            </div>
                          </div>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap">
                          <span className="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-blue-100 text-blue-800">
                            {venueTypeLabels[venue.type as keyof typeof venueTypeLabels]}
                          </span>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                          {venue.type === 'CINEMA' && venue.city ? (
                            <div className="flex items-center gap-1">
                              <MapPin className="w-4 h-4" />
                              {venue.city}
                              {venue.province && `, ${venue.province}`}
                            </div>
                          ) : (
                            <span className="text-gray-400">-</span>
                          )}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                          {venue._count.screenings}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap">
                          <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${
                            venue.isActive
                              ? 'bg-green-100 text-green-800'
                              : 'bg-gray-100 text-gray-800'
                          }`}>
                            {venue.isActive ? 'Activa' : 'Inactiva'}
                          </span>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                          <div className="flex items-center justify-end gap-2">
                            <button
                              onClick={() => handleEdit(venue)}
                              className="text-blue-600 hover:text-blue-900 transition-colors"
                              title="Editar"
                            >
                              <Edit className="w-4 h-4" />
                            </button>
                            <button
                              onClick={() => handleDelete(venue.id)}
                              disabled={deletingVenueId === venue.id || venue._count.screenings > 0}
                              className="text-red-600 hover:text-red-900 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                              title={venue._count.screenings > 0 ? 'No se puede eliminar con películas asociadas' : 'Eliminar'}
                            >
                              {deletingVenueId === venue.id ? (
                                <Loader2 className="w-4 h-4 animate-spin" />
                              ) : (
                                <Trash2 className="w-4 h-4" />
                              )}
                            </button>
                          </div>
                        </td>
                      </tr>
                    )
                  })}
                </tbody>
              </table>
            </div>
          )}
        </div>

        {/* Paginación */}
        {totalPages > 1 && (
          <div className="bg-white px-4 py-3 flex items-center justify-between border-t border-gray-200 sm:px-6 mt-4 rounded-lg shadow">
            <div className="flex-1 flex justify-between sm:hidden">
              <button
                onClick={() => setCurrentPage(p => Math.max(1, p - 1))}
                disabled={currentPage === 1}
                className="relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
              >
                Anterior
              </button>
              <button
                onClick={() => setCurrentPage(p => Math.min(totalPages, p + 1))}
                disabled={currentPage === totalPages}
                className="ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
              >
                Siguiente
              </button>
            </div>
            <div className="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
              <div>
                <p className="text-sm text-gray-700">
                  Página <span className="font-medium">{currentPage}</span> de{' '}
                  <span className="font-medium">{totalPages}</span>
                </p>
              </div>
              <div>
                <nav className="relative z-0 inline-flex rounded-md shadow-sm -space-x-px" aria-label="Pagination">
                  <button
                    onClick={() => setCurrentPage(p => Math.max(1, p - 1))}
                    disabled={currentPage === 1}
                    className="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    Anterior
                  </button>
                  <button
                    onClick={() => setCurrentPage(p => Math.min(totalPages, p + 1))}
                    disabled={currentPage === totalPages}
                    className="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    Siguiente
                  </button>
                </nav>
              </div>
            </div>
          </div>
        )}
      </div>

      {/* Modal de creación/edición */}
      {showModal && (
        <div className="fixed inset-0 bg-gray-500 bg-opacity-75 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg max-w-2xl w-full max-h-[90vh] overflow-hidden">
            <div className="bg-gray-50 px-6 py-4 border-b border-gray-200">
              <div className="flex items-center justify-between">
                <h2 className="text-xl font-semibold text-gray-900">
                  {editingVenue ? 'Editar Pantalla de Estreno' : 'Nueva Pantalla de Estreno'}
                </h2>
                <button
                  onClick={() => {
                    setShowModal(false)
                    resetForm()
                    setEditingVenue(null)
                  }}
                  className="text-gray-400 hover:text-gray-500"
                >
                  <X className="w-6 h-6" />
                </button>
              </div>
            </div>

            <div className="p-6 overflow-y-auto max-h-[calc(90vh-8rem)]">
              <div className="space-y-6">
                {/* Información básica */}
                <div>
                  <h3 className="text-lg font-medium text-gray-900 mb-4">
                    Información Básica
                  </h3>
                  
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        Nombre *
                      </label>
                      <input
                        type="text"
                        value={formData.name}
                        onChange={(e) => setFormData({ ...formData, name: e.target.value })}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                      />
                      {formErrors.name && (
                        <p className="mt-1 text-sm text-red-600">{formErrors.name}</p>
                      )}
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        Tipo *
                      </label>
                      <select
                        value={formData.type}
                        onChange={(e) => setFormData({ ...formData, type: e.target.value })}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                      >
                        <option value="CINEMA">Cine</option>
                        <option value="STREAMING">Streaming</option>
                        <option value="TV_CHANNEL">Canal de TV</option>
                        <option value="OTHER">Otro</option>
                      </select>
                      {formErrors.type && (
                        <p className="mt-1 text-sm text-red-600">{formErrors.type}</p>
                      )}
                    </div>
                  </div>

                  <div className="mt-4">
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Descripción
                    </label>
                    <textarea
                      value={formData.description}
                      onChange={(e) => setFormData({ ...formData, description: e.target.value })}
                      rows={3}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                    />
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mt-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        URL del Logo
                      </label>
                      <input
                        type="url"
                        value={formData.logoUrl}
                        onChange={(e) => setFormData({ ...formData, logoUrl: e.target.value })}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                      />
                      {formErrors.logoUrl && (
                        <p className="mt-1 text-sm text-red-600">{formErrors.logoUrl}</p>
                      )}
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        Sitio Web
                      </label>
                      <input
                        type="url"
                        value={formData.website}
                        onChange={(e) => setFormData({ ...formData, website: e.target.value })}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                      />
                      {formErrors.website && (
                        <p className="mt-1 text-sm text-red-600">{formErrors.website}</p>
                      )}
                    </div>
                  </div>
                </div>

                {/* Ubicación (solo para cines) */}
                {formData.type === 'CINEMA' && (
                  <div>
                    <h3 className="text-lg font-medium text-gray-900 mb-4">
                      Ubicación
                    </h3>
                    
                    <div className="space-y-4">
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">
                          Dirección
                        </label>
                        <input
                          type="text"
                          value={formData.address}
                          onChange={(e) => setFormData({ ...formData, address: e.target.value })}
                          className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                        />
                      </div>

                      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-1">
                            Ciudad
                          </label>
                          <input
                            type="text"
                            value={formData.city}
                            onChange={(e) => setFormData({ ...formData, city: e.target.value })}
                            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                          />
                        </div>

                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-1">
                            Provincia
                          </label>
                          <input
                            type="text"
                            value={formData.province}
                            onChange={(e) => setFormData({ ...formData, province: e.target.value })}
                            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                          />
                        </div>

                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-1">
                            País
                          </label>
                          <input
                            type="text"
                            value={formData.country}
                            onChange={(e) => setFormData({ ...formData, country: e.target.value })}
                            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                          />
                        </div>
                      </div>

                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-1">
                            Latitud
                          </label>
                          <input
                            type="number"
                            step="0.000001"
                            value={formData.latitude}
                            onChange={(e) => setFormData({ ...formData, latitude: e.target.value })}
                            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                          />
                        </div>

                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-1">
                            Longitud
                          </label>
                          <input
                            type="number"
                            step="0.000001"
                            value={formData.longitude}
                            onChange={(e) => setFormData({ ...formData, longitude: e.target.value })}
                            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                          />
                        </div>
                      </div>
                    </div>
                  </div>
                )}

                {/* Estado */}
                <div>
                  <label className="flex items-center gap-2">
                    <input
                      type="checkbox"
                      checked={formData.isActive}
                      onChange={(e) => setFormData({ ...formData, isActive: e.target.checked })}
                      className="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500 focus:ring-2"
                    />
                    <span className="text-sm font-medium text-gray-700">
                      Pantalla activa
                    </span>
                  </label>
                </div>
              </div>

              {/* Botones */}
              <div className="mt-6 flex items-center justify-end gap-4 pt-4 border-t border-gray-200">
                <button
                  type="button"
                  onClick={() => {
                    setShowModal(false)
                    resetForm()
                    setEditingVenue(null)
                  }}
                  className="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors"
                >
                  Cancelar
                </button>
                <button
                  onClick={handleSubmit}
                  disabled={isSubmitting}
                  className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-2"
                >
                  {isSubmitting ? (
                    <>
                      <Loader2 className="w-4 h-4 animate-spin" />
                      Guardando...
                    </>
                  ) : (
                    <>
                      <Save className="w-4 h-4" />
                      {editingVenue ? 'Actualizar' : 'Crear'} Pantalla
                    </>
                  )}
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}

// ==================================================
// src/app/admin/themes/page.tsx
// ==================================================
// src/app/admin/themes/page.tsx
'use client'

import { useState, useEffect } from 'react'
import { useForm } from 'react-hook-form'
import { zodResolver } from '@hookform/resolvers/zod'
import { z } from 'zod'
import {
  Plus,
  Search,
  Edit,
  Trash2,
  Tag,
  X,
  Save,
  Loader2,
  Hash
} from 'lucide-react'
import { toast } from 'react-hot-toast'

// Schema de validación
const themeFormSchema = z.object({
  name: z.string().min(1, 'El nombre es requerido').max(100),
  description: z.string().optional()
})

type ThemeFormData = z.infer<typeof themeFormSchema>

interface Theme {
  id: number
  slug: string
  name: string
  description?: string
  usageCount: number
  movieCount?: number
  createdAt: string
}

export default function AdminThemesPage() {
  const [themes, setThemes] = useState<Theme[]>([])
  const [loading, setLoading] = useState(true)
  const [searchTerm, setSearchTerm] = useState('')
  const [sortBy, setSortBy] = useState('name')
  const [showModal, setShowModal] = useState(false)
  const [editingTheme, setEditingTheme] = useState<Theme | null>(null)
  const [deletingThemeId, setDeletingThemeId] = useState<number | null>(null)

  // Form
  const {
    register,
    handleSubmit,
    reset,
    setValue,
    formState: { errors, isSubmitting }
  } = useForm<ThemeFormData>({
    resolver: zodResolver(themeFormSchema)
  })

  // Cargar themes
  const fetchThemes = async () => {
    try {
      setLoading(true)
      const params = new URLSearchParams({
        search: searchTerm,
        sortBy: sortBy,
        sortOrder: sortBy === 'usageCount' ? 'desc' : 'asc'
      })

      const response = await fetch(`/api/themes?${params}`)
      if (!response.ok) throw new Error('Error al cargar los themes')

      const data = await response.json()
      setThemes(data || [])
    } catch (error) {
      toast.error('Error al cargar los themes')
      setThemes([])
    } finally {
      setLoading(false)
    }
  }

  useEffect(() => {
    fetchThemes()
  }, [searchTerm, sortBy])

  // Crear o actualizar theme
  const onSubmit = async (data: ThemeFormData) => {
    try {
      const url = editingTheme
        ? `/api/themes/${editingTheme.id}`
        : '/api/themes'

      const method = editingTheme ? 'PUT' : 'POST'
      const response = await fetch(url, {
        method,
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data)
      })

      if (!response.ok) {
        const error = await response.json()
        throw new Error(error.error || 'Error al guardar')
      }

      toast.success(editingTheme ? 'Theme actualizado' : 'Theme creado')
      setShowModal(false)
      reset()
      setEditingTheme(null)
      fetchThemes()
    } catch (error) {
      toast.error(error instanceof Error ? error.message : 'Error al guardar')
    }
  }

  // Editar theme
  const handleEdit = (theme: Theme) => {
    setEditingTheme(theme)
    setValue('name', theme.name)
    setValue('description', theme.description || '')
    setShowModal(true)
  }

  // Eliminar theme
  const handleDelete = async (id: number) => {
    if (!confirm('¿Estás seguro de eliminar este theme?')) return

    try {
      setDeletingThemeId(id)
      const response = await fetch(`/api/themes/${id}`, {
        method: 'DELETE'
      })

      if (!response.ok) {
        const error = await response.json()
        throw new Error(error.error || 'Error al eliminar')
      }

      toast.success('Theme eliminado')
      fetchThemes()
    } catch (error) {
      toast.error(error instanceof Error ? error.message : 'Error al eliminar')
    } finally {
      setDeletingThemeId(null)
    }
  }

  // Abrir modal para nuevo theme
  const handleNewTheme = () => {
    setEditingTheme(null)
    reset()
    setShowModal(true)
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white shadow">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="py-6">
            <h1 className="text-3xl font-bold text-gray-900">
              Administración de Themes/Keywords
            </h1>
            <p className="mt-2 text-gray-600">
              Gestiona los temas y palabras clave para categorizar las películas
            </p>
          </div>
        </div>
      </div>

      {/* Contenido principal */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Filtros y acciones */}
        <div className="bg-white rounded-lg shadow p-6 mb-6">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            {/* Búsqueda */}
            <div className="relative">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
              <input
                type="text"
                placeholder="Buscar themes..."
                className="pl-10 pr-4 py-2 w-full border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
              />
            </div>

            {/* Ordenar por */}
            <select
              className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
              value={sortBy}
              onChange={(e) => setSortBy(e.target.value)}
            >
              <option value="name">Nombre</option>
              <option value="usageCount">Más usadas</option>
              <option value="createdAt">Más recientes</option>
            </select>

            {/* Botón nuevo theme */}
            <button
              onClick={handleNewTheme}
              className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors flex items-center justify-center gap-2"
            >
              <Plus className="w-5 h-5" />
              Nuevo Theme
            </button>
          </div>

          {/* Estadísticas */}
          <div className="mt-6 grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="bg-gray-50 rounded-lg p-4">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-gray-500">Total Themes</p>
                  <p className="text-2xl font-bold text-gray-900">{themes.length}</p>
                </div>
                <Tag className="w-8 h-8 text-gray-400" />
              </div>
            </div>
            <div className="bg-gray-50 rounded-lg p-4">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-gray-500">Total Asignaciones</p>
                  <p className="text-2xl font-bold text-gray-900">
                    {themes.reduce((sum, t) => sum + (t.movieCount || 0), 0)}
                  </p>
                </div>
                <Hash className="w-8 h-8 text-gray-400" />
              </div>
            </div>
          </div>
        </div>

        {/* Lista de themes */}
        <div className="bg-white rounded-lg shadow overflow-hidden">
          {loading ? (
            <div className="flex items-center justify-center h-64">
              <Loader2 className="w-8 h-8 text-blue-600 animate-spin" />
            </div>
          ) : themes.length === 0 ? (
            <div className="text-center py-12">
              <Tag className="w-12 h-12 text-gray-400 mx-auto mb-4" />
              <p className="text-gray-500">No se encontraron themes</p>
            </div>
          ) : (
            <div className="overflow-x-auto">
              <table className="min-w-full divide-y divide-gray-200">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Theme
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Descripción
                    </th>
                    <th className="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Películas
                    </th>
                    <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Acciones
                    </th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {themes.map((theme) => (
                    <tr key={theme.id} className="hover:bg-gray-50">
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="flex items-center">
                          <Tag className="w-5 h-5 text-gray-400 mr-3" />
                          <div>
                            <div className="text-sm font-medium text-gray-900">
                              {theme.name}
                            </div>
                            <div className="text-sm text-gray-500">
                              /{theme.slug}
                            </div>
                          </div>
                        </div>
                      </td>
                      <td className="px-6 py-4">
                        <p className="text-sm text-gray-500 line-clamp-2">
                          {theme.description || '-'}
                        </p>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-center">
                        <span className="text-sm font-medium text-gray-900">
                          {theme.movieCount || 0}
                        </span>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                        <div className="flex items-center justify-end gap-2">
                          <button
                            onClick={() => handleEdit(theme)}
                            className="text-blue-600 hover:text-blue-900 transition-colors"
                            title="Editar"
                          >
                            <Edit className="w-4 h-4" />
                          </button>
                          <button
                            onClick={() => handleDelete(theme.id)}
                            disabled={deletingThemeId === theme.id || (theme.movieCount || 0) > 0}
                            className="text-red-600 hover:text-red-900 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                            title={theme.movieCount ? `En uso en ${theme.movieCount} películas` : 'Eliminar'}
                          >
                            {deletingThemeId === theme.id ? (
                              <Loader2 className="w-4 h-4 animate-spin" />
                            ) : (
                              <Trash2 className="w-4 h-4" />
                            )}
                          </button>
                        </div>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          )}
        </div>
      </div>

      {/* Modal de creación/edición */}
      {showModal && (
        <div className="fixed inset-0 bg-gray-500 bg-opacity-75 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg max-w-md w-full p-6">
            <div className="mb-4">
              <h2 className="text-xl font-semibold text-gray-900">
                {editingTheme ? 'Editar Theme' : 'Nuevo Theme'}
              </h2>
            </div>

            <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Nombre *
                </label>
                <input
                  type="text"
                  {...register('name')}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                  placeholder="Ej: Basada en hechos reales"
                />
                {errors.name && (
                  <p className="mt-1 text-sm text-red-600">{errors.name.message}</p>
                )}
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Descripción
                </label>
                <textarea
                  {...register('description')}
                  rows={3}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                  placeholder="Descripción opcional del theme"
                />
              </div>

              <div className="flex items-center justify-end gap-3 pt-4">
                <button
                  type="button"
                  onClick={() => {
                    setShowModal(false)
                    reset()
                    setEditingTheme(null)
                  }}
                  className="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors"
                >
                  Cancelar
                </button>
                <button
                  type="submit"
                  disabled={isSubmitting}
                  className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-2"
                >
                  {isSubmitting ? (
                    <>
                      <Loader2 className="w-4 h-4 animate-spin" />
                      Guardando...
                    </>
                  ) : (
                    <>
                      <Save className="w-4 h-4" />
                      {editingTheme ? 'Actualizar' : 'Crear'} Theme
                    </>
                  )}
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
    </div>
  )
}

// ==================================================
// src/app/api/movies/route.ts
// ==================================================
// src/app/api/movies/route.ts
import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/prisma'
import { createSlug } from '@/lib/utils'
import { z } from 'zod'
import { movieSchema } from '@/lib/schemas'


// GET /api/movies - Listar películas con filtros
export async function GET(request: NextRequest) {
  try {
    const searchParams = request.nextUrl.searchParams
    const page = parseInt(searchParams.get('page') || '1')
    const limit = parseInt(searchParams.get('limit') || '20')
    const search = searchParams.get('search') || ''
    const genre = searchParams.get('genre') || ''
    const year = searchParams.get('year') || ''
    const stage = searchParams.get('stage') || ''
    const sortBy = searchParams.get('sortBy') || 'createdAt'
    const sortOrder = searchParams.get('sortOrder') || 'desc'

    const skip = (page - 1) * limit

    // Construir filtros
    const where: any = {}

    if (search) {
      where.OR = [
        { title: { contains: search, mode: 'insensitive' } },
        { synopsis: { contains: search, mode: 'insensitive' } }
      ]
    }

    if (genre) {
      where.genres = {
        some: {
          genre: {
            slug: genre
          }
        }
      }
    }

    if (year) {
      where.year = parseInt(year)
    }

    if (stage) {
      where.stage = stage
    }

    // Obtener total de registros
    const total = await prisma.movie.count({ where })

    // Obtener películas
    const movies = await prisma.movie.findMany({
      where,
      skip,
      take: limit,
      orderBy: {
        [sortBy]: sortOrder
      },
      include: {
        colorType: true,
        genres: {
          include: {
            genre: true
          }
        },
        cast: {
          where: {
            isPrincipal: true
          },
          include: {
            person: true
          },
          orderBy: {
            billingOrder: 'asc'
          },
          take: 3
        },
        crew: {
          where: {
            role: 'Director'
          },
          include: {
            person: true
          }
        },
        movieCountries: {  // CAMBIADO DE countries A movieCountries
          where: {
            isPrimary: true
          },
          include: {
            country: true
          }
        },
        themes: {
          include: {
            theme: true
          }
        },
        images: {
          where: {
            type: 'POSTER',
            isPrimary: true
          },
          take: 1
        }
      }
    })

    // Formatear respuesta
    const formattedMovies = movies.map(movie => ({
      id: movie.id,
      slug: movie.slug,
      title: movie.title,
      year: movie.year,
      releaseYear: movie.releaseYear,
      releaseMonth: movie.releaseMonth,
      releaseDay: movie.releaseDay,
      // Opcionalmente, crear un campo de fecha formateada para mostrar
      releaseDateFormatted: movie.releaseDay
        ? `${movie.releaseYear}-${String(movie.releaseMonth).padStart(2, '0')}-${String(movie.releaseDay).padStart(2, '0')}`
        : movie.releaseMonth
          ? `${movie.releaseYear}-${String(movie.releaseMonth).padStart(2, '0')}`
          : movie.releaseYear?.toString() || null,
      // Construir fecha de inicio de filmación si existe
      filmingStartDate: movie.filmingStartYear
        ? new Date(
          movie.filmingStartYear,
          (movie.filmingStartMonth || 1) - 1,
          movie.filmingStartDay || 1
        ).toISOString()
        : null,

      // Construir fecha de fin de filmación si existe  
      filmingEndDate: movie.filmingEndYear
        ? new Date(
          movie.filmingEndYear,
          (movie.filmingEndMonth || 1) - 1,
          movie.filmingEndDay || 1
        ).toISOString()
        : null,
      duration: movie.duration,
      posterUrl: movie.posterUrl || movie.images[0]?.url,
      stage: movie.stage,
      colorType: movie.colorType,
      genres: movie.genres.map(g => g.genre),
      directors: movie.crew.map(c => c.person),
      mainCast: movie.cast.map(c => ({
        person: c.person,
        character: c.characterName
      })),
      country: movie.movieCountries[0]?.country.name || 'Argentina',  // CAMBIADO DE countries A movieCountries
      countries: movie.countries || ['Argentina'],  // Campo array directo
      isCoProduction: movie.is_coproduction || false,
      productionType: movie.production_type || 'national',
      themes: movie.themes
    }))

    return NextResponse.json({
      movies: formattedMovies,
      pagination: {
        page,
        limit,
        total,
        totalPages: Math.ceil(total / limit)
      }
    })
  } catch (error) {
    console.error('Error fetching movies:', error)
    return NextResponse.json(
      { error: 'Error al obtener las películas' },
      { status: 500 }
    )
  }
}

// POST /api/movies - Crear nueva película
export async function POST(request: NextRequest) {
  try {
    const body = await request.json()

    // Validar datos
    const validatedData = movieSchema.parse(body)

    // Generar slug único
    let slug = createSlug(validatedData.title)
    let slugExists = await prisma.movie.findUnique({ where: { slug } })
    let counter = 1

    while (slugExists) {
      slug = `${createSlug(validatedData.title)}-${counter}`
      slugExists = await prisma.movie.findUnique({ where: { slug } })
      counter++
    }

    // Extraer relaciones del body
    const {
      genres,
      cast,
      crew,
      countries,
      productionCompanies,
      distributionCompanies,
      alternativeTitles,
      themes,
      links,
      ...movieData
    } = validatedData

    // Transformar cast y crew para quitar la propiedad 'person'
    const processedCast = cast?.map((item: any) => ({
      personId: item.personId,
      characterName: item.characterName,
      billingOrder: item.billingOrder,
      isPrincipal: item.isPrincipal
    }))

    const processedCrew = crew?.map((item: any) => ({
      personId: item.personId,
      role: item.role,
      department: item.department,
      billingOrder: item.billingOrder
    }))

    // Crear película con relaciones
    const movie = await prisma.movie.create({
      data: {
        ...movieData,
        slug,
        releaseYear: movieData.releaseYear || null,
        releaseMonth: movieData.releaseMonth || null,
        releaseDay: movieData.releaseDay || null,
        filmingStartYear: movieData.filmingStartYear || null,
        filmingStartMonth: movieData.filmingStartMonth || null,
        filmingStartDay: movieData.filmingStartDay || null,
        filmingEndYear: movieData.filmingEndYear || null,
        filmingEndMonth: movieData.filmingEndMonth || null,
        filmingEndDay: movieData.filmingEndDay || null,

        // Crear relaciones
        genres: genres ? {
          create: genres.map((genreId, index) => ({
            genreId,
            isPrimary: index === 0
          }))
        } : undefined,
        alternativeTitles: alternativeTitles ? {
          create: alternativeTitles
        } : undefined,
        cast: cast ? {
          create: cast
        } : undefined,
        crew: crew ? {
          create: crew
        } : undefined,
        movieCountries: countries ? {  // CAMBIADO DE countries A movieCountries
          create: countries.map((countryId, index) => ({
            countryId,
            isPrimary: index === 0
          }))
        } : undefined,
        productionCompanies: productionCompanies ? {
          create: productionCompanies.map((companyId, index) => ({
            companyId,
            isPrimary: index === 0
          }))
        } : undefined,
        distributionCompanies: distributionCompanies ? {
          create: distributionCompanies.map(companyId => ({
            companyId,
            territory: 'Argentina'
          }))
        } : undefined,
        themes: themes ? {
          create: themes.map(themeId => ({
            themeId
          }))
        } : undefined,
        links: links ? {
          create: links.map((link: any) => ({
            type: link.type,
            url: link.url,
            title: link.title,
            isActive: link.isActive !== false
          }))
        } : undefined
      },
      include: {
        genres: {
          include: {
            genre: true
          }
        },
        cast: {
          include: {
            person: true
          }
        },
        crew: {
          include: {
            person: true
          }
        },
        movieCountries: {  // CAMBIADO DE countries A movieCountries
          include: {
            country: true
          }
        },
        themes: {
          include: {
            theme: true
          }
        },
        alternativeTitles: true,
        links: true
      }
    })

    return NextResponse.json(movie, { status: 201 })
  } catch (error) {
    if (error instanceof z.ZodError) {
      return NextResponse.json(
        { error: 'Datos inválidos', details: error.errors },
        { status: 400 }
      )
    }

    console.error('Error creating movie:', error)
    return NextResponse.json(
      { error: 'Error al crear la película' },
      { status: 500 }
    )
  }
}

// ==================================================
// src/app/api/movies/[id]/route.ts
// ==================================================
// ==================================================
// src/app/api/movies/[id]/route.ts
// ==================================================
import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/prisma'
import { z } from 'zod'
import { movieSchema } from '@/lib/schemas'

// GET /api/movies/[id] - Obtener película por ID o slug
export async function GET(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const idOrSlug = params.id

    // Determinar si es ID o slug
    const isId = /^\d+$/.test(idOrSlug)

    const movie = await prisma.movie.findUnique({
      where: isId ? { id: parseInt(idOrSlug) } : { slug: idOrSlug },
      include: {
        colorType: true,
        genres: {
          include: {
            genre: true
          }
        },
        cast: {
          include: {
            person: true
          },
          orderBy: {
            billingOrder: 'asc'
          }
        },
        crew: {
          include: {
            person: true
          },
          orderBy: [
            { department: 'asc' },
            { billingOrder: 'asc' }
          ]
        },
        movieCountries: {
          include: {
            country: true
          }
        },

        productionCompanies: {
          include: {
            company: true
          }
        },
        distributionCompanies: {
          include: {
            company: true
          }
        },
        images: {
          orderBy: {
            displayOrder: 'asc'
          }
        },
        videos: {
          orderBy: {
            isPrimary: 'desc'
          }
        },
        awards: {
          include: {
            award: true,
            recipient: true
          }
        },
        themes: {
          include: {
            theme: true
          }
        },
        links: {
          where: {
            isActive: true
          },
          orderBy: {
            type: 'asc'
          }
        },
        screenings: {
          include: {
            venue: true
          }
        }
      }
    })

    if (!movie) {
      return NextResponse.json(
        { error: 'Película no encontrada' },
        { status: 404 }
      )
    }

    return NextResponse.json(movie)
  } catch (error) {
    console.error('Error fetching movie:', error)
    return NextResponse.json(
      { error: 'Error al obtener la película' },
      { status: 500 }
    )
  }
}

// PUT /api/movies/[id] - Actualizar película
export async function PUT(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const id = parseInt(params.id)
    const body = await request.json()

    // Limpiar datos antes de validar
    const cleanedData = {
      ...body,
      ratingId: body.ratingId === 0 ? null : body.ratingId
    };


    // Validar datos
    const validatedData = movieSchema.parse(cleanedData)

    // Verificar que la película existe
    const existingMovie = await prisma.movie.findUnique({
      where: { id }
    })

    if (!existingMovie) {
      return NextResponse.json(
        { error: 'Película no encontrada' },
        { status: 404 }
      )
    }

    // Extraer relaciones - EXACTAMENTE COMO EN EL POST
    const {
      genres,
      cast,
      crew,
      countries,
      productionCompanies,
      distributionCompanies,
      themes,
      alternativeTitles,
      links,
      screeningVenues,
      ...movieData
    } = validatedData

    // Usar transacción para actualizar todo
    const movie = await prisma.$transaction(async (tx) => {
      const { colorTypeId, ratingId, ...movieDataClean } = movieData


      // 1. Actualizar datos básicos de la película - EXACTAMENTE COMO EN EL POST
      const updatedMovie = await tx.movie.update({
        where: { id },
        data: {
          ...movieDataClean,
          releaseYear: movieData.releaseYear || null,
          releaseMonth: movieData.releaseMonth || null,
          releaseDay: movieData.releaseDay || null,
          filmingStartYear: movieData.filmingStartYear || null,
          filmingStartMonth: movieData.filmingStartMonth || null,
          filmingStartDay: movieData.filmingStartDay || null,
          filmingEndYear: movieData.filmingEndYear || null,
          filmingEndMonth: movieData.filmingEndMonth || null,
          filmingEndDay: movieData.filmingEndDay || null,
          ...(ratingId !== undefined && {
            rating: (ratingId === null || ratingId === 0)  // Tratar 0 como null
              ? { disconnect: true }
              : { connect: { id: ratingId } }
          }),
          ...(colorTypeId && {
            colorType: { connect: { id: colorTypeId } }
          })
        }
      })

      // 2. Actualizar géneros
      if (genres) {
        await tx.movieGenre.deleteMany({ where: { movieId: id } })
        if (genres.length > 0) {
          await tx.movieGenre.createMany({
            data: genres.map((genreId, index) => ({
              movieId: id,
              genreId,
              isPrimary: index === 0
            }))
          })
        }
      }

      // 3. Actualizar cast
      if (cast) {
        await tx.movieCast.deleteMany({ where: { movieId: id } })
        if (cast.length > 0) {
          await tx.movieCast.createMany({
            data: cast.map(item => ({
              movieId: id,
              ...item
            }))
          })
        }
      }

      // 4. Actualizar crew
      if (crew) {
        await tx.movieCrew.deleteMany({ where: { movieId: id } })
        if (crew.length > 0) {
          await tx.movieCrew.createMany({
            data: crew.map(item => ({
              movieId: id,
              ...item
            }))
          })
        }
      }

      // 5. Actualizar países
      if (countries) {
        await tx.movieCountry.deleteMany({ where: { movieId: id } })
        if (countries.length > 0) {
          await tx.movieCountry.createMany({
            data: countries.map((countryId, index) => ({
              movieId: id,
              countryId,
              isPrimary: index === 0
            }))
          })
        }
      }

      // 7. Actualizar productoras
      if (productionCompanies) {
        await tx.movieProductionCompany.deleteMany({ where: { movieId: id } })
        if (productionCompanies.length > 0) {
          await tx.movieProductionCompany.createMany({
            data: productionCompanies.map((companyId, index) => ({
              movieId: id,
              companyId,
              isPrimary: index === 0
            }))
          })
        }
      }

      // 8. Actualizar distribuidoras
      if (distributionCompanies) {
        await tx.movieDistributionCompany.deleteMany({ where: { movieId: id } })
        if (distributionCompanies.length > 0) {
          await tx.movieDistributionCompany.createMany({
            data: distributionCompanies.map(companyId => ({
              movieId: id,
              companyId,
              territory: 'Argentina'
            }))
          })
        }
      }

      // 9. Actualizar temas
      if (themes) {
        await tx.movieTheme.deleteMany({ where: { movieId: id } })
        if (themes.length > 0) {
          await tx.movieTheme.createMany({
            data: themes.map(themeId => ({
              movieId: id,
              themeId
            }))
          })
        }
      }

      // 10. Actualizar títulos alternativos
      if (alternativeTitles !== undefined) {
        await tx.movieAlternativeTitle.deleteMany({ where: { movieId: id } })
        if (alternativeTitles && alternativeTitles.length > 0) {
          await tx.movieAlternativeTitle.createMany({
            data: alternativeTitles.map(title => ({
              movieId: id,
              title: title.title,
              description: title.description || null
            }))
          })
        }
      }

      // 11. Actualizar links oficiales
      if (links !== undefined) {
        await tx.movieLink.deleteMany({ where: { movieId: id } })
        if (links && links.length > 0) {
          await tx.movieLink.createMany({
            data: links.map((link: any) => ({
              movieId: id,
              type: link.type,
              url: link.url,
              title: link.title || null,
              isActive: link.isActive !== false
            }))
          })
        }
      }

      // 12. Actualizar screening venues
      if (screeningVenues !== undefined) {
        await tx.movieScreening.deleteMany({ where: { movieId: id } })
        if (screeningVenues && screeningVenues.length > 0) {
          await tx.movieScreening.createMany({
            data: screeningVenues.map((sv: any) => ({
              movieId: id,
              venueId: sv.venueId,
              screeningDate: sv.screeningDate ? new Date(sv.screeningDate) : null,
              isPremiere: sv.isPremiere || false,
              isExclusive: sv.isExclusive || false
            }))
          })
        }
      }

      // 13. Retornar la película actualizada con todas las relaciones
      return await tx.movie.findUnique({
        where: { id },
        include: {
          genres: {
            include: {
              genre: true
            }
          },
          cast: {
            include: {
              person: true
            }
          },
          crew: {
            include: {
              person: true
            }
          },
          themes: {
            include: {
              theme: true
            }
          },
          movieCountries: {
            include: {
              country: true
            }
          },
          productionCompanies: {
            include: {
              company: true
            }
          },
          distributionCompanies: {
            include: {
              company: true
            }
          },
          links: true,
          screenings: {
            include: {
              venue: true
            }
          },
          colorType: true,
        }
      })
    }, {
      maxWait: 10000, // Esperar máximo 10 segundos para iniciar
      timeout: 30000, // Timeout de 30 segundos para la transacción
    })

    return NextResponse.json(movie)
  } catch (error) {
    if (error instanceof z.ZodError) {
      console.log('=== ERRORES DE VALIDACIÓN ZOD ===')
      console.log(JSON.stringify(error.errors, null, 2))
      console.log('=================================')
      return NextResponse.json(
        { error: 'Datos inválidos', details: error.errors },
        { status: 400 }
      )
    }

    console.error('Error updating movie:', error)
    return NextResponse.json(
      { error: 'Error al actualizar la película' },
      { status: 500 }
    )
  }
}

// DELETE /api/movies/[id] - Eliminar película
export async function DELETE(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const id = parseInt(params.id)

    // Verificar que la película existe
    const movie = await prisma.movie.findUnique({
      where: { id }
    })

    if (!movie) {
      return NextResponse.json(
        { error: 'Película no encontrada' },
        { status: 404 }
      )
    }

    // Eliminar película (las relaciones se eliminan en cascada)
    await prisma.movie.delete({
      where: { id }
    })

    return NextResponse.json(
      { message: 'Película eliminada exitosamente' },
      { status: 200 }
    )
  } catch (error) {
    console.error('Error deleting movie:', error)
    return NextResponse.json(
      { error: 'Error al eliminar la película' },
      { status: 500 }
    )
  }
}

// ==================================================
// src/app/api/people/route.ts
// ==================================================
// src/app/api/people/route.ts

import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';
import { generatePersonSlug } from '@/lib/people/peopleUtils';

export async function GET(request: NextRequest) {
  try {
    const searchParams = request.nextUrl.searchParams;
    const search = searchParams.get('search');
    const gender = searchParams.get('gender');
    const isActive = searchParams.get('isActive');
    const hasLinks = searchParams.get('hasLinks');
    const page = parseInt(searchParams.get('page') || '1');
    const limit = parseInt(searchParams.get('limit') || '20');

    // Construir where clause
    const where: any = {};
    
    if (search) {
      where.OR = [
        { firstName: { contains: search, mode: 'insensitive' } },
        { lastName: { contains: search, mode: 'insensitive' } },
        { realName: { contains: search, mode: 'insensitive' } },
      ];
    }

    if (gender) {
      where.gender = gender;
    }

    if (isActive !== null && isActive !== '') {
      where.isActive = isActive === 'true';
    }

    if (hasLinks !== null && hasLinks !== '') {
      where.hasLinks = hasLinks === 'true';
    }

    // Obtener total para paginación
    const totalCount = await prisma.person.count({ where });

    // Obtener personas con paginación
    const people = await prisma.person.findMany({
      where,
      include: {
        _count: {
          select: {
            links: true,
            castRoles: true,
            crewRoles: true,
          },
        },
      },
      orderBy: [
        { lastName: 'asc' },
        { firstName: 'asc' },
      ],
      skip: (page - 1) * limit,
      take: limit,
    });

    const totalPages = Math.ceil(totalCount / limit);

    return NextResponse.json({
      data: people,
      totalCount,
      page,
      totalPages,
      hasMore: page < totalPages,
    });
  } catch (error) {
    console.error('Error fetching people:', error);
    return NextResponse.json(
      { message: 'Error al obtener personas' },
      { status: 500 }
    );
  }
}

export async function POST(request: NextRequest) {
  try {
    const data = await request.json();
    
    // Si es una creación rápida (solo con nombre)
    if (data.name && !data.firstName && !data.lastName) {
      // Dividir el nombre en firstName y lastName
      const nameParts = data.name.trim().split(' ');
      data.firstName = nameParts[0];
      data.lastName = nameParts.slice(1).join(' ') || null;
    }
    
    // Generar slug único basado en firstName y lastName
    let baseSlug = generatePersonSlug(data.firstName, data.lastName);
    let slug = baseSlug;
    let counter = 1;
    
    // Verificar si el slug ya existe y generar uno único
    while (await prisma.person.findUnique({ where: { slug } })) {
      slug = `${baseSlug}-${counter}`;
      counter++;
    }

    // Preparar los datos de la persona
    const personData: any = {
      slug,
      firstName: data.firstName || null,
      lastName: data.lastName || null,
      realName: data.realName || null,
      birthDate: data.birthDate ? new Date(data.birthDate) : null,
      deathDate: data.deathDate ? new Date(data.deathDate) : null,
      biography: data.biography || null,
      photoUrl: data.photoUrl || null,
      gender: data.gender || null,
      hideAge: data.hideAge || false,
      isActive: data.isActive ?? true,
      hasLinks: data.links && data.links.length > 0,
    };

    // TODO: Manejar ubicaciones birthLocation y deathLocation
    // Por ahora solo guardamos el texto en la biografía o notas

    // Crear la persona y sus links en una transacción
    const person = await prisma.$transaction(async (tx) => {
      // Crear la persona
      const newPerson = await tx.person.create({
        data: personData,
      });

      // Si hay links, crearlos
      if (data.links && data.links.length > 0) {
        await tx.personLink.createMany({
          data: data.links.map((link: any, index: number) => ({
            personId: newPerson.id,
            type: link.type,
            url: link.url,
            title: link.title || null,
            displayOrder: link.displayOrder ?? index,
            isVerified: link.isVerified || false,
            isActive: link.isActive ?? true,
          })),
        });
      }

      // Retornar la persona con sus relaciones
      return tx.person.findUnique({
        where: { id: newPerson.id },
        include: {
          links: true,
          _count: {
            select: {
              links: true,
              castRoles: true,
              crewRoles: true,
            },
          },
        },
      });
    });

    return NextResponse.json(person, { status: 201 });
  } catch (error) {
    console.error('Error creating person:', error);
    return NextResponse.json(
      { message: 'Error al crear persona' },
      { status: 500 }
    );
  }
}

// ==================================================
// src/app/api/people/[id]/route.ts
// ==================================================
// src/app/api/people/[id]/route.ts

import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';
import { generatePersonSlug } from '@/lib/people/peopleUtils';

export async function GET(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const { id } = await params;
    const person = await prisma.person.findUnique({
      where: { id: parseInt(id) },
      include: {
        links: {
          orderBy: { displayOrder: 'asc' },
        },
        birthLocation: true,
        deathLocation: true,
        _count: {
          select: {
            castRoles: true,
            crewRoles: true,
            awards: true,
          },
        },
      },
    });

    if (!person) {
      return NextResponse.json(
        { message: 'Persona no encontrada' },
        { status: 404 }
      );
    }

    return NextResponse.json(person);
  } catch (error) {
    console.error('Error fetching person:', error);
    return NextResponse.json(
      { message: 'Error al obtener persona' },
      { status: 500 }
    );
  }
}

export async function PUT(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const { id } = await params;
    const data = await request.json();
    const personId = parseInt(id);
    
    // Verificar si necesitamos actualizar el slug
    let slug = undefined;
    const currentPerson = await prisma.person.findUnique({
      where: { id: personId },
      select: { firstName: true, lastName: true, slug: true },
    });

    if (currentPerson) {
      const nameChanged = 
        currentPerson.firstName !== data.firstName || 
        currentPerson.lastName !== data.lastName;
      
      if (nameChanged) {
        // Generar nuevo slug si cambió el nombre
        let baseSlug = generatePersonSlug(data.firstName, data.lastName);
        slug = baseSlug;
        let counter = 1;
        
        // Verificar que el nuevo slug no exista (excepto para la persona actual)
        while (true) {
          const existing = await prisma.person.findUnique({
            where: { slug },
            select: { id: true },
          });
          
          if (!existing || existing.id === personId) break;
          
          slug = `${baseSlug}-${counter}`;
          counter++;
        }
      }
    }

    // Preparar datos de actualización
    const updateData: any = {
      ...(slug && { slug }),
      firstName: data.firstName || null,
      lastName: data.lastName || null,
      realName: data.realName || null,
      birthDate: data.birthDate ? new Date(data.birthDate) : null,
      deathDate: data.deathDate ? new Date(data.deathDate) : null,
      biography: data.biography || null,
      photoUrl: data.photoUrl || null,
      gender: data.gender || null,
      hideAge: data.hideAge || false,
      isActive: data.isActive ?? true,
      hasLinks: data.links && data.links.length > 0,
    };

    // Actualizar persona y links en una transacción
    const person = await prisma.$transaction(async (tx) => {
      // Actualizar la persona
      const updatedPerson = await tx.person.update({
        where: { id: personId },
        data: updateData,
      });

      // Eliminar links existentes
      await tx.personLink.deleteMany({
        where: { personId },
      });

      // Crear nuevos links si existen
      if (data.links && data.links.length > 0) {
        await tx.personLink.createMany({
          data: data.links.map((link: any, index: number) => ({
            personId,
            type: link.type,
            url: link.url,
            title: link.title || null,
            displayOrder: link.displayOrder ?? index,
            isVerified: link.isVerified || false,
            isActive: link.isActive ?? true,
          })),
        });
      }

      // Retornar la persona actualizada con sus relaciones
      return tx.person.findUnique({
        where: { id: personId },
        include: {
          links: true,
          _count: {
            select: {
              links: true,
              castRoles: true,
              crewRoles: true,
            },
          },
        },
      });
    });

    return NextResponse.json(person);
  } catch (error) {
    console.error('Error updating person:', error);
    return NextResponse.json(
      { message: 'Error al actualizar persona' },
      { status: 500 }
    );
  }
}

export async function DELETE(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const { id } = await params;
    // Verificar si la persona tiene películas asociadas
    const person = await prisma.person.findUnique({
      where: { id: parseInt(id) },
      include: {
        _count: {
          select: {
            castRoles: true,
            crewRoles: true,
          },
        },
      },
    });

    if (!person) {
      return NextResponse.json(
        { message: 'Persona no encontrada' },
        { status: 404 }
      );
    }

    const totalRoles = person._count.castRoles + person._count.crewRoles;
    if (totalRoles > 0) {
      return NextResponse.json(
        { 
          message: `No se puede eliminar esta persona porque está asociada a ${totalRoles} película(s)` 
        },
        { status: 400 }
      );
    }

    // Eliminar la persona (los links se eliminan en cascada)
    await prisma.person.delete({
      where: { id: parseInt(id) },
    });

    return NextResponse.json({ message: 'Persona eliminada correctamente' });
  } catch (error) {
    console.error('Error deleting person:', error);
    return NextResponse.json(
      { message: 'Error al eliminar persona' },
      { status: 500 }
    );
  }
}

// ==================================================
// src/components/admin/AlternativeTitlesManager.tsx
// ==================================================
'use client'

import { useState, useEffect } from 'react'
import { Plus, X, Edit2, Save } from 'lucide-react'

interface AlternativeTitle {
  id?: number
  title: string
  description?: string
}

interface AlternativeTitlesManagerProps {
  onChange: (titles: AlternativeTitle[]) => void
  initialTitles?: AlternativeTitle[]
}

export default function AlternativeTitlesManager({ 
  onChange, 
  initialTitles = [] 
}: AlternativeTitlesManagerProps) {
  const [titles, setTitles] = useState<AlternativeTitle[]>(initialTitles)
  const [showForm, setShowForm] = useState(false)
  const [editingIndex, setEditingIndex] = useState<number | null>(null)
  const [currentTitle, setCurrentTitle] = useState<AlternativeTitle>({
    title: '',
    description: ''
  })

  useEffect(() => {
    onChange(titles)
  }, [titles])

  const handleAdd = () => {
    if (!currentTitle.title.trim()) return
    
    if (editingIndex !== null) {
      const updatedTitles = [...titles]
      updatedTitles[editingIndex] = currentTitle
      setTitles(updatedTitles)
      setEditingIndex(null)
    } else {
      setTitles([...titles, currentTitle])
    }
    
    setCurrentTitle({ title: '', description: '' })
    setShowForm(false)
  }

  const handleEdit = (index: number) => {
    setCurrentTitle(titles[index])
    setEditingIndex(index)
    setShowForm(true)
  }

  const handleDelete = (index: number) => {
    setTitles(titles.filter((_, i) => i !== index))
  }

  const handleCancel = () => {
    setCurrentTitle({ title: '', description: '' })
    setEditingIndex(null)
    setShowForm(false)
  }

  return (
    <div className="space-y-4">
      <div className="flex items-center justify-between">
        <h3 className="text-lg font-medium text-gray-900">Títulos Alternativos</h3>
        {!showForm && (
          <button
            type="button"
            onClick={() => setShowForm(true)}
            className="inline-flex items-center gap-2 px-3 py-1.5 text-sm bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
          >
            <Plus className="w-4 h-4" />
            Agregar Título
          </button>
        )}
      </div>

      {/* Lista de títulos */}
      {titles.length > 0 && (
        <div className="space-y-2">
          {titles.map((title, index) => (
            <div key={index} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
              <div className="flex-1">
                <p className="font-medium text-gray-900">{title.title}</p>
                {title.description && (
                  <p className="text-sm text-gray-600 mt-1">{title.description}</p>
                )}
              </div>
              <div className="flex items-center gap-2">
                <button
                  type="button"
                  onClick={() => handleEdit(index)}
                  className="text-blue-600 hover:text-blue-800 p-1"
                  title="Editar"
                >
                  <Edit2 className="w-4 h-4" />
                </button>
                <button
                  type="button"
                  onClick={() => handleDelete(index)}
                  className="text-red-600 hover:text-red-800 p-1"
                  title="Eliminar"
                >
                  <X className="w-4 h-4" />
                </button>
              </div>
            </div>
          ))}
        </div>
      )}

      {/* Formulario */}
      {showForm && (
        <div className="border border-gray-200 rounded-lg p-4 space-y-4 bg-gray-50">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Título alternativo *
            </label>
            <input
              type="text"
              value={currentTitle.title}
              onChange={(e) => setCurrentTitle({ ...currentTitle, title: e.target.value })}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
              placeholder="Ej: Wild Tales"
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Descripción (opcional)
            </label>
            <input
              type="text"
              value={currentTitle.description || ''}
              onChange={(e) => setCurrentTitle({ ...currentTitle, description: e.target.value })}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
              placeholder="Ej: Título de rodaje, Título internacional, Título abreviado, etc."
            />
          </div>

          <div className="flex justify-end gap-3">
            <button
              type="button"
              onClick={handleCancel}
              className="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50"
            >
              Cancelar
            </button>
            <button
              type="button"
              onClick={handleAdd}
              disabled={!currentTitle.title.trim()}
              className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-2"
            >
              <Save className="w-4 h-4" />
              {editingIndex !== null ? 'Actualizar' : 'Agregar'}
            </button>
          </div>
        </div>
      )}

      {titles.length === 0 && !showForm && (
        <p className="text-sm text-gray-500 italic">No hay títulos alternativos agregados</p>
      )}
    </div>
  )
}

// ==================================================
// src/components/admin/CloudinaryGallery.tsx
// ==================================================
// src/components/admin/CloudinaryGallery.tsx
'use client'

import { CldUploadWidget } from 'next-cloudinary'
import { useState } from 'react'
import { Plus, X } from 'lucide-react'
import { CloudinaryImage } from '@/components/movies/CloudinaryImage'

interface CloudinaryGalleryProps {
  movieId: number
  images: Array<{
    url: string
    publicId?: string
  }>
  onChange: (images: any[]) => void
}

export function CloudinaryGallery({ movieId, images, onChange }: CloudinaryGalleryProps) {
  const [galleryImages, setGalleryImages] = useState(images)

  const handleUploadSuccess = (result: any) => {
    const newImage = {
      url: result.info.secure_url,
      publicId: result.info.public_id,
      type: 'STILL'
    }
    
    const updated = [...galleryImages, newImage]
    setGalleryImages(updated)
    onChange(updated)
  }

  const handleRemove = (index: number) => {
    const updated = galleryImages.filter((_, i) => i !== index)
    setGalleryImages(updated)
    onChange(updated)
  }

  return (
    <div>
      <h3 className="text-lg font-medium text-gray-900 mb-4">
        Galería de Imágenes
      </h3>
      
      <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
        {galleryImages.map((image, index) => (
          <div key={index} className="relative group">
            <CloudinaryImage
              src={image.url}
              alt={`Imagen ${index + 1}`}
              width={300}
              height={200}
              className="w-full aspect-video object-cover rounded-lg"
            />
            <button
              type="button"
              onClick={() => handleRemove(index)}
              className="absolute top-2 right-2 p-1 bg-red-600 text-white rounded-full opacity-0 group-hover:opacity-100 transition-opacity"
            >
              <X className="w-4 h-4" />
            </button>
          </div>
        ))}
        
        <CldUploadWidget
          uploadPreset="cinenacional-unsigned"
          options={{
            folder: `cinenacional/gallery/${movieId}`,
            sources: ['local', 'url'],
            multiple: true,
            maxFiles: 10
          }}
          onUpload={handleUploadSuccess}
        >
          {({ open }) => (
            <button
              type="button"
              onClick={() => open()}
              className="aspect-video border-2 border-dashed border-gray-300 rounded-lg flex items-center justify-center hover:border-gray-400 transition-colors"
            >
              <div className="text-center">
                <Plus className="w-8 h-8 text-gray-400 mx-auto" />
                <span className="text-sm text-gray-500 mt-2 block">
                  Agregar imágenes
                </span>
              </div>
            </button>
          )}
        </CldUploadWidget>
      </div>
    </div>
  )
}

// ==================================================
// src/components/admin/CloudinaryUploadWidget.tsx
// ==================================================
// src/components/admin/CloudinaryUploadWidget.tsx
'use client'

import { CldUploadWidget } from 'next-cloudinary'
import { useState, useEffect } from 'react'
import { Upload, X, ImageIcon } from 'lucide-react'
import Image from 'next/image'
import { toast } from 'react-hot-toast'

declare global {
  interface Window {
    cloudinaryWidget: any;
  }
}

interface CloudinaryUploadWidgetProps {
  value?: string
  onChange: (url: string, publicId?: string) => void
  label: string
  type?: 'poster' | 'backdrop' | 'gallery'
  movieId?: string | number
  disabled?: boolean
}

export function CloudinaryUploadWidget({ 
  value, 
  onChange, 
  label, 
  type = 'poster',
  movieId,
  disabled = false
}: CloudinaryUploadWidgetProps) {
  const [imageUrl, setImageUrl] = useState(value || '')
  
  // Sincronizar con el valor externo
  useEffect(() => {
    setImageUrl(value || '')
  }, [value])
  
  // Configuración según el tipo de imagen
  const getUploadPreset = () => {
    // Puedes crear estos presets en tu dashboard de Cloudinary
    switch(type) {
      case 'poster':
        return {
          folder: `cinenacional/posters${movieId ? `/${movieId}` : ''}`,
          transformation: [
            { width: 500, height: 750, crop: 'fill', gravity: 'auto' }
          ],
          format: 'auto',
          quality: 'auto:best'
        }
      case 'backdrop':
        return {
          folder: `cinenacional/backdrops${movieId ? `/${movieId}` : ''}`,
          transformation: [
            { width: 1920, height: 1080, crop: 'fill', gravity: 'auto' }
          ],
          format: 'auto',
          quality: 'auto:best'
        }
      default:
        return {
          folder: `cinenacional/gallery${movieId ? `/${movieId}` : ''}`,
          transformation: [
            { width: 1200, height: 1200, crop: 'limit' }
          ],
          format: 'auto',
          quality: 'auto:good'
        }
    }
  }

  const handleUploadSuccess = (result: any) => {
    console.log('Upload result:', result)
    const { secure_url, public_id } = result.info
    console.log('Setting imageUrl to:', secure_url)
    setImageUrl(secure_url)
    onChange(secure_url, public_id)
    toast.success('Imagen subida exitosamente')
  }

  const handleRemove = () => {
    setImageUrl('')
    onChange('', '')
  }

  const aspectRatio = type === 'poster' ? '2/3' : type === 'backdrop' ? '16/9' : '1/1'
  const dimensions = type === 'poster' ? '500x750px' : type === 'backdrop' ? '1920x1080px' : '1200x1200px'

  return (
    <div>
      <label className="block text-sm font-medium text-gray-700 mb-2">
        {label}
      </label>
      
      {!imageUrl ? (
        <CldUploadWidget
          uploadPreset="cinenacional-unsigned"
          options={{
            ...getUploadPreset(),
            sources: ['local', 'url', 'google_drive', 'dropbox'],
            multiple: false,
            maxFiles: 1,
            clientAllowedFormats: ['jpg', 'jpeg', 'png', 'webp'],
            maxFileSize: 10000000, // 10MB
            showCompletedButton: true,  
            showUploadMoreButton: false, 
            singleUploadAutoClose: false,
            showSkipCropButton: false,
            showPoweredBy: false,
            autoMinimize: false,
            language: 'es',
            text: {
              es: {
                or: 'O',
                menu: {
                  files: 'Mis archivos',
                  web: 'Dirección web',
                },
                selection_counter: {
                  selected: 'Seleccionado'
                },
                actions: {
                  upload: 'Subir',
                  clear_all: 'Limpiar todo',
                  log_out: 'Cerrar sesión',
                  done: 'Listo'
                },
                messages: {
                  max_files_limit: 'Solo puedes subir 1 archivo',
                  min_files_limit: 'Debes subir al menos 1 archivo',
                  max_file_size: 'El archivo es demasiado grande (máx. 10MB)',
                  allowed_formats: 'Formato no permitido. Usa: JPG, PNG, WEBP',
                  upload_successful: 'Subida exitosa',
                  upload_failed: 'Error al subir'
                },
                local: {
                  browse: 'Buscar',
                  dd_title_single: 'Arrastra y suelta tu imagen aquí',
                  drop_title_single: 'Suelta el archivo para subirlo',
                }
              }
            }
          }}
          onOpen={(widget: any) => {
            console.log('Widget opened')
            // Guardar referencia al widget
            window.cloudinaryWidget = widget
          }}
          onUpload={(result: any, widget: any) => {
            handleUploadSuccess(result)
            // Prevenir el cierre automático
            if (widget && widget.isShowing()) {
              console.log('Preventing auto-close')
              setTimeout(() => {
                if (!widget.isShowing() && window.cloudinaryWidget) {
                  console.log('Reopening widget')
                  window.cloudinaryWidget.open()
                }
              }, 100)
            }
          }}
          onSuccess={(result: any) => {
            console.log('Success event:', result)
            handleUploadSuccess(result)
          }}
          onClose={(result: any) => {
            console.log('Widget closed', result)
          }}
        >
          {({ open }) => (
            <button
              type="button"
              onClick={() => open()}
              disabled={disabled}
              className="relative block w-full border-2 border-dashed border-gray-300 rounded-lg p-12 text-center hover:border-gray-400 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 cursor-pointer transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
            >
              <Upload className="mx-auto h-12 w-12 text-gray-400" />
              <p className="mt-2 text-sm font-medium text-gray-900">
                Click para subir o arrastra una imagen aquí
              </p>
              <p className="mt-1 text-xs text-gray-500">
                JPG, PNG o WEBP hasta 10MB
              </p>
              <p className="mt-1 text-xs text-gray-400">
                Tamaño recomendado: {dimensions}
              </p>
            </button>
          )}
        </CldUploadWidget>
      ) : (
        <div className="space-y-2">
          {/* Preview de la imagen con borde interactivo - envuelto en CldUploadWidget */}
          <CldUploadWidget
            uploadPreset="cinenacional-unsigned"
            options={{
              ...getUploadPreset(),
              sources: ['local', 'url'],
              multiple: false,
              maxFiles: 1,
              singleUploadAutoClose: false,
              showCompletedButton: true,
            }}
            onUpload={(result: any) => handleUploadSuccess(result)}
            onSuccess={(result: any) => handleUploadSuccess(result)}
          >
            {({ open }) => (
              <div 
                onClick={() => open()}
                className="relative rounded-lg overflow-hidden bg-gray-100 shadow-lg cursor-pointer border-2 border-transparent hover:border-blue-500 transition-all group"
                style={{ aspectRatio }}
              >
                <Image
                  src={imageUrl}
                  alt={label}
                  fill
                  className="object-cover"
                />
                
                {/* Overlay al hacer hover */}
                <div className="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-40 transition-all flex items-center justify-center opacity-0 group-hover:opacity-100 pointer-events-none">
                  <p className="text-white font-medium text-lg drop-shadow-lg">Click para cambiar</p>
                </div>
              </div>
            )}
          </CldUploadWidget>
          
          {/* Botones siempre visibles */}
          <div className="flex gap-2">
            <CldUploadWidget
              uploadPreset="cinenacional-unsigned"
              options={{
                ...getUploadPreset(),
                sources: ['local', 'url'],
                multiple: false,
                maxFiles: 1,
                singleUploadAutoClose: false,
                showCompletedButton: true,
              }}
              onUpload={(result: any) => handleUploadSuccess(result)}
              onSuccess={(result: any) => handleUploadSuccess(result)}
            >
              {({ open }) => (
                <button
                  type="button"
                  onClick={() => open()}
                  className="flex-1 bg-gray-100 text-gray-700 px-4 py-2 rounded-lg hover:bg-gray-200 transition-colors flex items-center justify-center gap-2"
                >
                  <ImageIcon className="w-4 h-4" />
                  <span>Cambiar imagen</span>
                </button>
              )}
            </CldUploadWidget>
            
            <button
              type="button"
              onClick={handleRemove}
              className="bg-red-100 text-red-700 px-4 py-2 rounded-lg hover:bg-red-200 transition-colors flex items-center gap-2"
            >
              <X className="w-4 h-4" />
              <span>Eliminar</span>
            </button>
          </div>
          
          {/* Info de la imagen */}
          <div className="text-xs text-gray-500 text-center">
            Imagen subida correctamente • {dimensions}
          </div>
          <div className="text-xs text-gray-400 text-center">
            Puedes hacer click en la imagen o usar los botones para cambiarla
          </div>
        </div>
      )}
    </div>
  )
}

// ==================================================
// src/components/admin/CountrySelector.tsx
// ==================================================
// src/components/admin/CountrySelector.tsx
'use client'

import { useState, useRef, useEffect } from 'react'
import { X, Globe, Search } from 'lucide-react'

interface Country {
  id: number
  name: string
  code?: string
}

interface CountrySelectorProps {
  availableCountries: Country[]
  selectedCountries: number[]
  onChange: (countries: number[]) => void
  placeholder?: string
}

export function CountrySelector({
  availableCountries,
  selectedCountries,
  onChange,
  placeholder = "Buscar país..."
}: CountrySelectorProps) {
  const [searchTerm, setSearchTerm] = useState('')
  const [showSuggestions, setShowSuggestions] = useState(false)
  const [highlightedIndex, setHighlightedIndex] = useState(-1)
  const inputRef = useRef<HTMLInputElement>(null)
  const containerRef = useRef<HTMLDivElement>(null)

  // Países frecuentes para mostrar primero
  const frequentCountries = ['Argentina', 'España', 'Francia', 'Brasil', 'México', 'Chile', 'Uruguay', 'Estados Unidos', 'Italia', 'Alemania']

  // Obtener los objetos de países seleccionados
  const selectedCountryObjects = selectedCountries
    .map(id => availableCountries.find(c => c.id === id))
    .filter(Boolean) as Country[]

  // Filtrar países disponibles (excluyendo los ya seleccionados)
  const filteredCountries = availableCountries
    .filter(country => !selectedCountries.includes(country.id))
    .filter(country => 
      searchTerm === '' || 
      country.name.toLowerCase().includes(searchTerm.toLowerCase())
    )
    .sort((a, b) => {
      // Priorizar países frecuentes
      const aIsFrequent = frequentCountries.includes(a.name)
      const bIsFrequent = frequentCountries.includes(b.name)
      
      if (aIsFrequent && !bIsFrequent) return -1
      if (!aIsFrequent && bIsFrequent) return 1
      
      // Luego ordenar alfabéticamente
      return a.name.localeCompare(b.name)
    })

  // Manejar click fuera del componente
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (containerRef.current && !containerRef.current.contains(event.target as Node)) {
        setShowSuggestions(false)
      }
    }

    document.addEventListener('mousedown', handleClickOutside)
    return () => document.removeEventListener('mousedown', handleClickOutside)
  }, [])

  // Manejar navegación con teclado
  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === 'ArrowDown') {
      e.preventDefault()
      setHighlightedIndex(prev => 
        prev < filteredCountries.length - 1 ? prev + 1 : prev
      )
    } else if (e.key === 'ArrowUp') {
      e.preventDefault()
      setHighlightedIndex(prev => prev > 0 ? prev - 1 : -1)
    } else if (e.key === 'Enter') {
      e.preventDefault()
      if (highlightedIndex >= 0 && highlightedIndex < filteredCountries.length) {
        handleSelectCountry(filteredCountries[highlightedIndex])
      }
    } else if (e.key === 'Escape') {
      setShowSuggestions(false)
      setHighlightedIndex(-1)
    }
  }

  const handleSelectCountry = (country: Country) => {
    onChange([...selectedCountries, country.id])
    setSearchTerm('')
    setShowSuggestions(false)
    setHighlightedIndex(-1)
    inputRef.current?.focus()
  }

  const handleRemoveCountry = (countryId: number) => {
    onChange(selectedCountries.filter(id => id !== countryId))
  }

  return (
    <div ref={containerRef} className="space-y-3">
      {/* Campo de búsqueda */}
      <div className="relative">
        <div className="relative">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
          <input
            ref={inputRef}
            type="text"
            value={searchTerm}
            onChange={(e) => {
              setSearchTerm(e.target.value)
              setShowSuggestions(true)
              setHighlightedIndex(-1)
            }}
            onFocus={() => setShowSuggestions(true)}
            onKeyDown={handleKeyDown}
            placeholder={placeholder}
            className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
          />
        </div>

        {/* Lista de sugerencias */}
        {showSuggestions && (searchTerm || filteredCountries.length > 0) && (
          <div className="absolute z-10 w-full mt-1 bg-white border border-gray-200 rounded-lg shadow-lg max-h-60 overflow-auto">
            {filteredCountries.length === 0 ? (
              <div className="px-4 py-3 text-sm text-gray-500">
                No se encontraron países
              </div>
            ) : (
              <>
                {searchTerm === '' && (
                  <div className="px-4 py-2 text-xs font-medium text-gray-500 uppercase tracking-wider border-b border-gray-100">
                    Países frecuentes
                  </div>
                )}
                {filteredCountries.map((country, index) => {
                  const isFrequent = searchTerm === '' && frequentCountries.includes(country.name)
                  const isHighlighted = index === highlightedIndex
                  
                  return (
                    <div
                      key={country.id}
                      onClick={() => handleSelectCountry(country)}
                      className={`px-4 py-2 cursor-pointer transition-colors ${
                        isHighlighted 
                          ? 'bg-blue-50 text-blue-700' 
                          : 'hover:bg-gray-50 text-gray-900'
                      } ${!isFrequent && searchTerm === '' && index === frequentCountries.filter(fc => 
                        availableCountries.some(ac => ac.name === fc && !selectedCountries.includes(ac.id))
                      ).length ? 'border-t border-gray-100' : ''}`}
                    >
                      <div className="flex items-center justify-between">
                        <span className="text-sm">{country.name}</span>
                        {isFrequent && searchTerm === '' && (
                          <span className="text-xs text-gray-400">Frecuente</span>
                        )}
                      </div>
                    </div>
                  )
                })}
              </>
            )}
          </div>
        )}
      </div>

      {/* Países seleccionados como chips */}
      {selectedCountryObjects.length > 0 && (
        <div className="flex flex-wrap gap-2">
          {selectedCountryObjects.map((country) => (
            <div
              key={country.id}
              className="inline-flex items-center gap-1 px-3 py-1 bg-blue-100 text-blue-700 rounded-full text-sm"
            >
              <Globe className="w-3 h-3" />
              <span>{country.name}</span>
              <button
                type="button"
                onClick={() => handleRemoveCountry(country.id)}
                className="ml-1 hover:text-blue-900 transition-colors"
              >
                <X className="w-3 h-3" />
              </button>
            </div>
          ))}
        </div>
      )}

      {/* Texto de ayuda */}
      <p className="text-xs text-gray-500">
        {selectedCountryObjects.length === 0 
          ? "Comienza a escribir para buscar países coproductores" 
          : `${selectedCountryObjects.length} ${selectedCountryObjects.length === 1 ? 'país seleccionado' : 'países seleccionados'}`
        }
      </p>
    </div>
  )
}

// ==================================================
// src/components/admin/locations/LocationForm.tsx
// ==================================================
// src/components/admin/locations/LocationForm.tsx

'use client'

import { useState, useEffect, useCallback, useRef } from 'react'
import { useRouter, useSearchParams } from 'next/navigation'
import Link from 'next/link'
import { X } from 'lucide-react'
import { useDebounce } from '@/hooks/useDebounce'

interface Location {
  id: number
  name: string
  slug: string
  parentId: number | null
  parent?: {
    id: number
    name: string
  }
  latitude?: string | null
  longitude?: string | null
  path?: string
}

interface LocationFormProps {
  location?: Location
}

export default function LocationForm({ location }: LocationFormProps) {
  const router = useRouter()
  const searchParams = useSearchParams()
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState('')
  const [slug, setSlug] = useState(location?.slug || '')
  const [isCheckingSlug, setIsCheckingSlug] = useState(false)
  
  // Estados para el autocomplete
  const [parentSearch, setParentSearch] = useState('')
  const [selectedParent, setSelectedParent] = useState<Location | null>(null)
  const [suggestions, setSuggestions] = useState<Location[]>([])
  const [showSuggestions, setShowSuggestions] = useState(false)
  const [isSearching, setIsSearching] = useState(false)
  const autocompleteRef = useRef<HTMLDivElement>(null)
  
  // Usar el hook useDebounce para el término de búsqueda
  const debouncedSearchTerm = useDebounce(parentSearch, 300)
  
  // Obtener parentId de la URL si existe
  const urlParentId = searchParams.get('parentId')
  
  const [formData, setFormData] = useState({
    name: location?.name || '',
    parentId: location?.parentId || urlParentId || '',
    latitude: location?.latitude || '',
    longitude: location?.longitude || ''
  })

  // Cargar el lugar padre si existe
  useEffect(() => {
    if (location?.parent || urlParentId) {
      loadInitialParent()
    }
  }, [])

  // Efecto para buscar cuando cambia el término debounced
  useEffect(() => {
    if (debouncedSearchTerm.length >= 2) {
      searchLocations(debouncedSearchTerm)
    } else if (debouncedSearchTerm.length === 0) {
      setSuggestions([])
      setShowSuggestions(false)
    }
  }, [debouncedSearchTerm])

  // Manejar clics fuera del autocomplete
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (autocompleteRef.current && !autocompleteRef.current.contains(event.target as Node)) {
        setShowSuggestions(false)
      }
    }

    document.addEventListener('mousedown', handleClickOutside)
    return () => document.removeEventListener('mousedown', handleClickOutside)
  }, [])

  // Verificar slug cuando cambia el nombre
  useEffect(() => {
    const timeoutId = setTimeout(() => {
      if (formData.name && formData.name !== location?.name) {
        checkSlugAvailability()
      }
    }, 500)

    return () => clearTimeout(timeoutId)
  }, [formData.name])

  const loadInitialParent = async () => {
    try {
      let parentId = location?.parentId || urlParentId
      if (!parentId) return

      const response = await fetch(`/api/locations/${parentId}`)
      if (response.ok) {
        const parentData = await response.json()
        setSelectedParent(parentData)
        setParentSearch(parentData.name)
      }
    } catch (error) {
      console.error('Error loading parent location:', error)
    }
  }

  const checkSlugAvailability = async () => {
    setIsCheckingSlug(true)
    try {
      const response = await fetch('/api/locations/check-slug', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          name: formData.name,
          excludeId: location?.id
        })
      })
      
      if (response.ok) {
        const data = await response.json()
        setSlug(data.slug)
      }
    } catch (error) {
      console.error('Error checking slug:', error)
    } finally {
      setIsCheckingSlug(false)
    }
  }

  // Función de búsqueda
  const searchLocations = async (searchTerm: string) => {
    setIsSearching(true)
    try {
      const params = new URLSearchParams({
        q: searchTerm,
        limit: '10'
      })
      
      if (location?.id) {
        params.append('excludeId', location.id.toString())
      }

      const response = await fetch(`/api/locations/search?${params}`)
      if (response.ok) {
        const data = await response.json()
        setSuggestions(data)
        setShowSuggestions(true)
      }
    } catch (error) {
      console.error('Error searching locations:', error)
    } finally {
      setIsSearching(false)
    }
  }

  const handleParentSearchChange = (value: string) => {
    setParentSearch(value)
    setSelectedParent(null)
    setFormData(prev => ({ ...prev, parentId: '' }))
    
    if (!value.trim()) {
      setSuggestions([])
      setShowSuggestions(false)
    }
  }

  const handleSelectParent = (parent: Location) => {
    setSelectedParent(parent)
    setParentSearch(parent.name)
    setFormData(prev => ({ ...prev, parentId: parent.id.toString() }))
    setShowSuggestions(false)
    setSuggestions([])
  }

  const handleClearParent = () => {
    setSelectedParent(null)
    setParentSearch('')
    setFormData(prev => ({ ...prev, parentId: '' }))
    setSuggestions([])
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setError('')
    setIsLoading(true)

    try {
      const url = location 
        ? `/api/locations/${location.id}`
        : '/api/locations'
      
      const method = location ? 'PUT' : 'POST'
      
      const response = await fetch(url, {
        method,
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          ...formData,
          parentId: formData.parentId || null
        })
      })

      const data = await response.json()

      if (!response.ok) {
        throw new Error(data.error || 'Error al guardar el lugar')
      }

      router.push(`/admin/locations?refresh=${Date.now()}`)
      router.refresh()
    } catch (error) {
      setError(error instanceof Error ? error.message : 'Error al guardar el lugar')
    } finally {
      setIsLoading(false)
    }
  }

  const handleChange = (field: keyof typeof formData, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }))
  }

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      {error && (
        <div className="bg-red-50 border border-red-400 text-red-700 px-4 py-3 rounded">
          {error}
        </div>
      )}

      <div>
        <label htmlFor="name" className="block text-sm font-medium text-gray-700">
          Nombre *
        </label>
        <input
          type="text"
          id="name"
          value={formData.name}
          onChange={(e) => handleChange('name', e.target.value)}
          required
          className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
        />
        {slug && (
          <p className="mt-1 text-sm text-gray-500">
            Slug: {slug} {isCheckingSlug && '(verificando...)'}
          </p>
        )}
      </div>

      <div ref={autocompleteRef}>
        <label htmlFor="parentSearch" className="block text-sm font-medium text-gray-700">
          Lugar padre (opcional)
        </label>
        <div className="relative mt-1">
          <div className="relative">
            <input
              type="text"
              id="parentSearch"
              value={parentSearch}
              onChange={(e) => handleParentSearchChange(e.target.value)}
              placeholder="Buscar lugar padre..."
              className="block w-full px-3 py-2 pr-10 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
            />
            {(parentSearch || selectedParent) && (
              <button
                type="button"
                onClick={handleClearParent}
                className="absolute inset-y-0 right-0 flex items-center pr-3"
              >
                <X className="h-4 w-4 text-gray-400 hover:text-gray-600" />
              </button>
            )}
          </div>
          
          {selectedParent && selectedParent.path && (
            <p className="mt-1 text-sm text-gray-500">
              Ubicación: {selectedParent.path}
            </p>
          )}

          {/* Dropdown de sugerencias */}
          {showSuggestions && (
            <div className="absolute z-10 w-full mt-1 bg-white border border-gray-300 rounded-md shadow-lg max-h-60 overflow-auto">
              {isSearching ? (
                <div className="px-3 py-2 text-sm text-gray-500">Buscando...</div>
              ) : suggestions.length > 0 ? (
                <ul className="py-1">
                  {suggestions.map((suggestion) => (
                    <li
                      key={suggestion.id}
                      onClick={() => handleSelectParent(suggestion)}
                      className="px-3 py-2 hover:bg-gray-100 cursor-pointer"
                    >
                      <div className="text-sm font-medium text-gray-900">
                        {suggestion.name}
                      </div>
                      {suggestion.path && suggestion.path !== suggestion.name && (
                        <div className="text-xs text-gray-500">
                          {suggestion.path}
                        </div>
                      )}
                    </li>
                  ))}
                </ul>
              ) : (
                <div className="px-3 py-2 text-sm text-gray-500">
                  No se encontraron lugares
                </div>
              )}
            </div>
          )}
        </div>
      </div>

      <div className="grid grid-cols-2 gap-4">
        <div>
          <label htmlFor="latitude" className="block text-sm font-medium text-gray-700">
            Latitud (opcional)
          </label>
          <input
            type="number"
            id="latitude"
            value={formData.latitude}
            onChange={(e) => handleChange('latitude', e.target.value)}
            step="0.00000001"
            min="-90"
            max="90"
            className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
          />
        </div>

        <div>
          <label htmlFor="longitude" className="block text-sm font-medium text-gray-700">
            Longitud (opcional)
          </label>
          <input
            type="number"
            id="longitude"
            value={formData.longitude}
            onChange={(e) => handleChange('longitude', e.target.value)}
            step="0.00000001"
            min="-180"
            max="180"
            className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
          />
        </div>
      </div>

      <div className="flex justify-end gap-4">
        <Link
          href="/admin/locations"
          className="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50"
        >
          Cancelar
        </Link>
        <button
          type="submit"
          disabled={isLoading || !formData.name}
          className="px-4 py-2 text-sm font-medium text-white bg-indigo-600 border border-transparent rounded-md hover:bg-indigo-700 disabled:opacity-50 disabled:cursor-not-allowed"
        >
          {isLoading ? 'Guardando...' : (location ? 'Actualizar' : 'Crear')}
        </button>
      </div>
    </form>
  )
}

// ==================================================
// src/components/admin/locations/LocationTree.tsx
// ==================================================
// src/components/admin/locations/LocationTree.tsx

'use client'

import { useState, useEffect } from 'react'
import { useRouter } from 'next/navigation'
import LocationTreeNode from './LocationTreeNode'
import { Search, Loader2, RefreshCw } from 'lucide-react'

interface LocationNode {
  id: number
  name: string
  slug: string
  children: LocationNode[]
  _count: {
    children: number
    peopleBornHere: number
    peopleDiedHere: number
  }
}

export default function LocationTree() {
  const router = useRouter()
  const [locations, setLocations] = useState<LocationNode[]>([])
  const [filteredLocations, setFilteredLocations] = useState<LocationNode[]>([])
  const [isLoading, setIsLoading] = useState(true)
  const [searchTerm, setSearchTerm] = useState('')
  const [deleteModal, setDeleteModal] = useState<{ id: number; name: string } | null>(null)

  useEffect(() => {
    loadLocationTree()
  }, [])

  useEffect(() => {
    filterLocations()
  }, [searchTerm, locations])

  const loadLocationTree = async () => {
    setIsLoading(true)
    try {
      // Agregar timestamp para evitar caché
      const response = await fetch(`/api/locations/tree?t=${Date.now()}`, {
        cache: 'no-store',
        headers: {
          'Cache-Control': 'no-cache',
          'Pragma': 'no-cache',
        },
      })
      if (response.ok) {
        const data = await response.json()
        setLocations(data)
      }
    } catch (error) {
      console.error('Error loading location tree:', error)
    } finally {
      setIsLoading(false)
    }
  }

  const filterLocations = () => {
    if (!searchTerm.trim()) {
      setFilteredLocations(locations)
      return
    }

    const term = searchTerm.toLowerCase()
    
    const filterNode = (node: LocationNode): LocationNode | null => {
      // Verificar si el nodo actual coincide
      const nodeMatches = node.name.toLowerCase().includes(term)
      
      // Filtrar recursivamente los hijos
      const filteredChildren = node.children
        .map(child => filterNode(child))
        .filter((child): child is LocationNode => child !== null)
      
      // Incluir el nodo si coincide o si tiene hijos que coinciden
      if (nodeMatches || filteredChildren.length > 0) {
        return {
          ...node,
          children: filteredChildren
        }
      }
      
      return null
    }
    
    const filtered = locations
      .map(node => filterNode(node))
      .filter((node): node is LocationNode => node !== null)
    
    setFilteredLocations(filtered)
  }

  const handleDelete = async (id: number, name: string) => {
    setDeleteModal({ id, name })
  }

  const confirmDelete = async () => {
    if (!deleteModal) return

    try {
      const response = await fetch(`/api/locations/${deleteModal.id}`, {
        method: 'DELETE'
      })

      const data = await response.json()

      if (!response.ok) {
        alert(data.error || 'Error al eliminar el lugar')
        return
      }

      // Recargar el árbol
      await loadLocationTree()
      router.refresh()
    } catch (error) {
      console.error('Error deleting location:', error)
      alert('Error al eliminar el lugar')
    } finally {
      setDeleteModal(null)
    }
  }

  return (
    <div className="space-y-4">
      {/* Barra de búsqueda y botón refrescar */}
      <div className="flex gap-2">
        <div className="relative flex-1">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
          <input
            type="text"
            placeholder="Buscar lugares..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
          />
        </div>
        <button
          onClick={loadLocationTree}
          disabled={isLoading}
          className="px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors flex items-center gap-2 disabled:opacity-50"
          title="Refrescar lista"
        >
          <RefreshCw className={`w-4 h-4 ${isLoading ? 'animate-spin' : ''}`} />
          Refrescar
        </button>
      </div>

      {/* Árbol de lugares */}
      {isLoading ? (
        <div className="flex justify-center items-center py-12">
          <Loader2 className="w-8 h-8 animate-spin text-gray-500" />
        </div>
      ) : filteredLocations.length === 0 ? (
        <div className="text-center py-12 text-gray-500">
          {searchTerm ? 'No se encontraron lugares que coincidan con la búsqueda' : 'No hay lugares cargados'}
        </div>
      ) : (
        <div className="bg-white rounded-lg shadow-sm border border-gray-200">
          {filteredLocations.map((location) => (
            <LocationTreeNode
              key={location.id}
              node={location}
              level={0}
              onDelete={handleDelete}
            />
          ))}
        </div>
      )}

      {/* Modal de confirmación de eliminación */}
      {deleteModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 max-w-md w-full mx-4">
            <h3 className="text-lg font-semibold mb-4">Confirmar eliminación</h3>
            <p className="text-gray-600 mb-6">
              ¿Estás seguro de que quieres eliminar "{deleteModal.name}"?
            </p>
            <div className="flex justify-end gap-3">
              <button
                onClick={() => setDeleteModal(null)}
                className="px-4 py-2 text-gray-700 bg-gray-100 rounded-lg hover:bg-gray-200 transition-colors"
              >
                Cancelar
              </button>
              <button
                onClick={confirmDelete}
                className="px-4 py-2 text-white bg-red-600 rounded-lg hover:bg-red-700 transition-colors"
              >
                Eliminar
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}

// ==================================================
// src/components/admin/locations/LocationTreeNode.tsx
// ==================================================
// src/components/admin/locations/LocationTreeNode.tsx

'use client'

import { useState } from 'react'
import Link from 'next/link'
import { ChevronRight, ChevronDown, MapPin, Edit, Trash2, Plus, Users } from 'lucide-react'

interface LocationNode {
  id: number
  name: string
  slug: string
  children: LocationNode[]
  _count: {
    children: number
    peopleBornHere: number
    peopleDiedHere: number
  }
}

interface LocationTreeNodeProps {
  node: LocationNode
  level: number
  onDelete: (id: number, name: string) => void
}

export default function LocationTreeNode({ node, level, onDelete }: LocationTreeNodeProps) {
  const [isExpanded, setIsExpanded] = useState(level < 1) // Expandir solo el primer nivel por defecto
  const hasChildren = node.children.length > 0

  const handleToggle = () => {
    if (hasChildren) {
      setIsExpanded(!isExpanded)
    }
  }

  const handleDelete = (e: React.MouseEvent) => {
    e.stopPropagation()
    onDelete(node.id, node.name)
  }

  // Determinar si tiene relaciones que impiden su eliminación
  const hasRelations = 
    node._count.children > 0 ||
    node._count.peopleBornHere > 0 ||
    node._count.peopleDiedHere > 0

  // Construir tooltip con información de relaciones
  const getRelationsTooltip = () => {
    const relations = []
    if (node._count.children > 0) relations.push(`${node._count.children} lugares`)
    if (node._count.peopleBornHere > 0) relations.push(`${node._count.peopleBornHere} nacimientos`)
    if (node._count.peopleDiedHere > 0) relations.push(`${node._count.peopleDiedHere} fallecimientos`)
    return relations.join(', ')
  }

  return (
    <div className="select-none">
      <div
        className={`flex items-center gap-2 py-2 px-3 hover:bg-gray-50 rounded-lg cursor-pointer group`}
        style={{ paddingLeft: `${level * 1.5 + 0.75}rem` }}
      >
        {/* Chevron para expandir/colapsar */}
        <button
          onClick={handleToggle}
          className={`p-0.5 ${!hasChildren ? 'invisible' : ''}`}
        >
          {isExpanded ? (
            <ChevronDown className="w-4 h-4 text-gray-500" />
          ) : (
            <ChevronRight className="w-4 h-4 text-gray-500" />
          )}
        </button>

        {/* Icono de lugar */}
        <MapPin className="w-4 h-4 text-gray-400" />

        {/* Nombre del lugar */}
        <span className="flex-1 text-sm font-medium text-gray-900">
          {node.name}
        </span>

        {/* Badges de contadores */}
        <div className="flex items-center gap-2 opacity-0 group-hover:opacity-100 transition-opacity">
          {node._count.peopleBornHere + node._count.peopleDiedHere > 0 && (
            <span className="flex items-center gap-1 text-xs text-gray-500" title="Personas relacionadas">
              <Users className="w-3 h-3" />
              {node._count.peopleBornHere + node._count.peopleDiedHere}
            </span>
          )}
        </div>

        {/* Acciones */}
        <div className="flex items-center gap-1 opacity-0 group-hover:opacity-100 transition-opacity">
          <Link
            href={`/admin/locations/new?parentId=${node.id}`}
            className="p-1.5 text-gray-400 hover:text-gray-600 hover:bg-gray-100 rounded"
            title="Agregar lugar hijo"
            onClick={(e) => e.stopPropagation()}
          >
            <Plus className="w-4 h-4" />
          </Link>
          
          <Link
            href={`/admin/locations/${node.id}/edit`}
            className="p-1.5 text-gray-400 hover:text-gray-600 hover:bg-gray-100 rounded"
            title="Editar"
            onClick={(e) => e.stopPropagation()}
          >
            <Edit className="w-4 h-4" />
          </Link>
          
          <button
            onClick={handleDelete}
            disabled={hasRelations}
            className={`p-1.5 rounded ${
              hasRelations
                ? 'text-gray-300 cursor-not-allowed'
                : 'text-gray-400 hover:text-red-600 hover:bg-red-50'
            }`}
            title={hasRelations ? `No se puede eliminar: ${getRelationsTooltip()}` : 'Eliminar'}
          >
            <Trash2 className="w-4 h-4" />
          </button>
        </div>
      </div>

      {/* Hijos */}
      {isExpanded && hasChildren && (
        <div>
          {node.children.map((child) => (
            <LocationTreeNode
              key={child.id}
              node={child}
              level={level + 1}
              onDelete={onDelete}
            />
          ))}
        </div>
      )}
    </div>
  )
}

// ==================================================
// src/components/admin/MovieFormEnhanced.tsx
// ==================================================
// src/components/admin/MovieFormEnhanced.tsx
'use client'

import { useState, useEffect } from 'react'
import {
  Plus,
  X,
  Search,
  UserPlus,
  Building,
  Globe,
  Hash,
  Trash2,
  Tag
} from 'lucide-react'
import ScreeningVenueSelector from './ScreeningVenueSelector'


interface MovieFormEnhancedProps {
  onGenresChange: (genres: number[]) => void
  onCastChange: (cast: any[]) => void
  onCrewChange: (crew: any[]) => void
  onCountriesChange: (countries: number[]) => void
  onProductionCompaniesChange: (companies: number[]) => void
  onDistributionCompaniesChange: (companies: number[]) => void
  onScreeningVenuesChange: (venues: any[]) => void
  onThemesChange?: (themes: number[]) => void
  initialData?: {
    genres?: any[]
    cast?: any[]
    crew?: any[]
    countries?: any[]
    productionCompanies?: any[]
    distributionCompanies?: any[]
    themes?: any[]
    screeningVenues?: any[]
  }
  showOnlyBasicInfo?: boolean
  showOnlyCast?: boolean
  showOnlyCrew?: boolean
  showOnlyCompanies?: boolean
}

export default function MovieFormEnhanced({
  onGenresChange,
  onCastChange,
  onCrewChange,
  onCountriesChange,
  onProductionCompaniesChange,
  onDistributionCompaniesChange,
  onScreeningVenuesChange,
  onThemesChange = () => { },
  initialData,
  showOnlyBasicInfo = false,
  showOnlyCast = false,
  showOnlyCrew = false,
  showOnlyCompanies = false
}: MovieFormEnhancedProps) {
  // Estados para las listas disponibles
  const [availableGenres, setAvailableGenres] = useState<any[]>([])
  const [availablePeople, setAvailablePeople] = useState<any[]>([])
  const [availableCountries, setAvailableCountries] = useState<any[]>([])
  const [availableProductionCompanies, setAvailableProductionCompanies] = useState<any[]>([])
  const [availableDistributionCompanies, setAvailableDistributionCompanies] = useState<any[]>([])
  const [availableThemes, setAvailableThemes] = useState<any[]>([])

  // Estados para las selecciones
  const [selectedGenres, setSelectedGenres] = useState<number[]>([])
  const [cast, setCast] = useState<any[]>([])
  const [crew, setCrew] = useState<any[]>([])
  const [selectedCountries, setSelectedCountries] = useState<number[]>([])
  const [selectedProductionCompanies, setSelectedProductionCompanies] = useState<number[]>([])
  const [selectedDistributionCompanies, setSelectedDistributionCompanies] = useState<number[]>([])
  const [selectedThemes, setSelectedThemes] = useState<number[]>([])
  const [screeningVenues, setScreeningVenues] = useState<any[]>([])

  // Estados para búsqueda
  const [personSearch, setPersonSearch] = useState('')
  const [themeSearch, setThemeSearch] = useState('')
  const [countrySearch, setCountrySearch] = useState('')
  const [showPersonSearch, setShowPersonSearch] = useState(false)
  const [addingType, setAddingType] = useState<'cast' | 'crew' | null>(null)

  const [dataReady, setDataReady] = useState(false)

  // Estado para nuevo actor/crew
  const [newPerson, setNewPerson] = useState({
    personId: 0,
    characterName: '',
    role: '',
    department: '',
    billingOrder: 0
  })

  const [isInitialized, setIsInitialized] = useState(false)

  // Cargar datos iniciales
  useEffect(() => {
    fetchInitialData()
  }, [])

  useEffect(() => {
    setIsInitialized(false)  // Resetear cuando cambia initialData
  }, [initialData])

  // Inicializar con datos existentes - CORREGIDO
  useEffect(() => {
    if (initialData && !isInitialized) {
      if (initialData.genres) {
        const genreIds = initialData.genres.map(g => g.genreId || g.id)
        setSelectedGenres(genreIds)
      }

      if (initialData.cast) {
        setCast(initialData.cast)
      }

      if (initialData.crew) {
        setCrew(initialData.crew)
      }

      if (initialData.screeningVenues) {
        setScreeningVenues(initialData.screeningVenues)
      }

      // CORRECCIÓN IMPORTANTE: Manejar correctamente los países
      if (initialData.countries) {
        const countryIds = initialData.countries.map(c => {
          // Manejar diferentes estructuras posibles
          if (typeof c === 'number') return c
          if (c.countryId) return c.countryId  // Si viene de movieCountries
          if (c.id) return c.id
          if (c.country && c.country.id) return c.country.id
          return null
        }).filter(id => id !== null)

        setSelectedCountries(countryIds)
      }

      if (initialData.productionCompanies) {
        const companyIds = initialData.productionCompanies.map(c => c.companyId || c.id || c.company?.id)
        setSelectedProductionCompanies(companyIds)
      }

      if (initialData.distributionCompanies) {
        const companyIds = initialData.distributionCompanies.map(c => c.companyId || c.id || c.company?.id)
        setSelectedDistributionCompanies(companyIds)
      }

      if (initialData.themes) {
        const themeIds = initialData.themes.map(t => t.themeId || t.id)
        setSelectedThemes(themeIds)
      }

      setIsInitialized(true)
    }
  }, [initialData, isInitialized])

  // Notificar cambios al componente padre
  useEffect(() => {
    if (isInitialized) {
      onGenresChange(selectedGenres)
    }
  }, [selectedGenres, onGenresChange, isInitialized])

  useEffect(() => {
    if (isInitialized) {
      onScreeningVenuesChange(screeningVenues)
    }
  }, [screeningVenues, onScreeningVenuesChange, isInitialized])

  useEffect(() => {
    if (isInitialized) {
      onCastChange(cast)
    }
  }, [cast, onCastChange, isInitialized])

  useEffect(() => {
    if (isInitialized) {
      onCrewChange(crew)
    }
  }, [crew, onCrewChange, isInitialized])

  useEffect(() => {
    if (isInitialized) {
      onCountriesChange(selectedCountries)
    }
  }, [selectedCountries, onCountriesChange, isInitialized])

  useEffect(() => {
    if (isInitialized) {
      onProductionCompaniesChange(selectedProductionCompanies)
    }
  }, [selectedProductionCompanies, onProductionCompaniesChange, isInitialized])

  useEffect(() => {
    if (isInitialized) {
      onDistributionCompaniesChange(selectedDistributionCompanies)
    }
  }, [selectedDistributionCompanies, onDistributionCompaniesChange, isInitialized])

  useEffect(() => {
    if (isInitialized) {
      onThemesChange(selectedThemes)
    }
  }, [selectedThemes, onThemesChange, isInitialized])

  // Cargar datos de la API
  const fetchInitialData = async () => {
    try {
      const [genresRes, countriesRes, prodCompaniesRes, distCompaniesRes, themesRes] = await Promise.all([
        fetch('/api/genres'),
        fetch('/api/countries'),
        fetch('/api/companies/production'),
        fetch('/api/companies/distribution'),
        fetch('/api/themes').catch(() => ({ ok: false, json: () => [] }))
      ])

      // Verificar que todas las respuestas sean OK
      if (!genresRes.ok || !countriesRes.ok || !prodCompaniesRes.ok || !distCompaniesRes.ok) {
        throw new Error('Error fetching data')
      }

      const [genres, countries, prodCompanies, distCompanies, themes] = await Promise.all([
        genresRes.json(),
        countriesRes.json(),
        prodCompaniesRes.json(),
        distCompaniesRes.json(),
        themesRes.ok ? themesRes.json() : []
      ])

      // Asegurar que siempre sean arrays
      setAvailableGenres(Array.isArray(genres) ? genres : [])
      setAvailableCountries(Array.isArray(countries) ? countries : [])
      setAvailableProductionCompanies(Array.isArray(prodCompanies) ? prodCompanies : [])
      setAvailableDistributionCompanies(Array.isArray(distCompanies) ? distCompanies : [])
      setAvailableThemes(Array.isArray(themes) ? themes : [])

    } catch (error) {
      console.error('Error loading initial data:', error)
      // Asegurar que los estados sean arrays vacíos en caso de error
      setAvailableGenres([])
      setAvailableCountries([])
      setAvailableProductionCompanies([])
      setAvailableDistributionCompanies([])
      setAvailableThemes([])
    }
  }

  // Buscar personas
  const searchPeople = async (search: string) => {
    if (search.length < 2) return

    try {
      const response = await fetch(`/api/people?search=${encodeURIComponent(search)}&limit=10`)
      const data = await response.json()
      setAvailablePeople(data)
    } catch (error) {
      console.error('Error searching people:', error)
    }
  }

  // Agregar persona al cast o crew
  const addPerson = () => {
    if (!newPerson.personId) return

    const selectedPerson = availablePeople.find((p: any) => p.id === newPerson.personId)
    if (!selectedPerson) return

    if (addingType === 'cast') {
      setCast([...cast, {
        personId: newPerson.personId,
        person: selectedPerson,
        characterName: newPerson.characterName,
        billingOrder: cast.length + 1,
        isPrincipal: cast.length < 5
      }])
    } else if (addingType === 'crew') {
      setCrew([...crew, {
        personId: newPerson.personId,
        person: selectedPerson,
        role: newPerson.role,
        department: newPerson.department,
        billingOrder: crew.filter(c => c.role === newPerson.role).length + 1
      }])
    }

    // Limpiar formulario
    setNewPerson({
      personId: 0,
      characterName: '',
      role: '',
      department: '',
      billingOrder: 0
    })
    setShowPersonSearch(false)
    setAddingType(null)
    setPersonSearch('')
  }

  // Crear nueva persona
  const createNewPerson = async () => {
    if (!personSearch) return

    try {
      const response = await fetch('/api/people', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ name: personSearch })
      })

      if (response.ok) {
        const newPersonData = await response.json()
        setAvailablePeople([newPersonData])
        setNewPerson({ ...newPerson, personId: newPersonData.id })
      }
    } catch (error) {
      console.error('Error creating person:', error)
    }
  }

  // Renderizar solo las secciones necesarias según las props
  if (showOnlyBasicInfo) {
    return (
      <div className="space-y-6">
        {/* Géneros */}
        <div>
          <h3 className="text-lg font-medium text-gray-900 mb-4 flex items-center gap-2">
            <Hash className="w-5 h-5" />
            Géneros
          </h3>
          <div className="flex flex-wrap gap-2">
            {availableGenres.map((genre: any) => (
              <label
                key={genre.id}
                className="inline-flex items-center"
              >
                <input
                  type="checkbox"
                  className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                  checked={selectedGenres.includes(genre.id)}
                  onChange={(e) => {
                    if (e.target.checked) {
                      setSelectedGenres([...selectedGenres, genre.id])
                    } else {
                      setSelectedGenres(selectedGenres.filter(id => id !== genre.id))
                    }
                  }}
                />
                <span className="ml-2 text-sm text-gray-700">{genre.name}</span>
              </label>
            ))}
          </div>
        </div>

        {/* Países */}
        <div>
          <h3 className="text-lg font-medium text-gray-900 mb-4 flex items-center gap-2">
            <Globe className="w-5 h-5" />
            Países Coproductores
          </h3>

          {/* Tags de países seleccionados */}
          {selectedCountries.length > 0 && (
            <div className="flex flex-wrap gap-2 mb-3">
              {selectedCountries.map(countryId => {
                const country = availableCountries.find(c => c.id === countryId)
                if (!country) return null
                return (
                  <span
                    key={country.id}
                    className="inline-flex items-center gap-1 px-3 py-1 rounded-full text-sm bg-blue-100 text-blue-800"
                  >
                    {country.name}
                    <button
                      type="button"
                      onClick={() => setSelectedCountries(selectedCountries.filter(id => id !== country.id))}
                      className="ml-1 hover:text-blue-600"
                    >
                      <X className="w-3 h-3" />
                    </button>
                  </span>
                )
              })}
            </div>
          )}

          {/* Buscador de países */}
          <div className="relative">
            <input
              type="text"
              placeholder="Buscar países..."
              value={countrySearch}
              onChange={(e) => setCountrySearch(e.target.value)}
              className="w-full px-3 py-2 pr-10 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
            <Search className="absolute right-3 top-2.5 w-5 h-5 text-gray-400" />
          </div>

          {/* Lista filtrada de países */}
          {countrySearch && (
            <div className="mt-2 max-h-48 overflow-y-auto border border-gray-200 rounded-lg">
              {availableCountries
                .filter((country: any) =>
                  country.name.toLowerCase().includes(countrySearch.toLowerCase()) &&
                  !selectedCountries.includes(country.id)
                )
                .map((country: any) => (
                  <button
                    key={country.id}
                    type="button"
                    onClick={() => {
                      setSelectedCountries([...selectedCountries, country.id])
                      setCountrySearch('')
                    }}
                    className="w-full text-left px-3 py-2 hover:bg-gray-50 border-b border-gray-100 last:border-b-0"
                  >
                    <span className="text-sm text-gray-700">{country.name}</span>
                  </button>
                ))}
              {availableCountries.filter((country: any) =>
                country.name.toLowerCase().includes(countrySearch.toLowerCase()) &&
                !selectedCountries.includes(country.id)
              ).length === 0 && (
                  <div className="px-3 py-2 text-sm text-gray-500">
                    No se encontraron países
                  </div>
                )}
            </div>
          )}

          <p className="mt-1 text-xs text-gray-500">
            Escribe para buscar y agregar países
          </p>
        </div>
        <div className="col-span-2 mt-4">
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Pantallas de Estreno
          </label>
          <ScreeningVenueSelector
            selectedVenueIds={screeningVenues}
            onChange={(venues) => {
              setScreeningVenues(venues)
            }}
          />
          <p className="mt-1 text-sm text-gray-500">
            Selecciona las pantallas donde se estrenó o estrenará la película
          </p>
        </div>
        {/* Temas */}
        {availableThemes.length > 0 && (
          <div>
            <h3 className="text-lg font-medium text-gray-900 mb-4 flex items-center gap-2">
              <Tag className="w-5 h-5" />
              Temas / Palabras Clave
            </h3>

            {/* Tags de temas seleccionados */}
            {selectedThemes.length > 0 && (
              <div className="flex flex-wrap gap-2 mb-3">
                {selectedThemes.map(themeId => {
                  const theme = availableThemes.find(t => t.id === themeId)
                  if (!theme) return null
                  return (
                    <span
                      key={theme.id}
                      className="inline-flex items-center gap-1 px-3 py-1 rounded-full text-sm bg-purple-100 text-purple-800"
                    >
                      {theme.name}
                      <button
                        type="button"
                        onClick={() => setSelectedThemes(selectedThemes.filter(id => id !== theme.id))}
                        className="ml-1 hover:text-purple-600"
                      >
                        <X className="w-3 h-3" />
                      </button>
                    </span>
                  )
                })}
              </div>
            )}

            {/* Buscador de temas */}
            <div className="relative">
              <input
                type="text"
                placeholder="Buscar temas..."
                value={themeSearch}
                onChange={(e) => setThemeSearch(e.target.value)}
                className="w-full px-3 py-2 pr-10 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
              <Search className="absolute right-3 top-2.5 w-5 h-5 text-gray-400" />
            </div>

            {/* Lista filtrada de temas */}
            {themeSearch && (
              <div className="mt-2 max-h-48 overflow-y-auto border border-gray-200 rounded-lg">
                {availableThemes
                  .filter((theme: any) =>
                    theme.name.toLowerCase().includes(themeSearch.toLowerCase()) &&
                    !selectedThemes.includes(theme.id)
                  )
                  .map((theme: any) => (
                    <button
                      key={theme.id}
                      type="button"
                      onClick={() => {
                        setSelectedThemes([...selectedThemes, theme.id])
                        setThemeSearch('')
                      }}
                      className="w-full text-left px-3 py-2 hover:bg-gray-50 border-b border-gray-100 last:border-b-0"
                    >
                      <span className="text-sm text-gray-700">{theme.name}</span>
                    </button>
                  ))}
                {availableThemes.filter((theme: any) =>
                  theme.name.toLowerCase().includes(themeSearch.toLowerCase()) &&
                  !selectedThemes.includes(theme.id)
                ).length === 0 && (
                    <div className="px-3 py-2 text-sm text-gray-500">
                      No se encontraron temas
                    </div>
                  )}
              </div>
            )}

            <p className="mt-1 text-xs text-gray-500">
              Escribe para buscar y agregar temas
            </p>
          </div>
        )}
      </div>
    )
  }

  if (showOnlyCast) {
    return (
      <div className="space-y-6">
        {/* Cast */}
        <div>
          <h3 className="text-lg font-medium text-gray-900 mb-4 flex items-center gap-2">
            <UserPlus className="w-5 h-5" />
            Reparto
          </h3>

          {cast.length > 0 && (
            <div className="mb-4 space-y-2">
              {cast.map((member, index) => (
                <div key={index} className="flex items-center gap-4 p-3 bg-gray-50 rounded-lg">
                  <div className="flex-1">
                    <span className="font-medium">{member.person?.name || 'Sin nombre'}</span>
                    {member.characterName && (
                      <span className="text-gray-500"> como {member.characterName}</span>
                    )}
                  </div>
                  <button
                    type="button"
                    onClick={() => setCast(cast.filter((_, i) => i !== index))}
                    className="text-red-600 hover:text-red-800"
                  >
                    <Trash2 className="w-4 h-4" />
                  </button>
                </div>
              ))}
            </div>
          )}

          <button
            type="button"
            onClick={() => {
              setAddingType('cast')
              setShowPersonSearch(true)
            }}
            className="inline-flex items-center gap-2 px-4 py-2 border border-gray-300 rounded-lg text-sm font-medium text-gray-700 bg-white hover:bg-gray-50"
          >
            <Plus className="w-4 h-4" />
            Agregar Actor/Actriz
          </button>
        </div>

        {/* Modal de búsqueda de personas */}
        {showPersonSearch && (
          <div className="fixed inset-0 bg-gray-500 bg-opacity-75 flex items-center justify-center p-4 z-50">
            <div className="bg-white rounded-lg max-w-md w-full p-6">
              <h3 className="text-lg font-medium text-gray-900 mb-4">
                {addingType === 'cast' ? 'Agregar Actor/Actriz' : 'Agregar Miembro del Equipo'}
              </h3>

              <div className="space-y-4">
                {/* Búsqueda de persona */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Buscar Persona
                  </label>
                  <div className="relative">
                    <input
                      type="text"
                      value={personSearch}
                      onChange={(e) => {
                        setPersonSearch(e.target.value)
                        searchPeople(e.target.value)
                      }}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      placeholder="Escriba el nombre..."
                    />
                    <Search className="absolute right-3 top-2.5 w-5 h-5 text-gray-400" />
                  </div>

                  {availablePeople.length > 0 && (
                    <div className="mt-2 border border-gray-200 rounded-lg max-h-40 overflow-y-auto">
                      {availablePeople.map((person: any) => (
                        <button
                          key={person.id}
                          type="button"
                          onClick={() => setNewPerson({ ...newPerson, personId: person.id })}
                          className={`w-full text-left px-3 py-2 hover:bg-gray-50 ${newPerson.personId === person.id ? 'bg-blue-50' : ''
                            }`}
                        >
                          {person.name}
                        </button>
                      ))}
                    </div>
                  )}

                  {personSearch && availablePeople.length === 0 && (
                    <button
                      type="button"
                      onClick={createNewPerson}
                      className="mt-2 text-sm text-blue-600 hover:text-blue-800"
                    >
                      Crear nueva persona: "{personSearch}"
                    </button>
                  )}
                </div>

                {/* Campos específicos según el tipo */}
                {addingType === 'cast' && (
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Personaje
                    </label>
                    <input
                      type="text"
                      value={newPerson.characterName}
                      onChange={(e) => setNewPerson({ ...newPerson, characterName: e.target.value })}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      placeholder="Nombre del personaje"
                    />
                  </div>
                )}

                {addingType === 'crew' && (
                  <>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        Rol
                      </label>
                      <select
                        value={newPerson.role}
                        onChange={(e) => setNewPerson({ ...newPerson, role: e.target.value })}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      >
                        <option value="">Seleccionar...</option>
                        <option value="Director">Director</option>
                        <option value="Guionista">Guionista</option>
                        <option value="Productor">Productor</option>
                        <option value="Productor Ejecutivo">Productor Ejecutivo</option>
                        <option value="Director de Fotografía">Director de Fotografía</option>
                        <option value="Editor">Editor</option>
                        <option value="Compositor">Compositor</option>
                        <option value="Director de Arte">Director de Arte</option>
                        <option value="Diseñador de Vestuario">Diseñador de Vestuario</option>
                        <option value="Maquillador">Maquillador</option>
                        <option value="Sonidista">Sonidista</option>
                      </select>
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        Departamento
                      </label>
                      <select
                        value={newPerson.department}
                        onChange={(e) => setNewPerson({ ...newPerson, department: e.target.value })}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      >
                        <option value="">Seleccionar...</option>
                        <option value="Dirección">Dirección</option>
                        <option value="Guión">Guión</option>
                        <option value="Producción">Producción</option>
                        <option value="Fotografía">Fotografía</option>
                        <option value="Montaje">Montaje</option>
                        <option value="Música">Música</option>
                        <option value="Arte">Arte</option>
                        <option value="Vestuario">Vestuario</option>
                        <option value="Maquillaje">Maquillaje</option>
                        <option value="Sonido">Sonido</option>
                        <option value="Efectos Especiales">Efectos Especiales</option>
                      </select>
                    </div>
                  </>
                )}
              </div>

              {/* Botones de acción */}
              <div className="mt-6 flex justify-end gap-3">
                <button
                  type="button"
                  onClick={() => {
                    setShowPersonSearch(false)
                    setAddingType(null)
                    setPersonSearch('')
                    setNewPerson({
                      personId: 0,
                      characterName: '',
                      role: '',
                      department: '',
                      billingOrder: 0
                    })
                  }}
                  className="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50"
                >
                  Cancelar
                </button>
                <button
                  type="button"
                  onClick={addPerson}
                  disabled={!newPerson.personId || (addingType === 'crew' && !newPerson.role)}
                  className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Agregar
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    )
  }

  if (showOnlyCrew) {
    return (
      <div className="space-y-6">
        {/* Crew */}
        <div>
          <h3 className="text-lg font-medium text-gray-900 mb-4 flex items-center gap-2">
            <UserPlus className="w-5 h-5" />
            Equipo Técnico
          </h3>

          {crew.length > 0 && (
            <div className="mb-4 space-y-2">
              {crew.map((member, index) => (
                <div key={index} className="flex items-center gap-4 p-3 bg-gray-50 rounded-lg">
                  <div className="flex-1">
                    <span className="font-medium">{member.person?.name || 'Sin nombre'}</span>
                    <span className="text-gray-500"> - {member.role}</span>
                    {member.department && (
                      <span className="text-gray-400"> ({member.department})</span>
                    )}
                  </div>
                  <button
                    type="button"
                    onClick={() => setCrew(crew.filter((_, i) => i !== index))}
                    className="text-red-600 hover:text-red-800"
                  >
                    <Trash2 className="w-4 h-4" />
                  </button>
                </div>
              ))}
            </div>
          )}

          <button
            type="button"
            onClick={() => {
              setAddingType('crew')
              setShowPersonSearch(true)
            }}
            className="inline-flex items-center gap-2 px-4 py-2 border border-gray-300 rounded-lg text-sm font-medium text-gray-700 bg-white hover:bg-gray-50"
          >
            <Plus className="w-4 h-4" />
            Agregar Miembro del Equipo
          </button>
        </div>

        {/* Modal de búsqueda de personas */}
        {showPersonSearch && (
          <div className="fixed inset-0 bg-gray-500 bg-opacity-75 flex items-center justify-center p-4 z-50">
            <div className="bg-white rounded-lg max-w-md w-full p-6">
              <h3 className="text-lg font-medium text-gray-900 mb-4">
                {addingType === 'cast' ? 'Agregar Actor/Actriz' : 'Agregar Miembro del Equipo'}
              </h3>

              <div className="space-y-4">
                {/* Búsqueda de persona */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Buscar Persona
                  </label>
                  <div className="relative">
                    <input
                      type="text"
                      value={personSearch}
                      onChange={(e) => {
                        setPersonSearch(e.target.value)
                        searchPeople(e.target.value)
                      }}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      placeholder="Escriba el nombre..."
                    />
                    <Search className="absolute right-3 top-2.5 w-5 h-5 text-gray-400" />
                  </div>

                  {availablePeople.length > 0 && (
                    <div className="mt-2 border border-gray-200 rounded-lg max-h-40 overflow-y-auto">
                      {availablePeople.map((person: any) => (
                        <button
                          key={person.id}
                          type="button"
                          onClick={() => setNewPerson({ ...newPerson, personId: person.id })}
                          className={`w-full text-left px-3 py-2 hover:bg-gray-50 ${newPerson.personId === person.id ? 'bg-blue-50' : ''
                            }`}
                        >
                          {person.name}
                        </button>
                      ))}
                    </div>
                  )}

                  {personSearch && availablePeople.length === 0 && (
                    <button
                      type="button"
                      onClick={createNewPerson}
                      className="mt-2 text-sm text-blue-600 hover:text-blue-800"
                    >
                      Crear nueva persona: "{personSearch}"
                    </button>
                  )}
                </div>

                {/* Campos específicos según el tipo */}
                {addingType === 'cast' && (
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Personaje
                    </label>
                    <input
                      type="text"
                      value={newPerson.characterName}
                      onChange={(e) => setNewPerson({ ...newPerson, characterName: e.target.value })}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      placeholder="Nombre del personaje"
                    />
                  </div>
                )}

                {addingType === 'crew' && (
                  <>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        Rol
                      </label>
                      <select
                        value={newPerson.role}
                        onChange={(e) => setNewPerson({ ...newPerson, role: e.target.value })}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      >
                        <option value="">Seleccionar...</option>
                        <option value="Director">Director</option>
                        <option value="Guionista">Guionista</option>
                        <option value="Productor">Productor</option>
                        <option value="Productor Ejecutivo">Productor Ejecutivo</option>
                        <option value="Director de Fotografía">Director de Fotografía</option>
                        <option value="Editor">Editor</option>
                        <option value="Compositor">Compositor</option>
                        <option value="Director de Arte">Director de Arte</option>
                        <option value="Diseñador de Vestuario">Diseñador de Vestuario</option>
                        <option value="Maquillador">Maquillador</option>
                        <option value="Sonidista">Sonidista</option>
                      </select>
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        Departamento
                      </label>
                      <select
                        value={newPerson.department}
                        onChange={(e) => setNewPerson({ ...newPerson, department: e.target.value })}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      >
                        <option value="">Seleccionar...</option>
                        <option value="Dirección">Dirección</option>
                        <option value="Guión">Guión</option>
                        <option value="Producción">Producción</option>
                        <option value="Fotografía">Fotografía</option>
                        <option value="Montaje">Montaje</option>
                        <option value="Música">Música</option>
                        <option value="Arte">Arte</option>
                        <option value="Vestuario">Vestuario</option>
                        <option value="Maquillaje">Maquillaje</option>
                        <option value="Sonido">Sonido</option>
                        <option value="Efectos Especiales">Efectos Especiales</option>
                      </select>
                    </div>
                  </>
                )}
              </div>

              {/* Botones de acción */}
              <div className="mt-6 flex justify-end gap-3">
                <button
                  type="button"
                  onClick={() => {
                    setShowPersonSearch(false)
                    setAddingType(null)
                    setPersonSearch('')
                    setNewPerson({
                      personId: 0,
                      characterName: '',
                      role: '',
                      department: '',
                      billingOrder: 0
                    })
                  }}
                  className="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50"
                >
                  Cancelar
                </button>
                <button
                  type="button"
                  onClick={addPerson}
                  disabled={!newPerson.personId || (addingType === 'crew' && !newPerson.role)}
                  className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Agregar
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    )
  }

  if (showOnlyCompanies) {
    return (
      <div className="space-y-6">
        {/* Productoras */}
        <div>
          <h3 className="text-lg font-medium text-gray-900 mb-4 flex items-center gap-2">
            <Building className="w-5 h-5" />
            Productoras
          </h3>
          <select
            multiple
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            value={selectedProductionCompanies.map(String)}
            onChange={(e) => {
              const selected = Array.from(e.target.selectedOptions, option => parseInt(option.value))
              setSelectedProductionCompanies(selected)
            }}
          >
            {availableProductionCompanies.map((company: any) => (
              <option key={company.id} value={company.id}>
                {company.name}
              </option>
            ))}
          </select>
          <p className="mt-1 text-sm text-gray-500">
            Mantén presionado Ctrl/Cmd para seleccionar múltiples opciones
          </p>
        </div>

        {/* Distribuidoras */}
        <div>
          <h3 className="text-lg font-medium text-gray-900 mb-4 flex items-center gap-2">
            <Building className="w-5 h-5" />
            Distribuidoras
          </h3>
          <select
            multiple
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            value={selectedDistributionCompanies.map(String)}
            onChange={(e) => {
              const selected = Array.from(e.target.selectedOptions, option => parseInt(option.value))
              setSelectedDistributionCompanies(selected)
            }}
          >
            {availableDistributionCompanies.map((company: any) => (
              <option key={company.id} value={company.id}>
                {company.name}
              </option>
            ))}
          </select>
          <p className="mt-1 text-sm text-gray-500">
            Mantén presionado Ctrl/Cmd para seleccionar múltiples opciones
          </p>
        </div>
      </div>
    )
  }

  // Renderizar todo por defecto
  return (
    <div className="space-y-6">
      {/* Géneros */}
      <div>
        <h3 className="text-lg font-medium text-gray-900 mb-4 flex items-center gap-2">
          <Hash className="w-5 h-5" />
          Géneros
        </h3>
        <div className="flex flex-wrap gap-2">
          {availableGenres.map((genre: any) => (
            <label
              key={genre.id}
              className="inline-flex items-center"
            >
              <input
                type="checkbox"
                className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                checked={selectedGenres.includes(genre.id)}
                onChange={(e) => {
                  if (e.target.checked) {
                    setSelectedGenres([...selectedGenres, genre.id])
                  } else {
                    setSelectedGenres(selectedGenres.filter(id => id !== genre.id))
                  }
                }}
              />
              <span className="ml-2 text-sm text-gray-700">{genre.name}</span>
            </label>
          ))}
        </div>
      </div>

      {/* Cast */}
      <div>
        <h3 className="text-lg font-medium text-gray-900 mb-4 flex items-center gap-2">
          <UserPlus className="w-5 h-5" />
          Reparto
        </h3>

        {cast.length > 0 && (
          <div className="mb-4 space-y-2">
            {cast.map((member, index) => (
              <div key={index} className="flex items-center gap-4 p-3 bg-gray-50 rounded-lg">
                <div className="flex-1">
                  <span className="font-medium">{member.person?.name || 'Sin nombre'}</span>
                  {member.characterName && (
                    <span className="text-gray-500"> como {member.characterName}</span>
                  )}
                </div>
                <button
                  type="button"
                  onClick={() => setCast(cast.filter((_, i) => i !== index))}
                  className="text-red-600 hover:text-red-800"
                >
                  <Trash2 className="w-4 h-4" />
                </button>
              </div>
            ))}
          </div>
        )}

        <button
          type="button"
          onClick={() => {
            setAddingType('cast')
            setShowPersonSearch(true)
          }}
          className="inline-flex items-center gap-2 px-4 py-2 border border-gray-300 rounded-lg text-sm font-medium text-gray-700 bg-white hover:bg-gray-50"
        >
          <Plus className="w-4 h-4" />
          Agregar Actor/Actriz
        </button>
      </div>

      {/* Crew */}
      <div>
        <h3 className="text-lg font-medium text-gray-900 mb-4 flex items-center gap-2">
          <UserPlus className="w-5 h-5" />
          Equipo Técnico
        </h3>

        {crew.length > 0 && (
          <div className="mb-4 space-y-2">
            {crew.map((member, index) => (
              <div key={index} className="flex items-center gap-4 p-3 bg-gray-50 rounded-lg">
                <div className="flex-1">
                  <span className="font-medium">{member.person?.name || 'Sin nombre'}</span>
                  <span className="text-gray-500"> - {member.role}</span>
                  {member.department && (
                    <span className="text-gray-400"> ({member.department})</span>
                  )}
                </div>
                <button
                  type="button"
                  onClick={() => setCrew(crew.filter((_, i) => i !== index))}
                  className="text-red-600 hover:text-red-800"
                >
                  <Trash2 className="w-4 h-4" />
                </button>
              </div>
            ))}
          </div>
        )}

        <button
          type="button"
          onClick={() => {
            setAddingType('crew')
            setShowPersonSearch(true)
          }}
          className="inline-flex items-center gap-2 px-4 py-2 border border-gray-300 rounded-lg text-sm font-medium text-gray-700 bg-white hover:bg-gray-50"
        >
          <Plus className="w-4 h-4" />
          Agregar Miembro del Equipo
        </button>
      </div>

      {/* Países */}
      <div>
        <h3 className="text-lg font-medium text-gray-900 mb-4 flex items-center gap-2">
          <Globe className="w-5 h-5" />
          Países Coproductores
        </h3>
        <div className="flex flex-wrap gap-2">
          {availableCountries.map((country: any) => (
            <button
              key={country.id}
              type="button"
              onClick={() => {
                if (selectedCountries.includes(country.id)) {
                  setSelectedCountries(selectedCountries.filter(id => id !== country.id))
                } else {
                  setSelectedCountries([...selectedCountries, country.id])
                }
              }}
              className={`px-3 py-1 rounded-full text-sm font-medium transition-colors ${selectedCountries.includes(country.id)
                ? 'bg-blue-600 text-white'
                : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
                }`}
            >
              {country.name}
            </button>
          ))}
        </div>
      </div>

      {/* Temas */}
      {availableThemes.length > 0 && (
        <div>
          <h3 className="text-lg font-medium text-gray-900 mb-4 flex items-center gap-2">
            <Tag className="w-5 h-5" />
            Temas / Palabras Clave
          </h3>

          {/* Tags de temas seleccionados */}
          {selectedThemes.length > 0 && (
            <div className="flex flex-wrap gap-2 mb-3">
              {selectedThemes.map(themeId => {
                const theme = availableThemes.find(t => t.id === themeId)
                if (!theme) return null
                return (
                  <span
                    key={theme.id}
                    className="inline-flex items-center gap-1 px-3 py-1 rounded-full text-sm bg-purple-100 text-purple-800"
                  >
                    {theme.name}
                    <button
                      type="button"
                      onClick={() => setSelectedThemes(selectedThemes.filter(id => id !== theme.id))}
                      className="ml-1 hover:text-purple-600"
                    >
                      <X className="w-3 h-3" />
                    </button>
                  </span>
                )
              })}
            </div>
          )}

          {/* Buscador de temas */}
          <div className="relative">
            <input
              type="text"
              placeholder="Buscar temas..."
              value={themeSearch}
              onChange={(e) => setThemeSearch(e.target.value)}
              className="w-full px-3 py-2 pr-10 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
            <Search className="absolute right-3 top-2.5 w-5 h-5 text-gray-400" />
          </div>

          {/* Lista filtrada de temas */}
          {themeSearch && (
            <div className="mt-2 max-h-48 overflow-y-auto border border-gray-200 rounded-lg">
              {availableThemes
                .filter((theme: any) =>
                  theme.name.toLowerCase().includes(themeSearch.toLowerCase()) &&
                  !selectedThemes.includes(theme.id)
                )
                .map((theme: any) => (
                  <button
                    key={theme.id}
                    type="button"
                    onClick={() => {
                      setSelectedThemes([...selectedThemes, theme.id])
                      setThemeSearch('')
                    }}
                    className="w-full text-left px-3 py-2 hover:bg-gray-50 border-b border-gray-100 last:border-b-0"
                  >
                    <span className="text-sm text-gray-700">{theme.name}</span>
                  </button>
                ))}
              {availableThemes.filter((theme: any) =>
                theme.name.toLowerCase().includes(themeSearch.toLowerCase()) &&
                !selectedThemes.includes(theme.id)
              ).length === 0 && (
                  <div className="px-3 py-2 text-sm text-gray-500">
                    No se encontraron temas
                  </div>
                )}
            </div>
          )}

          <p className="mt-1 text-xs text-gray-500">
            Escribe para buscar y agregar temas
          </p>
        </div>
      )}

      {/* Productoras */}
      <div>
        <h3 className="text-lg font-medium text-gray-900 mb-4 flex items-center gap-2">
          <Building className="w-5 h-5" />
          Productoras
        </h3>
        <select
          multiple
          className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          value={selectedProductionCompanies.map(String)}
          onChange={(e) => {
            const selected = Array.from(e.target.selectedOptions, option => parseInt(option.value))
            setSelectedProductionCompanies(selected)
          }}
        >
          {availableProductionCompanies.map((company: any) => (
            <option key={company.id} value={company.id}>
              {company.name}
            </option>
          ))}
        </select>
        <p className="mt-1 text-sm text-gray-500">
          Mantén presionado Ctrl/Cmd para seleccionar múltiples opciones
        </p>
      </div>

      {/* Distribuidoras */}
      <div>
        <h3 className="text-lg font-medium text-gray-900 mb-4 flex items-center gap-2">
          <Building className="w-5 h-5" />
          Distribuidoras
        </h3>
        <select
          multiple
          className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          value={selectedDistributionCompanies.map(String)}
          onChange={(e) => {
            const selected = Array.from(e.target.selectedOptions, option => parseInt(option.value))
            setSelectedDistributionCompanies(selected)
          }}
        >
          {availableDistributionCompanies.map((company: any) => (
            <option key={company.id} value={company.id}>
              {company.name}
            </option>
          ))}
        </select>
        <p className="mt-1 text-sm text-gray-500">
          Mantén presionado Ctrl/Cmd para seleccionar múltiples opciones
        </p>
      </div>

      {/* Modal de búsqueda de personas */}
      {showPersonSearch && (
        <div className="fixed inset-0 bg-gray-500 bg-opacity-75 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg max-w-md w-full p-6">
            <h3 className="text-lg font-medium text-gray-900 mb-4">
              {addingType === 'cast' ? 'Agregar Actor/Actriz' : 'Agregar Miembro del Equipo'}
            </h3>

            <div className="space-y-4">
              {/* Búsqueda de persona */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Buscar Persona
                </label>
                <div className="relative">
                  <input
                    type="text"
                    value={personSearch}
                    onChange={(e) => {
                      setPersonSearch(e.target.value)
                      searchPeople(e.target.value)
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder="Escriba el nombre..."
                  />
                  <Search className="absolute right-3 top-2.5 w-5 h-5 text-gray-400" />
                </div>

                {availablePeople.length > 0 && (
                  <div className="mt-2 border border-gray-200 rounded-lg max-h-40 overflow-y-auto">
                    {availablePeople.map((person: any) => (
                      <button
                        key={person.id}
                        type="button"
                        onClick={() => setNewPerson({ ...newPerson, personId: person.id })}
                        className={`w-full text-left px-3 py-2 hover:bg-gray-50 ${newPerson.personId === person.id ? 'bg-blue-50' : ''
                          }`}
                      >
                        {person.name}
                      </button>
                    ))}
                  </div>
                )}

                {personSearch && availablePeople.length === 0 && (
                  <button
                    type="button"
                    onClick={createNewPerson}
                    className="mt-2 text-sm text-blue-600 hover:text-blue-800"
                  >
                    Crear nueva persona: "{personSearch}"
                  </button>
                )}
              </div>

              {/* Campos específicos según el tipo */}
              {addingType === 'cast' && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Personaje
                  </label>
                  <input
                    type="text"
                    value={newPerson.characterName}
                    onChange={(e) => setNewPerson({ ...newPerson, characterName: e.target.value })}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder="Nombre del personaje"
                  />
                </div>
              )}

              {addingType === 'crew' && (
                <>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Rol
                    </label>
                    <select
                      value={newPerson.role}
                      onChange={(e) => setNewPerson({ ...newPerson, role: e.target.value })}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    >
                      <option value="">Seleccionar...</option>
                      <option value="Director">Director</option>
                      <option value="Guionista">Guionista</option>
                      <option value="Productor">Productor</option>
                      <option value="Productor Ejecutivo">Productor Ejecutivo</option>
                      <option value="Director de Fotografía">Director de Fotografía</option>
                      <option value="Editor">Editor</option>
                      <option value="Compositor">Compositor</option>
                      <option value="Director de Arte">Director de Arte</option>
                      <option value="Diseñador de Vestuario">Diseñador de Vestuario</option>
                      <option value="Maquillador">Maquillador</option>
                      <option value="Sonidista">Sonidista</option>
                    </select>
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Departamento
                    </label>
                    <select
                      value={newPerson.department}
                      onChange={(e) => setNewPerson({ ...newPerson, department: e.target.value })}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    >
                      <option value="">Seleccionar...</option>
                      <option value="Dirección">Dirección</option>
                      <option value="Guión">Guión</option>
                      <option value="Producción">Producción</option>
                      <option value="Fotografía">Fotografía</option>
                      <option value="Montaje">Montaje</option>
                      <option value="Música">Música</option>
                      <option value="Arte">Arte</option>
                      <option value="Vestuario">Vestuario</option>
                      <option value="Maquillaje">Maquillaje</option>
                      <option value="Sonido">Sonido</option>
                      <option value="Efectos Especiales">Efectos Especiales</option>
                    </select>
                  </div>
                </>
              )}
            </div>

            {/* Botones de acción */}
            <div className="mt-6 flex justify-end gap-3">
              <button
                type="button"
                onClick={() => {
                  setShowPersonSearch(false)
                  setAddingType(null)
                  setPersonSearch('')
                  setNewPerson({
                    personId: 0,
                    characterName: '',
                    role: '',
                    department: '',
                    billingOrder: 0
                  })
                }}
                className="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50"
              >
                Cancelar
              </button>
              <button
                type="button"
                onClick={addPerson}
                disabled={!newPerson.personId || (addingType === 'crew' && !newPerson.role)}
                className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
              >
                Agregar
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}

// ==================================================
// src/components/admin/MovieLinksManager.tsx
// ==================================================
import { useState } from 'react';
import { Plus, Trash2, Link, ExternalLink } from 'lucide-react';

interface MovieLink {
  id?: number;
  type: string;
  url: string;
  title?: string;
  isActive?: boolean;
}

interface MovieLinksManagerProps {
  initialLinks?: MovieLink[];
  onLinksChange: (links: MovieLink[]) => void;
}

const LINK_TYPES = [
  { value: 'INSTAGRAM', label: 'Instagram', icon: '📷' },
  { value: 'TWITTER', label: 'X (Twitter)', icon: '𝕏' },
  { value: 'FACEBOOK', label: 'Facebook', icon: '👤' },
  { value: 'TIKTOK', label: 'TikTok', icon: '🎵' },
  { value: 'YOUTUBE', label: 'YouTube', icon: '▶️' },
  { value: 'WEBSITE', label: 'Sitio Web Oficial', icon: '🌐' }
];

export default function MovieLinksManager({ 
  initialLinks = [], 
  onLinksChange 
}: MovieLinksManagerProps) {
  const [links, setLinks] = useState<MovieLink[]>(initialLinks);
  const [showAddForm, setShowAddForm] = useState(false);
  const [newLink, setNewLink] = useState<MovieLink>({
    type: 'WEBSITE',
    url: '',
    title: ''
  });

  const handleAddLink = () => {
    if (!newLink.url || !newLink.type) return;

    const updatedLinks = [...links, { ...newLink, isActive: true }];
    setLinks(updatedLinks);
    onLinksChange(updatedLinks);

    // Reset form
    setNewLink({ type: 'WEBSITE', url: '', title: '' });
    setShowAddForm(false);
  };

  const handleRemoveLink = (index: number) => {
    const updatedLinks = links.filter((_, i) => i !== index);
    setLinks(updatedLinks);
    onLinksChange(updatedLinks);
  };

  const getLinkTypeInfo = (type: string) => {
    return LINK_TYPES.find(t => t.value === type) || LINK_TYPES[5];
  };

  const getPlaceholderUrl = (type: string) => {
    switch (type) {
      case 'INSTAGRAM':
        return 'https://www.instagram.com/peliculaejemplo';
      case 'TWITTER':
        return 'https://twitter.com/peliculaejemplo';
      case 'FACEBOOK':
        return 'https://www.facebook.com/peliculaejemplo';
      case 'TIKTOK':
        return 'https://www.tiktok.com/@peliculaejemplo';
      case 'YOUTUBE':
        return 'https://www.youtube.com/channel/UCxxxxxx';
      case 'WEBSITE':
      default:
        return 'https://www.peliculaejemplo.com';
    }
  };

  return (
    <div className="space-y-4">
      <h3 className="text-lg font-medium text-gray-900 mb-4 flex items-center gap-2">
        <Link className="w-5 h-5" />
        Links Oficiales
      </h3>

      {/* Lista de links existentes */}
      {links.length > 0 && (
        <div className="space-y-2 mb-4">
          {links.map((link, index) => {
            const typeInfo = getLinkTypeInfo(link.type);
            return (
              <div 
                key={index} 
                className="flex items-center gap-4 p-3 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors"
              >
                <span className="text-2xl">{typeInfo.icon}</span>
                <div className="flex-1">
                  <div className="flex items-center gap-2">
                    <span className="font-medium text-gray-900">{typeInfo.label}</span>
                    {link.title && (
                      <span className="text-sm text-gray-500">- {link.title}</span>
                    )}
                  </div>
                  <a 
                    href={link.url} 
                    target="_blank" 
                    rel="noopener noreferrer"
                    className="text-sm text-blue-600 hover:text-blue-800 flex items-center gap-1"
                  >
                    {link.url}
                    <ExternalLink className="w-3 h-3" />
                  </a>
                </div>
                <button
                  type="button"
                  onClick={() => handleRemoveLink(index)}
                  className="text-red-600 hover:text-red-800 transition-colors"
                >
                  <Trash2 className="w-4 h-4" />
                </button>
              </div>
            );
          })}
        </div>
      )}

      {/* Formulario para agregar nuevo link */}
      {showAddForm ? (
        <div className="border border-gray-300 rounded-lg p-4 space-y-4 bg-gray-50">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Tipo de Link
              </label>
              <select
                value={newLink.type}
                onChange={(e) => setNewLink({ ...newLink, type: e.target.value })}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
              >
                {LINK_TYPES.map(type => (
                  <option key={type.value} value={type.value}>
                    {type.icon} {type.label}
                  </option>
                ))}
              </select>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Título/Descripción (opcional)
              </label>
              <input
                type="text"
                value={newLink.title || ''}
                onChange={(e) => setNewLink({ ...newLink, title: e.target.value })}
                placeholder="Ej: Cuenta oficial"
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
              />
            </div>
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              URL
            </label>
            <input
              type="url"
              value={newLink.url}
              onChange={(e) => setNewLink({ ...newLink, url: e.target.value })}
              placeholder={getPlaceholderUrl(newLink.type)}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
              required
            />
          </div>

          <div className="flex justify-end gap-3">
            <button
              type="button"
              onClick={() => {
                setShowAddForm(false);
                setNewLink({ type: 'WEBSITE', url: '', title: '' });
              }}
              className="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors"
            >
              Cancelar
            </button>
            <button
              type="button"
              onClick={handleAddLink}
              disabled={!newLink.url}
              className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
            >
              Agregar Link
            </button>
          </div>
        </div>
      ) : (
        <button
          type="button"
          onClick={() => setShowAddForm(true)}
          className="inline-flex items-center gap-2 px-4 py-2 border border-gray-300 rounded-lg text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 transition-colors"
        >
          <Plus className="w-4 h-4" />
          Agregar Link Oficial
        </button>
      )}

      {links.length === 0 && !showAddForm && (
        <p className="text-sm text-gray-500 italic">
          No hay links oficiales agregados para esta película.
        </p>
      )}
    </div>
  );
}

// ==================================================
// src/components/admin/movies/MovieModal/index.tsx
// ==================================================
// src/components/admin/movies/MovieModal/index.tsx
import * as Tabs from '@radix-ui/react-tabs'
import { UseFormRegister, UseFormHandleSubmit, UseFormWatch, UseFormSetValue, UseFormReset, FieldErrors } from 'react-hook-form'
import { MovieFormData, Movie, PartialReleaseDate, PartialFilmingDate } from '@/lib/movies/movieTypes'

// Componentes del modal
import MovieModalHeader from './MovieModalHeader'
import MovieModalTabs from './MovieModalTabs'
import MovieModalFooter from './MovieModalFooter'

// Tabs
import BasicInfoTab from './tabs/BasicInfoTab'
import MediaTab from './tabs/MediaTab'
import CastTab from './tabs/CastTab'
import CrewTab from './tabs/CrewTab'
import AdvancedTab from './tabs/AdvancedTab'

interface MovieModalProps {
  isOpen: boolean
  onClose: () => void
  editingMovie: Movie | null
  onSubmit: (data: MovieFormData) => Promise<void>
  isSubmitting: boolean

  // Props del formulario
  register: UseFormRegister<MovieFormData>
  handleSubmit: UseFormHandleSubmit<MovieFormData>
  watch: UseFormWatch<MovieFormData>
  setValue: UseFormSetValue<MovieFormData>
  reset: UseFormReset<MovieFormData>
  errors: FieldErrors<MovieFormData>

  // Estados que necesitamos pasar
  activeTab: string
  setActiveTab: (tab: string) => void
  isPartialDate: boolean
  setIsPartialDate: (value: boolean) => void
  partialReleaseDate: PartialReleaseDate
  setPartialReleaseDate: (value: PartialReleaseDate) => void
  tipoDuracionDisabled: boolean

  // Estados para fechas de rodaje
  isPartialFilmingStartDate: boolean
  setIsPartialFilmingStartDate: (value: boolean) => void
  partialFilmingStartDate: PartialFilmingDate
  setPartialFilmingStartDate: (value: PartialFilmingDate) => void

  isPartialFilmingEndDate: boolean
  setIsPartialFilmingEndDate: (value: boolean) => void
  partialFilmingEndDate: PartialFilmingDate
  setPartialFilmingEndDate: (value: PartialFilmingDate) => void
  handleScreeningVenuesChange: (venues: number[]) => void
  // Metadata
  availableRatings: any[]
  availableColorTypes: any[]

  // Relaciones
  movieFormInitialData: any
  alternativeTitles: any[]
  setAlternativeTitles: (titles: any[]) => void
  movieLinks: any[]

  // Callbacks
  handleGenresChange: (genres: number[]) => void
  handleCastChange: (cast: any[]) => void
  handleCrewChange: (crew: any[]) => void
  handleCountriesChange: (countries: number[]) => void
  handleProductionCompaniesChange: (companies: number[]) => void
  handleDistributionCompaniesChange: (companies: number[]) => void
  handleThemesChange: (themes: number[]) => void
  handleLinksChange: (links: any[]) => void
}

export default function MovieModal({
  isOpen,
  onClose,
  editingMovie,
  onSubmit,
  isSubmitting,
  register,
  handleSubmit,
  watch,
  setValue,
  reset,
  errors,
  activeTab,
  setActiveTab,
  isPartialDate,
  setIsPartialDate,
  partialReleaseDate,
  setPartialReleaseDate,
  tipoDuracionDisabled,
  isPartialFilmingStartDate,
  setIsPartialFilmingStartDate,
  partialFilmingStartDate,
  setPartialFilmingStartDate,
  isPartialFilmingEndDate,
  setIsPartialFilmingEndDate,
  partialFilmingEndDate,
  setPartialFilmingEndDate,
  availableRatings,
  availableColorTypes,
  movieFormInitialData,
  alternativeTitles,
  setAlternativeTitles,
  movieLinks,
  handleGenresChange,
  handleCastChange,
  handleCrewChange,
  handleCountriesChange,
  handleProductionCompaniesChange,
  handleDistributionCompaniesChange,
  handleScreeningVenuesChange,
  handleThemesChange,
  handleLinksChange
}: MovieModalProps) {
  if (!isOpen) return null

  return (
    <div className="fixed inset-0 bg-gray-500 bg-opacity-75 flex items-center justify-center p-4 z-50">
      <div className="bg-white rounded-lg max-w-4xl w-full max-h-[90vh] overflow-hidden">
        <MovieModalHeader
          isEditing={!!editingMovie}
          onClose={onClose}
        />

        <form onSubmit={handleSubmit(onSubmit)} className="overflow-y-auto max-h-[calc(90vh-8rem)]">
          <Tabs.Root value={activeTab} onValueChange={setActiveTab} className="w-full">
            <MovieModalTabs
              activeTab={activeTab}
              onTabChange={setActiveTab}
            />

            <div className="p-6">
              <Tabs.Content value="basic">
                <BasicInfoTab
                  register={register}
                  watch={watch}
                  setValue={setValue}
                  errors={errors}
                  isPartialDate={isPartialDate}
                  setIsPartialDate={setIsPartialDate}
                  partialReleaseDate={partialReleaseDate}
                  setPartialReleaseDate={setPartialReleaseDate}
                  tipoDuracionDisabled={tipoDuracionDisabled}
                  isPartialFilmingStartDate={isPartialFilmingStartDate}
                  setIsPartialFilmingStartDate={setIsPartialFilmingStartDate}
                  partialFilmingStartDate={partialFilmingStartDate}
                  setPartialFilmingStartDate={setPartialFilmingStartDate}
                  isPartialFilmingEndDate={isPartialFilmingEndDate}
                  setIsPartialFilmingEndDate={setIsPartialFilmingEndDate}
                  partialFilmingEndDate={partialFilmingEndDate}
                  setPartialFilmingEndDate={setPartialFilmingEndDate}
                  movieFormInitialData={movieFormInitialData}
                  movieLinks={movieLinks}
                  handleGenresChange={handleGenresChange}
                  handleCountriesChange={handleCountriesChange}
                  handleThemesChange={handleThemesChange}
                  handleLinksChange={handleLinksChange}
                  handleScreeningVenuesChange={handleScreeningVenuesChange}
                  editingMovieId={editingMovie?.id}
                />
              </Tabs.Content>

              <Tabs.Content value="media">
                <MediaTab
                  register={register}
                  watch={watch}
                  setValue={setValue}
                  editingMovieId={editingMovie?.id}
                />
              </Tabs.Content>

              <Tabs.Content value="cast">
                <CastTab
                  handleCastChange={handleCastChange}
                  movieFormInitialData={movieFormInitialData}
                  editingMovieId={editingMovie?.id}
                />
              </Tabs.Content>

              <Tabs.Content value="crew">
                <CrewTab
                  handleCrewChange={handleCrewChange}
                  movieFormInitialData={movieFormInitialData}
                  editingMovieId={editingMovie?.id}
                />
              </Tabs.Content>

              <Tabs.Content value="advanced">
                <AdvancedTab
                  register={register}
                  watch={watch}
                  availableRatings={availableRatings}
                  availableColorTypes={availableColorTypes}
                  alternativeTitles={alternativeTitles}
                  setAlternativeTitles={setAlternativeTitles}
                  movieFormInitialData={movieFormInitialData}
                  handleProductionCompaniesChange={handleProductionCompaniesChange}
                  handleDistributionCompaniesChange={handleDistributionCompaniesChange}
                  editingMovieId={editingMovie?.id}
                />
              </Tabs.Content>
            </div>
          </Tabs.Root>

          <MovieModalFooter
            isSubmitting={isSubmitting}
            isEditing={!!editingMovie}
            onCancel={onClose}
            errors={errors}
          />
        </form>
      </div>
    </div>
  )
}

// ==================================================
// src/components/admin/movies/MovieModal/MovieModalFooter.tsx
// ==================================================
// src/components/admin/movies/MovieModal/MovieModalFooter.tsx
import { Save, Loader2 } from 'lucide-react'

interface MovieModalFooterProps {
  isSubmitting: boolean
  isEditing: boolean
  onCancel: () => void
  errors: any
}

export default function MovieModalFooter({ 
  isSubmitting, 
  isEditing, 
  onCancel, 
  errors 
}: MovieModalFooterProps) {
  return (
    <div className="px-6 py-4 bg-gray-50 border-t border-gray-200 flex items-center justify-end gap-4">
      <button
        type="button"
        onClick={onCancel}
        className="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors"
      >
        Cancelar
      </button>
      
      {Object.keys(errors).length > 0 && (
        <div className="px-6 py-2 bg-red-50 text-red-800 text-sm">
          Errores: {Object.keys(errors).join(', ')}
        </div>
      )}
      
      <button
        type="submit"
        disabled={isSubmitting}
        className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-2"
      >
        {isSubmitting ? (
          <>
            <Loader2 className="w-4 h-4 animate-spin" />
            Guardando...
          </>
        ) : (
          <>
            <Save className="w-4 h-4" />
            {isEditing ? 'Actualizar' : 'Crear'} Película
          </>
        )}
      </button>
    </div>
  )
}

// ==================================================
// src/components/admin/movies/MovieModal/MovieModalHeader.tsx
// ==================================================
// src/components/admin/movies/MovieModal/MovieModalHeader.tsx
import { X } from 'lucide-react'

interface MovieModalHeaderProps {
  isEditing: boolean
  onClose: () => void
}

export default function MovieModalHeader({ isEditing, onClose }: MovieModalHeaderProps) {
  return (
    <div className="bg-gray-50 px-6 py-4 border-b border-gray-200">
      <div className="flex items-center justify-between">
        <h2 className="text-xl font-semibold text-gray-900">
          {isEditing ? 'Editar Película' : 'Nueva Película'}
        </h2>
        <button
          onClick={onClose}
          className="text-gray-400 hover:text-gray-500"
        >
          <X className="w-6 h-6" />
        </button>
      </div>
    </div>
  )
}

// ==================================================
// src/components/admin/movies/MovieModal/MovieModalTabs.tsx
// ==================================================
// src/components/admin/movies/MovieModal/MovieModalTabs.tsx
import * as Tabs from '@radix-ui/react-tabs'
import { Info, Image, Users, Briefcase, Settings } from 'lucide-react'

interface MovieModalTabsProps {
  activeTab: string
  onTabChange: (value: string) => void
}

const TABS = [
  { value: 'basic', label: 'Información Básica', icon: Info },
  { value: 'media', label: 'Multimedia', icon: Image },
  { value: 'cast', label: 'Reparto', icon: Users },
  { value: 'crew', label: 'Equipo Técnico', icon: Briefcase },
  { value: 'advanced', label: 'Avanzado', icon: Settings }
]

export default function MovieModalTabs({ activeTab, onTabChange }: MovieModalTabsProps) {
  return (
    <Tabs.List className="flex border-b border-gray-200 px-6 pt-4">
      {TABS.map((tab) => {
        const Icon = tab.icon
        return (
          <Tabs.Trigger
            key={tab.value}
            value={tab.value}
            className={`px-4 py-2 -mb-px text-sm font-medium transition-colors ${
              activeTab === tab.value
                ? 'text-blue-600 border-b-2 border-blue-600'
                : 'text-gray-500 hover:text-gray-700'
            }`}
          >
            <div className="flex items-center gap-2">
              <Icon className="w-4 h-4" />
              {tab.label}
            </div>
          </Tabs.Trigger>
        )
      })}
    </Tabs.List>
  )
}

// ==================================================
// src/components/admin/movies/MovieModal/tabs/AdvancedTab.tsx
// ==================================================
// src/components/admin/movies/MovieModal/tabs/AdvancedTab.tsx
import { UseFormRegister, UseFormWatch } from 'react-hook-form'
import { MovieFormData } from '@/lib/movies/movieTypes'
import { SOUND_TYPES } from '@/lib/movies/movieConstants'
import AlternativeTitlesManager from '@/components/admin/AlternativeTitlesManager'
import MovieFormEnhanced from '@/components/admin/MovieFormEnhanced'

interface AdvancedTabProps {
  register: UseFormRegister<MovieFormData>
  watch: UseFormWatch<MovieFormData>

  // Metadata
  availableRatings: any[]
  availableColorTypes: any[]

  // Títulos alternativos
  alternativeTitles: any[]
  setAlternativeTitles: (titles: any[]) => void

  // Compañías
  movieFormInitialData: any
  handleProductionCompaniesChange: (companies: number[]) => void
  handleDistributionCompaniesChange: (companies: number[]) => void

  editingMovieId?: number
}

export default function AdvancedTab({
  register,
  watch,
  availableRatings,
  availableColorTypes,
  alternativeTitles,
  setAlternativeTitles,
  movieFormInitialData,
  handleProductionCompaniesChange,
  handleDistributionCompaniesChange,
  editingMovieId
}: AdvancedTabProps) {
  return (
    <div className="space-y-6">
      {/* Información técnica */}
      <div className="space-y-4">
        <h3 className="text-lg font-medium text-gray-900 mb-4">
          Información Técnica
        </h3>

        <div className="grid grid-cols-2 gap-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Color
            </label>
            <select
              {...register('colorTypeId', { valueAsNumber: true })}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
            >
              <option value="">Seleccionar...</option>
              {availableColorTypes.map((colorType) => (
                <option key={colorType.id} value={colorType.id}>
                  {colorType.name}
                </option>
              ))}
            </select>
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Sonido
            </label>
            <select
              {...register('soundType')}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
            >
              <option value="">Seleccionar...</option>
              {SOUND_TYPES.map(sound => (
                <option key={sound.value} value={sound.value}>
                  {sound.label}
                </option>
              ))}
            </select>
          </div>
        </div>
      </div>

      {/* Clasificación */}
      <div>
        <label className="block text-sm font-medium text-gray-700 mb-1">
          Calificación
        </label>
        <select
          {...register('ratingId', {
            setValueAs: (v) => {
              if (v === '' || v === '0' || v === 0) return null;
              return Number(v);
            }
          })}
          className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
        >
          <option value="">Sin calificación</option>
          {availableRatings.map((rating) => (
            <option key={rating.id} value={rating.id}>
              {rating.name} {rating.abbreviation && `(${rating.abbreviation})`}
            </option>
          ))}
        </select>
        {(() => {
          const selectedRating = availableRatings.find(r => r.id === watch('ratingId'))
          return selectedRating?.description && (
            <p className="mt-1 text-sm text-gray-500">
              {selectedRating.description}
            </p>
          )
        })()}
      </div>

      {/* Títulos Alternativos */}
      <div className="mt-6">
        <AlternativeTitlesManager
          onChange={setAlternativeTitles}
          initialTitles={editingMovieId ? alternativeTitles : []}
        />
      </div>

      {/* Productoras y Distribuidoras */}
      <MovieFormEnhanced
        key={editingMovieId || 'new'}
        onGenresChange={() => { }}
        onCastChange={() => { }}
        onCrewChange={() => { }}
        onCountriesChange={() => { }}
        onProductionCompaniesChange={handleProductionCompaniesChange}
        onDistributionCompaniesChange={handleDistributionCompaniesChange}
        onThemesChange={() => { }}
        onScreeningVenuesChange={() => { }}
        initialData={movieFormInitialData}
        showOnlyCompanies={true}
      />

      <div>
        <label className="block text-sm font-medium text-gray-700 mb-1">
          Notas Internas
        </label>
        <textarea
          {...register('notes')}  // 👈 Usar register como los otros campos
          rows={4}
          placeholder="Anotaciones internas sobre esta película. No se mostrarán públicamente."
          className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
        />
        <p className="mt-1 text-sm text-gray-500">
          Este campo es solo para uso interno del equipo editorial.
        </p>
      </div>
    </div>
  )
}

// ==================================================
// src/components/admin/movies/MovieModal/tabs/BasicInfoTab.tsx
// ==================================================
// src/components/admin/movies/MovieModal/tabs/BasicInfoTab.tsx
import { UseFormRegister, UseFormWatch, UseFormSetValue, FieldErrors } from 'react-hook-form'
import { MovieFormData, PartialReleaseDate, PartialFilmingDate } from '@/lib/movies/movieTypes'
import { MONTHS, TIPOS_DURACION, DATA_COMPLETENESS_LEVELS } from '@/lib/movies/movieConstants'
import { getErrorMessage } from '@/lib/movies/movieUtils'
import MovieFormEnhanced from '@/components/admin/MovieFormEnhanced'
import MovieLinksManager from '@/components/admin/MovieLinksManager'

interface BasicInfoTabProps {
  register: UseFormRegister<MovieFormData>
  watch: UseFormWatch<MovieFormData>
  setValue: UseFormSetValue<MovieFormData>
  errors: FieldErrors<MovieFormData>

  // Estados específicos
  isPartialDate: boolean
  setIsPartialDate: (value: boolean) => void
  partialReleaseDate: PartialReleaseDate
  setPartialReleaseDate: (value: PartialReleaseDate) => void
  tipoDuracionDisabled: boolean

  // Estados para fechas de rodaje
  isPartialFilmingStartDate: boolean
  setIsPartialFilmingStartDate: (value: boolean) => void
  partialFilmingStartDate: PartialFilmingDate
  setPartialFilmingStartDate: (value: PartialFilmingDate) => void

  isPartialFilmingEndDate: boolean
  setIsPartialFilmingEndDate: (value: boolean) => void
  partialFilmingEndDate: PartialFilmingDate
  setPartialFilmingEndDate: (value: PartialFilmingDate) => void

  handleScreeningVenuesChange: (venues: number[]) => void

  // Datos y callbacks
  movieFormInitialData: any
  movieLinks: any[]
  handleGenresChange: (genres: number[]) => void
  handleCountriesChange: (countries: number[]) => void
  handleThemesChange: (themes: number[]) => void
  handleLinksChange: (links: any[]) => void

  editingMovieId?: number
}

export default function BasicInfoTab({
  register,
  watch,
  setValue,
  errors,
  isPartialDate,
  setIsPartialDate,
  partialReleaseDate,
  setPartialReleaseDate,
  tipoDuracionDisabled,
  isPartialFilmingStartDate,
  setIsPartialFilmingStartDate,
  partialFilmingStartDate,
  setPartialFilmingStartDate,
  isPartialFilmingEndDate,
  setIsPartialFilmingEndDate,
  partialFilmingEndDate,
  setPartialFilmingEndDate,
  handleScreeningVenuesChange,
  movieFormInitialData,
  movieLinks,
  handleGenresChange,
  handleCountriesChange,
  handleThemesChange,
  handleLinksChange,
  editingMovieId
}: BasicInfoTabProps) {
  return (
    <div className="space-y-6">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {/* Columna izquierda */}
        <div className="space-y-4">
          <h3 className="text-lg font-medium text-gray-900 mb-4">
            Información Principal
          </h3>

          {/* Título */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Título *
            </label>
            <input
              type="text"
              {...register('title')}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
            />
            {errors.title && (
              <p className="mt-1 text-sm text-red-600">{getErrorMessage(errors.title)}</p>
            )}
          </div>

          <div className="grid grid-cols-2 gap-4">
            {/* Año */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Año
              </label>
              <input
                type="number"
                {...register('year', { valueAsNumber: true })}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
              />
              {errors.year && (
                <p className="mt-1 text-sm text-red-600">{getErrorMessage(errors.year)}</p>
              )}
            </div>

            {/* Fecha de Estreno */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Fecha de Estreno
              </label>

              <div className="mb-2">
                <label className="inline-flex items-center">
                  <input
                    type="checkbox"
                    checked={isPartialDate}
                    onChange={(e) => setIsPartialDate(e.target.checked)}
                    className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                  />
                  <span className="ml-2 text-sm text-gray-600">
                    Fecha incompleta
                  </span>
                </label>
              </div>

              {!isPartialDate ? (
                <input
                  type="date"
                  {...register('releaseDate')}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                />
              ) : (
                <div className="flex gap-2">
                  <div className="flex-1">
                    <input
                      type="number"
                      placeholder="Año"
                      min="1800"
                      max="2100"
                      value={partialReleaseDate.year || ''}
                      onChange={(e) => setPartialReleaseDate({
                        ...partialReleaseDate,
                        year: e.target.value ? parseInt(e.target.value) : null
                      })}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                    />
                  </div>
                  <div className="flex-1">
                    <select
                      value={partialReleaseDate.month || ''}
                      onChange={(e) => setPartialReleaseDate({
                        ...partialReleaseDate,
                        month: e.target.value ? parseInt(e.target.value) : null
                      })}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                    >
                      <option value="">Mes</option>
                      {MONTHS.map(month => (
                        <option key={month.value} value={month.value}>
                          {month.label}
                        </option>
                      ))}
                    </select>
                  </div>
                </div>
              )}
            </div>
          </div>



          {/* Fechas de rodaje */}
          <div className="space-y-4">
            {/* Fecha Inicio de Rodaje */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Fecha Inicio de Rodaje
              </label>

              <div className="mb-2">
                <label className="inline-flex items-center">
                  <input
                    type="checkbox"
                    checked={isPartialFilmingStartDate}
                    onChange={(e) => setIsPartialFilmingStartDate(e.target.checked)}
                    className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                  />
                  <span className="ml-2 text-sm text-gray-600">
                    Fecha incompleta
                  </span>
                </label>
              </div>

              {!isPartialFilmingStartDate ? (
                <input
                  type="date"
                  {...register('filmingStartDate')}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                />
              ) : (
                <div className="flex gap-2">
                  <div className="flex-1">
                    <input
                      type="number"
                      placeholder="Año"
                      min="1800"
                      max="2100"
                      value={partialFilmingStartDate.year || ''}
                      onChange={(e) => setPartialFilmingStartDate({
                        ...partialFilmingStartDate,
                        year: e.target.value ? parseInt(e.target.value) : null
                      })}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                    />
                  </div>
                  <div className="flex-1">
                    <select
                      value={partialFilmingStartDate.month || ''}
                      onChange={(e) => setPartialFilmingStartDate({
                        ...partialFilmingStartDate,
                        month: e.target.value ? parseInt(e.target.value) : null
                      })}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                    >
                      <option value="">Mes</option>
                      {MONTHS.map(month => (
                        <option key={month.value} value={month.value}>
                          {month.label}
                        </option>
                      ))}
                    </select>
                  </div>
                </div>
              )}
            </div>

            {/* Fecha Fin de Rodaje */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Fecha Fin de Rodaje
              </label>

              <div className="mb-2">
                <label className="inline-flex items-center">
                  <input
                    type="checkbox"
                    checked={isPartialFilmingEndDate}
                    onChange={(e) => setIsPartialFilmingEndDate(e.target.checked)}
                    className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                  />
                  <span className="ml-2 text-sm text-gray-600">
                    Fecha incompleta
                  </span>
                </label>
              </div>

              {!isPartialFilmingEndDate ? (
                <input
                  type="date"
                  {...register('filmingEndDate')}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                />
              ) : (
                <div className="flex gap-2">
                  <div className="flex-1">
                    <input
                      type="number"
                      placeholder="Año"
                      min="1800"
                      max="2100"
                      value={partialFilmingEndDate.year || ''}
                      onChange={(e) => setPartialFilmingEndDate({
                        ...partialFilmingEndDate,
                        year: e.target.value ? parseInt(e.target.value) : null
                      })}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                    />
                  </div>
                  <div className="flex-1">
                    <select
                      value={partialFilmingEndDate.month || ''}
                      onChange={(e) => setPartialFilmingEndDate({
                        ...partialFilmingEndDate,
                        month: e.target.value ? parseInt(e.target.value) : null
                      })}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                    >
                      <option value="">Mes</option>
                      {MONTHS.map(month => (
                        <option key={month.value} value={month.value}>
                          {month.label}
                        </option>
                      ))}
                    </select>
                  </div>
                </div>
              )}
            </div>
          </div>

          {/* Duración */}
          <div className="grid grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Duración (minutos)
              </label>
              <input
                type="number"
                {...register('duration', { valueAsNumber: true })}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Segundos
              </label>
              <input
                type="number"
                min="0"
                max="59"
                {...register('durationSeconds', { valueAsNumber: true })}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                placeholder="0-59"
              />
            </div>
          </div>

          {/* Tipo de duración */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Tipo de duración
              {tipoDuracionDisabled && (
                <span className="ml-2 text-xs text-green-600 font-normal">
                  (Calculado automáticamente)
                </span>
              )}
            </label>
            <select
              {...register('tipoDuracion')}
              disabled={tipoDuracionDisabled}
              className={`w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900 ${tipoDuracionDisabled ? 'bg-gray-100' : ''
                }`}
            >
              <option value="">Seleccionar tipo...</option>
              {TIPOS_DURACION.map((tipo) => (
                <option key={tipo.value} value={tipo.value}>
                  {tipo.label}
                </option>
              ))}
            </select>
          </div>

        </div>

        {/* Columna derecha */}
        <div className="space-y-4">
          <h3 className="text-lg font-medium text-gray-900 mb-4">
            Información Adicional
          </h3>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Sinopsis
            </label>
            <textarea
              {...register('synopsis')}
              rows={4}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Tagline
            </label>
            <input
              type="text"
              {...register('tagline')}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              IMDb ID
            </label>
            <input
              type="text"
              {...register('imdbId')}
              placeholder="tt0123456"
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Nivel de información cargada *
            </label>
            <select
              {...register('dataCompleteness')}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
            >
              {DATA_COMPLETENESS_LEVELS.map(level => (
                <option key={level.value} value={level.value}>
                  {level.icon} {level.label}
                </option>
              ))}
            </select>
            <p className="mt-1 text-xs text-gray-500">
              Indica el nivel de detalle cargado
            </p>
          </div>
        </div>
      </div>

      {/* Links Oficiales */}
      <div className="mt-6">
        <MovieLinksManager
          key={`links-${editingMovieId || 'new'}-${movieLinks.length}`}
          initialLinks={movieLinks}
          onLinksChange={handleLinksChange}
        />
      </div>

      {/* Géneros, Países e Idiomas */}
      <MovieFormEnhanced
        key={editingMovieId || 'new'}
        onGenresChange={handleGenresChange}
        onCastChange={() => { }}
        onCrewChange={() => { }}
        onCountriesChange={handleCountriesChange}
        onProductionCompaniesChange={() => { }}
        onDistributionCompaniesChange={() => { }}
        onThemesChange={handleThemesChange}
        onScreeningVenuesChange={handleScreeningVenuesChange}
        initialData={movieFormInitialData}
        showOnlyBasicInfo={true}
      />
    </div>
  )
}

// ==================================================
// src/components/admin/movies/MovieModal/tabs/CastTab.tsx
// ==================================================
// src/components/admin/movies/MovieModal/tabs/CastTab.tsx
import MovieFormEnhanced from '@/components/admin/MovieFormEnhanced'

interface CastTabProps {
  handleCastChange: (cast: any[]) => void
  movieFormInitialData: any
  editingMovieId?: number
}

export default function CastTab({ 
  handleCastChange, 
  movieFormInitialData,
  editingMovieId 
}: CastTabProps) {
  return (
    <MovieFormEnhanced
      key={editingMovieId || 'new'}
      onGenresChange={() => {}}
      onCastChange={handleCastChange}
      onCrewChange={() => {}}
      onCountriesChange={() => {}}
      onProductionCompaniesChange={() => {}}
      onDistributionCompaniesChange={() => {}}
      onThemesChange={() => {}}
      onScreeningVenuesChange={() => { }}
      initialData={movieFormInitialData}
      showOnlyCast={true}
    />
  )
}

// ==================================================
// src/components/admin/movies/MovieModal/tabs/CrewTab.tsx
// ==================================================
// src/components/admin/movies/MovieModal/tabs/CrewTab.tsx
import MovieFormEnhanced from '@/components/admin/MovieFormEnhanced'

interface CrewTabProps {
  handleCrewChange: (crew: any[]) => void
  movieFormInitialData: any
  editingMovieId?: number
}

export default function CrewTab({ 
  handleCrewChange, 
  movieFormInitialData,
  editingMovieId 
}: CrewTabProps) {
  return (
    <MovieFormEnhanced
      key={editingMovieId || 'new'}
      onGenresChange={() => {}}
      onCastChange={() => {}}
      onCrewChange={handleCrewChange}
      onCountriesChange={() => {}}
      onProductionCompaniesChange={() => {}}
      onDistributionCompaniesChange={() => {}}
      onThemesChange={() => {}}
      onScreeningVenuesChange={() => { }}
      initialData={movieFormInitialData}
      showOnlyCrew={true}
    />
  )
}

// ==================================================
// src/components/admin/movies/MovieModal/tabs/MediaTab.tsx
// ==================================================
// src/components/admin/movies/MovieModal/tabs/MediaTab.tsx
import { UseFormRegister, UseFormWatch, UseFormSetValue } from 'react-hook-form'
import { MovieFormData } from '@/lib/movies/movieTypes'
import { CloudinaryUploadWidget } from '@/components/admin/CloudinaryUploadWidget'

interface MediaTabProps {
  register: UseFormRegister<MovieFormData>
  watch: UseFormWatch<MovieFormData>
  setValue: UseFormSetValue<MovieFormData>
  editingMovieId?: number
}

export default function MediaTab({ 
  register, 
  watch, 
  setValue, 
  editingMovieId 
}: MediaTabProps) {
  return (
    <div className="space-y-6">
      <h3 className="text-lg font-medium text-gray-900 mb-4">
        Imágenes y Videos
      </h3>

      <CloudinaryUploadWidget
        value={watch('posterUrl')}
        onChange={(url, publicId) => {
          setValue('posterUrl', url)
          setValue('posterPublicId', publicId)
        }}
        label="Afiche de la Película"
        type="poster"
        movieId={editingMovieId}
      />

      <CloudinaryUploadWidget
        value={watch('backdropUrl')}
        onChange={(url, publicId) => {
          setValue('backdropUrl', url)
          setValue('backdropPublicId', publicId)
        }}
        label="Imagen de Fondo"
        type="backdrop"
        movieId={editingMovieId}
      />

      <div>
        <label className="block text-sm font-medium text-gray-700 mb-1">
          URL del Trailer
        </label>
        <input
          type="url"
          {...register('trailerUrl')}
          placeholder="https://youtube.com/watch?v=..."
          className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
        />
        <p className="mt-1 text-sm text-gray-500">
          Ingresa la URL completa del video en YouTube, Vimeo u otra plataforma
        </p>
      </div>
    </div>
  )
}

// ==================================================
// src/components/admin/movies/MoviesFilters.tsx
// ==================================================
// src/components/admin/movies/MoviesFilters.tsx
import { Search, Plus } from 'lucide-react'

export interface MovieFilters {
  searchTerm: string
  selectedStage: string
  selectedYear: string
  currentPage: number
}

interface MoviesFiltersProps {
  filters: MovieFilters
  onFiltersChange: (filters: Partial<MovieFilters>) => void
  onNewMovie: () => void
}

export default function MoviesFilters({ 
  filters, 
  onFiltersChange, 
  onNewMovie 
}: MoviesFiltersProps) {
  // Generar años desde el actual hasta 50 años atrás
  const currentYear = new Date().getFullYear()
  const years = Array.from({ length: 50 }, (_, i) => currentYear - i)

  const handleFilterChange = (key: keyof MovieFilters, value: string | number) => {
    onFiltersChange({ 
      [key]: value,
      // Resetear a página 1 cuando cambian los filtros
      currentPage: key !== 'currentPage' ? 1 : filters.currentPage 
    })
  }

  return (
    <div className="bg-white rounded-lg shadow p-6 mb-6">
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        {/* Búsqueda */}
        <div className="relative">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
          <input
            type="text"
            placeholder="Buscar películas..."
            className="pl-10 pr-4 py-2 w-full border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
            value={filters.searchTerm}
            onChange={(e) => handleFilterChange('searchTerm', e.target.value)}
          />
        </div>

        {/* Filtro por año */}
        <select
          className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
          value={filters.selectedYear}
          onChange={(e) => handleFilterChange('selectedYear', e.target.value)}
        >
          <option value="">Todos los años</option>
          {years.map(year => (
            <option key={year} value={year}>{year}</option>
          ))}
        </select>

        {/* Botón nueva película */}
        <button
          onClick={onNewMovie}
          className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors flex items-center justify-center gap-2"
        >
          <Plus className="w-5 h-5" />
          Nueva Película
        </button>
      </div>
    </div>
  )
}

// ==================================================
// src/components/admin/movies/MoviesPagination.tsx
// ==================================================
// src/components/admin/movies/MoviesPagination.tsx
interface MoviesPaginationProps {
  currentPage: number
  totalPages: number
  onPageChange: (page: number) => void
}

export default function MoviesPagination({
  currentPage,
  totalPages,
  onPageChange
}: MoviesPaginationProps) {
  const handlePrevious = () => {
    if (currentPage > 1) {
      onPageChange(currentPage - 1)
    }
  }

  const handleNext = () => {
    if (currentPage < totalPages) {
      onPageChange(currentPage + 1)
    }
  }

  return (
    <div className="bg-white px-4 py-3 flex items-center justify-between border-t border-gray-200 sm:px-6 mt-4 rounded-lg shadow">
      {/* Vista móvil */}
      <div className="flex-1 flex justify-between sm:hidden">
        <button
          onClick={handlePrevious}
          disabled={currentPage === 1}
          className="relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
        >
          Anterior
        </button>
        <button
          onClick={handleNext}
          disabled={currentPage === totalPages}
          className="ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
        >
          Siguiente
        </button>
      </div>

      {/* Vista desktop */}
      <div className="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
        <div>
          <p className="text-sm text-gray-700">
            Página <span className="font-medium">{currentPage}</span> de{' '}
            <span className="font-medium">{totalPages}</span>
          </p>
        </div>
        <div>
          <nav className="relative z-0 inline-flex rounded-md shadow-sm -space-x-px" aria-label="Pagination">
            <button
              onClick={handlePrevious}
              disabled={currentPage === 1}
              className="relative inline-flex items-center px-4 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
            >
              Anterior
            </button>
            
            {/* Números de página (opcional, para una versión más completa) */}
            <span className="relative inline-flex items-center px-4 py-2 border border-gray-300 bg-white text-sm font-medium text-gray-700">
              {currentPage}
            </span>
            
            <button
              onClick={handleNext}
              disabled={currentPage === totalPages}
              className="relative inline-flex items-center px-4 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
            >
              Siguiente
            </button>
          </nav>
        </div>
      </div>
    </div>
  )
}

// ==================================================
// src/components/admin/movies/MoviesTable.tsx
// ==================================================
// src/components/admin/movies/MoviesTable.tsx
import { useState } from 'react'
import { Film, Edit, Trash2, Eye, Star, Loader2 } from 'lucide-react'
import { toast } from 'react-hot-toast'
import { type Movie } from '@/lib/movies/movieTypes'

interface MoviesTableProps {
  movies: Movie[]
  loading: boolean
  onEdit: (movie: Movie) => void
  onDelete: (id: number) => Promise<void>
}

export default function MoviesTable({ 
  movies, 
  loading, 
  onEdit, 
  onDelete 
}: MoviesTableProps) {
  const [deletingMovieId, setDeletingMovieId] = useState<number | null>(null)

  const handleDelete = async (id: number) => {
    if (!confirm('¿Estás seguro de eliminar esta película?')) return
    
    try {
      setDeletingMovieId(id)
      await onDelete(id)
      toast.success('Película eliminada')
    } catch (error) {
      toast.error('Error al eliminar la película')
    } finally {
      setDeletingMovieId(null)
    }
  }

  if (loading) {
    return (
      <div className="bg-white rounded-lg shadow overflow-hidden">
        <div className="flex items-center justify-center h-64">
          <Loader2 className="w-8 h-8 text-blue-600 animate-spin" />
        </div>
      </div>
    )
  }

  if (!movies || movies.length === 0) {
    return (
      <div className="bg-white rounded-lg shadow overflow-hidden">
        <div className="text-center py-12">
          <Film className="w-12 h-12 text-gray-400 mx-auto mb-4" />
          <p className="text-gray-500">No se encontraron películas</p>
        </div>
      </div>
    )
  }

  return (
    <div className="bg-white rounded-lg shadow overflow-hidden">
      <div className="overflow-x-auto">
        <table className="min-w-full divide-y divide-gray-200">
          <thead className="bg-gray-50">
            <tr>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Película
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Año
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Director
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Estado
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Rating
              </th>
              <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                Acciones
              </th>
            </tr>
          </thead>
          <tbody className="bg-white divide-y divide-gray-200">
            {movies.map((movie) => (
              <MovieRow
                key={movie.id}
                movie={movie}
                onEdit={onEdit}
                onDelete={handleDelete}
                isDeleting={deletingMovieId === movie.id}
              />
            ))}
          </tbody>
        </table>
      </div>
    </div>
  )
}

// Componente interno para cada fila
interface MovieRowProps {
  movie: Movie
  onEdit: (movie: Movie) => void
  onDelete: (id: number) => void
  isDeleting: boolean
}

function MovieRow({ movie, onEdit, onDelete, isDeleting }: MovieRowProps) {
  return (
    <tr className="hover:bg-gray-50">
      <td className="px-6 py-4 whitespace-nowrap">
        <div className="flex items-center">
          <div className="flex-shrink-0 h-10 w-10">
            {movie.posterUrl ? (
              <img
                className="h-10 w-10 rounded-lg object-cover"
                src={movie.posterUrl}
                alt={movie.title}
              />
            ) : (
              <div className="h-10 w-10 rounded-lg bg-gray-200 flex items-center justify-center">
                <Film className="w-5 h-5 text-gray-400" />
              </div>
            )}
          </div>
          <div className="ml-4">
            <div className="text-sm font-medium text-gray-900">
              {movie.title}
            </div>
            {movie.originalTitle && (
              <div className="text-sm text-gray-500">
                {movie.originalTitle}
              </div>
            )}
          </div>
        </div>
      </td>
      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
        {movie.year}
      </td>
      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
        {movie.directors?.map(d => d.name).join(', ') || '-'}
      </td>
      <td className="px-6 py-4 whitespace-nowrap">
        {movie.rating ? (
          <div className="flex items-center">
            <Star className="w-4 h-4 text-yellow-400 fill-current" />
            <span className="ml-1 text-sm text-gray-900">
              {movie.rating}
            </span>
          </div>
        ) : (
          <span className="text-sm text-gray-400">-</span>
        )}
      </td>
      <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
        <div className="flex items-center justify-end gap-2">
          <a
            href={`/peliculas/${movie.slug}`}
            target="_blank"
            rel="noopener noreferrer"
            className="text-gray-600 hover:text-gray-900 transition-colors"
            title="Ver película"
          >
            <Eye className="w-4 h-4" />
          </a>
          <button
            onClick={() => onEdit(movie)}
            className="text-blue-600 hover:text-blue-900 transition-colors"
            title="Editar"
          >
            <Edit className="w-4 h-4" />
          </button>
          <button
            onClick={() => onDelete(movie.id)}
            disabled={isDeleting}
            className="text-red-600 hover:text-red-900 transition-colors disabled:opacity-50"
            title="Eliminar"
          >
            {isDeleting ? (
              <Loader2 className="w-4 h-4 animate-spin" />
            ) : (
              <Trash2 className="w-4 h-4" />
            )}
          </button>
        </div>
      </td>
    </tr>
  )
}

// ==================================================
// src/components/admin/MoviesFilters.tsx
// ==================================================
// src/components/admin/movies/MoviesFilters.tsx
import { Search, Plus } from 'lucide-react'

interface MoviesFiltersProps {
  searchTerm: string
  onSearchChange: (value: string) => void
  selectedStatus: string
  onStatusChange: (value: string) => void
  selectedStage: string
  onStageChange: (value: string) => void
  selectedYear: string
  onYearChange: (value: string) => void
  onNewMovie: () => void
}

export default function MoviesFilters({
  searchTerm,
  onSearchChange,
  selectedStatus,
  onStatusChange,
  selectedStage,
  onStageChange,
  selectedYear,
  onYearChange,
  onNewMovie
}: MoviesFiltersProps) {
  // Generar array de años (últimos 50 años)
  const currentYear = new Date().getFullYear()
  const years = Array.from({ length: 50 }, (_, i) => currentYear - i)

  return (
    <div className="bg-white rounded-lg shadow p-6 mb-6">
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        {/* Búsqueda */}
        <div className="relative">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
          <input
            type="text"
            placeholder="Buscar películas..."
            className="pl-10 pr-4 py-2 w-full border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
            value={searchTerm}
            onChange={(e) => onSearchChange(e.target.value)}
          />
        </div>

        {/* Filtro por estado */}
        <select
          className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
          value={selectedStatus}
          onChange={(e) => onStatusChange(e.target.value)}
        >
          <option value="">Todos los estados</option>
          <option value="DRAFT">Borrador</option>
          <option value="PUBLISHED">Publicado</option>
          <option value="ARCHIVED">Archivado</option>
        </select>

        {/* Filtro por año */}
        <select
          className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
          value={selectedYear}
          onChange={(e) => onYearChange(e.target.value)}
        >
          <option value="">Todos los años</option>
          {years.map(year => (
            <option key={year} value={year}>{year}</option>
          ))}
        </select>

        {/* Botón nueva película */}
        <button
          onClick={onNewMovie}
          className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors flex items-center justify-center gap-2"
        >
          <Plus className="w-5 h-5" />
          Nueva Película
        </button>
      </div>
    </div>
  )
}

// ==================================================
// src/components/admin/MoviesPagination.tsx
// ==================================================
// src/components/admin/MoviesPagination.tsx
interface MoviesPaginationProps {
  currentPage: number
  totalPages: number
  onPageChange: (page: number) => void
}

export default function MoviesPagination({
  currentPage,
  totalPages,
  onPageChange
}: MoviesPaginationProps) {
  // Si no hay múltiples páginas, no mostrar nada
  if (totalPages <= 1) return null

  const handlePrevious = () => {
    onPageChange(Math.max(1, currentPage - 1))
  }

  const handleNext = () => {
    onPageChange(Math.min(totalPages, currentPage + 1))
  }

  return (
    <div className="bg-white px-4 py-3 flex items-center justify-between border-t border-gray-200 sm:px-6 mt-4 rounded-lg shadow">
      {/* Vista móvil */}
      <div className="flex-1 flex justify-between sm:hidden">
        <button
          onClick={handlePrevious}
          disabled={currentPage === 1}
          className="relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
        >
          Anterior
        </button>
        <button
          onClick={handleNext}
          disabled={currentPage === totalPages}
          className="ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
        >
          Siguiente
        </button>
      </div>

      {/* Vista desktop */}
      <div className="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
        <div>
          <p className="text-sm text-gray-700">
            Página <span className="font-medium">{currentPage}</span> de{' '}
            <span className="font-medium">{totalPages}</span>
          </p>
        </div>
        <div>
          <nav className="relative z-0 inline-flex rounded-md shadow-sm -space-x-px" aria-label="Pagination">
            <button
              onClick={handlePrevious}
              disabled={currentPage === 1}
              className="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              Anterior
            </button>
            <button
              onClick={handleNext}
              disabled={currentPage === totalPages}
              className="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              Siguiente
            </button>
          </nav>
        </div>
      </div>
    </div>
  )
}

// ==================================================
// src/components/admin/MoviesTable.tsx
// ==================================================
// src/components/admin/MoviesTable.tsx
import { Film, Eye, Edit, Trash2, Loader2, Star } from 'lucide-react'

interface Director {
  id: number
  name: string
}

interface Movie {
  id: number
  slug: string
  title: string
  originalTitle?: string
  year: number
  releaseDate?: string
  duration?: number
  rating?: number
  posterUrl?: string
  status: string
  stage?: string
  dataCompleteness?: string
  directors?: Director[]
}

interface MoviesTableProps {
  movies: Movie[]
  loading: boolean
  deletingMovieId: number | null
  onEdit: (movie: Movie) => void
  onDelete: (id: number) => void
}

export default function MoviesTable({
  movies,
  loading,
  deletingMovieId,
  onEdit,
  onDelete
}: MoviesTableProps) {
  if (loading) {
    return (
      <div className="bg-white rounded-lg shadow overflow-hidden">
        <div className="flex items-center justify-center h-64">
          <Loader2 className="w-8 h-8 text-blue-600 animate-spin" />
        </div>
      </div>
    )
  }

  if (!movies || movies.length === 0) {
    return (
      <div className="bg-white rounded-lg shadow overflow-hidden">
        <div className="text-center py-12">
          <Film className="w-12 h-12 text-gray-400 mx-auto mb-4" />
          <p className="text-gray-500">No se encontraron películas</p>
        </div>
      </div>
    )
  }

  return (
    <div className="bg-white rounded-lg shadow overflow-hidden">
      <div className="overflow-x-auto">
        <table className="min-w-full divide-y divide-gray-200">
          <thead className="bg-gray-50">
            <tr>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Película
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Año
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Director
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Estado
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Completitud
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Rating
              </th>
              <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                Acciones
              </th>
            </tr>
          </thead>
          <tbody className="bg-white divide-y divide-gray-200">
            {movies.map((movie) => (
              <tr key={movie.id} className="hover:bg-gray-50">
                <td className="px-6 py-4 whitespace-nowrap">
                  <div className="flex items-center">
                    <div className="flex-shrink-0 h-10 w-10">
                      {movie.posterUrl ? (
                        <img
                          className="h-10 w-10 rounded-lg object-cover"
                          src={movie.posterUrl}
                          alt={movie.title}
                        />
                      ) : (
                        <div className="h-10 w-10 rounded-lg bg-gray-200 flex items-center justify-center">
                          <Film className="w-5 h-5 text-gray-400" />
                        </div>
                      )}
                    </div>
                    <div className="ml-4">
                      <div className="text-sm font-medium text-gray-900">
                        {movie.title}
                      </div>
                      {movie.originalTitle && (
                        <div className="text-sm text-gray-500">
                          {movie.originalTitle}
                        </div>
                      )}
                    </div>
                  </div>
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                  {movie.year}
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                  {movie.directors?.map(d => d.name).join(', ') || '-'}
                </td>
                <td className="px-6 py-4 whitespace-nowrap">
                  <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${
                    movie.status === 'PUBLISHED'
                      ? 'bg-green-100 text-green-800'
                      : movie.status === 'DRAFT'
                        ? 'bg-yellow-100 text-yellow-800'
                        : 'bg-gray-100 text-gray-800'
                  }`}>
                    {movie.status === 'PUBLISHED' ? 'Publicado' :
                      movie.status === 'DRAFT' ? 'Borrador' : 'Archivado'}
                  </span>
                </td>
                <td className="px-6 py-4 whitespace-nowrap">
                  <span className="text-sm text-gray-400">-</span>
                </td>
                <td className="px-6 py-4 whitespace-nowrap">
                  {movie.rating ? (
                    <div className="flex items-center">
                      <Star className="w-4 h-4 text-yellow-400 fill-current" />
                      <span className="ml-1 text-sm text-gray-900">
                        {movie.rating}
                      </span>
                    </div>
                  ) : (
                    <span className="text-sm text-gray-400">-</span>
                  )}
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                  <div className="flex items-center justify-end gap-2">
                    <a
                      href={`/peliculas/${movie.slug}`}
                      target="_blank"
                      rel="noopener noreferrer"
                      className="text-gray-600 hover:text-gray-900 transition-colors"
                      title="Ver película"
                    >
                      <Eye className="w-4 h-4" />
                    </a>
                    <button
                      onClick={() => onEdit(movie)}
                      className="text-blue-600 hover:text-blue-900 transition-colors"
                      title="Editar"
                    >
                      <Edit className="w-4 h-4" />
                    </button>
                    <button
                      onClick={() => onDelete(movie.id)}
                      disabled={deletingMovieId === movie.id}
                      className="text-red-600 hover:text-red-900 transition-colors disabled:opacity-50"
                      title="Eliminar"
                    >
                      {deletingMovieId === movie.id ? (
                        <Loader2 className="w-4 h-4 animate-spin" />
                      ) : (
                        <Trash2 className="w-4 h-4" />
                      )}
                    </button>
                  </div>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  )
}

// ==================================================
// src/components/admin/people/PeopleTable.tsx
// ==================================================
// src/components/admin/people/PeopleTable.tsx

'use client';

import { useState } from 'react';
import Link from 'next/link';
import { 
  Edit, 
  Trash2, 
  Search, 
  Eye, 
  Download,
  ChevronLeft,
  ChevronRight,
  Loader2,
  Users
} from 'lucide-react';
import { format } from 'date-fns';
import { es } from 'date-fns/locale';
import { usePeople } from '@/hooks/usePeople';
import { formatPersonName, formatGender, getPersonSummary } from '@/lib/people/peopleUtils';
import { GENDER_OPTIONS, PEOPLE_PAGINATION } from '@/lib/people/peopleConstants';

export function PeopleTable() {
  const [deleteId, setDeleteId] = useState<number | null>(null);
  const [deleteName, setDeleteName] = useState<string>('');
  const [showDeleteDialog, setShowDeleteDialog] = useState(false);
  
  const {
    people,
    totalCount,
    currentPage,
    totalPages,
    loading,
    filters,
    updateFilter,
    deletePerson,
    exportToCSV,
    goToNextPage,
    goToPreviousPage,
    canGoNext,
    canGoPrevious,
  } = usePeople();

  const handleDelete = async () => {
    if (deleteId) {
      try {
        await deletePerson(deleteId);
        setShowDeleteDialog(false);
        setDeleteId(null);
      } catch (error) {
        // El error ya se maneja en el hook
      }
    }
  };

  const handleDeleteClick = (person: any) => {
    setDeleteId(person.id);
    setDeleteName(formatPersonName(person));
    setShowDeleteDialog(true);
  };

  return (
    <>
      {/* Filtros */}
      <div className="mb-4 flex flex-wrap gap-4">
        <div className="relative flex-1 max-w-sm">
          <Search className="absolute left-3 top-2.5 h-4 w-4 text-gray-400" />
          <input
            type="text"
            placeholder="Buscar por nombre..."
            value={filters.search || ''}
            onChange={(e) => updateFilter('search', e.target.value)}
            className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
          />
        </div>
        
        <select
          value={filters.gender || ''}
          onChange={(e) => updateFilter('gender', e.target.value as any)}
          className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
        >
          <option value="">Todos los géneros</option>
          {GENDER_OPTIONS.map(option => (
            <option key={option.value} value={option.value}>
              {option.label}
            </option>
          ))}
        </select>

        <select
          value={String(filters.isActive ?? '')}
          onChange={(e) => updateFilter('isActive', e.target.value === '' ? '' : e.target.value === 'true')}
          className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
        >
          <option value="">Todos</option>
          <option value="true">Activos</option>
          <option value="false">Inactivos</option>
        </select>

        <button
          onClick={exportToCSV}
          disabled={loading}
          className="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors flex items-center gap-2"
        >
          <Download className="w-4 h-4" />
          Exportar CSV
        </button>
      </div>

      {/* Tabla */}
      <div className="bg-white rounded-lg shadow overflow-hidden">
        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Nombre
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Nombre Real
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Información
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Género
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Links
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Películas
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Estado
                </th>
                <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Acciones
                </th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {loading ? (
                <tr>
                  <td colSpan={8} className="text-center py-12">
                    <Loader2 className="w-8 h-8 text-blue-600 animate-spin mx-auto" />
                    <p className="mt-2 text-gray-500">Cargando personas...</p>
                  </td>
                </tr>
              ) : people?.length === 0 ? (
                <tr>
                  <td colSpan={8} className="text-center py-12">
                    <Users className="w-12 h-12 text-gray-400 mx-auto mb-4" />
                    <p className="text-gray-500">
                      {filters.search 
                        ? 'No se encontraron personas con ese criterio de búsqueda' 
                        : 'No hay personas registradas'}
                    </p>
                  </td>
                </tr>
              ) : (
                people?.map((person) => (
                  <tr key={person.id} className="hover:bg-gray-50">
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="text-sm font-medium text-gray-900">
                        {formatPersonName(person)}
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                      {person.realName || '-'}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                      {person.birthDate ? (
                        person.hideAge ? (
                          <span className="italic">Fecha oculta</span>
                        ) : (
                          getPersonSummary(person)
                        )
                      ) : (
                        '-'
                      )}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                      {formatGender(person.gender)}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      {person._count?.links ? (
                        <span className="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-blue-100 text-blue-800">
                          {person._count.links} {person._count.links === 1 ? 'link' : 'links'}
                        </span>
                      ) : (
                        <span className="text-sm text-gray-400">-</span>
                      )}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                      {(person._count?.castRoles || 0) + (person._count?.crewRoles || 0) > 0 ? (
                        <div>
                          {person._count?.castRoles || 0} como actor
                          {((person._count?.crewRoles || 0) > 0) && (
                            <>, {person._count?.crewRoles || 0} como crew</>
                          )}
                        </div>
                      ) : (
                        <span className="text-gray-400">-</span>
                      )}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${
                        person.isActive 
                          ? 'bg-green-100 text-green-800' 
                          : 'bg-gray-100 text-gray-800'
                      }`}>
                        {person.isActive ? 'Activo' : 'Inactivo'}
                      </span>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                      <div className="flex items-center justify-end gap-2">
                        <Link 
                          href={`/admin/people/${person.id}`}
                          className="text-gray-600 hover:text-gray-900 transition-colors"
                          title="Ver detalles"
                        >
                          <Eye className="w-4 h-4" />
                        </Link>
                        <Link 
                          href={`/admin/people/${person.id}/edit`}
                          className="text-blue-600 hover:text-blue-900 transition-colors"
                          title="Editar"
                        >
                          <Edit className="w-4 h-4" />
                        </Link>
                        <button
                          onClick={() => handleDeleteClick(person)}
                          disabled={
                            (person._count?.castRoles || 0) + (person._count?.crewRoles || 0) > 0
                          }
                          className="text-red-600 hover:text-red-900 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                          title={
                            (person._count?.castRoles || 0) + (person._count?.crewRoles || 0) > 0
                              ? "No se puede eliminar porque tiene películas asociadas"
                              : "Eliminar"
                          }
                        >
                          <Trash2 className="w-4 h-4" />
                        </button>
                      </div>
                    </td>
                  </tr>
                ))
              )}
            </tbody>
          </table>
        </div>
      </div>

      {/* Información y paginación */}
      {people && people.length > 0 && totalPages > 1 && (
        <div className="bg-white px-4 py-3 flex items-center justify-between border-t border-gray-200 sm:px-6 mt-4 rounded-lg shadow">
          {/* Vista móvil */}
          <div className="flex-1 flex justify-between sm:hidden">
            <button
              onClick={goToPreviousPage}
              disabled={!canGoPrevious || loading}
              className="relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              Anterior
            </button>
            <button
              onClick={goToNextPage}
              disabled={!canGoNext || loading}
              className="ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              Siguiente
            </button>
          </div>

          {/* Vista desktop */}
          <div className="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
            <div>
              <p className="text-sm text-gray-700">
                Mostrando <span className="font-medium">
                  {((currentPage - 1) * PEOPLE_PAGINATION.DEFAULT_LIMIT) + 1}
                </span> - <span className="font-medium">
                  {Math.min(currentPage * PEOPLE_PAGINATION.DEFAULT_LIMIT, totalCount)}
                </span> de <span className="font-medium">{totalCount}</span> personas
              </p>
            </div>
            <div>
              <nav className="relative z-0 inline-flex rounded-md shadow-sm -space-x-px">
                <button
                  onClick={goToPreviousPage}
                  disabled={!canGoPrevious || loading}
                  className="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  <ChevronLeft className="h-5 w-5" />
                  Anterior
                </button>
                
                <span className="relative inline-flex items-center px-4 py-2 border border-gray-300 bg-white text-sm font-medium text-gray-700">
                  Página {currentPage} de {totalPages}
                </span>
                
                <button
                  onClick={goToNextPage}
                  disabled={!canGoNext || loading}
                  className="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Siguiente
                  <ChevronRight className="h-5 w-5" />
                </button>
              </nav>
            </div>
          </div>
        </div>
      )}

      {/* Modal de confirmación de eliminación */}
      {showDeleteDialog && (
        <div className="fixed inset-0 bg-gray-500 bg-opacity-75 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg max-w-md w-full p-6">
            <h3 className="text-lg font-medium text-gray-900 mb-4">
              ¿Estás seguro?
            </h3>
            <p className="text-sm text-gray-500 mb-6">
              Esta acción no se puede deshacer. Se eliminará permanentemente a{' '}
              <span className="font-semibold">{deleteName}</span> del sistema.
            </p>
            <div className="flex justify-end gap-3">
              <button
                type="button"
                onClick={() => {
                  setShowDeleteDialog(false);
                  setDeleteId(null);
                }}
                className="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors"
              >
                Cancelar
              </button>
              <button
                type="button"
                onClick={handleDelete}
                className="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors"
              >
                Eliminar
              </button>
            </div>
          </div>
        </div>
      )}
    </>
  );
}

// ==================================================
// src/components/admin/people/PersonForm.tsx
// ==================================================
// src/components/admin/people/PersonForm.tsx

'use client';

import { useEffect } from 'react';
import { Save, Loader2, AlertCircle } from 'lucide-react';
import { usePeopleForm } from '@/hooks/usePeopleForm';
import { PersonWithRelations } from '@/lib/people/peopleTypes';

// Importar sub-componentes del formulario
import { BasicInfoFields } from './PersonFormFields/BasicInfoFields';
import { BiographyFields } from './PersonFormFields/BiographyFields';
import { LocationFields } from './PersonFormFields/LocationFields';
import { LinksSection } from './PersonFormFields/LinksSection';

interface PersonFormProps {
  personId?: number;
  initialData?: PersonWithRelations;
  onSuccess?: (person: PersonWithRelations) => void;
  onCancel?: () => void;
}

export function PersonForm({ 
  personId, 
  initialData, 
  onSuccess,
  onCancel 
}: PersonFormProps) {
  const {
    formData,
    loading,
    saving,
    errors,
    isDirty,
    isEdit,
    updateField,
    updateFields,
    addLink,
    updateLink,
    removeLink,
    save,
    cancel,
  } = usePeopleForm({ personId, onSuccess });

  // Si hay datos iniciales y no es edición, cargarlos
  useEffect(() => {
    if (initialData && !personId) {
      updateFields({
        firstName: initialData.firstName || '',
        lastName: initialData.lastName || '',
        realName: initialData.realName || '',
        gender: initialData.gender || '',
      });
    }
  }, [initialData, personId, updateFields]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    await save();
  };

  const handleCancel = () => {
    if (onCancel) {
      onCancel();
    } else {
      cancel();
    }
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center py-8">
        <Loader2 className="h-8 w-8 animate-spin text-gray-400" />
      </div>
    );
  }

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      {/* Mostrar errores si hay */}
      {errors.length > 0 && (
        <div className="bg-red-50 border border-red-200 rounded-lg p-4">
          <div className="flex">
            <AlertCircle className="h-5 w-5 text-red-400 mt-0.5" />
            <div className="ml-3">
              <h3 className="text-sm font-medium text-red-800">
                Se encontraron los siguientes errores:
              </h3>
              <ul className="mt-2 text-sm text-red-700 list-disc list-inside">
                {errors.map((error, index) => (
                  <li key={index}>{error}</li>
                ))}
              </ul>
            </div>
          </div>
        </div>
      )}

      {/* Información básica */}
      <div className="bg-white rounded-lg shadow p-6">
        <h3 className="text-lg font-medium text-gray-900 mb-6">
          Información Personal
        </h3>
        <BasicInfoFields
          formData={formData}
          updateField={updateField}
          isEdit={isEdit}
        />
      </div>

      {/* Ubicaciones */}
      <div className="bg-white rounded-lg shadow p-6">
        <h3 className="text-lg font-medium text-gray-900 mb-6">
          Ubicaciones
        </h3>
        <LocationFields
          formData={formData}
          updateField={updateField}
        />
      </div>

      {/* Biografía e información adicional */}
      <div className="bg-white rounded-lg shadow p-6">
        <h3 className="text-lg font-medium text-gray-900 mb-6">
          Información Adicional
        </h3>
        <BiographyFields
          formData={formData}
          updateField={updateField}
        />
      </div>

      {/* Links */}
      <div className="bg-white rounded-lg shadow p-6">
        <h3 className="text-lg font-medium text-gray-900 mb-6">
          Enlaces
        </h3>
        <LinksSection
          links={formData.links}
          onAddLink={addLink}
          onUpdateLink={updateLink}
          onRemoveLink={removeLink}
        />
      </div>

      {/* Botones de acción */}
      <div className="bg-white rounded-lg shadow p-6">
        <div className="flex items-center justify-between">
          <div className="text-sm text-gray-500">
            {isDirty && (
              <span className="text-orange-600">
                * Hay cambios sin guardar
              </span>
            )}
          </div>
          
          <div className="flex gap-3">
            <button
              type="button"
              onClick={handleCancel}
              className="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors"
            >
              Cancelar
            </button>
            
            <button
              type="submit"
              disabled={saving || loading}
              className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-2"
            >
              {saving ? (
                <>
                  <Loader2 className="w-4 h-4 animate-spin" />
                  Guardando...
                </>
              ) : (
                <>
                  <Save className="w-4 h-4" />
                  {isEdit ? 'Actualizar' : 'Crear'} Persona
                </>
              )}
            </button>
          </div>
        </div>
      </div>
    </form>
  );
}

// ==================================================
// src/components/admin/people/PersonFormFields/BasicInfoFields.tsx
// ==================================================
// src/components/admin/people/PersonFormFields/BasicInfoFields.tsx

import { PersonFormData } from '@/lib/people/peopleTypes';
import { GENDER_OPTIONS } from '@/lib/people/peopleConstants';

interface BasicInfoFieldsProps {
  formData: PersonFormData;
  updateField: <K extends keyof PersonFormData>(field: K, value: PersonFormData[K]) => void;
  isEdit?: boolean;
}

export function BasicInfoFields({ formData, updateField, isEdit }: BasicInfoFieldsProps) {
  return (
    <div className="space-y-6">
      {/* Nombre y Apellido */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div>
          <label htmlFor="firstName" className="block text-sm font-medium text-gray-700 mb-1">
            Nombre <span className="text-gray-400">(opcional)</span>
          </label>
          <input
            type="text"
            id="firstName"
            value={formData.firstName}
            onChange={(e) => updateField('firstName', e.target.value)}
            placeholder="Ej: Juan"
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
          />
        </div>
        
        <div>
          <label htmlFor="lastName" className="block text-sm font-medium text-gray-700 mb-1">
            Apellido <span className="text-gray-400">(opcional)</span>
          </label>
          <input
            type="text"
            id="lastName"
            value={formData.lastName}
            onChange={(e) => updateField('lastName', e.target.value)}
            placeholder="Ej: Pérez"
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
          />
        </div>
      </div>
      
      <p className="text-sm text-gray-500">
        Debe ingresar al menos el nombre o el apellido
      </p>

      {/* Nombre Real */}
      <div>
        <label htmlFor="realName" className="block text-sm font-medium text-gray-700 mb-1">
          Nombre Real
          <span className="text-gray-400 ml-1">(si es diferente al artístico)</span>
        </label>
        <input
          type="text"
          id="realName"
          value={formData.realName}
          onChange={(e) => updateField('realName', e.target.value)}
          placeholder="Ej: Juan Carlos Pérez González"
          className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
        />
      </div>

      {/* Género */}
      <div>
        <label htmlFor="gender" className="block text-sm font-medium text-gray-700 mb-1">
          Género
        </label>
        <select
          id="gender"
          value={formData.gender}
          onChange={(e) => updateField('gender', e.target.value)}
          className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
        >
          <option value="">Seleccionar género</option>
          {GENDER_OPTIONS.map((option) => (
            <option key={option.value} value={option.value}>
              {option.label}
            </option>
          ))}
        </select>
      </div>

      {/* Fechas */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div>
          <label htmlFor="birthDate" className="block text-sm font-medium text-gray-700 mb-1">
            Fecha de Nacimiento
          </label>
          <input
            type="date"
            id="birthDate"
            value={formData.birthDate}
            onChange={(e) => updateField('birthDate', e.target.value)}
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
          />
        </div>
        
        <div>
          <label htmlFor="deathDate" className="block text-sm font-medium text-gray-700 mb-1">
            Fecha de Fallecimiento
          </label>
          <input
            type="date"
            id="deathDate"
            value={formData.deathDate}
            onChange={(e) => updateField('deathDate', e.target.value)}
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
          />
        </div>
      </div>

      {/* Ocultar edad */}
      <div className="flex items-center">
        <input
          type="checkbox"
          id="hideAge"
          checked={formData.hideAge}
          onChange={(e) => updateField('hideAge', e.target.checked)}
          className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
        />
        <label htmlFor="hideAge" className="ml-2 block text-sm text-gray-700">
          Ocultar fecha de nacimiento en el sitio público
        </label>
      </div>

      {/* Estado activo */}
      <div className="flex items-center pt-2">
        <input
          type="checkbox"
          id="isActive"
          checked={formData.isActive}
          onChange={(e) => updateField('isActive', e.target.checked)}
          className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
        />
        <label htmlFor="isActive" className="ml-2 block text-sm text-gray-700">
          Persona activa
        </label>
      </div>
    </div>
  );
}

// ==================================================
// src/components/admin/people/PersonFormFields/BiographyFields.tsx
// ==================================================
// src/components/admin/people/PersonFormFields/BiographyFields.tsx

import { PersonFormData } from '@/lib/people/peopleTypes';
import { Image, FileText } from 'lucide-react';

interface BiographyFieldsProps {
  formData: PersonFormData;
  updateField: <K extends keyof PersonFormData>(field: K, value: PersonFormData[K]) => void;
}

export function BiographyFields({ formData, updateField }: BiographyFieldsProps) {
  return (
    <div className="space-y-6">
      {/* Biografía */}
      <div>
        <label htmlFor="biography" className="block text-sm font-medium text-gray-700 mb-1">
          <span className="flex items-center gap-2">
            <FileText className="w-4 h-4" />
            Biografía
          </span>
        </label>
        <textarea
          id="biography"
          value={formData.biography}
          onChange={(e) => updateField('biography', e.target.value)}
          placeholder="Escriba aquí la biografía de la persona..."
          rows={6}
          className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900 resize-none"
        />
        <div className="mt-1 flex justify-between text-sm text-gray-500">
          <span>Puede usar formato Markdown para dar estilo al texto</span>
          <span>{formData.biography.length} caracteres</span>
        </div>
      </div>

      {/* URL de Foto */}
      <div>
        <label htmlFor="photoUrl" className="block text-sm font-medium text-gray-700 mb-1">
          <span className="flex items-center gap-2">
            <Image className="w-4 h-4" />
            URL de Foto
          </span>
        </label>
        <input
          type="url"
          id="photoUrl"
          value={formData.photoUrl}
          onChange={(e) => updateField('photoUrl', e.target.value)}
          placeholder="https://ejemplo.com/foto.jpg"
          className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
        />
        <p className="mt-1 text-sm text-gray-500">
          Ingrese la URL completa de la imagen. Se recomienda usar imágenes de al menos 400x600px
        </p>
      </div>

      {/* Vista previa de la imagen si hay URL */}
      {formData.photoUrl && (
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Vista previa
          </label>
          <div className="relative w-32 h-48 rounded-lg overflow-hidden border border-gray-300">
            <img
              src={formData.photoUrl}
              alt="Vista previa"
              className="w-full h-full object-cover"
              onError={(e) => {
                const target = e.target as HTMLImageElement;
                target.style.display = 'none';
                const errorDiv = target.nextElementSibling as HTMLElement;
                if (errorDiv) errorDiv.style.display = 'flex';
              }}
            />
            <div 
              className="absolute inset-0 bg-gray-100 items-center justify-center hidden"
              style={{ display: 'none' }}
            >
              <span className="text-sm text-gray-500">
                Error al cargar imagen
              </span>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

// ==================================================
// src/components/admin/people/PersonFormFields/LinksSection.tsx
// ==================================================
// src/components/admin/people/PersonFormFields/LinksSection.tsx

import { Plus, Trash2, ExternalLink, GripVertical } from 'lucide-react';
import { PersonLink } from '@/lib/people/peopleTypes';
import { PERSON_LINK_TYPE_OPTIONS, LINK_CATEGORIES } from '@/lib/people/peopleConstants';

interface LinksSectionProps {
  links: PersonLink[];
  onAddLink: () => void;
  onUpdateLink: (index: number, updates: Partial<PersonLink>) => void;
  onRemoveLink: (index: number) => void;
}

export function LinksSection({ 
  links, 
  onAddLink, 
  onUpdateLink, 
  onRemoveLink 
}: LinksSectionProps) {
  return (
    <div className="space-y-4">
      {/* Descripción y botón agregar */}
      <div className="flex justify-between items-center">
        <p className="text-sm text-gray-500">
          Agregue enlaces a perfiles en redes sociales, sitios web, etc.
        </p>
        <button
          type="button"
          onClick={onAddLink}
          className="inline-flex items-center gap-2 px-3 py-1.5 text-sm bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
        >
          <Plus className="w-4 h-4" />
          Agregar Enlace
        </button>
      </div>

      {/* Lista de links */}
      {links.length === 0 ? (
        <div className="text-center py-8 bg-gray-50 rounded-lg">
          <p className="text-gray-500 mb-4">
            No hay enlaces agregados
          </p>
          <button
            type="button"
            onClick={onAddLink}
            className="inline-flex items-center gap-2 px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors"
          >
            <Plus className="w-4 h-4" />
            Agregar primer enlace
          </button>
        </div>
      ) : (
        <div className="space-y-3">
          {links.map((link, index) => (
            <div key={index} className="border border-gray-200 rounded-lg p-4 bg-gray-50">
              <div className="space-y-4">
                {/* Header del link */}
                <div className="flex items-start justify-between">
                  <div className="flex items-center gap-2 text-sm text-gray-500">
                    <GripVertical className="w-4 h-4" />
                    Enlace #{index + 1}
                  </div>
                  <button
                    type="button"
                    onClick={() => onRemoveLink(index)}
                    className="text-red-600 hover:text-red-800 transition-colors"
                  >
                    <Trash2 className="w-4 h-4" />
                  </button>
                </div>

                {/* Tipo y Título */}
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Tipo de enlace
                    </label>
                    <select
                      value={link.type}
                      onChange={(e) => onUpdateLink(index, { type: e.target.value as any })}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                    >
                      {Object.entries(LINK_CATEGORIES).map(([key, category]) => (
                        <optgroup key={key} label={category.label}>
                          {category.types.map((type) => {
                            const option = PERSON_LINK_TYPE_OPTIONS.find(opt => opt.value === type);
                            return (
                              <option key={type} value={type}>
                                {option?.label || type}
                              </option>
                            );
                          })}
                        </optgroup>
                      ))}
                    </select>
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Título <span className="text-gray-400">(opcional)</span>
                    </label>
                    <input
                      type="text"
                      value={link.title || ''}
                      onChange={(e) => onUpdateLink(index, { title: e.target.value })}
                      placeholder="Ej: Perfil oficial"
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                    />
                  </div>
                </div>

                {/* URL */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    URL
                  </label>
                  <div className="flex gap-2">
                    <input
                      type="url"
                      value={link.url}
                      onChange={(e) => onUpdateLink(index, { url: e.target.value })}
                      placeholder="https://..."
                      required
                      className="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                    />
                    {link.url && (
                      <button
                        type="button"
                        onClick={() => window.open(link.url, '_blank')}
                        title="Abrir enlace"
                        className="px-3 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors"
                      >
                        <ExternalLink className="w-4 h-4" />
                      </button>
                    )}
                  </div>
                </div>

                {/* Opciones */}
                <div className="flex items-center gap-6">
                  <label className="inline-flex items-center">
                    <input
                      type="checkbox"
                      checked={link.isVerified}
                      onChange={(e) => onUpdateLink(index, { isVerified: e.target.checked })}
                      className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                    />
                    <span className="ml-2 text-sm text-gray-700">Verificado</span>
                  </label>

                  <label className="inline-flex items-center">
                    <input
                      type="checkbox"
                      checked={link.isActive}
                      onChange={(e) => onUpdateLink(index, { isActive: e.target.checked })}
                      className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                    />
                    <span className="ml-2 text-sm text-gray-700">Activo</span>
                  </label>
                </div>
              </div>
            </div>
          ))}
        </div>
      )}

      {/* Información adicional */}
      {links.length > 0 && (
        <p className="text-xs text-gray-500">
          Los enlaces verificados se mostrarán con un ícono especial. 
          Los enlaces inactivos no se mostrarán en el sitio público.
        </p>
      )}
    </div>
  );
}

// ==================================================
// src/components/admin/people/PersonFormFields/LocationFields.tsx
// ==================================================
// src/components/admin/people/PersonFormFields/LocationFields.tsx

import { PersonFormData } from '@/lib/people/peopleTypes';
import { MapPin } from 'lucide-react';

interface LocationFieldsProps {
  formData: PersonFormData;
  updateField: <K extends keyof PersonFormData>(field: K, value: PersonFormData[K]) => void;
}

export function LocationFields({ formData, updateField }: LocationFieldsProps) {
  return (
    <div className="space-y-6">
      {/* Lugar de Nacimiento */}
      <div>
        <label htmlFor="birthLocation" className="block text-sm font-medium text-gray-700 mb-1">
          <span className="flex items-center gap-2">
            <MapPin className="w-4 h-4" />
            Lugar de Nacimiento
          </span>
        </label>
        <input
          type="text"
          id="birthLocation"
          value={formData.birthLocation}
          onChange={(e) => updateField('birthLocation', e.target.value)}
          placeholder="Ej: Buenos Aires, Argentina"
          className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
        />
        <p className="mt-1 text-sm text-gray-500">
          Ingrese ciudad y país. Ej: "Buenos Aires, Argentina" o "Madrid, España"
        </p>
      </div>

      {/* Lugar de Fallecimiento */}
      <div>
        <label htmlFor="deathLocation" className="block text-sm font-medium text-gray-700 mb-1">
          <span className="flex items-center gap-2">
            <MapPin className="w-4 h-4" />
            Lugar de Fallecimiento
          </span>
        </label>
        <input
          type="text"
          id="deathLocation"
          value={formData.deathLocation}
          onChange={(e) => updateField('deathLocation', e.target.value)}
          placeholder="Ej: Buenos Aires, Argentina"
          disabled={!formData.deathDate}
          className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900 disabled:bg-gray-50 disabled:text-gray-500"
        />
        {!formData.deathDate && (
          <p className="mt-1 text-sm text-gray-500">
            Primero debe ingresar una fecha de fallecimiento
          </p>
        )}
      </div>
    </div>
  );
}

// ==================================================
// src/components/admin/ScreeningVenueSelector.tsx
// ==================================================
// src/components/admin/ScreeningVenueSelector.tsx - VERSIÓN SIMPLIFICADA
'use client'

import { useState, useEffect } from 'react'
import { X, Search, Building, Globe, Tv, Film } from 'lucide-react'

interface ScreeningVenue {
    id: number
    name: string
    type: string
    city?: string
    isActive: boolean
}

interface ScreeningVenueSelectorProps {
    selectedVenueIds: number[]  // Solo IDs
    onChange: (venueIds: number[]) => void
    releaseDate?: string  // Fecha de estreno de la película
}

const venueTypeIcons = {
    CINEMA: Building,
    STREAMING: Globe,
    TV_CHANNEL: Tv,
    OTHER: Film
}

const venueTypeLabels = {
    CINEMA: 'Cine',
    STREAMING: 'Streaming',
    TV_CHANNEL: 'Canal de TV',
    OTHER: 'Otro'
}

export default function ScreeningVenueSelector({
    selectedVenueIds,
    onChange,
    releaseDate
}: ScreeningVenueSelectorProps) {
    const [venues, setVenues] = useState<ScreeningVenue[]>([])
    const [filteredVenues, setFilteredVenues] = useState<ScreeningVenue[]>([])
    const [searchTerm, setSearchTerm] = useState('')
    const [showDropdown, setShowDropdown] = useState(false)
    const [loading, setLoading] = useState(false)

    // Cargar todas las pantallas activas
    useEffect(() => {
        fetchVenues()
    }, [])

    const fetchVenues = async () => {
        try {
            setLoading(true)
            const response = await fetch('/api/screening-venues?isActive=true&limit=100')
            const data = await response.json()
            setVenues(data.venues || [])
            setFilteredVenues(data.venues || [])
        } catch (error) {
            console.error('Error loading screening venues:', error)
            setVenues([])
            setFilteredVenues([])
        } finally {
            setLoading(false)
        }
    }

    // Filtrar pantallas según búsqueda
    useEffect(() => {
        if (searchTerm) {
            const filtered = venues.filter(venue =>
                venue.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                venueTypeLabels[venue.type as keyof typeof venueTypeLabels]?.toLowerCase().includes(searchTerm.toLowerCase())
            )
            setFilteredVenues(filtered)
        } else {
            setFilteredVenues(venues)
        }
    }, [searchTerm, venues])

    // Agregar pantalla
    const addVenue = (venueId: number) => {
        if (!selectedVenueIds.includes(venueId)) {
            onChange([...selectedVenueIds, venueId])
        }
        setSearchTerm('')
        setShowDropdown(false)
    }

    // Eliminar pantalla
    const removeVenue = (venueId: number) => {
        onChange(selectedVenueIds.filter(id => id !== venueId))
    }

    // Obtener venue por ID
    const getVenueById = (id: number) => venues.find(v => v.id === id)

    // Agrupar pantallas por tipo
    const groupedVenues = filteredVenues.reduce((groups, venue) => {
        const type = venue.type || 'OTHER'
        if (!groups[type]) groups[type] = []
        groups[type].push(venue)
        return groups
    }, {} as Record<string, ScreeningVenue[]>)

    return (
        <div className="space-y-3">
            {/* Pantallas seleccionadas */}
            {selectedVenueIds.length > 0 && (
                <div className="flex flex-wrap gap-2">
                    {selectedVenueIds.map(venueId => {
                        const venue = getVenueById(venueId)
                        if (!venue) return null

                        const Icon = venueTypeIcons[venue.type as keyof typeof venueTypeIcons] || Film

                        return (
                            <span
                                key={venueId}
                                className="inline-flex items-center gap-1 px-3 py-1 rounded-full text-sm bg-blue-100 text-blue-800"
                            >
                                <Icon className="w-3 h-3" />
                                {venue.name}
                                {venue.city && (
                                    <span className="text-xs opacity-75">({venue.city})</span>
                                )}
                                <button
                                    type="button"
                                    onClick={() => removeVenue(venueId)}
                                    className="ml-1 hover:text-blue-600"
                                >
                                    <X className="w-3 h-3" />
                                </button>
                            </span>
                        )
                    })}
                </div>
            )}

            {/* Buscador */}
            <div className="relative">
                <div className="relative">
                    <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
                    <input
                        type="text"
                        placeholder="Buscar pantalla de estreno..."
                        value={searchTerm}
                        onChange={(e) => setSearchTerm(e.target.value)}
                        onFocus={() => setShowDropdown(true)}
                        className="w-full pl-9 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900"
                    />
                </div>

                {/* Dropdown */}
                {showDropdown && (
                    <div className="absolute z-10 w-full mt-1 bg-white border border-gray-200 rounded-lg shadow-lg max-h-60 overflow-y-auto">
                        {loading ? (
                            <div className="p-4 text-center text-gray-500">Cargando...</div>
                        ) : Object.entries(groupedVenues).length === 0 ? (
                            <div className="p-4 text-center text-gray-500">
                                {searchTerm ? 'No se encontraron pantallas' : 'No hay pantallas disponibles'}
                            </div>
                        ) : (
                            Object.entries(groupedVenues).map(([type, venuesInType]) => (
                                <div key={type}>
                                    <div className="px-3 py-2 text-xs font-semibold text-gray-500 bg-gray-50">
                                        {venueTypeLabels[type as keyof typeof venueTypeLabels]}
                                    </div>
                                    {venuesInType.map((venue) => {
                                        const Icon = venueTypeIcons[venue.type as keyof typeof venueTypeIcons] || Film
                                        const isSelected = selectedVenueIds.includes(venue.id)

                                        return (
                                            <button
                                                key={venue.id}
                                                type="button"
                                                onClick={() => !isSelected && addVenue(venue.id)}
                                                disabled={isSelected}
                                                className={`w-full text-left px-3 py-2 hover:bg-gray-50 flex items-center gap-2 ${isSelected ? 'opacity-50 cursor-not-allowed bg-gray-50' : ''
                                                    }`}
                                            >
                                                <Icon className="w-4 h-4 text-gray-400" />
                                                <span className="text-sm text-gray-900">{venue.name}</span>
                                                {venue.city && (
                                                    <span className="text-xs text-gray-500">- {venue.city}</span>
                                                )}
                                                {isSelected && (
                                                    <span className="ml-auto text-xs text-gray-500">Ya agregada</span>
                                                )}
                                            </button>
                                        )
                                    })}
                                </div>
                            ))
                        )}
                    </div>
                )}
            </div>

            {/* Click fuera para cerrar */}
            {showDropdown && (
                <div
                    className="fixed inset-0 z-0"
                    onClick={() => setShowDropdown(false)}
                />
            )}
        </div>
    )
}

// ==================================================
// src/components/admin/ThemeSelector.tsx
// ==================================================
// src/components/admin/ThemeSelector.tsx
'use client'

import { useState, useRef, useEffect } from 'react'
import { X, Search, Tag } from 'lucide-react'

interface Theme {
  id: number
  name: string
  slug: string
  movieCount?: number
}

interface ThemeSelectorProps {
  availableThemes: Theme[]
  selectedThemes: number[]
  onChange: (themes: number[]) => void
  placeholder?: string
}

export function ThemeSelector({
  availableThemes,
  selectedThemes,
  onChange,
  placeholder = "Buscar theme..."
}: ThemeSelectorProps) {
  const [isOpen, setIsOpen] = useState(false)
  const [searchTerm, setSearchTerm] = useState('')
  const dropdownRef = useRef<HTMLDivElement>(null)

  // Cerrar dropdown al hacer clic fuera
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {
        setIsOpen(false)
      }
    }

    document.addEventListener('mousedown', handleClickOutside)
    return () => document.removeEventListener('mousedown', handleClickOutside)
  }, [])

  const filteredThemes = availableThemes.filter(theme =>
    theme.name.toLowerCase().includes(searchTerm.toLowerCase())
  )

  const selectedThemeObjects = availableThemes.filter(theme => 
    selectedThemes.includes(theme.id)
  )

  const toggleTheme = (themeId: number) => {
    if (selectedThemes.includes(themeId)) {
      onChange(selectedThemes.filter(id => id !== themeId))
    } else {
      onChange([...selectedThemes, themeId])
    }
  }

  const removeTheme = (themeId: number) => {
    onChange(selectedThemes.filter(id => id !== themeId))
  }

  return (
    <div className="relative" ref={dropdownRef}>
      {/* Themes seleccionados */}
      {selectedThemeObjects.length > 0 && (
        <div className="flex flex-wrap gap-2 mb-2">
          {selectedThemeObjects.map(theme => (
            <span
              key={theme.id}
              className="inline-flex items-center gap-1 px-3 py-1 bg-blue-100 text-blue-800 rounded-full text-sm"
            >
              <Tag className="w-3 h-3" />
              {theme.name}
              <button
                type="button"
                onClick={() => removeTheme(theme.id)}
                className="ml-1 hover:text-blue-900"
              >
                <X className="w-3 h-3" />
              </button>
            </span>
          ))}
        </div>
      )}
      
      <p className="text-sm text-gray-500 mb-2">
        {selectedThemes.length} seleccionado{selectedThemes.length !== 1 ? 's' : ''}
      </p>

      {/* Input de búsqueda */}
      <div className="relative">
        <input
          type="text"
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          onFocus={() => setIsOpen(true)}
          placeholder={placeholder}
          className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent pr-10"
        />
        <Search className="absolute right-3 top-2.5 w-5 h-5 text-gray-400 pointer-events-none" />
      </div>

      {/* Dropdown */}
      {isOpen && (
        <div className="absolute z-10 w-full mt-1 bg-white border border-gray-300 rounded-lg shadow-lg max-h-60 overflow-y-auto">
          {filteredThemes.length === 0 ? (
            <p className="p-3 text-sm text-gray-500">No se encontraron themes</p>
          ) : (
            filteredThemes.map(theme => (
              <button
                key={theme.id}
                type="button"
                onClick={() => toggleTheme(theme.id)}
                className={`w-full px-3 py-2 text-left hover:bg-gray-50 flex items-center justify-between ${
                  selectedThemes.includes(theme.id) ? 'bg-blue-50' : ''
                }`}
              >
                <span className="flex items-center gap-2">
                  <Tag className="w-4 h-4 text-gray-400" />
                  {theme.name}
                  {theme.movieCount !== undefined && theme.movieCount > 0 && (
                    <span className="text-xs text-gray-500">({theme.movieCount})</span>
                  )}
                </span>
                {selectedThemes.includes(theme.id) && (
                  <span className="text-blue-600">✓</span>
                )}
              </button>
            ))
          )}
        </div>
      )}
    </div>
  )
}

// ==================================================
// src/lib/prisma.ts
// ==================================================
import { PrismaClient } from '@prisma/client'

const globalForPrisma = global as unknown as { prisma: PrismaClient }

export const prisma =
  globalForPrisma.prisma ||
  new PrismaClient({
    log: process.env.NODE_ENV === 'development' ? ['query', 'error', 'warn'] : ['error'],
  })

if (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma

// ==================================================
// src/lib/schemas.ts
// ==================================================
// src/lib/schemas.ts
import { z } from 'zod'

export const movieSchema = z.object({
  // Información básica
  title: z.string().min(1, 'El título es requerido'),
  originalTitle: z.string().optional(),
  year: z.number().optional(),

  // Fechas como campos separados Y fechas completas para el formulario
  releaseDate: z.string().optional(),
  releaseYear: z.number().nullable().optional(),
  releaseMonth: z.number().nullable().optional(),
  releaseDay: z.number().nullable().optional(),

  filmingStartDate: z.string().optional(),
  filmingStartYear: z.number().nullable().optional(),
  filmingStartMonth: z.number().nullable().optional(),
  filmingStartDay: z.number().nullable().optional(),

  filmingEndDate: z.string().optional(),
  filmingEndYear: z.number().nullable().optional(),
  filmingEndMonth: z.number().nullable().optional(),
  filmingEndDay: z.number().nullable().optional(),

  // Duración
  duration: z.number().optional(),
  durationSeconds: z.number().optional(),
  tipoDuracion: z.string().optional(),

  // Contenido
  synopsis: z.string().optional(),
  notes: z.string().optional(),
  tagline: z.string().optional(),

  // Media
  posterUrl: z.string().optional(),
  posterPublicId: z.string().optional(),
  backdropUrl: z.string().optional(),
  backdropPublicId: z.string().optional(),
  trailerUrl: z.string().optional(),

  // IDs externos
  imdbId: z.string().optional(),

  // Información técnica
  aspectRatio: z.string().optional(),
  colorTypeId: z.number().optional(),
  soundType: z.string().optional(),
  filmFormat: z.string().optional(),

  // Clasificación
  ratingId: z.union([
    z.number().positive(),  // Solo números positivos
    z.null(),               // O null
    z.literal(0).transform(() => null)  // Transforma 0 a null
  ]).optional(),
  certificateNumber: z.string().optional(),

  // Estado
  stage: z.enum([
    'COMPLETA',
    'EN_DESARROLLO',
    'EN_POSTPRODUCCION',
    'EN_PREPRODUCCION',
    'EN_RODAJE',
    'INCONCLUSA',
    'INEDITA'
  ]).optional(),
  dataCompleteness: z.enum([
    'BASIC_PRESS_KIT',
    'FULL_PRESS_KIT',
    'MAIN_CAST',
    'MAIN_CREW',
    'FULL_CAST',
    'FULL_CREW'
  ]).optional(),

  // País y coproducción
  countries: z.array(z.number()).optional(),
  is_coproduction: z.boolean().optional(),
  production_type: z.string().optional(),

  // Relaciones (arrays de IDs)
  genres: z.array(z.number()).optional(),
  cast: z.array(z.any()).optional(),
  crew: z.array(z.any()).optional(),
  productionCompanies: z.array(z.number()).optional(),
  distributionCompanies: z.array(z.number()).optional(),
  themes: z.array(z.number()).optional(),
  alternativeTitles: z.array(z.any()).optional(),
  links: z.array(z.any()).optional(),
  screeningVenues: z.array(z.object({
  venueId: z.number(),
  screeningDate: z.string().optional().nullable(),
  isPremiere: z.boolean().optional(),
  isExclusive: z.boolean().optional()
})).optional()
})

export type MovieFormData = z.infer<typeof movieSchema>