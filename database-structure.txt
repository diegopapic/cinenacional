# Estructura de Base de Datos - CineNacional
# Generado autom√°ticamente el: 2025-10-12T03:06:46.253Z
# ================================================

## Schema Prisma

```prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Movie {
  id                    Int                        @id @default(autoincrement())
  slug                  String                     @unique @db.VarChar(255)
  title                 String                     @db.VarChar(255)
  year                  Int?
  releaseYear           Int?                       @map("release_year")
  releaseMonth          Int?                       @map("release_month") @db.SmallInt
  releaseDay            Int?                       @map("release_day") @db.SmallInt
  duration              Int?
  durationSeconds       Int?                       @map("duration_seconds")
  tipoDuracion          String?                    @map("tipo_duracion") @db.VarChar(20)
  synopsis              String?
  notes                 String?
  tagline               String?                    @db.VarChar(500)
  posterUrl             String?                    @map("poster_url") @db.VarChar(500)
  posterPublicId        String?                    @map("poster_public_id") @db.VarChar(500)
  trailerUrl            String?                    @map("trailer_url") @db.VarChar(500)
  imdbId                String?                    @map("imdb_id") @db.VarChar(20)
  stage                 MovieStage                 @default(COMPLETA)
  colorTypeId           Int?                       @map("color_type_id")
  soundType             String?                    @map("sound_type") @db.VarChar(50)
  ratingId              Int?                       @map("rating_id")
  countries             String[]                   @default(["Argentina"])
  is_coproduction       Boolean                    @default(false)
  production_type       String                     @default("national")
  filmingStartYear      Int?                       @map("filming_start_year")
  filmingStartMonth     Int?                       @map("filming_start_month") @db.SmallInt
  filmingStartDay       Int?                       @map("filming_start_day") @db.SmallInt
  filmingEndYear        Int?                       @map("filming_end_year")
  filmingEndMonth       Int?                       @map("filming_end_month") @db.SmallInt
  filmingEndDay         Int?                       @map("filming_end_day") @db.SmallInt
  createdAt             DateTime                   @default(now()) @map("created_at")
  updatedAt             DateTime                   @updatedAt @map("updated_at")
  dataCompleteness      DataCompleteness           @default(BASIC_PRESS_KIT) @map("data_completeness")
  metaDescription       String?                    @map("meta_description")
  metaKeywords          String[]                   @map("meta_keywords")
  alternativeTitles     MovieAlternativeTitle[]
  awards                MovieAward[]
  cast                  MovieCast[]
  movieCountries        MovieCountry[]
  crew                  MovieCrew[]
  distributionCompanies MovieDistributionCompany[]
  genres                MovieGenre[]
  images                MovieImage[]
  links                 MovieLink[]
  productionCompanies   MovieProductionCompany[]
  screenings            MovieScreening[]
  themes                MovieTheme[]
  videos                MovieVideo[]
  colorType             ColorType?                 @relation(fields: [colorTypeId], references: [id])
  rating                Rating?                    @relation(fields: [ratingId], references: [id])
  userRatings           UserRating[]
  watchedBy             UserWatched[]
  watchlists            UserWatchlist[]

  @@index([slug])
  @@index([title])
  @@index([year])
  @@index([tipoDuracion])
  @@index([ratingId])
  @@index([filmingStartYear])
  @@index([filmingStartYear, filmingStartMonth])
  @@index([is_coproduction])
  @@index([production_type])
  @@index([colorTypeId])
  @@index([stage])
  @@index([releaseYear])
  @@index([releaseYear, releaseMonth])
  @@index([releaseYear, releaseMonth, releaseDay])
  @@index([createdAt])
  @@map("movies")
}

model ScreeningVenue {
  id          Int              @id @default(autoincrement())
  slug        String           @unique @db.VarChar(255)
  name        String           @db.VarChar(255)
  type        VenueType
  description String?
  logoUrl     String?          @map("logo_url") @db.VarChar(500)
  website     String?          @db.VarChar(500)
  address     String?          @db.VarChar(500)
  city        String?          @db.VarChar(100)
  province    String?          @db.VarChar(100)
  country     String?          @default("Argentina") @db.VarChar(100)
  latitude    Decimal?         @db.Decimal(10, 8)
  longitude   Decimal?         @db.Decimal(11, 8)
  isActive    Boolean          @default(true) @map("is_active")
  createdAt   DateTime         @default(now()) @map("created_at")
  updatedAt   DateTime         @updatedAt @map("updated_at")
  screenings  MovieScreening[]

  @@index([name])
  @@index([type])
  @@index([isActive])
  @@map("screening_venues")
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  action    String
  entity    String?
  entityId  String?
  metadata  Json?
  ip        String?
  userAgent String?
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id])
  
  @@index([userId])
  @@index([createdAt])
  @@map("audit_logs")
}

model MovieScreening {
  id            Int            @id @default(autoincrement())
  movieId       Int            @map("movie_id")
  venueId       Int            @map("venue_id")
  screeningDate DateTime?      @map("screening_date") @db.Date
  endDate       DateTime?      @map("end_date") @db.Date
  isPremiere    Boolean        @default(false) @map("is_premiere")
  isExclusive   Boolean        @default(false) @map("is_exclusive")
  notes         String?
  createdAt     DateTime       @default(now()) @map("created_at")
  movie         Movie          @relation(fields: [movieId], references: [id], onDelete: Cascade)
  venue         ScreeningVenue @relation(fields: [venueId], references: [id], onDelete: Cascade)

  @@unique([movieId, venueId, screeningDate])
  @@index([movieId])
  @@index([venueId])
  @@index([screeningDate])
  @@map("movie_screenings")
}

model MovieAlternativeTitle {
  id          Int      @id @default(autoincrement())
  movieId     Int      @map("movie_id")
  title       String   @db.VarChar(255)
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  movie       Movie    @relation(fields: [movieId], references: [id], onDelete: Cascade)

  @@index([movieId])
  @@index([title])
  @@map("movie_alternative_titles")
}

model MovieLink {
  id        Int      @id @default(autoincrement())
  movieId   Int      @map("movie_id")
  type      LinkType
  url       String
  title     String?  @db.VarChar(255)
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  movie     Movie    @relation(fields: [movieId], references: [id], onDelete: Cascade)

  @@index([movieId])
  @@index([type])
  @@map("movie_links")
}

model Person {
  id              Int                 @id @default(autoincrement())
  slug            String              @unique @db.VarChar(255)
  firstName       String?             @map("first_name") @db.VarChar(255)
  lastName        String?             @map("last_name") @db.VarChar(255)
  realName        String?             @map("real_name") @db.VarChar(255)
  birthYear       Int?                @map("birth_year")
  birthMonth      Int?                @map("birth_month") @db.SmallInt
  birthDay        Int?                @map("birth_day") @db.SmallInt
  deathYear       Int?                @map("death_year")
  deathMonth      Int?                @map("death_month") @db.SmallInt
  deathDay        Int?                @map("death_day") @db.SmallInt
  birthLocationId Int?                @map("birth_location_id")
  deathLocationId Int?                @map("death_location_id")
  biography       String?
  photoUrl        String?             @map("photo_url") @db.VarChar(500)
  gender          Gender?
  hideAge         Boolean             @default(false) @map("hide_age")
  hasLinks        Boolean             @default(false) @map("has_links")
  isActive        Boolean             @default(true) @map("is_active")
  createdAt       DateTime            @default(now()) @map("created_at")
  updatedAt       DateTime            @updatedAt @map("updated_at")
  photoPublicId   String?             @map("photo_public_id") @db.VarChar(255)
  awards          MovieAward[]
  castRoles       MovieCast[]
  crewRoles       MovieCrew[]
  birthLocation   Location?           @relation("BirthLocation", fields: [birthLocationId], references: [id])
  deathLocation   Location?           @relation("DeathLocation", fields: [deathLocationId], references: [id])
  links           PersonLink[]
  nationalities   PersonNationality[]

  @@index([slug])
  @@index([firstName])
  @@index([lastName])
  @@index([birthLocationId])
  @@index([deathLocationId])
  @@index([isActive])
  @@index([birthYear])
  @@index([birthYear, birthMonth])
  @@index([deathYear])
  @@index([deathYear, deathMonth])
  @@index([createdAt])
  @@map("people")
}

model PersonNationality {
  personId   Int      @map("person_id")
  locationId Int      @map("location_id")
  isPrimary  Boolean  @default(false) @map("is_primary")
  location   Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
  person     Person   @relation(fields: [personId], references: [id], onDelete: Cascade)

  @@id([personId, locationId])
  @@map("person_nationalities")
}

model PersonLink {
  id           Int            @id @default(autoincrement())
  personId     Int            @map("person_id")
  type         PersonLinkType
  url          String         @db.VarChar(500)
  title        String?        @db.VarChar(255)
  displayOrder Int            @default(0) @map("display_order")
  isVerified   Boolean        @default(false) @map("is_verified")
  isActive     Boolean        @default(true) @map("is_active")
  lastChecked  DateTime?      @map("last_checked")
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  person       Person         @relation(fields: [personId], references: [id], onDelete: Cascade)

  @@index([personId])
  @@index([type])
  @@index([isActive])
  @@map("person_links")
}

model Genre {
  id          Int          @id @default(autoincrement())
  slug        String       @unique @db.VarChar(100)
  name        String       @db.VarChar(100)
  description String?
  createdAt   DateTime     @default(now()) @map("created_at")
  movies      MovieGenre[]

  @@map("genres")
}

model ProductionCompany {
  id          Int                      @id @default(autoincrement())
  slug        String                   @unique @db.VarChar(255)
  name        String                   @db.VarChar(255)
  description String?
  foundedYear Int?                     @map("founded_year")
  logoUrl     String?                  @map("logo_url") @db.VarChar(500)
  website     String?                  @db.VarChar(500)
  country     String?                  @db.VarChar(100)
  createdAt   DateTime                 @default(now()) @map("created_at")
  updatedAt   DateTime                 @updatedAt @map("updated_at")
  movies      MovieProductionCompany[]

  @@map("production_companies")
}

model DistributionCompany {
  id          Int                        @id @default(autoincrement())
  slug        String                     @unique @db.VarChar(255)
  name        String                     @db.VarChar(255)
  description String?
  logoUrl     String?                    @map("logo_url") @db.VarChar(500)
  website     String?                    @db.VarChar(500)
  country     String?                    @db.VarChar(100)
  createdAt   DateTime                   @default(now()) @map("created_at")
  updatedAt   DateTime                   @updatedAt @map("updated_at")
  movies      MovieDistributionCompany[]

  @@map("distribution_companies")
}

model MovieCast {
  id            Int      @id @default(autoincrement())
  movieId       Int      @map("movie_id")
  personId      Int      @map("person_id")
  characterName String?  @map("character_name") @db.VarChar(255)
  billingOrder  Int?     @map("billing_order")
  isPrincipal   Boolean  @default(false) @map("is_principal")
  notes         String?
  createdAt     DateTime @default(now()) @map("created_at")
  movie         Movie    @relation(fields: [movieId], references: [id], onDelete: Cascade)
  person        Person   @relation(fields: [personId], references: [id], onDelete: Cascade)

  @@unique([movieId, personId, characterName])
  @@index([movieId])
  @@index([personId])
  @@map("movie_cast")
}

model MovieCrew {
  id           Int      @id @default(autoincrement())
  movieId      Int      @map("movie_id")
  personId     Int      @map("person_id")
  roleId       Int      @map("role_id")
  billingOrder Int?     @map("billing_order")
  notes        String?
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  movie        Movie    @relation(fields: [movieId], references: [id], onDelete: Cascade)
  person       Person   @relation(fields: [personId], references: [id], onDelete: Cascade)
  role         Role     @relation(fields: [roleId], references: [id])

  @@unique([movieId, personId, roleId])
  @@index([movieId])
  @@index([personId])
  @@index([roleId])
  @@index([movieId, roleId])
  @@map("movie_crew")
}

model MovieGenre {
  movieId   Int     @map("movie_id")
  genreId   Int     @map("genre_id")
  isPrimary Boolean @default(false) @map("is_primary")
  genre     Genre   @relation(fields: [genreId], references: [id], onDelete: Cascade)
  movie     Movie   @relation(fields: [movieId], references: [id], onDelete: Cascade)

  @@id([movieId, genreId])
  @@map("movie_genres")
}

model MovieProductionCompany {
  movieId   Int               @map("movie_id")
  companyId Int               @map("company_id")
  isPrimary Boolean           @default(false) @map("is_primary")
  company   ProductionCompany @relation(fields: [companyId], references: [id], onDelete: Cascade)
  movie     Movie             @relation(fields: [movieId], references: [id], onDelete: Cascade)

  @@id([movieId, companyId])
  @@map("movie_production_companies")
}

model MovieDistributionCompany {
  movieId   Int                 @map("movie_id")
  companyId Int                 @map("company_id")
  territory String              @default("Argentina") @db.VarChar(100)
  company   DistributionCompany @relation(fields: [companyId], references: [id], onDelete: Cascade)
  movie     Movie               @relation(fields: [movieId], references: [id], onDelete: Cascade)

  @@id([movieId, companyId, territory])
  @@map("movie_distribution_companies")
}

model ColorType {
  id            Int           @id @default(autoincrement())
  name          String        @db.VarChar(50)
  slug          String        @unique @db.VarChar(50)
  category      ColorCategory
  technicalName String?       @map("technical_name") @db.VarChar(50)
  displayOrder  Int           @default(0) @map("display_order")
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  movies        Movie[]

  @@index([category])
  @@index([slug])
  @@map("color_types")
}

model Location {
  id                  Int                 @id @default(autoincrement())
  name                String              @db.VarChar(255)
  slug                String              @unique @db.VarChar(255)
  parentId            Int?                @map("parent_id")
  latitude            Decimal?            @db.Decimal(10, 8)
  longitude           Decimal?            @db.Decimal(11, 8)
  createdAt           DateTime            @default(now()) @map("created_at")
  updatedAt           DateTime            @updatedAt @map("updated_at")
  gentilicio          String?             @db.VarChar(255)
  parent              Location?           @relation("LocationHierarchy", fields: [parentId], references: [id], onDelete: Restrict)
  children            Location[]          @relation("LocationHierarchy")
  peopleBornHere      Person[]            @relation("BirthLocation")
  peopleDiedHere      Person[]            @relation("DeathLocation")
  personNationalities PersonNationality[]
  movieCountries      MovieCountry[]      @relation("MovieCountries")

  @@index([parentId])
  @@index([name])
  @@index([slug])
  @@map("locations")
}

model MovieImage {
  id           Int       @id @default(autoincrement())
  movieId      Int       @map("movie_id")
  url          String    @db.VarChar(500)
  type         ImageType
  width        Int?
  height       Int?
  caption      String?
  photographer String?   @db.VarChar(255)
  displayOrder Int       @default(0) @map("display_order")
  isPrimary    Boolean   @default(false) @map("is_primary")
  createdAt    DateTime  @default(now()) @map("created_at")
  movie        Movie     @relation(fields: [movieId], references: [id], onDelete: Cascade)

  @@map("movie_images")
}

model MovieVideo {
  id        Int       @id @default(autoincrement())
  movieId   Int       @map("movie_id")
  url       String    @db.VarChar(500)
  platform  String?   @db.VarChar(50)
  videoKey  String?   @map("video_key") @db.VarChar(100)
  type      VideoType
  title     String?   @db.VarChar(255)
  duration  Int?
  language  String    @default("es") @db.VarChar(10)
  isPrimary Boolean   @default(false) @map("is_primary")
  createdAt DateTime  @default(now()) @map("created_at")
  movie     Movie     @relation(fields: [movieId], references: [id], onDelete: Cascade)

  @@map("movie_videos")
}

model Award {
  id           Int          @id @default(autoincrement())
  name         String       @db.VarChar(255)
  organization String?      @db.VarChar(255)
  country      String?      @db.VarChar(100)
  description  String?
  logoUrl      String?      @map("logo_url") @db.VarChar(500)
  createdAt    DateTime     @default(now()) @map("created_at")
  movieAwards  MovieAward[]

  @@map("awards")
}

model MovieAward {
  id                Int         @id @default(autoincrement())
  movieId           Int         @map("movie_id")
  awardId           Int         @map("award_id")
  category          String      @db.VarChar(255)
  year              Int
  result            AwardResult
  recipientPersonId Int?        @map("recipient_person_id")
  notes             String?
  createdAt         DateTime    @default(now()) @map("created_at")
  award             Award       @relation(fields: [awardId], references: [id], onDelete: Cascade)
  movie             Movie       @relation(fields: [movieId], references: [id], onDelete: Cascade)
  recipient         Person?     @relation(fields: [recipientPersonId], references: [id])

  @@map("movie_awards")
}

model Theme {
  id          Int          @id @default(autoincrement())
  slug        String       @unique @db.VarChar(100)
  name        String       @db.VarChar(100)
  description String?
  usageCount  Int          @default(0) @map("usage_count")
  createdAt   DateTime     @default(now()) @map("created_at")
  movies      MovieTheme[]

  @@index([slug])
  @@index([name])
  @@map("themes")
}

model Role {
  id          Int         @id @default(autoincrement())
  name        String      @db.VarChar(100)
  slug        String      @unique @db.VarChar(100)
  department  Department
  description String?
  isMainRole  Boolean     @default(false) @map("is_main_role")
  isActive    Boolean     @default(true) @map("is_active")
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  crewRoles   MovieCrew[]

  @@unique([name, department])
  @@index([department])
  @@index([isActive])
  @@index([isMainRole])
  @@map("roles")
}

model Rating {
  id           Int      @id @default(autoincrement())
  slug         String   @unique @db.VarChar(100)
  name         String   @unique @db.VarChar(255)
  abbreviation String?  @db.VarChar(10)
  description  String?
  order        Int      @default(0)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  movies       Movie[]

  @@index([slug])
  @@index([order])
  @@map("ratings")
}

model MovieTheme {
  movieId   Int   @map("movie_id")
  themeId   Int   @map("theme_id")
  relevance Int   @default(1)
  movie     Movie @relation(fields: [movieId], references: [id], onDelete: Cascade)
  theme     Theme @relation(fields: [themeId], references: [id], onDelete: Cascade)

  @@id([movieId, themeId])
  @@map("movie_themes")
}

// model Country {
//  id        Int            @id @default(autoincrement())
//  code      String         @unique @db.VarChar(2)
//  name      String         @db.VarChar(100)
//  createdAt DateTime       @default(now()) @map("created_at")
//  movies    MovieCountry[]

//  @@map("countries")
// }

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model MovieCountry {
  movieId   Int      @map("movie_id")
  countryId Int      @map("country_id")  // Ahora apuntar√° a Location.id
  isPrimary Boolean  @default(false) @map("is_primary")
  
  movie     Movie    @relation(fields: [movieId], references: [id], onDelete: Cascade)
  location  Location @relation("MovieCountries", fields: [countryId], references: [id])
  
  @@id([movieId, countryId])
  @@map("movie_countries")
}

model Language {
  id        Int      @id @default(autoincrement())
  code      String   @unique @db.VarChar(10)
  name      String   @db.VarChar(100)
  createdAt DateTime @default(now()) @map("created_at")

  @@map("languages")
}

model User {
  id            String          @id @default(cuid())
  email         String          @unique @db.VarChar(255)
  username      String?         @unique @db.VarChar(100)
  password      String
  displayName   String?         @map("display_name") @db.VarChar(255)
  avatarUrl     String?         @map("avatar_url") @db.VarChar(500)
  bio           String?
  role          UserRole        @default(VIEWER)
  isActive      Boolean         @default(true) @map("is_active")
  isAdmin       Boolean         @default(false) @map("is_admin")
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @updatedAt @map("updated_at")
  lastLogin     DateTime?       @map("last_login")
  
  accounts      Account[]
  sessions      Session[]
  ratings       UserRating[]
  watched       UserWatched[]
  watchlist     UserWatchlist[]
  auditLogs     AuditLog[]

  @@map("users")
}

model UserRating {
  userId     String   @map("user_id")
  movieId    Int      @map("movie_id")
  rating     Decimal  @db.Decimal(3, 1)
  reviewText String?  @map("review_text")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  movie      Movie    @relation(fields: [movieId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, movieId])
  @@map("user_ratings")
}

model UserWatchlist {
  userId  String   @map("user_id")
  movieId Int      @map("movie_id")
  addedAt DateTime @default(now()) @map("added_at")
  movie   Movie    @relation(fields: [movieId], references: [id], onDelete: Cascade)
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, movieId])
  @@map("user_watchlist")
}

model UserWatched {
  userId    String   @map("user_id")
  movieId   Int      @map("movie_id")
  watchedAt DateTime @default(now()) @map("watched_at")
  movie     Movie    @relation(fields: [movieId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, movieId])
  @@map("user_watched")
}

enum ImageType {
  POSTER
  BACKDROP
  STILL
  BEHIND_SCENES

  @@map("image_type")
}

enum UserRole {
  ADMIN
  EDITOR
  VIEWER
}

enum Department {
  DIRECCION
  PRODUCCION
  GUION
  FOTOGRAFIA
  ARTE
  MONTAJE
  SONIDO
  MUSICA
  VESTUARIO
  MAQUILLAJE
  EFECTOS
  ANIMACION
  OTROS
}

enum Gender {
  MALE
  FEMALE
  OTHER

  @@map("gender")
}

enum PersonLinkType {
  IMDB
  TMDB
  CINENACIONAL
  WIKIPEDIA
  OFFICIAL_WEBSITE
  PORTFOLIO
  BLOG
  INSTAGRAM
  TWITTER
  FACEBOOK
  YOUTUBE
  TIKTOK
  LINKEDIN
  VIMEO
  LETTERBOXD
  SPOTIFY
  PODCAST
  INTERVIEW
  ARTICLE
  OTHER

  @@map("person_link_type")
}

enum VenueType {
  CINEMA
  STREAMING
  TV_CHANNEL
  OTHER

  @@map("venue_type")
}

enum VideoType {
  TRAILER
  TEASER
  BEHIND_SCENES
  INTERVIEW
  CLIP

  @@map("video_type")
}

enum AwardResult {
  WON
  NOMINATED

  @@map("award_result")
}

enum DataCompleteness {
  BASIC_PRESS_KIT
  FULL_PRESS_KIT
  MAIN_CAST
  MAIN_CREW
  FULL_CAST
  FULL_CREW

  @@map("data_completeness")
}

enum LinkType {
  INSTAGRAM
  TWITTER
  FACEBOOK
  TIKTOK
  YOUTUBE
  WEBSITE

  @@map("link_type")
}

enum ColorCategory {
  COLOR
  BLACK_AND_WHITE
  MIXED
  UNKNOWN

  @@map("color_category")
}

enum MovieStage {
  COMPLETA
  EN_DESARROLLO
  EN_POSTPRODUCCION
  EN_PREPRODUCCION
  EN_RODAJE
  INCONCLUSA
  INEDITA

  @@map("movie_stage")
}
```

## SQL Generado

```sql
-- CreateEnum
CREATE TYPE "image_type" AS ENUM ('POSTER', 'BACKDROP', 'STILL', 'BEHIND_SCENES');

-- CreateEnum
CREATE TYPE "UserRole" AS ENUM ('ADMIN', 'EDITOR', 'VIEWER');

-- CreateEnum
CREATE TYPE "Department" AS ENUM ('DIRECCION', 'PRODUCCION', 'GUION', 'FOTOGRAFIA', 'ARTE', 'MONTAJE', 'SONIDO', 'MUSICA', 'VESTUARIO', 'MAQUILLAJE', 'EFECTOS', 'ANIMACION', 'OTROS');

-- CreateEnum
CREATE TYPE "gender" AS ENUM ('MALE', 'FEMALE', 'OTHER');

-- CreateEnum
CREATE TYPE "person_link_type" AS ENUM ('IMDB', 'TMDB', 'CINENACIONAL', 'WIKIPEDIA', 'OFFICIAL_WEBSITE', 'PORTFOLIO', 'BLOG', 'INSTAGRAM', 'TWITTER', 'FACEBOOK', 'YOUTUBE', 'TIKTOK', 'LINKEDIN', 'VIMEO', 'LETTERBOXD', 'SPOTIFY', 'PODCAST', 'INTERVIEW', 'ARTICLE', 'OTHER');

-- CreateEnum
CREATE TYPE "venue_type" AS ENUM ('CINEMA', 'STREAMING', 'TV_CHANNEL', 'OTHER');

-- CreateEnum
CREATE TYPE "video_type" AS ENUM ('TRAILER', 'TEASER', 'BEHIND_SCENES', 'INTERVIEW', 'CLIP');

-- CreateEnum
CREATE TYPE "award_result" AS ENUM ('WON', 'NOMINATED');

-- CreateEnum
CREATE TYPE "data_completeness" AS ENUM ('BASIC_PRESS_KIT', 'FULL_PRESS_KIT', 'MAIN_CAST', 'MAIN_CREW', 'FULL_CAST', 'FULL_CREW');

-- CreateEnum
CREATE TYPE "link_type" AS ENUM ('INSTAGRAM', 'TWITTER', 'FACEBOOK', 'TIKTOK', 'YOUTUBE', 'WEBSITE');

-- CreateEnum
CREATE TYPE "color_category" AS ENUM ('COLOR', 'BLACK_AND_WHITE', 'MIXED', 'UNKNOWN');

-- CreateEnum
CREATE TYPE "movie_stage" AS ENUM ('COMPLETA', 'EN_DESARROLLO', 'EN_POSTPRODUCCION', 'EN_PREPRODUCCION', 'EN_RODAJE', 'INCONCLUSA', 'INEDITA');

-- CreateTable
CREATE TABLE "movies" (
    "id" SERIAL NOT NULL,
    "slug" VARCHAR(255) NOT NULL,
    "title" VARCHAR(255) NOT NULL,
    "year" INTEGER,
    "release_year" INTEGER,
    "release_month" SMALLINT,
    "release_day" SMALLINT,
    "duration" INTEGER,
    "duration_seconds" INTEGER,
    "tipo_duracion" VARCHAR(20),
    "synopsis" TEXT,
    "notes" TEXT,
    "tagline" VARCHAR(500),
    "poster_url" VARCHAR(500),
    "poster_public_id" VARCHAR(500),
    "trailer_url" VARCHAR(500),
    "imdb_id" VARCHAR(20),
    "stage" "movie_stage" NOT NULL DEFAULT 'COMPLETA',
    "color_type_id" INTEGER,
    "sound_type" VARCHAR(50),
    "rating_id" INTEGER,
    "countries" TEXT[] DEFAULT ARRAY['Argentina']::TEXT[],
    "is_coproduction" BOOLEAN NOT NULL DEFAULT false,
    "production_type" TEXT NOT NULL DEFAULT 'national',
    "filming_start_year" INTEGER,
    "filming_start_month" SMALLINT,
    "filming_start_day" SMALLINT,
    "filming_end_year" INTEGER,
    "filming_end_month" SMALLINT,
    "filming_end_day" SMALLINT,
    "created_at" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updated_at" TIMESTAMP(3) NOT NULL,
    "data_completeness" "data_completeness" NOT NULL DEFAULT 'BASIC_PRESS_KIT',
    "meta_description" TEXT,
    "meta_keywords" TEXT[],

    CONSTRAINT "movies_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "screening_venues" (
    "id" SERIAL NOT NULL,
    "slug" VARCHAR(255) NOT NULL,
    "name" VARCHAR(255) NOT NULL,
    "type" "venue_type" NOT NULL,
    "description" TEXT,
    "logo_url" VARCHAR(500),
    "website" VARCHAR(500),
    "address" VARCHAR(500),
    "city" VARCHAR(100),
    "province" VARCHAR(100),
    "country" VARCHAR(100) DEFAULT 'Argentina',
    "latitude" DECIMAL(10,8),
    "longitude" DECIMAL(11,8),
    "is_active" BOOLEAN NOT NULL DEFAULT true,
    "created_at" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updated_at" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "screening_venues_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "audit_logs" (
    "id" TEXT NOT NULL,
    "user_id" TEXT NOT NULL,
    "action" TEXT NOT NULL,
    "entity" TEXT,
    "entityId" TEXT,
    "metadata" JSONB,
    "ip" TEXT,
    "userAgent" TEXT,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,

    CONSTRAINT "audit_logs_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "movie_screenings" (
    "id" SERIAL NOT NULL,
    "movie_id" INTEGER NOT NULL,
    "venue_id" INTEGER NOT NULL,
    "screening_date" DATE,
    "end_date" DATE,
    "is_premiere" BOOLEAN NOT NULL DEFAULT false,
    "is_exclusive" BOOLEAN NOT NULL DEFAULT false,
    "notes" TEXT,
    "created_at" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,

    CONSTRAINT "movie_screenings_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "movie_alternative_titles" (
    "id" SERIAL NOT NULL,
    "movie_id" INTEGER NOT NULL,
    "title" VARCHAR(255) NOT NULL,
    "description" TEXT,
    "created_at" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,

    CONSTRAINT "movie_alternative_titles_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "movie_links" (
    "id" SERIAL NOT NULL,
    "movie_id" INTEGER NOT NULL,
    "type" "link_type" NOT NULL,
    "url" TEXT NOT NULL,
    "title" VARCHAR(255),
    "is_active" BOOLEAN NOT NULL DEFAULT true,
    "created_at" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updated_at" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "movie_links_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "people" (
    "id" SERIAL NOT NULL,
    "slug" VARCHAR(255) NOT NULL,
    "first_name" VARCHAR(255),
    "last_name" VARCHAR(255),
    "real_name" VARCHAR(255),
    "birth_year" INTEGER,
    "birth_month" SMALLINT,
    "birth_day" SMALLINT,
    "death_year" INTEGER,
    "death_month" SMALLINT,
    "death_day" SMALLINT,
    "birth_location_id" INTEGER,
    "death_location_id" INTEGER,
    "biography" TEXT,
    "photo_url" VARCHAR(500),
    "gender" "gender",
    "hide_age" BOOLEAN NOT NULL DEFAULT false,
    "has_links" BOOLEAN NOT NULL DEFAULT false,
    "is_active" BOOLEAN NOT NULL DEFAULT true,
    "created_at" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updated_at" TIMESTAMP(3) NOT NULL,
    "photo_public_id" VARCHAR(255),

    CONSTRAINT "people_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "person_nationalities" (
    "person_id" INTEGER NOT NULL,
    "location_id" INTEGER NOT NULL,
    "is_primary" BOOLEAN NOT NULL DEFAULT false,

    CONSTRAINT "person_nationalities_pkey" PRIMARY KEY ("person_id","location_id")
);

-- CreateTable
CREATE TABLE "person_links" (
    "id" SERIAL NOT NULL,
    "person_id" INTEGER NOT NULL,
    "type" "person_link_type" NOT NULL,
    "url" VARCHAR(500) NOT NULL,
    "title" VARCHAR(255),
    "display_order" INTEGER NOT NULL DEFAULT 0,
    "is_verified" BOOLEAN NOT NULL DEFAULT false,
    "is_active" BOOLEAN NOT NULL DEFAULT true,
    "last_checked" TIMESTAMP(3),
    "created_at" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updated_at" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "person_links_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "genres" (
    "id" SERIAL NOT NULL,
    "slug" VARCHAR(100) NOT NULL,
    "name" VARCHAR(100) NOT NULL,
    "description" TEXT,
    "created_at" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,

    CONSTRAINT "genres_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "production_companies" (
    "id" SERIAL NOT NULL,
    "slug" VARCHAR(255) NOT NULL,
    "name" VARCHAR(255) NOT NULL,
    "description" TEXT,
    "founded_year" INTEGER,
    "logo_url" VARCHAR(500),
    "website" VARCHAR(500),
    "country" VARCHAR(100),
    "created_at" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updated_at" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "production_companies_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "distribution_companies" (
    "id" SERIAL NOT NULL,
    "slug" VARCHAR(255) NOT NULL,
    "name" VARCHAR(255) NOT NULL,
    "description" TEXT,
    "logo_url" VARCHAR(500),
    "website" VARCHAR(500),
    "country" VARCHAR(100),
    "created_at" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updated_at" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "distribution_companies_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "movie_cast" (
    "id" SERIAL NOT NULL,
    "movie_id" INTEGER NOT NULL,
    "person_id" INTEGER NOT NULL,
    "character_name" VARCHAR(255),
    "billing_order" INTEGER,
    "is_principal" BOOLEAN NOT NULL DEFAULT false,
    "notes" TEXT,
    "created_at" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,

    CONSTRAINT "movie_cast_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "movie_crew" (
    "id" SERIAL NOT NULL,
    "movie_id" INTEGER NOT NULL,
    "person_id" INTEGER NOT NULL,
    "role_id" INTEGER NOT NULL,
    "billing_order" INTEGER,
    "notes" TEXT,
    "created_at" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updated_at" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "movie_crew_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "movie_genres" (
    "movie_id" INTEGER NOT NULL,
    "genre_id" INTEGER NOT NULL,
    "is_primary" BOOLEAN NOT NULL DEFAULT false,

    CONSTRAINT "movie_genres_pkey" PRIMARY KEY ("movie_id","genre_id")
);

-- CreateTable
CREATE TABLE "movie_production_companies" (
    "movie_id" INTEGER NOT NULL,
    "company_id" INTEGER NOT NULL,
    "is_primary" BOOLEAN NOT NULL DEFAULT false,

    CONSTRAINT "movie_production_companies_pkey" PRIMARY KEY ("movie_id","company_id")
);

-- CreateTable
CREATE TABLE "movie_distribution_companies" (
    "movie_id" INTEGER NOT NULL,
    "company_id" INTEGER NOT NULL,
    "territory" VARCHAR(100) NOT NULL DEFAULT 'Argentina',

    CONSTRAINT "movie_distribution_companies_pkey" PRIMARY KEY ("movie_id","company_id","territory")
);

-- CreateTable
CREATE TABLE "color_types" (
    "id" SERIAL NOT NULL,
    "name" VARCHAR(50) NOT NULL,
    "slug" VARCHAR(50) NOT NULL,
    "category" "color_category" NOT NULL,
    "technical_name" VARCHAR(50),
    "display_order" INTEGER NOT NULL DEFAULT 0,
    "created_at" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updated_at" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "color_types_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "locations" (
    "id" SERIAL NOT NULL,
    "name" VARCHAR(255) NOT NULL,
    "slug" VARCHAR(255) NOT NULL,
    "parent_id" INTEGER,
    "latitude" DECIMAL(10,8),
    "longitude" DECIMAL(11,8),
    "created_at" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updated_at" TIMESTAMP(3) NOT NULL,
    "gentilicio" VARCHAR(255),

    CONSTRAINT "locations_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "movie_images" (
    "id" SERIAL NOT NULL,
    "movie_id" INTEGER NOT NULL,
    "url" VARCHAR(500) NOT NULL,
    "type" "image_type" NOT NULL,
    "width" INTEGER,
    "height" INTEGER,
    "caption" TEXT,
    "photographer" VARCHAR(255),
    "display_order" INTEGER NOT NULL DEFAULT 0,
    "is_primary" BOOLEAN NOT NULL DEFAULT false,
    "created_at" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,

    CONSTRAINT "movie_images_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "movie_videos" (
    "id" SERIAL NOT NULL,
    "movie_id" INTEGER NOT NULL,
    "url" VARCHAR(500) NOT NULL,
    "platform" VARCHAR(50),
    "video_key" VARCHAR(100),
    "type" "video_type" NOT NULL,
    "title" VARCHAR(255),
    "duration" INTEGER,
    "language" VARCHAR(10) NOT NULL DEFAULT 'es',
    "is_primary" BOOLEAN NOT NULL DEFAULT false,
    "created_at" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,

    CONSTRAINT "movie_videos_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "awards" (
    "id" SERIAL NOT NULL,
    "name" VARCHAR(255) NOT NULL,
    "organization" VARCHAR(255),
    "country" VARCHAR(100),
    "description" TEXT,
    "logo_url" VARCHAR(500),
    "created_at" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,

    CONSTRAINT "awards_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "movie_awards" (
    "id" SERIAL NOT NULL,
    "movie_id" INTEGER NOT NULL,
    "award_id" INTEGER NOT NULL,
    "category" VARCHAR(255) NOT NULL,
    "year" INTEGER NOT NULL,
    "result" "award_result" NOT NULL,
    "recipient_person_id" INTEGER,
    "notes" TEXT,
    "created_at" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,

    CONSTRAINT "movie_awards_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "themes" (
    "id" SERIAL NOT NULL,
    "slug" VARCHAR(100) NOT NULL,
    "name" VARCHAR(100) NOT NULL,
    "description" TEXT,
    "usage_count" INTEGER NOT NULL DEFAULT 0,
    "created_at" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,

    CONSTRAINT "themes_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "roles" (
    "id" SERIAL NOT NULL,
    "name" VARCHAR(100) NOT NULL,
    "slug" VARCHAR(100) NOT NULL,
    "department" "Department" NOT NULL,
    "description" TEXT,
    "is_main_role" BOOLEAN NOT NULL DEFAULT false,
    "is_active" BOOLEAN NOT NULL DEFAULT true,
    "created_at" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updated_at" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "roles_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "ratings" (
    "id" SERIAL NOT NULL,
    "slug" VARCHAR(100) NOT NULL,
    "name" VARCHAR(255) NOT NULL,
    "abbreviation" VARCHAR(10),
    "description" TEXT,
    "order" INTEGER NOT NULL DEFAULT 0,
    "created_at" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updated_at" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "ratings_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "movie_themes" (
    "movie_id" INTEGER NOT NULL,
    "theme_id" INTEGER NOT NULL,
    "relevance" INTEGER NOT NULL DEFAULT 1,

    CONSTRAINT "movie_themes_pkey" PRIMARY KEY ("movie_id","theme_id")
);

-- CreateTable
CREATE TABLE "sessions" (
    "id" TEXT NOT NULL,
    "sessionToken" TEXT NOT NULL,
    "userId" TEXT NOT NULL,
    "expires" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "sessions_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "accounts" (
    "id" TEXT NOT NULL,
    "userId" TEXT NOT NULL,
    "type" TEXT NOT NULL,
    "provider" TEXT NOT NULL,
    "providerAccountId" TEXT NOT NULL,
    "refresh_token" TEXT,
    "access_token" TEXT,
    "expires_at" INTEGER,
    "token_type" TEXT,
    "scope" TEXT,
    "id_token" TEXT,
    "session_state" TEXT,

    CONSTRAINT "accounts_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "verification_tokens" (
    "identifier" TEXT NOT NULL,
    "token" TEXT NOT NULL,
    "expires" TIMESTAMP(3) NOT NULL
);

-- CreateTable
CREATE TABLE "movie_countries" (
    "movie_id" INTEGER NOT NULL,
    "country_id" INTEGER NOT NULL,
    "is_primary" BOOLEAN NOT NULL DEFAULT false,

    CONSTRAINT "movie_countries_pkey" PRIMARY KEY ("movie_id","country_id")
);

-- CreateTable
CREATE TABLE "languages" (
    "id" SERIAL NOT NULL,
    "code" VARCHAR(10) NOT NULL,
    "name" VARCHAR(100) NOT NULL,
    "created_at" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,

    CONSTRAINT "languages_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "users" (
    "id" TEXT NOT NULL,
    "email" VARCHAR(255) NOT NULL,
    "username" VARCHAR(100),
    "password" TEXT NOT NULL,
    "display_name" VARCHAR(255),
    "avatar_url" VARCHAR(500),
    "bio" TEXT,
    "role" "UserRole" NOT NULL DEFAULT 'VIEWER',
    "is_active" BOOLEAN NOT NULL DEFAULT true,
    "is_admin" BOOLEAN NOT NULL DEFAULT false,
    "created_at" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updated_at" TIMESTAMP(3) NOT NULL,
    "last_login" TIMESTAMP(3),

    CONSTRAINT "users_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "user_ratings" (
    "user_id" TEXT NOT NULL,
    "movie_id" INTEGER NOT NULL,
    "rating" DECIMAL(3,1) NOT NULL,
    "review_text" TEXT,
    "created_at" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updated_at" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "user_ratings_pkey" PRIMARY KEY ("user_id","movie_id")
);

-- CreateTable
CREATE TABLE "user_watchlist" (
    "user_id" TEXT NOT NULL,
    "movie_id" INTEGER NOT NULL,
    "added_at" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,

    CONSTRAINT "user_watchlist_pkey" PRIMARY KEY ("user_id","movie_id")
);

-- CreateTable
CREATE TABLE "user_watched" (
    "user_id" TEXT NOT NULL,
    "movie_id" INTEGER NOT NULL,
    "watched_at" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,

    CONSTRAINT "user_watched_pkey" PRIMARY KEY ("user_id","movie_id")
);

-- CreateIndex
CREATE UNIQUE INDEX "movies_slug_key" ON "movies"("slug");

-- CreateIndex
CREATE INDEX "movies_slug_idx" ON "movies"("slug");

-- CreateIndex
CREATE INDEX "movies_title_idx" ON "movies"("title");

-- CreateIndex
CREATE INDEX "movies_year_idx" ON "movies"("year");

-- CreateIndex
CREATE INDEX "movies_tipo_duracion_idx" ON "movies"("tipo_duracion");

-- CreateIndex
CREATE INDEX "movies_rating_id_idx" ON "movies"("rating_id");

-- CreateIndex
CREATE INDEX "movies_filming_start_year_idx" ON "movies"("filming_start_year");

-- CreateIndex
CREATE INDEX "movies_filming_start_year_filming_start_month_idx" ON "movies"("filming_start_year", "filming_start_month");

-- CreateIndex
CREATE INDEX "movies_is_coproduction_idx" ON "movies"("is_coproduction");

-- CreateIndex
CREATE INDEX "movies_production_type_idx" ON "movies"("production_type");

-- CreateIndex
CREATE INDEX "movies_color_type_id_idx" ON "movies"("color_type_id");

-- CreateIndex
CREATE INDEX "movies_stage_idx" ON "movies"("stage");

-- CreateIndex
CREATE INDEX "movies_release_year_idx" ON "movies"("release_year");

-- CreateIndex
CREATE INDEX "movies_release_year_release_month_idx" ON "movies"("release_year", "release_month");

-- CreateIndex
CREATE INDEX "movies_release_year_release_month_release_day_idx" ON "movies"("release_year", "release_month", "release_day");

-- CreateIndex
CREATE INDEX "movies_created_at_idx" ON "movies"("created_at");

-- CreateIndex
CREATE UNIQUE INDEX "screening_venues_slug_key" ON "screening_venues"("slug");

-- CreateIndex
CREATE INDEX "screening_venues_name_idx" ON "screening_venues"("name");

-- CreateIndex
CREATE INDEX "screening_venues_type_idx" ON "screening_venues"("type");

-- CreateIndex
CREATE INDEX "screening_venues_is_active_idx" ON "screening_venues"("is_active");

-- CreateIndex
CREATE INDEX "audit_logs_user_id_idx" ON "audit_logs"("user_id");

-- CreateIndex
CREATE INDEX "audit_logs_createdAt_idx" ON "audit_logs"("createdAt");

-- CreateIndex
CREATE INDEX "movie_screenings_movie_id_idx" ON "movie_screenings"("movie_id");

-- CreateIndex
CREATE INDEX "movie_screenings_venue_id_idx" ON "movie_screenings"("venue_id");

-- CreateIndex
CREATE INDEX "movie_screenings_screening_date_idx" ON "movie_screenings"("screening_date");

-- CreateIndex
CREATE UNIQUE INDEX "movie_screenings_movie_id_venue_id_screening_date_key" ON "movie_screenings"("movie_id", "venue_id", "screening_date");

-- CreateIndex
CREATE INDEX "movie_alternative_titles_movie_id_idx" ON "movie_alternative_titles"("movie_id");

-- CreateIndex
CREATE INDEX "movie_alternative_titles_title_idx" ON "movie_alternative_titles"("title");

-- CreateIndex
CREATE INDEX "movie_links_movie_id_idx" ON "movie_links"("movie_id");

-- CreateIndex
CREATE INDEX "movie_links_type_idx" ON "movie_links"("type");

-- CreateIndex
CREATE UNIQUE INDEX "people_slug_key" ON "people"("slug");

-- CreateIndex
CREATE INDEX "people_slug_idx" ON "people"("slug");

-- CreateIndex
CREATE INDEX "people_first_name_idx" ON "people"("first_name");

-- CreateIndex
CREATE INDEX "people_last_name_idx" ON "people"("last_name");

-- CreateIndex
CREATE INDEX "people_birth_location_id_idx" ON "people"("birth_location_id");

-- CreateIndex
CREATE INDEX "people_death_location_id_idx" ON "people"("death_location_id");

-- CreateIndex
CREATE INDEX "people_is_active_idx" ON "people"("is_active");

-- CreateIndex
CREATE INDEX "people_birth_year_idx" ON "people"("birth_year");

-- CreateIndex
CREATE INDEX "people_birth_year_birth_month_idx" ON "people"("birth_year", "birth_month");

-- CreateIndex
CREATE INDEX "people_death_year_idx" ON "people"("death_year");

-- CreateIndex
CREATE INDEX "people_death_year_death_month_idx" ON "people"("death_year", "death_month");

-- CreateIndex
CREATE INDEX "people_created_at_idx" ON "people"("created_at");

-- CreateIndex
CREATE INDEX "person_links_person_id_idx" ON "person_links"("person_id");

-- CreateIndex
CREATE INDEX "person_links_type_idx" ON "person_links"("type");

-- CreateIndex
CREATE INDEX "person_links_is_active_idx" ON "person_links"("is_active");

-- CreateIndex
CREATE UNIQUE INDEX "genres_slug_key" ON "genres"("slug");

-- CreateIndex
CREATE UNIQUE INDEX "production_companies_slug_key" ON "production_companies"("slug");

-- CreateIndex
CREATE UNIQUE INDEX "distribution_companies_slug_key" ON "distribution_companies"("slug");

-- CreateIndex
CREATE INDEX "movie_cast_movie_id_idx" ON "movie_cast"("movie_id");

-- CreateIndex
CREATE INDEX "movie_cast_person_id_idx" ON "movie_cast"("person_id");

-- CreateIndex
CREATE UNIQUE INDEX "movie_cast_movie_id_person_id_character_name_key" ON "movie_cast"("movie_id", "person_id", "character_name");

-- CreateIndex
CREATE INDEX "movie_crew_movie_id_idx" ON "movie_crew"("movie_id");

-- CreateIndex
CREATE INDEX "movie_crew_person_id_idx" ON "movie_crew"("person_id");

-- CreateIndex
CREATE INDEX "movie_crew_role_id_idx" ON "movie_crew"("role_id");

-- CreateIndex
CREATE INDEX "movie_crew_movie_id_role_id_idx" ON "movie_crew"("movie_id", "role_id");

-- CreateIndex
CREATE UNIQUE INDEX "movie_crew_movie_id_person_id_role_id_key" ON "movie_crew"("movie_id", "person_id", "role_id");

-- CreateIndex
CREATE UNIQUE INDEX "color_types_slug_key" ON "color_types"("slug");

-- CreateIndex
CREATE INDEX "color_types_category_idx" ON "color_types"("category");

-- CreateIndex
CREATE INDEX "color_types_slug_idx" ON "color_types"("slug");

-- CreateIndex
CREATE UNIQUE INDEX "locations_slug_key" ON "locations"("slug");

-- CreateIndex
CREATE INDEX "locations_parent_id_idx" ON "locations"("parent_id");

-- CreateIndex
CREATE INDEX "locations_name_idx" ON "locations"("name");

-- CreateIndex
CREATE INDEX "locations_slug_idx" ON "locations"("slug");

-- CreateIndex
CREATE UNIQUE INDEX "themes_slug_key" ON "themes"("slug");

-- CreateIndex
CREATE INDEX "themes_slug_idx" ON "themes"("slug");

-- CreateIndex
CREATE INDEX "themes_name_idx" ON "themes"("name");

-- CreateIndex
CREATE UNIQUE INDEX "roles_slug_key" ON "roles"("slug");

-- CreateIndex
CREATE INDEX "roles_department_idx" ON "roles"("department");

-- CreateIndex
CREATE INDEX "roles_is_active_idx" ON "roles"("is_active");

-- CreateIndex
CREATE INDEX "roles_is_main_role_idx" ON "roles"("is_main_role");

-- CreateIndex
CREATE UNIQUE INDEX "roles_name_department_key" ON "roles"("name", "department");

-- CreateIndex
CREATE UNIQUE INDEX "ratings_slug_key" ON "ratings"("slug");

-- CreateIndex
CREATE UNIQUE INDEX "ratings_name_key" ON "ratings"("name");

-- CreateIndex
CREATE INDEX "ratings_slug_idx" ON "ratings"("slug");

-- CreateIndex
CREATE INDEX "ratings_order_idx" ON "ratings"("order");

-- CreateIndex
CREATE UNIQUE INDEX "sessions_sessionToken_key" ON "sessions"("sessionToken");

-- CreateIndex
CREATE UNIQUE INDEX "accounts_provider_providerAccountId_key" ON "accounts"("provider", "providerAccountId");

-- CreateIndex
CREATE UNIQUE INDEX "verification_tokens_token_key" ON "verification_tokens"("token");

-- CreateIndex
CREATE UNIQUE INDEX "verification_tokens_identifier_token_key" ON "verification_tokens"("identifier", "token");

-- CreateIndex
CREATE UNIQUE INDEX "languages_code_key" ON "languages"("code");

-- CreateIndex
CREATE UNIQUE INDEX "users_email_key" ON "users"("email");

-- CreateIndex
CREATE UNIQUE INDEX "users_username_key" ON "users"("username");

-- AddForeignKey
ALTER TABLE "movies" ADD CONSTRAINT "movies_color_type_id_fkey" FOREIGN KEY ("color_type_id") REFERENCES "color_types"("id") ON DELETE SET NULL ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "movies" ADD CONSTRAINT "movies_rating_id_fkey" FOREIGN KEY ("rating_id") REFERENCES "ratings"("id") ON DELETE SET NULL ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "audit_logs" ADD CONSTRAINT "audit_logs_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "users"("id") ON DELETE RESTRICT ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "movie_screenings" ADD CONSTRAINT "movie_screenings_movie_id_fkey" FOREIGN KEY ("movie_id") REFERENCES "movies"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "movie_screenings" ADD CONSTRAINT "movie_screenings_venue_id_fkey" FOREIGN KEY ("venue_id") REFERENCES "screening_venues"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "movie_alternative_titles" ADD CONSTRAINT "movie_alternative_titles_movie_id_fkey" FOREIGN KEY ("movie_id") REFERENCES "movies"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "movie_links" ADD CONSTRAINT "movie_links_movie_id_fkey" FOREIGN KEY ("movie_id") REFERENCES "movies"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "people" ADD CONSTRAINT "people_birth_location_id_fkey" FOREIGN KEY ("birth_location_id") REFERENCES "locations"("id") ON DELETE SET NULL ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "people" ADD CONSTRAINT "people_death_location_id_fkey" FOREIGN KEY ("death_location_id") REFERENCES "locations"("id") ON DELETE SET NULL ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "person_nationalities" ADD CONSTRAINT "person_nationalities_location_id_fkey" FOREIGN KEY ("location_id") REFERENCES "locations"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "person_nationalities" ADD CONSTRAINT "person_nationalities_person_id_fkey" FOREIGN KEY ("person_id") REFERENCES "people"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "person_links" ADD CONSTRAINT "person_links_person_id_fkey" FOREIGN KEY ("person_id") REFERENCES "people"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "movie_cast" ADD CONSTRAINT "movie_cast_movie_id_fkey" FOREIGN KEY ("movie_id") REFERENCES "movies"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "movie_cast" ADD CONSTRAINT "movie_cast_person_id_fkey" FOREIGN KEY ("person_id") REFERENCES "people"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "movie_crew" ADD CONSTRAINT "movie_crew_movie_id_fkey" FOREIGN KEY ("movie_id") REFERENCES "movies"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "movie_crew" ADD CONSTRAINT "movie_crew_person_id_fkey" FOREIGN KEY ("person_id") REFERENCES "people"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "movie_crew" ADD CONSTRAINT "movie_crew_role_id_fkey" FOREIGN KEY ("role_id") REFERENCES "roles"("id") ON DELETE RESTRICT ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "movie_genres" ADD CONSTRAINT "movie_genres_genre_id_fkey" FOREIGN KEY ("genre_id") REFERENCES "genres"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "movie_genres" ADD CONSTRAINT "movie_genres_movie_id_fkey" FOREIGN KEY ("movie_id") REFERENCES "movies"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "movie_production_companies" ADD CONSTRAINT "movie_production_companies_company_id_fkey" FOREIGN KEY ("company_id") REFERENCES "production_companies"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "movie_production_companies" ADD CONSTRAINT "movie_production_companies_movie_id_fkey" FOREIGN KEY ("movie_id") REFERENCES "movies"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "movie_distribution_companies" ADD CONSTRAINT "movie_distribution_companies_company_id_fkey" FOREIGN KEY ("company_id") REFERENCES "distribution_companies"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "movie_distribution_companies" ADD CONSTRAINT "movie_distribution_companies_movie_id_fkey" FOREIGN KEY ("movie_id") REFERENCES "movies"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "locations" ADD CONSTRAINT "locations_parent_id_fkey" FOREIGN KEY ("parent_id") REFERENCES "locations"("id") ON DELETE RESTRICT ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "movie_images" ADD CONSTRAINT "movie_images_movie_id_fkey" FOREIGN KEY ("movie_id") REFERENCES "movies"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "movie_videos" ADD CONSTRAINT "movie_videos_movie_id_fkey" FOREIGN KEY ("movie_id") REFERENCES "movies"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "movie_awards" ADD CONSTRAINT "movie_awards_award_id_fkey" FOREIGN KEY ("award_id") REFERENCES "awards"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "movie_awards" ADD CONSTRAINT "movie_awards_movie_id_fkey" FOREIGN KEY ("movie_id") REFERENCES "movies"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "movie_awards" ADD CONSTRAINT "movie_awards_recipient_person_id_fkey" FOREIGN KEY ("recipient_person_id") REFERENCES "people"("id") ON DELETE SET NULL ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "movie_themes" ADD CONSTRAINT "movie_themes_movie_id_fkey" FOREIGN KEY ("movie_id") REFERENCES "movies"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "movie_themes" ADD CONSTRAINT "movie_themes_theme_id_fkey" FOREIGN KEY ("theme_id") REFERENCES "themes"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "sessions" ADD CONSTRAINT "sessions_userId_fkey" FOREIGN KEY ("userId") REFERENCES "users"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "accounts" ADD CONSTRAINT "accounts_userId_fkey" FOREIGN KEY ("userId") REFERENCES "users"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "movie_countries" ADD CONSTRAINT "movie_countries_movie_id_fkey" FOREIGN KEY ("movie_id") REFERENCES "movies"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "movie_countries" ADD CONSTRAINT "movie_countries_country_id_fkey" FOREIGN KEY ("country_id") REFERENCES "locations"("id") ON DELETE RESTRICT ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "user_ratings" ADD CONSTRAINT "user_ratings_movie_id_fkey" FOREIGN KEY ("movie_id") REFERENCES "movies"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "user_ratings" ADD CONSTRAINT "user_ratings_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "users"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "user_watchlist" ADD CONSTRAINT "user_watchlist_movie_id_fkey" FOREIGN KEY ("movie_id") REFERENCES "movies"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "user_watchlist" ADD CONSTRAINT "user_watchlist_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "users"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "user_watched" ADD CONSTRAINT "user_watched_movie_id_fkey" FOREIGN KEY ("movie_id") REFERENCES "movies"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "user_watched" ADD CONSTRAINT "user_watched_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "users"("id") ON DELETE CASCADE ON UPDATE CASCADE;


```
