/**
 * Script para migrar personas desde WordPress a Supabase
 * Las personas est√°n almacenadas como post_type = 'persona'
 * 
 * Ubicaci√≥n: /scripts/migrate-wp-people-to-supabase.js
 */

import mysql from 'mysql2/promise';
import { createClient } from '@supabase/supabase-js';
import fs from 'fs';

// Configuraci√≥n MySQL local
const MYSQL_CONFIG = {
    host: 'localhost',
    user: 'root',
    password: '', // Tu contrase√±a de MySQL
    database: 'wordpress_cine',
    port: 3306
};

// Configuraci√≥n Supabase - COPIADA DEL SCRIPT DE PEL√çCULAS
const SUPABASE_URL = process.env.SUPABASE_URL || 'https://hlelclzxtjipwsikvdpt.supabase.co';
const SUPABASE_ANON_KEY = process.env.SUPABASE_ANON_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImhsZWxjbHp4dGppcHdzaWt2ZHB0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDk1OTAyMzUsImV4cCI6MjA2NTE2NjIzNX0.r1YW0JDiIeNWdj2j79tidWqdUxc24a5AIs12nulMIAk';

const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

// Logger para tracking
class PeopleMigrationLogger {
    constructor() {
        this.logs = {
            start: new Date(),
            people: [],
            errors: [],
            stats: {
                total: 0,
                migrated: 0,
                updated: 0,
                errors: 0,
                withBio: 0,
                withoutBio: 0
            }
        };
    }

    logPerson(wpId, name, status, error = null) {
        this.logs.people.push({
            wpId,
            name,
            status,
            error: error?.message,
            timestamp: new Date()
        });
    }

    save() {
        fs.writeFileSync('migration-people-log.json', JSON.stringify(this.logs, null, 2));
    }
}

const logger = new PeopleMigrationLogger();

/**
 * Separa un nombre completo en firstName y lastName
 * Maneja casos comunes en espa√±ol/argentino
 */
function splitName(fullName) {
    if (!fullName) return { firstName: null, lastName: null };
    
    // Limpiar espacios extras
    const cleanName = fullName.trim().replace(/\s+/g, ' ');
    
    // Casos especiales de nombres compuestos conocidos
    const compoundFirstNames = [
        'Mar√≠a Jos√©', 'Mar√≠a Elena', 'Mar√≠a del Carmen', 'Mar√≠a de los Angeles',
        'Juan Carlos', 'Juan Pablo', 'Juan Manuel', 'Jos√© Mar√≠a', 'Jos√© Luis',
        'Luis Alberto', 'Carlos Alberto', 'Ana Mar√≠a', 'Mar√≠a Fernanda',
        'Mar√≠a Victoria', 'Mar√≠a Laura', 'Mar√≠a Alejandra'
    ];
    
    // Buscar si empieza con un nombre compuesto conocido
    for (const compound of compoundFirstNames) {
        if (cleanName.toLowerCase().startsWith(compound.toLowerCase())) {
            return {
                firstName: cleanName.substring(0, compound.length),
                lastName: cleanName.substring(compound.length).trim() || null
            };
        }
    }
    
    // Dividir por espacios
    const parts = cleanName.split(' ');
    
    if (parts.length === 1) {
        // Solo un nombre
        return { firstName: parts[0], lastName: null };
    } else if (parts.length === 2) {
        // Nombre y apellido simple
        return { firstName: parts[0], lastName: parts[1] };
    } else if (parts.length === 3) {
        // Posibles casos: 
        // - Nombre Apellido1 Apellido2
        // - Nombre1 Nombre2 Apellido
        // Si la segunda palabra es una preposici√≥n, es parte del apellido
        const prepositions = ['de', 'del', 'la', 'las', 'los', 'van', 'von', 'di'];
        if (prepositions.includes(parts[1].toLowerCase())) {
            return { firstName: parts[0], lastName: parts.slice(1).join(' ') };
        }
        // Por defecto: primer palabra es nombre, resto es apellido
        return { firstName: parts[0], lastName: parts.slice(1).join(' ') };
    } else {
        // 4 o m√°s partes
        // Buscar preposiciones para determinar d√≥nde empieza el apellido
        const prepositions = ['de', 'del', 'de la', 'de las', 'de los', 'van', 'von', 'di'];
        
        // Buscar si hay una preposici√≥n
        for (let i = 1; i < parts.length - 1; i++) {
            if (prepositions.includes(parts[i].toLowerCase())) {
                // Todo antes de la preposici√≥n es nombre, desde la preposici√≥n es apellido
                return {
                    firstName: parts.slice(0, i).join(' '),
                    lastName: parts.slice(i).join(' ')
                };
            }
        }
        
        // Si no hay preposiciones, asumimos que las primeras 2 palabras son nombre
        // (com√∫n en nombres argentinos/espa√±oles)
        if (parts.length === 4) {
            return {
                firstName: parts.slice(0, 2).join(' '),
                lastName: parts.slice(2).join(' ')
            };
        }
        
        // Por defecto: primera palabra es nombre, resto es apellido
        return {
            firstName: parts[0],
            lastName: parts.slice(1).join(' ')
        };
    }
}

/**
 * Genera un slug a partir del nombre
 */
function generateSlug(text) {
    if (!text) return '';
    
    return text
        .toLowerCase()
        .normalize("NFD") // Descomponer caracteres acentuados
        .replace(/[\u0300-\u036f]/g, "") // Eliminar diacr√≠ticos
        .replace(/[^a-z0-9]+/g, '-') // Reemplazar caracteres no alfanum√©ricos
        .replace(/^-+|-+$/g, '') // Eliminar guiones al inicio y final
        .substring(0, 255); // Limitar longitud
}

async function migratePeople() {
    let connection;
    
    try {
        console.log('üé¨ MIGRACI√ìN DE PERSONAS WordPress ‚Üí Supabase');
        console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');
        
        // Conectar a MySQL
        console.log('üìå Conectando a MySQL local...');
        connection = await mysql.createConnection(MYSQL_CONFIG);
        console.log('‚úÖ Conectado a MySQL\n');
        
        // Verificar conexi√≥n Supabase
        console.log('üìå Verificando Supabase...');
        const { count } = await supabase
            .from('people')
            .select('*', { count: 'exact', head: true });
        console.log(`‚úÖ Conectado a Supabase (${count || 0} personas actuales)\n`);
        
        // Limpiar tabla si se especifica
        if (process.argv.includes('--clean')) {
            console.log('üßπ Limpiando tabla people...');
            const { error: deleteError } = await supabase
                .from('people')
                .delete()
                .neq('id', 0); // Evitar borrar todo por seguridad
            
            if (deleteError && deleteError.code !== 'PGRST116') {
                console.error('‚ùå Error al limpiar tabla:', deleteError);
                throw deleteError;
            }
            console.log('‚úÖ Tabla people limpiada\n');
        }
        
        // Obtener personas de MySQL
        console.log('üìä Obteniendo personas de WordPress...');
        const [people] = await connection.execute(`
            SELECT 
                ID,
                post_title as full_name,
                post_name as slug,
                post_content as biography,
                post_date,
                post_modified,
                post_status,
                guid
            FROM wp_posts 
            WHERE post_type = 'persona' 
            AND post_status = 'publish'
            ORDER BY post_title
        `);
        
        console.log(`‚úÖ ${people.length} personas encontradas\n`);
        logger.logs.stats.total = people.length;
        
        // Mostrar algunas muestras de c√≥mo se separar√°n los nombres
        console.log('üìù Muestras de separaci√≥n de nombres:');
        console.log('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');
        const samples = people.slice(0, 5);
        samples.forEach(person => {
            const { firstName, lastName } = splitName(person.full_name);
            console.log(`   "${person.full_name}"`);
            console.log(`   ‚Üí Nombre: ${firstName || '(vac√≠o)'}`);
            console.log(`   ‚Üí Apellido: ${lastName || '(vac√≠o)'}`);
            console.log('');
        });
        
        // Preguntar si continuar (si no est√° en modo --auto)
        if (!process.argv.includes('--auto')) {
            console.log('Presiona Ctrl+C para cancelar o espera 5 segundos para continuar...');
            await new Promise(resolve => setTimeout(resolve, 5000));
        }
        
        // Migrar cada persona
        console.log('\nüöÄ Iniciando migraci√≥n...\n');
        let migrated = 0;
        let updated = 0;
        let errors = 0;
        
        for (const person of people) {
            try {
                // Separar nombre y apellido
                const { firstName, lastName } = splitName(person.full_name);
                
                // Usar el slug de WordPress o generar uno nuevo
                const slug = person.slug || generateSlug(person.full_name);
                
                // Contar estad√≠sticas
                if (person.biography && person.biography.trim()) {
                    logger.logs.stats.withBio++;
                } else {
                    logger.logs.stats.withoutBio++;
                }
                
                // Verificar si el ID ya existe
                const { data: existingById } = await supabase
                    .from('people')
                    .select('id, slug')
                    .eq('id', parseInt(person.ID))
                    .single();
                
                // Datos para Supabase (siguiendo el schema de Prisma)
                const personData = {
                    id: parseInt(person.ID),
                    slug: slug,
                    first_name: firstName,
                    last_name: lastName,
                    real_name: null, // No tenemos este dato en WordPress
                    birth_date: null, // No tenemos este dato
                    death_date: null, // No tenemos este dato
                    birth_location_id: null,
                    death_location_id: null,
                    biography: person.biography && person.biography.trim() ? person.biography.trim() : null,
                    photo_url: null, // Se puede migrar despu√©s desde featured image
                    gender: null, // No tenemos este dato
                    hide_age: false,
                    has_links: false,
                    is_active: person.post_status === 'publish',
                    created_at: person.post_date,
                    updated_at: person.post_modified
                };
                
                console.log(`üë§ Procesando: "${person.full_name}"`);
                console.log(`   - WP ID: ${person.ID}`);
                console.log(`   - Slug: ${slug}`);
                console.log(`   - Nombre: ${firstName || '(vac√≠o)'} | Apellido: ${lastName || '(vac√≠o)'}`);
                if (person.biography && person.biography.trim()) {
                    console.log(`   - Con biograf√≠a (${person.biography.length} caracteres)`);
                }
                
                if (existingById) {
                    // Actualizar registro existente
                    console.log(`   ‚ö†Ô∏è ID ${person.ID} ya existe, actualizando...`);
                    
                    const { data, error } = await supabase
                        .from('people')
                        .update(personData)
                        .eq('id', parseInt(person.ID))
                        .select()
                        .single();
                    
                    if (error) throw error;
                    
                    console.log(`   ‚úÖ Actualizada\n`);
                    logger.logPerson(person.ID, person.full_name, 'updated');
                    updated++;
                } else {
                    // Insertar nuevo registro
                    const { data, error } = await supabase
                        .from('people')
                        .insert([personData])
                        .select()
                        .single();
                    
                    if (error) throw error;
                    
                    console.log(`   ‚úÖ Migrada con ID: ${data.id}\n`);
                    logger.logPerson(person.ID, person.full_name, 'success');
                    migrated++;
                }
                
            } catch (error) {
                console.error(`   ‚ùå Error: ${error.message}\n`);
                logger.logPerson(person.ID, person.full_name, 'error', error);
                errors++;
            }
        }
        
        // Actualizar la secuencia de PostgreSQL
        console.log('\nüîß Actualizando secuencia de IDs...');
        const { data: maxIdResult } = await supabase
            .from('people')
            .select('id')
            .order('id', { ascending: false })
            .limit(1)
            .single();
        
        if (maxIdResult) {
            console.log(`   ID m√°ximo encontrado: ${maxIdResult.id}`);
            console.log(`   ‚ö†Ô∏è IMPORTANTE: Ejecuta este SQL en Supabase:`);
            console.log(`   SELECT setval('people_id_seq', ${maxIdResult.id + 1});`);
        }
        
        // Resumen
        console.log('\n\nüìä RESUMEN DE MIGRACI√ìN DE PERSONAS');
        console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
        console.log(`Total de personas procesadas: ${people.length}`);
        console.log(`‚úÖ Nuevas migradas: ${migrated}`);
        console.log(`üîÑ Actualizadas: ${updated}`);
        console.log(`‚ùå Errores: ${errors}`);
        console.log('\nüìù Estad√≠sticas adicionales:');
        console.log(`   - Con biograf√≠a: ${logger.logs.stats.withBio}`);
        console.log(`   - Sin biograf√≠a: ${logger.logs.stats.withoutBio}`);
        
        // Guardar log
        logger.logs.stats.migrated = migrated;
        logger.logs.stats.updated = updated;
        logger.logs.stats.errors = errors;
        logger.save();
        
        console.log('\n‚úÖ Log guardado en: migration-people-log.json');
        
    } catch (error) {
        console.error('‚ùå Error fatal:', error);
    } finally {
        if (connection) {
            await connection.end();
            console.log('\nüëã Conexi√≥n MySQL cerrada');
        }
    }
}

// Funci√≥n para verificar personas antes de migrar
async function checkPeople() {
    let connection;
    
    try {
        connection = await mysql.createConnection(MYSQL_CONFIG);
        console.log('üë• Verificando personas en WordPress...\n');
        
        // Estad√≠sticas b√°sicas
        const [stats] = await connection.execute(`
            SELECT 
                COUNT(*) as total,
                COUNT(CASE WHEN post_status = 'publish' THEN 1 END) as published,
                COUNT(CASE WHEN post_status = 'draft' THEN 1 END) as draft,
                COUNT(CASE WHEN post_content IS NOT NULL AND post_content != '' THEN 1 END) as with_bio
            FROM wp_posts
            WHERE post_type = 'persona'
        `);
        
        console.log('üìä Estad√≠sticas:');
        console.log(`   - Total personas: ${stats[0].total}`);
        console.log(`   - Publicadas: ${stats[0].published}`);
        console.log(`   - Borradores: ${stats[0].draft}`);
        console.log(`   - Con biograf√≠a: ${stats[0].with_bio}`);
        
        // Ver algunas muestras
        const [samples] = await connection.execute(`
            SELECT 
                ID,
                post_title,
                post_name as slug,
                LENGTH(post_content) as bio_length,
                post_status
            FROM wp_posts
            WHERE post_type = 'persona'
            AND post_status = 'publish'
            ORDER BY post_title
            LIMIT 20
        `);
        
        console.log('\nüìù Primeras 20 personas:');
        console.log('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');
        samples.forEach((person, index) => {
            const { firstName, lastName } = splitName(person.post_title);
            console.log(`${(index + 1).toString().padStart(2)}. ${person.post_title}`);
            console.log(`    ‚Üí Nombre: ${firstName || '(vac√≠o)'} | Apellido: ${lastName || '(vac√≠o)'}`);
            console.log(`    ‚Üí Slug: ${person.slug}`);
            if (person.bio_length > 0) {
                console.log(`    ‚Üí Biograf√≠a: ${person.bio_length} caracteres`);
            }
            console.log('');
        });
        
        // Verificar nombres problem√°ticos
        const [problematic] = await connection.execute(`
            SELECT post_title
            FROM wp_posts
            WHERE post_type = 'persona'
            AND post_status = 'publish'
            AND (
                post_title LIKE '%(%' OR 
                post_title LIKE '%[%' OR
                post_title LIKE '%,%' OR
                LENGTH(post_title) < 3
            )
            LIMIT 10
        `);
        
        if (problematic.length > 0) {
            console.log('‚ö†Ô∏è Nombres que podr√≠an necesitar revisi√≥n:');
            problematic.forEach(p => {
                console.log(`   - "${p.post_title}"`);
            });
        }
        
    } finally {
        if (connection) await connection.end();
    }
}

// Ejecutar
const args = process.argv.slice(2);

if (args.includes('--help')) {
    console.log(`
Migraci√≥n de Personas WordPress ‚Üí Supabase
===========================================

Uso: node migrate-wp-people-to-supabase.js [opciones]

Opciones:
  --migrate     Ejecutar migraci√≥n
  --clean       Limpiar tabla people antes de migrar
  --check       Verificar personas antes de migrar
  --auto        No pausar para confirmaci√≥n
  --help        Mostrar esta ayuda

Campos migrados:
  - id (preservado de WordPress)
  - first_name (extra√≠do del post_title)
  - last_name (extra√≠do del post_title)
  - slug (preservado de WordPress)
  - biography (post_content)
  - is_active (basado en post_status)
  - created_at (post_date)
  - updated_at (post_modified)

Configuraci√≥n:
  MySQL Host: ${MYSQL_CONFIG.host}
  MySQL Database: ${MYSQL_CONFIG.database}
  Supabase URL: ${SUPABASE_URL}

Ejemplos:
  node migrate-wp-people-to-supabase.js --check
  node migrate-wp-people-to-supabase.js --migrate --clean --auto
`);
} else if (args.includes('--migrate')) {
    migratePeople().catch(console.error);
} else if (args.includes('--check')) {
    checkPeople().catch(console.error);
} else {
    console.log('Usa --help para ver las opciones disponibles');
    console.log('Para verificar: node migrate-wp-people-to-supabase.js --check');
    console.log('Para migrar: node migrate-wp-people-to-supabase.js --migrate --clean');
}